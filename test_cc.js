/*
    This code gets prepended to the start of the emscripten
    generated file 'test_cc.js' by the --prefix-js flag
    during linking.  See the makefile.
 */



// MESSAGE UTILITIES -----------------------------------------------------------------------------
//    The variables and utilities in this block are used for worker thread messaging.


var msg_queue = [];  // Our message queue

// The function that gets called when this thread receives a message
// from its parent.
onmessage = function (msg) {
    msg_queue.push(msg.data);
}

// The function that gets called from C++ to return
// our message queue for processing.  Note that we
// are writing a string to memory; we're relying on
// the C++ side to clean up after ourselves.
// (The JSON array message queue is being written to
// the string).
function doGetMessages() {
    var msgs = JSON.stringify(msg_queue);
    var buffer = _malloc(msgs.length + 1);
    writeStringToMemory(msgs, buffer);
    msg_queue = [];
    return buffer;
}

// This function is called from the C++ side when we
// want to send a message (in the form of a string
// that is deserialized into a json object) to the
// worker thread.
function doPostMessage(msg_str) {
    var json_msg = JSON.parse(msg_str);
    self.postMessage(json_msg);
}


// FILE HANDLING -----------------------------------------------------------------------------
//      The variables and functions in this block are used to handle the asynchronous
//      nature of file synchronizing in emscripten's IDBFS.


// FS_STATUS contains the state of the filesystem
//    0  The file system is ready for reading and writing
//    1  The file system is synchronizing
//   -1  The file system encountered an error during syncing and should not be used
var FS_STATUS = 0;


// This function is called from the C++ side to perform the file syncing.
// The populate variable controls whether data from the IndexedDB database
// populates our file system.  (True =
//
// The FS.syncfs function is internal to emscripten.  The second parameter
// is a callback function.   Because this operation is asynchronous, we need
// to let the C++ side of the code know when the filesystem is ready.
//
// An FS_STAT < 1 indicates that we are done with trying to sync; FS_STAT > 1 indicates
// we're still busy.
function doSyncFS(populate) {
    FS_STATUS = 1;  //Mark that we are syncing
    FS.syncfs(populate, function (err) {
        //This block gets triggered when synchronizing is complete
        if (err) {
            FS_STATUS = -1;  // On error, FS is not available
        }
        else {
            FS_STATUS = 0;   // Syncing successful, the FS is available
        }
    })
}


// Utility function to check if there was a syncing error
function fsError(){
    return FS_STATUS < 0;
}

// Utility function to check if the FS is busy syncing
function fsBusy(){
    return FS_STATUS > 0;
}

// Utility function to check if the filesystem is ready for reading and writing
function fsReady(){
    return FS_STATUS === 0;
}

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function() { return doGetMessages(); },
 function($0) { { doPostMessage(Pointer_stringify($0)); } },
 function() { FS.mkdir('/test'); FS.mount(IDBFS, {}, '/test'); },
 function() { return fsBusy(); },
 function($0) { {doSyncFS($0);} },
 function() { return fsReady(); }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}

function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22560;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_test_cc() } });
  

/* memory initializer */ allocate([28,13,0,0,252,53,0,0,160,1,0,0,0,0,0,0,28,13,0,0,66,54,0,0,128,1,0,0,0,0,0,0,28,13,0,0,132,54,0,0,160,1,0,0,0,0,0,0,28,13,0,0,180,54,0,0,128,1,0,0,0,0,0,0,28,13,0,0,227,54,0,0,136,1,0,0,0,0,0,0,28,13,0,0,19,55,0,0,184,1,0,0,0,0,0,0,28,13,0,0,171,56,0,0,136,0,0,0,0,0,0,0,28,13,0,0,156,58,0,0,136,0,0,0,0,0,0,0,244,12,0,0,169,58,0,0,28,13,0,0,199,58,0,0,136,0,0,0,0,0,0,0,28,13,0,0,182,58,0,0,144,0,0,0,0,0,0,0,28,13,0,0,215,58,0,0,144,0,0,0,0,0,0,0,28,13,0,0,236,58,0,0,144,0,0,0,0,0,0,0,28,13,0,0,253,58,0,0,136,0,0,0,0,0,0,0,244,12,0,0,15,59,0,0,28,13,0,0,28,59,0,0,136,0,0,0,0,0,0,0,28,13,0,0,40,59,0,0,224,0,0,0,0,0,0,0,28,13,0,0,73,59,0,0,248,0,0,0,0,0,0,0,28,13,0,0,143,59,0,0,248,0,0,0,0,0,0,0,28,13,0,0,107,59,0,0,24,1,0,0,0,0,0,0,28,13,0,0,177,59,0,0,8,1,0,0,0,0,0,0,28,13,0,0,214,59,0,0,8,1,0,0,0,0,0,0,28,13,0,0,139,77,0,0,232,8,0,0,0,0,0,0,244,12,0,0,165,77,0,0,28,13,0,0,183,77,0,0,104,1,0,0,0,0,0,0,244,12,0,0,225,77,0,0,68,13,0,0,18,78,0,0,0,0,0,0,1,0,0,0,112,1,0,0,3,244,255,255,68,13,0,0,65,78,0,0,0,0,0,0,1,0,0,0,112,1,0,0,3,244,255,255,68,13,0,0,112,78,0,0,3,0,0,0,2,0,0,0,136,1,0,0,2,0,0,0,160,1,0,0,2,8,0,0,28,13,0,0,160,78,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,13,0,0,28,79,0,0,224,8,0,0,0,0,0,0,68,13,0,0,50,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,16,8,0,0,2,0,0,0,68,13,0,0,68,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,68,13,0,0,102,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,68,13,0,0,137,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,28,13,0,0,172,79,0,0,96,2,0,0,0,0,0,0,28,13,0,0,206,79,0,0,96,2,0,0,0,0,0,0,68,13,0,0,241,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,28,13,0,0,19,80,0,0,240,1,0,0,0,0,0,0,28,13,0,0,41,80,0,0,240,1,0,0,0,0,0,0,28,13,0,0,61,80,0,0,240,1,0,0,0,0,0,0,68,13,0,0,81,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,16,8,0,0,2,0,0,0,28,13,0,0,99,80,0,0,240,1,0,0,0,0,0,0,28,13,0,0,120,80,0,0,240,1,0,0,0,0,0,0,68,13,0,0,141,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,32,8,0,0,0,0,0,0,68,13,0,0,209,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,56,8,0,0,0,0,0,0,68,13,0,0,21,81,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,80,8,0,0,0,0,0,0,68,13,0,0,89,81,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,104,8,0,0,0,0,0,0,68,13,0,0,157,81,0,0,0,0,0,0,3,0,0,0,240,1,0,0,2,0,0,0,128,8,0,0,2,0,0,0,136,8,0,0,0,8,0,0,68,13,0,0,226,81,0,0,0,0,0,0,3,0,0,0,240,1,0,0,2,0,0,0,128,8,0,0,2,0,0,0,144,8,0,0,0,8,0,0,68,13,0,0,39,82,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,152,8,0,0,0,8,0,0,68,13,0,0,108,82,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,152,8,0,0,0,8,0,0,68,13,0,0,177,82,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,68,13,0,0,205,82,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,68,13,0,0,233,82,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,68,13,0,0,5,83,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,68,13,0,0,33,83,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,168,8,0,0,0,0,0,0,68,13,0,0,103,83,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,176,8,0,0,0,0,0,0,68,13,0,0,173,83,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,184,8,0,0,0,0,0,0,68,13,0,0,243,83,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,192,8,0,0,0,0,0,0,68,13,0,0,57,84,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,200,8,0,0,2,0,0,0,68,13,0,0,78,84,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,200,8,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,12,0,0,170,87,0,0,244,12,0,0,147,87,0,0,68,13,0,0,125,87,0,0,0,0,0,0,1,0,0,0,216,8,0,0,0,0,0,0,68,13,0,0,78,87,0,0,0,0,0,0,1,0,0,0,216,8,0,0,0,0,0,0,68,13,0,0,56,87,0,0,0,0,0,0,1,0,0,0,208,8,0,0,0,0,0,0,68,13,0,0,9,87,0,0,0,0,0,0,1,0,0,0,208,8,0,0,0,0,0,0,244,12,0,0,246,86,0,0,244,12,0,0,212,86,0,0,244,12,0,0,178,86,0,0,244,12,0,0,157,86,0,0,244,12,0,0,136,86,0,0,244,12,0,0,111,86,0,0,244,12,0,0,86,86,0,0,244,12,0,0,61,86,0,0,244,12,0,0,36,86,0,0,244,12,0,0,12,86,0,0,244,12,0,0,31,87,0,0,244,12,0,0,100,87,0,0,244,12,0,0,191,87,0,0,28,13,0,0,216,87,0,0,208,0,0,0,0,0,0,0,244,12,0,0,239,87,0,0,28,13,0,0,8,88,0,0,248,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,200,255,255,255,200,255,255,255,8,0,0,0,3,0,0,0,4,0,0,0,212,9,0,0,20,12,0,0,40,12,0,0,232,9,0,0,0,0,0,0,24,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,104,0,0,0,0,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,152,255,255,255,152,255,255,255,40,0,0,0,21,0,0,0,22,0,0,0,76,10,0,0,132,10,0,0,152,10,0,0,96,10,0,0,104,0,0,0,0,0,0,0,160,1,0,0,23,0,0,0,24,0,0,0,152,255,255,255,152,255,255,255,160,1,0,0,25,0,0,0,26,0,0,0,0,0,0,0,56,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,12,0,0,0,13,0,0,0,34,0,0,0,15,0,0,0,35,0,0,0,17,0,0,0,36,0,0,0,108,0,0,0,0,0,0,0,72,0,0,0,37,0,0,0,38,0,0,0,148,255,255,255,148,255,255,255,72,0,0,0,39,0,0,0,40,0,0,0,236,10,0,0,36,11,0,0,56,11,0,0,0,11,0,0,108,0,0,0,0,0,0,0,136,1,0,0,41,0,0,0,42,0,0,0,148,255,255,255,148,255,255,255,136,1,0,0,43,0,0,0,44,0,0,0,64,0,0,0,0,0,0,0,88,0,0,0,45,0,0,0,46,0,0,0,56,0,0,0,248,255,255,255,88,0,0,0,47,0,0,0,48,0,0,0,192,255,255,255,192,255,255,255,88,0,0,0,49,0,0,0,50,0,0,0,76,11,0,0,176,11,0,0,236,11,0,0,0,12,0,0,20,12,0,0,40,12,0,0,216,11,0,0,196,11,0,0,116,11,0,0,96,11,0,0,64,0,0,0,0,0,0,0,184,1,0,0,51,0,0,0,52,0,0,0,56,0,0,0,248,255,255,255,184,1,0,0,53,0,0,0,54,0,0,0,192,255,255,255,192,255,255,255,184,1,0,0,55,0,0,0,56,0,0,0,64,0,0,0,0,0,0,0,136,1,0,0,41,0,0,0,42,0,0,0,192,255,255,255,192,255,255,255,136,1,0,0,43,0,0,0,44,0,0,0,56,0,0,0,0,0,0,0,160,1,0,0,23,0,0,0,24,0,0,0,200,255,255,255,200,255,255,255,160,1,0,0,25,0,0,0,26,0,0,0,0,0,0,0,104,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,0,0,0,0,120,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,136,0,0,0,64,0,0,0,65,0,0,0,59,0,0,0,0,0,0,0,144,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,208,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,160,0,0,0,66,0,0,0,72,0,0,0,68,0,0,0,0,0,0,0,176,0,0,0,66,0,0,0,73,0,0,0,68,0,0,0,0,0,0,0,192,0,0,0,66,0,0,0,74,0,0,0,68,0,0,0,0,0,0,0,232,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,8,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,0,0,0,0,56,1,0,0,78,0,0,0,86,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,0,0,0,0,72,1,0,0,78,0,0,0,90,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,219,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,24,15,0,0,136,15,0,0,240,49,0,0,248,23,0,0,248,17,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,97,0,0,0,117,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,97,0,0,0,109,71,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,0,0,99,0,0,0,100,0,0,0,0,0,0,0,128,1,0,0,101,0,0,0,102,0,0,0,7,0,0,0,8,0,0,0,103,0,0,0,104,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,105,0,0,0,15,0,0,0,106,0,0,0,17,0,0,0,107,0,0,0,0,0,0,0,88,1,0,0,108,0,0,0,109,0,0,0,71,0,0,0,0,0,0,0,104,1,0,0,110,0,0,0,111,0,0,0,0,0,0,0,216,1,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,208,2,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,2,0,0,125,0,0,0,126,0,0,0,121,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,3,0,0,130,0,0,0,131,0,0,0,121,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,3,0,0,143,0,0,0,144,0,0,0,121,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,3,0,0,156,0,0,0,157,0,0,0,121,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,3,0,0,166,0,0,0,167,0,0,0,121,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,3,0,0,176,0,0,0,177,0,0,0,121,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,248,255,255,255,176,3,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,3,0,0,192,0,0,0,193,0,0,0,121,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,248,255,255,255,216,3,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,208,0,0,0,209,0,0,0,121,0,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,4,0,0,211,0,0,0,212,0,0,0,121,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,0,0,214,0,0,0,215,0,0,0,121,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,4,0,0,225,0,0,0,226,0,0,0,121,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,4,0,0,236,0,0,0,237,0,0,0,121,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,4,0,0,247,0,0,0,248,0,0,0,121,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,2,1,0,0,3,1,0,0,121,0,0,0,4,1,0,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,4,0,0,6,1,0,0,7,1,0,0,121,0,0,0,8,1,0,0,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,10,1,0,0,11,1,0,0,121,0,0,0,12,1,0,0,13,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,5,0,0,14,1,0,0,15,1,0,0,121,0,0,0,16,1,0,0,17,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,5,0,0,18,1,0,0,19,1,0,0,121,0,0,0,20,1,0,0,21,1,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,5,0,0,23,1,0,0,24,1,0,0,121,0,0,0,25,1,0,0,26,1,0,0,27,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,2,0,0,28,1,0,0,29,1,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,2,0,0,30,1,0,0,31,1,0,0,121,0,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,40,1,0,0,41,1,0,0,121,0,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,3,0,0,49,1,0,0,50,1,0,0,121,0,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,0,0,0,0,32,3,0,0,56,1,0,0,57,1,0,0,121,0,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,0,0,0,0,240,1,0,0,63,1,0,0,64,1,0,0,121,0,0,0,0,0,0,0,0,2,0,0,63,1,0,0,65,1,0,0,121,0,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,0,0,0,0,32,2,0,0,63,1,0,0,78,1,0,0,121,0,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,64,2,0,0,63,1,0,0,86,1,0,0,121,0,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,93,1,0,0,0,0,0,0,96,2,0,0,63,1,0,0,94,1,0,0,121,0,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,0,0,0,0,128,2,0,0,63,1,0,0,102,1,0,0,121,0,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,0,0,0,0,144,2,0,0,63,1,0,0,103,1,0,0,121,0,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,8,0,0,104,1,0,0,105,1,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,116,101,115,116,0,47,102,111,120,46,116,120,116,0,47,105,112,115,117,109,46,116,120,116,0,76,111,114,101,109,32,105,112,115,117,109,32,100,111,108,111,114,32,115,105,116,32,97,109,101,116,44,32,99,111,110,115,101,99,116,101,116,117,114,32,97,100,105,112,105,115,99,105,110,103,32,101,108,105,116,46,0,114,101,116,117,114,110,32,100,111,71,101,116,77,101,115,115,97,103,101,115,40,41,59,0,116,121,112,101,0,115,116,97,116,117,115,0,109,115,103,0,100,111,109,95,102,115,95,114,101,97,100,121,0,123,32,100,111,80,111,115,116,77,101,115,115,97,103,101,40,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,41,59,32,125,0,116,111,68,105,115,112,108,97,121,0,70,83,46,109,107,100,105,114,40,39,47,116,101,115,116,39,41,59,32,70,83,46,109,111,117,110,116,40,73,68,66,70,83,44,32,123,125,44,32,39,47,116,101,115,116,39,41,59,0,114,101,116,117,114,110,32,102,115,66,117,115,121,40,41,59,0,123,100,111,83,121,110,99,70,83,40,36,48,41,59,125,0,114,101,116,117,114,110,32,102,115,82,101,97,100,121,40,41,59,0,70,105,108,101,32,115,121,115,116,101,109,32,115,121,110,99,104,114,111,110,105,122,101,100,32,40,112,111,112,117,108,97,116,101,61,0,41,0,70,105,108,101,32,115,121,115,116,101,109,32,78,79,84,32,115,121,110,99,104,114,111,110,105,122,101,100,32,40,112,111,112,117,108,97,116,101,61,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,102,105,108,101,32,0,32,102,111,114,32,119,114,105,116,105,110,103,46,0,87,111,114,107,101,114,32,116,104,114,101,97,100,32,119,114,111,116,101,58,32,0,32,116,111,32,102,105,108,101,32,0,32,102,111,114,32,114,101,97,100,105,110,103,46,0,87,111,114,107,101,114,32,116,104,114,101,97,100,32,114,101,97,100,32,102,114,111,109,32,0,32,116,104,101,32,99,111,110,116,101,110,116,115,58,32,0,87,111,114,107,101,114,58,32,73,110,115,105,100,101,32,109,97,105,110,40,41,0,119,107,114,95,102,115,95,114,101,97,100,121,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,111,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,123,125,0,123,0,10,0,44,10,0,44,0,34,0,34,58,0,32,0,125,0,91,93,0,91,0,93,0,60,100,105,115,99,97,114,100,101,100,62,0,110,117,108,108,0,117,37,48,52,120,0,0,0,0,0,0,0,0,0,0,32,32,0,0,32,0,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,96,64,0,64,64,64,64,64,64,64,64,64,64,64,64,64,192,192,192,192,192,192,192,192,192,192,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,112,97,114,115,101,32,101,114,114,111,114,32,45,32,0,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,78,83,116,51,95,95,49,49,55,98,97,100,95,102,117,110,99,116,105,111,110,95,99,97,108,108,69,0,112,97,114,115,101,32,101,114,114,111,114,32,45,32,117,110,101,120,112,101,99,116,101,100,32,39,0,39,32,40,0,60,117,110,105,110,105,116,105,97,108,105,122,101,100,62,0,116,114,117,101,32,108,105,116,101,114,97,108,0,102,97,108,115,101,32,108,105,116,101,114,97,108,0,110,117,108,108,32,108,105,116,101,114,97,108,0,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,110,117,109,98,101,114,32,108,105,116,101,114,97,108,0,58,0,60,101,110,100,32,111,102,32,105,110,112,117,116,62,0,60,112,97,114,115,101,32,101,114,114,111,114,62,0,9,0,8,0,12,0,13,0,92,0,47,0,109,105,115,115,105,110,103,32,108,111,119,32,115,117,114,114,111,103,97,116,101,0,109,105,115,115,105,110,103,32,111,114,32,119,114,111,110,103,32,108,111,119,32,115,117,114,114,111,103,97,116,101,0,99,111,100,101,32,112,111,105,110,116,115,32,97,98,111,118,101,32,48,120,49,48,70,70,70,70,32,97,114,101,32,105,110,118,97,108,105,100,0,99,97,110,110,111,116,32,117,115,101,32,111,112,101,114,97,116,111,114,91,93,32,119,105,116,104,32,0,111,98,106,101,99,116,0,97,114,114,97,121,0,115,116,114,105,110,103,0,98,111,111,108,101,97,110,0,100,105,115,99,97,114,100,101,100,0,110,117,109,98,101,114,0,99,97,110,110,111,116,32,117,115,101,32,112,117,115,104,95,98,97,99,107,40,41,32,119,105,116,104,32,0,41,59,32,101,120,112,101,99,116,101,100,32,0,99,97,110,110,111,116,32,99,111,109,112,97,114,101,32,105,116,101,114,97,116,111,114,115,32,111,102,32,100,105,102,102,101,114,101,110,116,32,99,111,110,116,97,105,110,101,114,115,0,99,97,110,110,111,116,32,103,101,116,32,118,97,108,117,101,0,119,0,97,0,114,0,114,43,0,119,43,0,97,43,0,119,98,0,97,98,0,114,98,0,114,43,98,0,119,43,98,0,97,43,98,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,50,100,111,109,97,105,110,95,101,114,114,111,114,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,54,105,110,118,97,108,105,100,95,97,114,103,117,109,101,110,116,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,114,117,112,112,109,97,116,116,47,100,101,118,101,108,47,101,109,115,99,114,105,112,116,101,110,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,53,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,114,117,112,112,109,97,116,116,47,100,101,118,101,108,47,101,109,115,99,114,105,112,116,101,110,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,53,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6132);
/* memory initializer */ allocate([121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,80,79,83,73,88,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+16372);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+19309);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(1608);
assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,2,50,0,0,0,0,0,1,45,0,0,136,47,0,0,0,46,47,0,136,47,0,0,25,47,47,96,137,47,0,0,130,47,0,0,136,48,0,0,49,47,47,48,52,0,0,0,135,47,0,0,25,43,46,32,25,40,46,16,0,41,46,0,25,42,46,48,1,14,0,0,0,25,0,0,0,36,1,0,1,47,64,9,1,48,217,53,135,4,1,0,47,48,0,0,0,2,4,0,1,3,141,1,0,5,2,0,0,6,3,0,1,47,255,3,19,47,6,47,135,48,2,0,47,5,0,0,135,48,3,0,135,48,4,0,134,7,0,0,240,5,0,0,38,48,7,1,0,8,48,0,0,44,8,0,0,9,44,0,38,48,9,1,0,10,48,0,120,10,10,0,0,33,44,0,38,48,33,1,0,34,48,0,40,48,34,1,0,35,48,0,38,48,35,1,0,37,48,0,137,46,0,0,139,37,0,0,135,48,5,0,43,0,0,0,1,48,0,0,132,1,0,48,1,48,120,1,1,47,92,52,135,11,6,0,48,43,47,0,130,47,1,0,0,12,47,0,1,47,0,0,132,1,0,47,38,47,12,1,0,13,47,0,120,13,100,0,1,47,0,0,132,1,0,47,1,48,121,1,1,49,97,52,135,47,7,0,48,40,49,0,130,47,1,0,0,15,47,0,1,47,0,0,132,1,0,47,38,47,15,1,0,16,47,0,120,16,87,0,135,47,8,0,11,40,0,0,135,47,9,0,40,0,0,0,1,47,0,0,132,1,0,47,1,47,122,1,1,49,104,52,135,17,6,0,47,43,49,0,130,49,1,0,0,18,49,0,1,49,0,0,132,1,0,49,38,49,18,1,0,19,49,0,120,19,70,0,1,49,0,0,132,1,0,49,1,47,121,1,1,48,239,53,135,49,7,0,47,41,48,0,130,49,1,0,0,20,49,0,1,49,0,0,132,1,0,49,38,49,20,1,0,21,49,0,120,21,57,0,135,49,8,0,17,41,0,0,135,49,9,0,41,0,0,0,1,49,0,0,132,1,0,49,1,48,135,1,1,47,255,255,135,49,10,0,48,42,43,47,130,49,1,0,0,22,49,0,1,49,0,0,132,1,0,49,38,49,22,1,0,23,49,0,120,23,40,0,1,49,0,0,132,1,0,49,1,47,136,1,135,49,11,0,47,42,0,0,130,49,1,0,0,24,49,0,1,49,0,0,132,1,0,49,38,49,24,1,0,26,49,0,121,26,15,0,135,29,12,0,128,49,0,0,0,30,49,0,0,38,29,0,0,39,30,0,135,49,13,0,42,0,0,0,135,49,9,0,43,0,0,0,0,31,38,0,0,32,39,0,135,49,14,0,31,0,0,0,119,0,14,0,135,49,13,0,42,0,0,0,135,49,9,0,43,0,0,0,0,33,44,0,38,49,33,1,0,34,49,0,40,49,34,1,0,35,49,0,38,49,35,1,0,37,49,0,137,46,0,0,139,37,0,0,135,27,12,0,128,49,0,0,0,28,49,0,0,38,27,0,0,39,28,0,135,49,9,0,43,0,0,0,0,31,38,0,0,32,39,0,135,49,14,0,31,0,0,0,1,49,0,0,139,49,0,0,140,1,54,0,0,0,0,0,1,50,0,0,136,52,0,0,0,51,52,0,136,52,0,0,25,52,52,48,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,0,3,0,0,135,52,0,0,38,52,0,1,0,48,52,0,0,47,48,0,0,3,47,0,38,52,3,1,0,4,52,0,38,52,4,1,0,5,52,0,1,52,4,0,135,6,15,0,52,5,0,0,135,7,16,0,120,7,2,0,119,0,5,0,1,53,100,0,135,52,17,0,53,0,0,0,119,0,250,255,1,52,5,0,135,8,18,0,52,0,0,0,33,9,8,0,38,52,9,1,0,10,52,0,0,49,10,0,0,11,49,0,38,52,11,1,0,12,52,0,121,12,39,0,1,52,64,9,1,53,17,53,135,14,1,0,52,53,0,0,0,45,14,0,1,46,140,1,0,15,45,0,0,16,46,0,82,17,15,0,26,18,17,12,82,19,18,0,3,20,15,19,1,52,255,3,19,52,16,52,135,53,2,0,52,20,0,0,0,21,47,0,38,53,21,1,0,22,53,0,135,23,19,0,15,22,0,0,1,53,53,53,135,25,1,0,23,53,0,0,0,35,25,0,1,44,141,1,0,26,35,0,0,27,44,0,1,52,255,3,19,52,27,52,135,53,2,0,52,26,0,0,0,42,49,0,38,53,42,1,0,43,53,0,137,51,0,0,139,43,0,0,119,0,38,0,1,53,64,9,1,52,55,53,135,28,1,0,53,52,0,0,0,13,28,0,1,24,140,1,0,29,13,0,0,30,24,0,82,31,29,0,26,32,31,12,82,33,32,0,3,34,29,33,1,53,255,3,19,53,30,53,135,52,2,0,53,34,0,0,0,36,47,0,38,52,36,1,0,37,52,0,135,38,19,0,29,37,0,0,1,52,53,53,135,39,1,0,38,52,0,0,0,1,39,0,1,2,141,1,0,40,1,0,0,41,2,0,1,53,255,3,19,53,41,53,135,52,2,0,53,40,0,0,0,42,49,0,38,52,42,1,0,43,52,0,137,51,0,0,139,43,0,0,1,52,0,0,139,52,0,0,140,0,23,0,0,0,0,0,2,20,0,0,40,9,0,0,1,18,0,0,136,21,0,0,0,19,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,228,4,0,0,135,21,0,0,0,8,19,0,1,21,240,51,78,9,21,0,38,21,9,1,0,10,21,0,121,10,52,0,1,21,1,0,134,11,0,0,204,2,0,0,21,0,0,0,120,11,4,0,1,0,0,0,83,8,0,0,119,0,45,0,135,21,3,0,1,21,28,9,135,12,20,0,21,0,0,0,120,12,4,0,1,3,0,0,83,8,3,0,119,0,37,0,135,21,3,0,1,21,52,9,135,13,21,0,20,21,0,0,120,13,4,0,1,4,0,0,83,8,4,0,119,0,29,0,135,21,3,0,135,14,20,0,20,0,0,0,120,14,4,0,1,5,0,0,83,8,5,0,119,0,22,0,135,21,3,0,1,21,0,0,134,15,0,0,204,2,0,0,21,0,0,0,120,15,4,0,1,6,0,0,83,8,6,0,119,0,13,0,135,21,3,0,1,21,0,0,134,16,0,0,204,2,0,0,21,0,0,0,121,16,3,0,1,18,14,0,119,0,5,0,1,1,0,0,83,8,1,0,119,0,2,0,1,18,14,0,32,21,18,14,121,21,3,0,1,2,1,0,83,8,2,0,78,7,8,0,38,21,7,1,0,17,21,0,137,19,0,0,139,17,0,0,140,0,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,1,6,240,51,78,0,6,0,38,6,0,1,0,1,6,0,40,6,1,1,0,2,6,0,120,2,2,0,119,0,6,0,135,6,22,0,1,7,100,0,135,6,17,0,7,0,0,0,119,0,244,255,134,3,0,0,168,4,0,0,139,3,0,0,0,0,0,0], eb + 0);

  var relocations = [];
  relocations = relocations.concat([44,760,1244,140,1284,1412,1448,1596]);

  for (var i = 0; i < relocations.length; i++) {
    assert(relocations[i] % 4 === 0);
    assert(relocations[i] >= 0 && relocations[i] < eb + 1608); // in range
    assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _SItoD=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_resume=true;

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
        abortDecorators.push(function(output, what) {
          if (EmterpreterAsync.state !== 0) {
            return output + '\nThis error happened during an emterpreter-async save or load of the stack. Was there non-emterpreted code on the stack during save (which is unallowed)? You may want to adjust EMTERPRETIFY_BLACKLIST, EMTERPRETIFY_WHITELIST.\nThis is what the stack looked like when we tried to save it: ' + [EmterpreterAsync.state, EmterpreterAsync.saveStack];
          }
          return output;
        });
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        asm.setAsyncState(s);
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, asm.emtStackSave()>>2));
          var stacktop = asm.stackSave();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            assert(stacktop === asm.stackSave()); // nothing should have modified the stack meanwhile
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            asm.emterpret(stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          EmterpreterAsync.saveStack = new Error().stack; // we can't call  stackTrace()  as it calls compiled code
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_sleep(ms) {
      EmterpreterAsync.handle(function(resume) {
        setTimeout(function() {
          if (ABORT) return; // do this manually; we can't call into Browser.safeSetTimeout, because that is paused/resumed!
          resume();
        }, ms);
      });
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _fabs=Math_abs;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _emscripten_asm_const_int=true;


  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _emscripten_asm_const=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_mutex_lock() {}

  var _DtoIHigh=true;

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_release() {}

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_idd(x) { Module["printErr"]("Invalid function pointer called with signature 'idd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_idd(index,a1,a2) {
  try {
    return Module["dynCall_idd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_id": nullFunc_id, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_idd": nullFunc_idd, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_id": invoke_id, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiiii": invoke_iiiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_idd": invoke_idd, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "___lock": ___lock, "_pthread_key_create": _pthread_key_create, "_pthread_cleanup_push": _pthread_cleanup_push, "_abort": _abort, "___cxa_guard_acquire": ___cxa_guard_acquire, "___setErrNo": ___setErrNo, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "__isLeapYear": __isLeapYear, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_strftime_l": _strftime_l, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "___syscall221": ___syscall221, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "___cxa_guard_abort": ___cxa_guard_abort, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_setspecific": _pthread_setspecific, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_sleep": _emscripten_sleep, "___cxa_atexit": ___cxa_atexit, "___cxa_throw": ___cxa_throw, "___cxa_rethrow": ___cxa_rethrow, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "___syscall146": ___syscall146, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "_emscripten_asm_const_1": _emscripten_asm_const_1, "_emscripten_asm_const_0": _emscripten_asm_const_0, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_id=env.nullFunc_id;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_idd=env.nullFunc_idd;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_id=env.invoke_id;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_idd=env.invoke_idd;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___lock=env.___lock;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _abort=env._abort;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___setErrNo=env.___setErrNo;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __isLeapYear=env.__isLeapYear;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _strftime_l=env._strftime_l;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var ___syscall221=env.___syscall221;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _pthread_setspecific=env._pthread_setspecific;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_sleep=env._emscripten_sleep;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var ___syscall146=env.___syscall146;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var tempFloat = 0.0;
  var asyncState = 0;


var EMTSTACKTOP = env.EMTSTACKTOP|0;
var EMT_STACK_MAX = env.EMT_STACK_MAX|0;
var eb = env.eb|0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $bytes >>> 0 < 245;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[7160 >> 2] | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 7200 + ($13 << 2) | 0;
    $$sum10 = $13 + 2 | 0;
    $15 = 7200 + ($$sum10 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[7160 >> 2] = $22;
     } else {
      $23 = HEAP32[7176 >> 2] | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $25 = $18 + 12 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       HEAP32[$25 >> 2] = $14;
       HEAP32[$15 >> 2] = $18;
       break;
      } else {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    HEAP32[$30 >> 2] = $29;
    $$sum1112 = $28 | 4;
    $31 = $16 + $$sum1112 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $32 | 1;
    HEAP32[$31 >> 2] = $33;
    $mem$0 = $17;
    return $mem$0 | 0;
   }
   $34 = HEAP32[7168 >> 2] | 0;
   $35 = $4 >>> 0 > $34 >>> 0;
   if ($35) {
    $36 = ($7 | 0) == 0;
    if (!$36) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = 0 - $38 | 0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = 0 - $41 | 0;
     $43 = $41 & $42;
     $44 = $43 + -1 | 0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = $62 + $63 | 0;
     $65 = $64 << 1;
     $66 = 7200 + ($65 << 2) | 0;
     $$sum4 = $65 + 2 | 0;
     $67 = 7200 + ($$sum4 << 2) | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = $68 + 8 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     $71 = ($66 | 0) == ($70 | 0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[7160 >> 2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[7176 >> 2] | 0;
       $76 = $70 >>> 0 < $75 >>> 0;
       if ($76) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $77 = $70 + 12 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       $79 = ($78 | 0) == ($68 | 0);
       if ($79) {
        HEAP32[$77 >> 2] = $66;
        HEAP32[$67 >> 2] = $70;
        $$pre = HEAP32[7168 >> 2] | 0;
        $89 = $$pre;
        break;
       } else {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $4 | 0;
     $82 = $4 | 3;
     $83 = $68 + 4 | 0;
     HEAP32[$83 >> 2] = $82;
     $84 = $68 + $4 | 0;
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = $68 + $$sum56 | 0;
     HEAP32[$86 >> 2] = $85;
     $87 = $68 + $80 | 0;
     HEAP32[$87 >> 2] = $81;
     $88 = ($89 | 0) == 0;
     if (!$88) {
      $90 = HEAP32[7180 >> 2] | 0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = 7200 + ($92 << 2) | 0;
      $94 = HEAP32[7160 >> 2] | 0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96 | 0) == 0;
      if ($97) {
       $98 = $94 | $95;
       HEAP32[7160 >> 2] = $98;
       $$pre105 = $92 + 2 | 0;
       $$pre106 = 7200 + ($$pre105 << 2) | 0;
       $$pre$phiZ2D = $$pre106;
       $F4$0 = $93;
      } else {
       $$sum9 = $92 + 2 | 0;
       $99 = 7200 + ($$sum9 << 2) | 0;
       $100 = HEAP32[$99 >> 2] | 0;
       $101 = HEAP32[7176 >> 2] | 0;
       $102 = $100 >>> 0 < $101 >>> 0;
       if ($102) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90;
      $103 = $F4$0 + 12 | 0;
      HEAP32[$103 >> 2] = $90;
      $104 = $90 + 8 | 0;
      HEAP32[$104 >> 2] = $F4$0;
      $105 = $90 + 12 | 0;
      HEAP32[$105 >> 2] = $93;
     }
     HEAP32[7168 >> 2] = $81;
     HEAP32[7180 >> 2] = $84;
     $mem$0 = $69;
     return $mem$0 | 0;
    }
    $106 = HEAP32[7164 >> 2] | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = 0 - $106 | 0;
     $109 = $106 & $108;
     $110 = $109 + -1 | 0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = $128 + $129 | 0;
     $131 = 7464 + ($130 << 2) | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $132 + 4 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = $134 & -8;
     $136 = $135 - $4 | 0;
     $rsize$0$i = $136;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $137 = $t$0$i + 16 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      $139 = ($138 | 0) == (0 | 0);
      if ($139) {
       $140 = $t$0$i + 20 | 0;
       $141 = HEAP32[$140 >> 2] | 0;
       $142 = ($141 | 0) == (0 | 0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = $144 + 4 | 0;
      $145 = HEAP32[$143 >> 2] | 0;
      $146 = $145 & -8;
      $147 = $146 - $4 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $$v$0$i;
     }
     $149 = HEAP32[7176 >> 2] | 0;
     $150 = $v$0$i$lcssa >>> 0 < $149 >>> 0;
     if ($150) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $151 = $v$0$i$lcssa + $4 | 0;
     $152 = $v$0$i$lcssa >>> 0 < $151 >>> 0;
     if (!$152) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $153 = $v$0$i$lcssa + 24 | 0;
     $154 = HEAP32[$153 >> 2] | 0;
     $155 = $v$0$i$lcssa + 12 | 0;
     $156 = HEAP32[$155 >> 2] | 0;
     $157 = ($156 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($157) {
       $167 = $v$0$i$lcssa + 20 | 0;
       $168 = HEAP32[$167 >> 2] | 0;
       $169 = ($168 | 0) == (0 | 0);
       if ($169) {
        $170 = $v$0$i$lcssa + 16 | 0;
        $171 = HEAP32[$170 >> 2] | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = HEAP32[$173 >> 2] | 0;
        $175 = ($174 | 0) == (0 | 0);
        if (!$175) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = HEAP32[$176 >> 2] | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;
         $RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       $179 = $RP$0$i$lcssa >>> 0 < $149 >>> 0;
       if ($179) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        HEAP32[$RP$0$i$lcssa >> 2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = $v$0$i$lcssa + 8 | 0;
       $159 = HEAP32[$158 >> 2] | 0;
       $160 = $159 >>> 0 < $149 >>> 0;
       if ($160) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $161 = $159 + 12 | 0;
       $162 = HEAP32[$161 >> 2] | 0;
       $163 = ($162 | 0) == ($v$0$i$lcssa | 0);
       if (!$163) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $164 = $156 + 8 | 0;
       $165 = HEAP32[$164 >> 2] | 0;
       $166 = ($165 | 0) == ($v$0$i$lcssa | 0);
       if ($166) {
        HEAP32[$161 >> 2] = $156;
        HEAP32[$164 >> 2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
      }
     } while (0);
     $180 = ($154 | 0) == (0 | 0);
     do {
      if (!$180) {
       $181 = $v$0$i$lcssa + 28 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = 7464 + ($182 << 2) | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = ($v$0$i$lcssa | 0) == ($184 | 0);
       if ($185) {
        HEAP32[$183 >> 2] = $R$1$i;
        $cond$i = ($R$1$i | 0) == (0 | 0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[7164 >> 2] | 0;
         $189 = $188 & $187;
         HEAP32[7164 >> 2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[7176 >> 2] | 0;
        $191 = $154 >>> 0 < $190 >>> 0;
        if ($191) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        }
        $192 = $154 + 16 | 0;
        $193 = HEAP32[$192 >> 2] | 0;
        $194 = ($193 | 0) == ($v$0$i$lcssa | 0);
        if ($194) {
         HEAP32[$192 >> 2] = $R$1$i;
        } else {
         $195 = $154 + 20 | 0;
         HEAP32[$195 >> 2] = $R$1$i;
        }
        $196 = ($R$1$i | 0) == (0 | 0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[7176 >> 2] | 0;
       $198 = $R$1$i >>> 0 < $197 >>> 0;
       if ($198) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $199 = $R$1$i + 24 | 0;
       HEAP32[$199 >> 2] = $154;
       $200 = $v$0$i$lcssa + 16 | 0;
       $201 = HEAP32[$200 >> 2] | 0;
       $202 = ($201 | 0) == (0 | 0);
       do {
        if (!$202) {
         $203 = $201 >>> 0 < $197 >>> 0;
         if ($203) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         } else {
          $204 = $R$1$i + 16 | 0;
          HEAP32[$204 >> 2] = $201;
          $205 = $201 + 24 | 0;
          HEAP32[$205 >> 2] = $R$1$i;
          break;
         }
        }
       } while (0);
       $206 = $v$0$i$lcssa + 20 | 0;
       $207 = HEAP32[$206 >> 2] | 0;
       $208 = ($207 | 0) == (0 | 0);
       if (!$208) {
        $209 = HEAP32[7176 >> 2] | 0;
        $210 = $207 >>> 0 < $209 >>> 0;
        if ($210) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        } else {
         $211 = $R$1$i + 20 | 0;
         HEAP32[$211 >> 2] = $207;
         $212 = $207 + 24 | 0;
         HEAP32[$212 >> 2] = $R$1$i;
         break;
        }
       }
      }
     } while (0);
     $213 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($213) {
      $214 = $rsize$0$i$lcssa + $4 | 0;
      $215 = $214 | 3;
      $216 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$216 >> 2] = $215;
      $$sum4$i = $214 + 4 | 0;
      $217 = $v$0$i$lcssa + $$sum4$i | 0;
      $218 = HEAP32[$217 >> 2] | 0;
      $219 = $218 | 1;
      HEAP32[$217 >> 2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$221 >> 2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = $v$0$i$lcssa + $$sum$i35 | 0;
      HEAP32[$223 >> 2] = $222;
      $$sum1$i = $rsize$0$i$lcssa + $4 | 0;
      $224 = $v$0$i$lcssa + $$sum1$i | 0;
      HEAP32[$224 >> 2] = $rsize$0$i$lcssa;
      $225 = HEAP32[7168 >> 2] | 0;
      $226 = ($225 | 0) == 0;
      if (!$226) {
       $227 = HEAP32[7180 >> 2] | 0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = 7200 + ($229 << 2) | 0;
       $231 = HEAP32[7160 >> 2] | 0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233 | 0) == 0;
       if ($234) {
        $235 = $231 | $232;
        HEAP32[7160 >> 2] = $235;
        $$pre$i = $229 + 2 | 0;
        $$pre8$i = 7200 + ($$pre$i << 2) | 0;
        $$pre$phi$iZ2D = $$pre8$i;
        $F1$0$i = $230;
       } else {
        $$sum3$i = $229 + 2 | 0;
        $236 = 7200 + ($$sum3$i << 2) | 0;
        $237 = HEAP32[$236 >> 2] | 0;
        $238 = HEAP32[7176 >> 2] | 0;
        $239 = $237 >>> 0 < $238 >>> 0;
        if ($239) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        } else {
         $$pre$phi$iZ2D = $236;
         $F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $227;
       $240 = $F1$0$i + 12 | 0;
       HEAP32[$240 >> 2] = $227;
       $241 = $227 + 8 | 0;
       HEAP32[$241 >> 2] = $F1$0$i;
       $242 = $227 + 12 | 0;
       HEAP32[$242 >> 2] = $230;
      }
      HEAP32[7168 >> 2] = $rsize$0$i$lcssa;
      HEAP32[7180 >> 2] = $151;
     }
     $243 = $v$0$i$lcssa + 8 | 0;
     $mem$0 = $243;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = $bytes >>> 0 > 4294967231;
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = $bytes + 11 | 0;
    $246 = $245 & -8;
    $247 = HEAP32[7164 >> 2] | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = 0 - $246 | 0;
     $250 = $245 >>> 8;
     $251 = ($250 | 0) == 0;
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = $246 >>> 0 > 16777215;
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = $250 + 1048320 | 0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = $256 + 520192 | 0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = $261 + 245760 | 0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = 14 - $265 | 0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = $266 + $268 | 0;
       $270 = $269 << 1;
       $271 = $269 + 7 | 0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = 7464 + ($idx$0$i << 2) | 0;
     $276 = HEAP32[$275 >> 2] | 0;
     $277 = ($276 | 0) == (0 | 0);
     L123 : do {
      if ($277) {
       $rsize$2$i = $249;
       $t$1$i = 0;
       $v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i | 0) == 31;
       $279 = $idx$0$i >>> 1;
       $280 = 25 - $279 | 0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;
       $rst$0$i = 0;
       $sizebits$0$i = $282;
       $t$0$i14 = $276;
       $v$0$i16 = 0;
       while (1) {
        $283 = $t$0$i14 + 4 | 0;
        $284 = HEAP32[$283 >> 2] | 0;
        $285 = $284 & -8;
        $286 = $285 - $246 | 0;
        $287 = $286 >>> 0 < $rsize$0$i15 >>> 0;
        if ($287) {
         $288 = ($285 | 0) == ($246 | 0);
         if ($288) {
          $rsize$331$i = $286;
          $t$230$i = $t$0$i14;
          $v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $289 = $t$0$i14 + 20 | 0;
        $290 = HEAP32[$289 >> 2] | 0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ($t$0$i14 + 16 | 0) + ($291 << 2) | 0;
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = ($290 | 0) == (0 | 0);
        $295 = ($290 | 0) == ($293 | 0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293 | 0) == (0 | 0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $297;
         $t$0$i14 = $293;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $298 = ($t$1$i | 0) == (0 | 0);
      $299 = ($v$2$i | 0) == (0 | 0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = 0 - $300 | 0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303 | 0) == 0;
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = 0 - $303 | 0;
       $306 = $303 & $305;
       $307 = $306 + -1 | 0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = $325 + $326 | 0;
       $328 = 7464 + ($327 << 2) | 0;
       $329 = HEAP32[$328 >> 2] | 0;
       $t$2$ph$i = $329;
       $v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;
       $v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i | 0) == (0 | 0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;
       $v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;
       $t$230$i = $t$2$ph$i;
       $v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $331 = $t$230$i + 4 | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       $333 = $332 & -8;
       $334 = $333 - $246 | 0;
       $335 = $334 >>> 0 < $rsize$331$i >>> 0;
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = $t$230$i + 16 | 0;
       $337 = HEAP32[$336 >> 2] | 0;
       $338 = ($337 | 0) == (0 | 0);
       if (!$338) {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $337;
        $v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = $t$230$i + 20 | 0;
       $340 = HEAP32[$339 >> 2] | 0;
       $341 = ($340 | 0) == (0 | 0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $340;
        $v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i | 0) == (0 | 0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[7168 >> 2] | 0;
      $344 = $343 - $246 | 0;
      $345 = $rsize$3$lcssa$i >>> 0 < $344 >>> 0;
      if ($345) {
       $346 = HEAP32[7176 >> 2] | 0;
       $347 = $v$3$lcssa$i >>> 0 < $346 >>> 0;
       if ($347) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $348 = $v$3$lcssa$i + $246 | 0;
       $349 = $v$3$lcssa$i >>> 0 < $348 >>> 0;
       if (!$349) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $350 = $v$3$lcssa$i + 24 | 0;
       $351 = HEAP32[$350 >> 2] | 0;
       $352 = $v$3$lcssa$i + 12 | 0;
       $353 = HEAP32[$352 >> 2] | 0;
       $354 = ($353 | 0) == ($v$3$lcssa$i | 0);
       do {
        if ($354) {
         $364 = $v$3$lcssa$i + 20 | 0;
         $365 = HEAP32[$364 >> 2] | 0;
         $366 = ($365 | 0) == (0 | 0);
         if ($366) {
          $367 = $v$3$lcssa$i + 16 | 0;
          $368 = HEAP32[$367 >> 2] | 0;
          $369 = ($368 | 0) == (0 | 0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;
           $RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;
          $RP$0$i17 = $364;
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0;
          $371 = HEAP32[$370 >> 2] | 0;
          $372 = ($371 | 0) == (0 | 0);
          if (!$372) {
           $R$0$i18 = $371;
           $RP$0$i17 = $370;
           continue;
          }
          $373 = $R$0$i18 + 16 | 0;
          $374 = HEAP32[$373 >> 2] | 0;
          $375 = ($374 | 0) == (0 | 0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;
           $RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;
           $RP$0$i17 = $373;
          }
         }
         $376 = $RP$0$i17$lcssa >>> 0 < $346 >>> 0;
         if ($376) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         } else {
          HEAP32[$RP$0$i17$lcssa >> 2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = $v$3$lcssa$i + 8 | 0;
         $356 = HEAP32[$355 >> 2] | 0;
         $357 = $356 >>> 0 < $346 >>> 0;
         if ($357) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $358 = $356 + 12 | 0;
         $359 = HEAP32[$358 >> 2] | 0;
         $360 = ($359 | 0) == ($v$3$lcssa$i | 0);
         if (!$360) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $361 = $353 + 8 | 0;
         $362 = HEAP32[$361 >> 2] | 0;
         $363 = ($362 | 0) == ($v$3$lcssa$i | 0);
         if ($363) {
          HEAP32[$358 >> 2] = $353;
          HEAP32[$361 >> 2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
        }
       } while (0);
       $377 = ($351 | 0) == (0 | 0);
       do {
        if (!$377) {
         $378 = $v$3$lcssa$i + 28 | 0;
         $379 = HEAP32[$378 >> 2] | 0;
         $380 = 7464 + ($379 << 2) | 0;
         $381 = HEAP32[$380 >> 2] | 0;
         $382 = ($v$3$lcssa$i | 0) == ($381 | 0);
         if ($382) {
          HEAP32[$380 >> 2] = $R$1$i20;
          $cond$i21 = ($R$1$i20 | 0) == (0 | 0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[7164 >> 2] | 0;
           $386 = $385 & $384;
           HEAP32[7164 >> 2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[7176 >> 2] | 0;
          $388 = $351 >>> 0 < $387 >>> 0;
          if ($388) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          }
          $389 = $351 + 16 | 0;
          $390 = HEAP32[$389 >> 2] | 0;
          $391 = ($390 | 0) == ($v$3$lcssa$i | 0);
          if ($391) {
           HEAP32[$389 >> 2] = $R$1$i20;
          } else {
           $392 = $351 + 20 | 0;
           HEAP32[$392 >> 2] = $R$1$i20;
          }
          $393 = ($R$1$i20 | 0) == (0 | 0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[7176 >> 2] | 0;
         $395 = $R$1$i20 >>> 0 < $394 >>> 0;
         if ($395) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $396 = $R$1$i20 + 24 | 0;
         HEAP32[$396 >> 2] = $351;
         $397 = $v$3$lcssa$i + 16 | 0;
         $398 = HEAP32[$397 >> 2] | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $401 = $R$1$i20 + 16 | 0;
            HEAP32[$401 >> 2] = $398;
            $402 = $398 + 24 | 0;
            HEAP32[$402 >> 2] = $R$1$i20;
            break;
           }
          }
         } while (0);
         $403 = $v$3$lcssa$i + 20 | 0;
         $404 = HEAP32[$403 >> 2] | 0;
         $405 = ($404 | 0) == (0 | 0);
         if (!$405) {
          $406 = HEAP32[7176 >> 2] | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          } else {
           $408 = $R$1$i20 + 20 | 0;
           HEAP32[$408 >> 2] = $404;
           $409 = $404 + 24 | 0;
           HEAP32[$409 >> 2] = $R$1$i20;
           break;
          }
         }
        }
       } while (0);
       $410 = $rsize$3$lcssa$i >>> 0 < 16;
       L199 : do {
        if ($410) {
         $411 = $rsize$3$lcssa$i + $246 | 0;
         $412 = $411 | 3;
         $413 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$413 >> 2] = $412;
         $$sum18$i = $411 + 4 | 0;
         $414 = $v$3$lcssa$i + $$sum18$i | 0;
         $415 = HEAP32[$414 >> 2] | 0;
         $416 = $415 | 1;
         HEAP32[$414 >> 2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$418 >> 2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = $v$3$lcssa$i + $$sum$i2334 | 0;
         HEAP32[$420 >> 2] = $419;
         $$sum1$i24 = $rsize$3$lcssa$i + $246 | 0;
         $421 = $v$3$lcssa$i + $$sum1$i24 | 0;
         HEAP32[$421 >> 2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = $rsize$3$lcssa$i >>> 0 < 256;
         if ($423) {
          $424 = $422 << 1;
          $425 = 7200 + ($424 << 2) | 0;
          $426 = HEAP32[7160 >> 2] | 0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428 | 0) == 0;
          if ($429) {
           $430 = $426 | $427;
           HEAP32[7160 >> 2] = $430;
           $$pre$i25 = $424 + 2 | 0;
           $$pre43$i = 7200 + ($$pre$i25 << 2) | 0;
           $$pre$phi$i26Z2D = $$pre43$i;
           $F5$0$i = $425;
          } else {
           $$sum17$i = $424 + 2 | 0;
           $431 = 7200 + ($$sum17$i << 2) | 0;
           $432 = HEAP32[$431 >> 2] | 0;
           $433 = HEAP32[7176 >> 2] | 0;
           $434 = $432 >>> 0 < $433 >>> 0;
           if ($434) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $$pre$phi$i26Z2D = $431;
            $F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
          $435 = $F5$0$i + 12 | 0;
          HEAP32[$435 >> 2] = $348;
          $$sum15$i = $246 + 8 | 0;
          $436 = $v$3$lcssa$i + $$sum15$i | 0;
          HEAP32[$436 >> 2] = $F5$0$i;
          $$sum16$i = $246 + 12 | 0;
          $437 = $v$3$lcssa$i + $$sum16$i | 0;
          HEAP32[$437 >> 2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438 | 0) == 0;
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = $rsize$3$lcssa$i >>> 0 > 16777215;
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = $438 + 1048320 | 0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = $444 + 520192 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = $449 + 245760 | 0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = 14 - $453 | 0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = $454 + $456 | 0;
           $458 = $457 << 1;
           $459 = $457 + 7 | 0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = 7464 + ($I7$0$i << 2) | 0;
         $$sum2$i = $246 + 28 | 0;
         $464 = $v$3$lcssa$i + $$sum2$i | 0;
         HEAP32[$464 >> 2] = $I7$0$i;
         $$sum3$i27 = $246 + 16 | 0;
         $465 = $v$3$lcssa$i + $$sum3$i27 | 0;
         $$sum4$i28 = $246 + 20 | 0;
         $466 = $v$3$lcssa$i + $$sum4$i28 | 0;
         HEAP32[$466 >> 2] = 0;
         HEAP32[$465 >> 2] = 0;
         $467 = HEAP32[7164 >> 2] | 0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469 | 0) == 0;
         if ($470) {
          $471 = $467 | $468;
          HEAP32[7164 >> 2] = $471;
          HEAP32[$463 >> 2] = $348;
          $$sum5$i = $246 + 24 | 0;
          $472 = $v$3$lcssa$i + $$sum5$i | 0;
          HEAP32[$472 >> 2] = $463;
          $$sum6$i = $246 + 12 | 0;
          $473 = $v$3$lcssa$i + $$sum6$i | 0;
          HEAP32[$473 >> 2] = $348;
          $$sum7$i = $246 + 8 | 0;
          $474 = $v$3$lcssa$i + $$sum7$i | 0;
          HEAP32[$474 >> 2] = $348;
          break;
         }
         $475 = HEAP32[$463 >> 2] | 0;
         $476 = $475 + 4 | 0;
         $477 = HEAP32[$476 >> 2] | 0;
         $478 = $477 & -8;
         $479 = ($478 | 0) == ($rsize$3$lcssa$i | 0);
         L217 : do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i | 0) == 31;
           $481 = $I7$0$i >>> 1;
           $482 = 25 - $481 | 0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;
           $T$028$i = $475;
           while (1) {
            $491 = $K12$029$i >>> 31;
            $492 = ($T$028$i + 16 | 0) + ($491 << 2) | 0;
            $487 = HEAP32[$492 >> 2] | 0;
            $493 = ($487 | 0) == (0 | 0);
            if ($493) {
             $$lcssa232 = $492;
             $T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = $487 + 4 | 0;
            $488 = HEAP32[$486 >> 2] | 0;
            $489 = $488 & -8;
            $490 = ($489 | 0) == ($rsize$3$lcssa$i | 0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;
             $T$028$i = $487;
            }
           }
           $494 = HEAP32[7176 >> 2] | 0;
           $495 = $$lcssa232 >>> 0 < $494 >>> 0;
           if ($495) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            HEAP32[$$lcssa232 >> 2] = $348;
            $$sum11$i = $246 + 24 | 0;
            $496 = $v$3$lcssa$i + $$sum11$i | 0;
            HEAP32[$496 >> 2] = $T$028$i$lcssa;
            $$sum12$i = $246 + 12 | 0;
            $497 = $v$3$lcssa$i + $$sum12$i | 0;
            HEAP32[$497 >> 2] = $348;
            $$sum13$i = $246 + 8 | 0;
            $498 = $v$3$lcssa$i + $$sum13$i | 0;
            HEAP32[$498 >> 2] = $348;
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0;
         $500 = HEAP32[$499 >> 2] | 0;
         $501 = HEAP32[7176 >> 2] | 0;
         $502 = $500 >>> 0 >= $501 >>> 0;
         $not$$i = $T$0$lcssa$i >>> 0 >= $501 >>> 0;
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = $500 + 12 | 0;
          HEAP32[$504 >> 2] = $348;
          HEAP32[$499 >> 2] = $348;
          $$sum8$i = $246 + 8 | 0;
          $505 = $v$3$lcssa$i + $$sum8$i | 0;
          HEAP32[$505 >> 2] = $500;
          $$sum9$i = $246 + 12 | 0;
          $506 = $v$3$lcssa$i + $$sum9$i | 0;
          HEAP32[$506 >> 2] = $T$0$lcssa$i;
          $$sum10$i = $246 + 24 | 0;
          $507 = $v$3$lcssa$i + $$sum10$i | 0;
          HEAP32[$507 >> 2] = 0;
          break;
         } else {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
        }
       } while (0);
       $508 = $v$3$lcssa$i + 8 | 0;
       $mem$0 = $508;
       return $mem$0 | 0;
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while (0);
 $509 = HEAP32[7168 >> 2] | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[7180 >> 2] | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[7180 >> 2] = $514;
   HEAP32[7168 >> 2] = $511;
   $515 = $511 | 1;
   $$sum2 = $nb$0 + 4 | 0;
   $516 = $512 + $$sum2 | 0;
   HEAP32[$516 >> 2] = $515;
   $517 = $512 + $509 | 0;
   HEAP32[$517 >> 2] = $511;
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   HEAP32[$519 >> 2] = $518;
  } else {
   HEAP32[7168 >> 2] = 0;
   HEAP32[7180 >> 2] = 0;
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   HEAP32[$521 >> 2] = $520;
   $$sum1 = $509 + 4 | 0;
   $522 = $512 + $$sum1 | 0;
   $523 = HEAP32[$522 >> 2] | 0;
   $524 = $523 | 1;
   HEAP32[$522 >> 2] = $524;
  }
  $525 = $512 + 8 | 0;
  $mem$0 = $525;
  return $mem$0 | 0;
 }
 $526 = HEAP32[7172 >> 2] | 0;
 $527 = $526 >>> 0 > $nb$0 >>> 0;
 if ($527) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[7172 >> 2] = $528;
  $529 = HEAP32[7184 >> 2] | 0;
  $530 = $529 + $nb$0 | 0;
  HEAP32[7184 >> 2] = $530;
  $531 = $528 | 1;
  $$sum = $nb$0 + 4 | 0;
  $532 = $529 + $$sum | 0;
  HEAP32[$532 >> 2] = $531;
  $533 = $nb$0 | 3;
  $534 = $529 + 4 | 0;
  HEAP32[$534 >> 2] = $533;
  $535 = $529 + 8 | 0;
  $mem$0 = $535;
  return $mem$0 | 0;
 }
 $536 = HEAP32[7632 >> 2] | 0;
 $537 = ($536 | 0) == 0;
 do {
  if ($537) {
   $538 = (tempInt = _sysconf(30) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $539 = $538 + -1 | 0;
   $540 = $539 & $538;
   $541 = ($540 | 0) == 0;
   if ($541) {
    HEAP32[7640 >> 2] = $538;
    HEAP32[7636 >> 2] = $538;
    HEAP32[7644 >> 2] = -1;
    HEAP32[7648 >> 2] = -1;
    HEAP32[7652 >> 2] = 0;
    HEAP32[7604 >> 2] = 0;
    $542 = (tempInt = _time(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[7632 >> 2] = $544;
    break;
   } else {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[7640 >> 2] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 $551 = $550 >>> 0 > $nb$0 >>> 0;
 if (!$551) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[7600 >> 2] | 0;
 $553 = ($552 | 0) == 0;
 if (!$553) {
  $554 = HEAP32[7592 >> 2] | 0;
  $555 = $554 + $550 | 0;
  $556 = $555 >>> 0 <= $554 >>> 0;
  $557 = $555 >>> 0 > $552 >>> 0;
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 $558 = HEAP32[7604 >> 2] | 0;
 $559 = $558 & 4;
 $560 = ($559 | 0) == 0;
 L258 : do {
  if ($560) {
   $561 = HEAP32[7184 >> 2] | 0;
   $562 = ($561 | 0) == (0 | 0);
   L260 : do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = 7608;
     while (1) {
      $563 = HEAP32[$sp$0$i$i >> 2] | 0;
      $564 = $563 >>> 0 > $561 >>> 0;
      if (!$564) {
       $565 = $sp$0$i$i + 4 | 0;
       $566 = HEAP32[$565 >> 2] | 0;
       $567 = $563 + $566 | 0;
       $568 = $567 >>> 0 > $561 >>> 0;
       if ($568) {
        $$lcssa228 = $sp$0$i$i;
        $$lcssa230 = $565;
        break;
       }
      }
      $569 = $sp$0$i$i + 8 | 0;
      $570 = HEAP32[$569 >> 2] | 0;
      $571 = ($570 | 0) == (0 | 0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[7172 >> 2] | 0;
     $595 = $548 - $594 | 0;
     $596 = $595 & $549;
     $597 = $596 >>> 0 < 2147483647;
     if ($597) {
      $598 = (tempInt = _sbrk($596 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $599 = HEAP32[$$lcssa228 >> 2] | 0;
      $600 = HEAP32[$$lcssa230 >> 2] | 0;
      $601 = $599 + $600 | 0;
      $602 = ($598 | 0) == ($601 | 0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598 | 0) == (-1 | 0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;
        $tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;
       $ssize$1$ph$i = $596;
       $tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = (tempInt = _sbrk(0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $573 = ($572 | 0) == (-1 | 0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[7636 >> 2] | 0;
      $576 = $575 + -1 | 0;
      $577 = $576 & $574;
      $578 = ($577 | 0) == 0;
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = $576 + $574 | 0;
       $580 = 0 - $575 | 0;
       $581 = $579 & $580;
       $582 = $550 - $574 | 0;
       $583 = $582 + $581 | 0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[7592 >> 2] | 0;
      $585 = $584 + $ssize$0$i | 0;
      $586 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $587 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[7600 >> 2] | 0;
       $589 = ($588 | 0) == 0;
       if (!$589) {
        $590 = $585 >>> 0 <= $584 >>> 0;
        $591 = $585 >>> 0 > $588 >>> 0;
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (tempInt = _sbrk($ssize$0$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $593 = ($592 | 0) == ($572 | 0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;
        $tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;
        $ssize$1$ph$i = $ssize$0$i;
        $tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0;
     $605 = ($br$0$ph$i | 0) != (-1 | 0);
     $606 = $ssize$1$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $606 & $605;
     $607 = $545 >>> 0 > $ssize$1$ph$i >>> 0;
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[7640 >> 2] | 0;
       $609 = $547 - $ssize$1$ph$i | 0;
       $610 = $609 + $608 | 0;
       $611 = 0 - $608 | 0;
       $612 = $610 & $611;
       $613 = $612 >>> 0 < 2147483647;
       if ($613) {
        $614 = (tempInt = _sbrk($612 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $615 = ($614 | 0) == (-1 | 0);
        if ($615) {
         (tempInt = _sbrk($604 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = $612 + $ssize$1$ph$i | 0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while (0);
     $617 = ($br$0$ph$i | 0) == (-1 | 0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;
      $tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while (0);
   $618 = HEAP32[7604 >> 2] | 0;
   $619 = $618 | 4;
   HEAP32[7604 >> 2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while (0);
 if ((label | 0) == 191) {
  $620 = $550 >>> 0 < 2147483647;
  if ($620) {
   $621 = (tempInt = _sbrk($550 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $622 = (tempInt = _sbrk(0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $623 = ($621 | 0) != (-1 | 0);
   $624 = ($622 | 0) != (-1 | 0);
   $or$cond3$i = $623 & $624;
   $625 = $621 >>> 0 < $622 >>> 0;
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = $626 - $627 | 0;
    $629 = $nb$0 + 40 | 0;
    $630 = $628 >>> 0 > $629 >>> 0;
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;
     $tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $631 = HEAP32[7592 >> 2] | 0;
  $632 = $631 + $tsize$254$i | 0;
  HEAP32[7592 >> 2] = $632;
  $633 = HEAP32[7596 >> 2] | 0;
  $634 = $632 >>> 0 > $633 >>> 0;
  if ($634) {
   HEAP32[7596 >> 2] = $632;
  }
  $635 = HEAP32[7184 >> 2] | 0;
  $636 = ($635 | 0) == (0 | 0);
  L299 : do {
   if ($636) {
    $637 = HEAP32[7176 >> 2] | 0;
    $638 = ($637 | 0) == (0 | 0);
    $639 = $tbase$255$i >>> 0 < $637 >>> 0;
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[7176 >> 2] = $tbase$255$i;
    }
    HEAP32[7608 >> 2] = $tbase$255$i;
    HEAP32[7612 >> 2] = $tsize$254$i;
    HEAP32[7620 >> 2] = 0;
    $640 = HEAP32[7632 >> 2] | 0;
    HEAP32[7196 >> 2] = $640;
    HEAP32[7192 >> 2] = -1;
    $i$02$i$i = 0;
    while (1) {
     $641 = $i$02$i$i << 1;
     $642 = 7200 + ($641 << 2) | 0;
     $$sum$i$i = $641 + 3 | 0;
     $643 = 7200 + ($$sum$i$i << 2) | 0;
     HEAP32[$643 >> 2] = $642;
     $$sum1$i$i = $641 + 2 | 0;
     $644 = 7200 + ($$sum1$i$i << 2) | 0;
     HEAP32[$644 >> 2] = $642;
     $645 = $i$02$i$i + 1 | 0;
     $exitcond$i$i = ($645 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = $tsize$254$i + -40 | 0;
    $647 = $tbase$255$i + 8 | 0;
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649 | 0) == 0;
    $651 = 0 - $648 | 0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = $tbase$255$i + $653 | 0;
    $655 = $646 - $653 | 0;
    HEAP32[7184 >> 2] = $654;
    HEAP32[7172 >> 2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = $653 + 4 | 0;
    $657 = $tbase$255$i + $$sum$i13$i | 0;
    HEAP32[$657 >> 2] = $656;
    $$sum2$i$i = $tsize$254$i + -36 | 0;
    $658 = $tbase$255$i + $$sum2$i$i | 0;
    HEAP32[$658 >> 2] = 40;
    $659 = HEAP32[7648 >> 2] | 0;
    HEAP32[7188 >> 2] = $659;
   } else {
    $sp$084$i = 7608;
    while (1) {
     $660 = HEAP32[$sp$084$i >> 2] | 0;
     $661 = $sp$084$i + 4 | 0;
     $662 = HEAP32[$661 >> 2] | 0;
     $663 = $660 + $662 | 0;
     $664 = ($tbase$255$i | 0) == ($663 | 0);
     if ($664) {
      $$lcssa222 = $660;
      $$lcssa224 = $661;
      $$lcssa226 = $662;
      $sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = $sp$084$i + 8 | 0;
     $666 = HEAP32[$665 >> 2] | 0;
     $667 = ($666 | 0) == (0 | 0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label | 0) == 204) {
     $668 = $sp$084$i$lcssa + 12 | 0;
     $669 = HEAP32[$668 >> 2] | 0;
     $670 = $669 & 8;
     $671 = ($670 | 0) == 0;
     if ($671) {
      $672 = $635 >>> 0 >= $$lcssa222 >>> 0;
      $673 = $635 >>> 0 < $tbase$255$i >>> 0;
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = $$lcssa226 + $tsize$254$i | 0;
       HEAP32[$$lcssa224 >> 2] = $674;
       $675 = HEAP32[7172 >> 2] | 0;
       $676 = $675 + $tsize$254$i | 0;
       $677 = $635 + 8 | 0;
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679 | 0) == 0;
       $681 = 0 - $678 | 0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = $635 + $683 | 0;
       $685 = $676 - $683 | 0;
       HEAP32[7184 >> 2] = $684;
       HEAP32[7172 >> 2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = $683 + 4 | 0;
       $687 = $635 + $$sum$i17$i | 0;
       HEAP32[$687 >> 2] = $686;
       $$sum2$i18$i = $676 + 4 | 0;
       $688 = $635 + $$sum2$i18$i | 0;
       HEAP32[$688 >> 2] = 40;
       $689 = HEAP32[7648 >> 2] | 0;
       HEAP32[7188 >> 2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[7176 >> 2] | 0;
    $691 = $tbase$255$i >>> 0 < $690 >>> 0;
    if ($691) {
     HEAP32[7176 >> 2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = $tbase$255$i + $tsize$254$i | 0;
    $sp$183$i = 7608;
    while (1) {
     $693 = HEAP32[$sp$183$i >> 2] | 0;
     $694 = ($693 | 0) == ($692 | 0);
     if ($694) {
      $$lcssa219 = $sp$183$i;
      $sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = $sp$183$i + 8 | 0;
     $696 = HEAP32[$695 >> 2] | 0;
     $697 = ($696 | 0) == (0 | 0);
     if ($697) {
      $sp$0$i$i$i = 7608;
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label | 0) == 212) {
     $698 = $sp$183$i$lcssa + 12 | 0;
     $699 = HEAP32[$698 >> 2] | 0;
     $700 = $699 & 8;
     $701 = ($700 | 0) == 0;
     if ($701) {
      HEAP32[$$lcssa219 >> 2] = $tbase$255$i;
      $702 = $sp$183$i$lcssa + 4 | 0;
      $703 = HEAP32[$702 >> 2] | 0;
      $704 = $703 + $tsize$254$i | 0;
      HEAP32[$702 >> 2] = $704;
      $705 = $tbase$255$i + 8 | 0;
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707 | 0) == 0;
      $709 = 0 - $706 | 0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = $tbase$255$i + $711 | 0;
      $$sum112$i = $tsize$254$i + 8 | 0;
      $713 = $tbase$255$i + $$sum112$i | 0;
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715 | 0) == 0;
      $717 = 0 - $714 | 0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = $719 + $tsize$254$i | 0;
      $720 = $tbase$255$i + $$sum113$i | 0;
      $721 = $720;
      $722 = $712;
      $723 = $721 - $722 | 0;
      $$sum$i19$i = $711 + $nb$0 | 0;
      $724 = $tbase$255$i + $$sum$i19$i | 0;
      $725 = $723 - $nb$0 | 0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = $711 + 4 | 0;
      $727 = $tbase$255$i + $$sum1$i20$i | 0;
      HEAP32[$727 >> 2] = $726;
      $728 = ($720 | 0) == ($635 | 0);
      L324 : do {
       if ($728) {
        $729 = HEAP32[7172 >> 2] | 0;
        $730 = $729 + $725 | 0;
        HEAP32[7172 >> 2] = $730;
        HEAP32[7184 >> 2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = $$sum$i19$i + 4 | 0;
        $732 = $tbase$255$i + $$sum42$i$i | 0;
        HEAP32[$732 >> 2] = $731;
       } else {
        $733 = HEAP32[7180 >> 2] | 0;
        $734 = ($720 | 0) == ($733 | 0);
        if ($734) {
         $735 = HEAP32[7168 >> 2] | 0;
         $736 = $735 + $725 | 0;
         HEAP32[7168 >> 2] = $736;
         HEAP32[7180 >> 2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = $$sum$i19$i + 4 | 0;
         $738 = $tbase$255$i + $$sum40$i$i | 0;
         HEAP32[$738 >> 2] = $737;
         $$sum41$i$i = $736 + $$sum$i19$i | 0;
         $739 = $tbase$255$i + $$sum41$i$i | 0;
         HEAP32[$739 >> 2] = $736;
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0;
        $$sum114$i = $$sum2$i21$i + $719 | 0;
        $740 = $tbase$255$i + $$sum114$i | 0;
        $741 = HEAP32[$740 >> 2] | 0;
        $742 = $741 & 3;
        $743 = ($742 | 0) == 1;
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = $741 >>> 0 < 256;
         L332 : do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = $$sum3738$i$i + $tsize$254$i | 0;
           $747 = $tbase$255$i + $$sum124$i | 0;
           $748 = HEAP32[$747 >> 2] | 0;
           $$sum39$i$i = $tsize$254$i + 12 | 0;
           $$sum125$i = $$sum39$i$i + $719 | 0;
           $749 = $tbase$255$i + $$sum125$i | 0;
           $750 = HEAP32[$749 >> 2] | 0;
           $751 = $745 << 1;
           $752 = 7200 + ($751 << 2) | 0;
           $753 = ($748 | 0) == ($752 | 0);
           do {
            if (!$753) {
             $754 = $748 >>> 0 < $755 >>> 0;
             if ($754) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $756 = $748 + 12 | 0;
             $757 = HEAP32[$756 >> 2] | 0;
             $758 = ($757 | 0) == ($720 | 0);
             if ($758) {
              break;
             }
             _abort(), asyncState ? abort(-12) | 0 : 0;
            }
           } while (0);
           $759 = ($750 | 0) == ($748 | 0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[7160 >> 2] | 0;
            $763 = $762 & $761;
            HEAP32[7160 >> 2] = $763;
            break;
           }
           $764 = ($750 | 0) == ($752 | 0);
           do {
            if ($764) {
             $$pre57$i$i = $750 + 8 | 0;
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = $750 >>> 0 < $755 >>> 0;
             if ($765) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $766 = $750 + 8 | 0;
             $767 = HEAP32[$766 >> 2] | 0;
             $768 = ($767 | 0) == ($720 | 0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort(), asyncState ? abort(-12) | 0 : 0;
            }
           } while (0);
           $769 = $748 + 12 | 0;
           HEAP32[$769 >> 2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = $$sum34$i$i + $tsize$254$i | 0;
           $770 = $tbase$255$i + $$sum115$i | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           $$sum5$i$i = $tsize$254$i + 12 | 0;
           $$sum116$i = $$sum5$i$i + $719 | 0;
           $772 = $tbase$255$i + $$sum116$i | 0;
           $773 = HEAP32[$772 >> 2] | 0;
           $774 = ($773 | 0) == ($720 | 0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = $$sum2$i21$i + $$sum67$i$i | 0;
             $784 = $tbase$255$i + $$sum122$i | 0;
             $785 = HEAP32[$784 >> 2] | 0;
             $786 = ($785 | 0) == (0 | 0);
             if ($786) {
              $$sum123$i = $$sum67$i$i + $tsize$254$i | 0;
              $787 = $tbase$255$i + $$sum123$i | 0;
              $788 = HEAP32[$787 >> 2] | 0;
              $789 = ($788 | 0) == (0 | 0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;
               $RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;
              $RP$0$i$i = $784;
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0;
              $791 = HEAP32[$790 >> 2] | 0;
              $792 = ($791 | 0) == (0 | 0);
              if (!$792) {
               $R$0$i$i = $791;
               $RP$0$i$i = $790;
               continue;
              }
              $793 = $R$0$i$i + 16 | 0;
              $794 = HEAP32[$793 >> 2] | 0;
              $795 = ($794 | 0) == (0 | 0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;
               $RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;
               $RP$0$i$i = $793;
              }
             }
             $796 = $RP$0$i$i$lcssa >>> 0 < $755 >>> 0;
             if ($796) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             } else {
              HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = $$sum3536$i$i + $tsize$254$i | 0;
             $775 = $tbase$255$i + $$sum117$i | 0;
             $776 = HEAP32[$775 >> 2] | 0;
             $777 = $776 >>> 0 < $755 >>> 0;
             if ($777) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $778 = $776 + 12 | 0;
             $779 = HEAP32[$778 >> 2] | 0;
             $780 = ($779 | 0) == ($720 | 0);
             if (!$780) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $781 = $773 + 8 | 0;
             $782 = HEAP32[$781 >> 2] | 0;
             $783 = ($782 | 0) == ($720 | 0);
             if ($783) {
              HEAP32[$778 >> 2] = $773;
              HEAP32[$781 >> 2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
            }
           } while (0);
           $797 = ($771 | 0) == (0 | 0);
           if ($797) {
            break;
           }
           $$sum30$i$i = $tsize$254$i + 28 | 0;
           $$sum118$i = $$sum30$i$i + $719 | 0;
           $798 = $tbase$255$i + $$sum118$i | 0;
           $799 = HEAP32[$798 >> 2] | 0;
           $800 = 7464 + ($799 << 2) | 0;
           $801 = HEAP32[$800 >> 2] | 0;
           $802 = ($720 | 0) == ($801 | 0);
           do {
            if ($802) {
             HEAP32[$800 >> 2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[7164 >> 2] | 0;
             $806 = $805 & $804;
             HEAP32[7164 >> 2] = $806;
             break L332;
            } else {
             $807 = HEAP32[7176 >> 2] | 0;
             $808 = $771 >>> 0 < $807 >>> 0;
             if ($808) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $809 = $771 + 16 | 0;
             $810 = HEAP32[$809 >> 2] | 0;
             $811 = ($810 | 0) == ($720 | 0);
             if ($811) {
              HEAP32[$809 >> 2] = $R$1$i$i;
             } else {
              $812 = $771 + 20 | 0;
              HEAP32[$812 >> 2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i | 0) == (0 | 0);
             if ($813) {
              break L332;
             }
            }
           } while (0);
           $814 = HEAP32[7176 >> 2] | 0;
           $815 = $R$1$i$i >>> 0 < $814 >>> 0;
           if ($815) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           }
           $816 = $R$1$i$i + 24 | 0;
           HEAP32[$816 >> 2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = $$sum3132$i$i + $tsize$254$i | 0;
           $817 = $tbase$255$i + $$sum119$i | 0;
           $818 = HEAP32[$817 >> 2] | 0;
           $819 = ($818 | 0) == (0 | 0);
           do {
            if (!$819) {
             $820 = $818 >>> 0 < $814 >>> 0;
             if ($820) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             } else {
              $821 = $R$1$i$i + 16 | 0;
              HEAP32[$821 >> 2] = $818;
              $822 = $818 + 24 | 0;
              HEAP32[$822 >> 2] = $R$1$i$i;
              break;
             }
            }
           } while (0);
           $$sum120$i = $$sum2$i21$i + $$sum3132$i$i | 0;
           $823 = $tbase$255$i + $$sum120$i | 0;
           $824 = HEAP32[$823 >> 2] | 0;
           $825 = ($824 | 0) == (0 | 0);
           if ($825) {
            break;
           }
           $826 = HEAP32[7176 >> 2] | 0;
           $827 = $824 >>> 0 < $826 >>> 0;
           if ($827) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $828 = $R$1$i$i + 20 | 0;
            HEAP32[$828 >> 2] = $824;
            $829 = $824 + 24 | 0;
            HEAP32[$829 >> 2] = $R$1$i$i;
            break;
           }
          }
         } while (0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = $$sum9$i$i + $tsize$254$i | 0;
         $830 = $tbase$255$i + $$sum121$i | 0;
         $831 = $744 + $725 | 0;
         $oldfirst$0$i$i = $830;
         $qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;
         $qsize$0$i$i = $725;
        }
        $832 = $oldfirst$0$i$i + 4 | 0;
        $833 = HEAP32[$832 >> 2] | 0;
        $834 = $833 & -2;
        HEAP32[$832 >> 2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = $$sum$i19$i + 4 | 0;
        $836 = $tbase$255$i + $$sum10$i$i | 0;
        HEAP32[$836 >> 2] = $835;
        $$sum11$i$i = $qsize$0$i$i + $$sum$i19$i | 0;
        $837 = $tbase$255$i + $$sum11$i$i | 0;
        HEAP32[$837 >> 2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = $qsize$0$i$i >>> 0 < 256;
        if ($839) {
         $840 = $838 << 1;
         $841 = 7200 + ($840 << 2) | 0;
         $842 = HEAP32[7160 >> 2] | 0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844 | 0) == 0;
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[7160 >> 2] = $846;
           $$pre$i22$i = $840 + 2 | 0;
           $$pre56$i$i = 7200 + ($$pre$i22$i << 2) | 0;
           $$pre$phi$i23$iZ2D = $$pre56$i$i;
           $F4$0$i$i = $841;
          } else {
           $$sum29$i$i = $840 + 2 | 0;
           $847 = 7200 + ($$sum29$i$i << 2) | 0;
           $848 = HEAP32[$847 >> 2] | 0;
           $849 = HEAP32[7176 >> 2] | 0;
           $850 = $848 >>> 0 < $849 >>> 0;
           if (!$850) {
            $$pre$phi$i23$iZ2D = $847;
            $F4$0$i$i = $848;
            break;
           }
           _abort(), asyncState ? abort(-12) | 0 : 0;
          }
         } while (0);
         HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
         $851 = $F4$0$i$i + 12 | 0;
         HEAP32[$851 >> 2] = $724;
         $$sum27$i$i = $$sum$i19$i + 8 | 0;
         $852 = $tbase$255$i + $$sum27$i$i | 0;
         HEAP32[$852 >> 2] = $F4$0$i$i;
         $$sum28$i$i = $$sum$i19$i + 12 | 0;
         $853 = $tbase$255$i + $$sum28$i$i | 0;
         HEAP32[$853 >> 2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854 | 0) == 0;
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = $qsize$0$i$i >>> 0 > 16777215;
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = $854 + 1048320 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = $860 + 520192 | 0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = $865 + 245760 | 0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = 14 - $869 | 0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = $870 + $872 | 0;
          $874 = $873 << 1;
          $875 = $873 + 7 | 0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while (0);
        $879 = 7464 + ($I7$0$i$i << 2) | 0;
        $$sum12$i$i = $$sum$i19$i + 28 | 0;
        $880 = $tbase$255$i + $$sum12$i$i | 0;
        HEAP32[$880 >> 2] = $I7$0$i$i;
        $$sum13$i$i = $$sum$i19$i + 16 | 0;
        $881 = $tbase$255$i + $$sum13$i$i | 0;
        $$sum14$i$i = $$sum$i19$i + 20 | 0;
        $882 = $tbase$255$i + $$sum14$i$i | 0;
        HEAP32[$882 >> 2] = 0;
        HEAP32[$881 >> 2] = 0;
        $883 = HEAP32[7164 >> 2] | 0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885 | 0) == 0;
        if ($886) {
         $887 = $883 | $884;
         HEAP32[7164 >> 2] = $887;
         HEAP32[$879 >> 2] = $724;
         $$sum15$i$i = $$sum$i19$i + 24 | 0;
         $888 = $tbase$255$i + $$sum15$i$i | 0;
         HEAP32[$888 >> 2] = $879;
         $$sum16$i$i = $$sum$i19$i + 12 | 0;
         $889 = $tbase$255$i + $$sum16$i$i | 0;
         HEAP32[$889 >> 2] = $724;
         $$sum17$i$i = $$sum$i19$i + 8 | 0;
         $890 = $tbase$255$i + $$sum17$i$i | 0;
         HEAP32[$890 >> 2] = $724;
         break;
        }
        $891 = HEAP32[$879 >> 2] | 0;
        $892 = $891 + 4 | 0;
        $893 = HEAP32[$892 >> 2] | 0;
        $894 = $893 & -8;
        $895 = ($894 | 0) == ($qsize$0$i$i | 0);
        L418 : do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i | 0) == 31;
          $897 = $I7$0$i$i >>> 1;
          $898 = 25 - $897 | 0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;
          $T$050$i$i = $891;
          while (1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = ($T$050$i$i + 16 | 0) + ($907 << 2) | 0;
           $903 = HEAP32[$908 >> 2] | 0;
           $909 = ($903 | 0) == (0 | 0);
           if ($909) {
            $$lcssa = $908;
            $T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = $903 + 4 | 0;
           $904 = HEAP32[$902 >> 2] | 0;
           $905 = $904 & -8;
           $906 = ($905 | 0) == ($qsize$0$i$i | 0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;
            $T$050$i$i = $903;
           }
          }
          $910 = HEAP32[7176 >> 2] | 0;
          $911 = $$lcssa >>> 0 < $910 >>> 0;
          if ($911) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          } else {
           HEAP32[$$lcssa >> 2] = $724;
           $$sum23$i$i = $$sum$i19$i + 24 | 0;
           $912 = $tbase$255$i + $$sum23$i$i | 0;
           HEAP32[$912 >> 2] = $T$050$i$i$lcssa;
           $$sum24$i$i = $$sum$i19$i + 12 | 0;
           $913 = $tbase$255$i + $$sum24$i$i | 0;
           HEAP32[$913 >> 2] = $724;
           $$sum25$i$i = $$sum$i19$i + 8 | 0;
           $914 = $tbase$255$i + $$sum25$i$i | 0;
           HEAP32[$914 >> 2] = $724;
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0;
        $916 = HEAP32[$915 >> 2] | 0;
        $917 = HEAP32[7176 >> 2] | 0;
        $918 = $916 >>> 0 >= $917 >>> 0;
        $not$$i26$i = $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0;
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = $916 + 12 | 0;
         HEAP32[$920 >> 2] = $724;
         HEAP32[$915 >> 2] = $724;
         $$sum20$i$i = $$sum$i19$i + 8 | 0;
         $921 = $tbase$255$i + $$sum20$i$i | 0;
         HEAP32[$921 >> 2] = $916;
         $$sum21$i$i = $$sum$i19$i + 12 | 0;
         $922 = $tbase$255$i + $$sum21$i$i | 0;
         HEAP32[$922 >> 2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = $$sum$i19$i + 24 | 0;
         $923 = $tbase$255$i + $$sum22$i$i | 0;
         HEAP32[$923 >> 2] = 0;
         break;
        } else {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        }
       }
      } while (0);
      $$sum1819$i$i = $711 | 8;
      $924 = $tbase$255$i + $$sum1819$i$i | 0;
      $mem$0 = $924;
      return $mem$0 | 0;
     } else {
      $sp$0$i$i$i = 7608;
     }
    }
    while (1) {
     $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     $926 = $925 >>> 0 > $635 >>> 0;
     if (!$926) {
      $927 = $sp$0$i$i$i + 4 | 0;
      $928 = HEAP32[$927 >> 2] | 0;
      $929 = $925 + $928 | 0;
      $930 = $929 >>> 0 > $635 >>> 0;
      if ($930) {
       $$lcssa215 = $925;
       $$lcssa216 = $928;
       $$lcssa217 = $929;
       break;
      }
     }
     $931 = $sp$0$i$i$i + 8 | 0;
     $932 = HEAP32[$931 >> 2] | 0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = $$lcssa216 + -47 | 0;
    $$sum1$i15$i = $$lcssa216 + -39 | 0;
    $933 = $$lcssa215 + $$sum1$i15$i | 0;
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935 | 0) == 0;
    $937 = 0 - $934 | 0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = $$sum$i14$i + $939 | 0;
    $940 = $$lcssa215 + $$sum2$i16$i | 0;
    $941 = $635 + 16 | 0;
    $942 = $940 >>> 0 < $941 >>> 0;
    $943 = $942 ? $635 : $940;
    $944 = $943 + 8 | 0;
    $945 = $tsize$254$i + -40 | 0;
    $946 = $tbase$255$i + 8 | 0;
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948 | 0) == 0;
    $950 = 0 - $947 | 0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = $tbase$255$i + $952 | 0;
    $954 = $945 - $952 | 0;
    HEAP32[7184 >> 2] = $953;
    HEAP32[7172 >> 2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = $952 + 4 | 0;
    $956 = $tbase$255$i + $$sum$i$i$i | 0;
    HEAP32[$956 >> 2] = $955;
    $$sum2$i$i$i = $tsize$254$i + -36 | 0;
    $957 = $tbase$255$i + $$sum2$i$i$i | 0;
    HEAP32[$957 >> 2] = 40;
    $958 = HEAP32[7648 >> 2] | 0;
    HEAP32[7188 >> 2] = $958;
    $959 = $943 + 4 | 0;
    HEAP32[$959 >> 2] = 27;
    HEAP32[$944 >> 2] = HEAP32[7608 >> 2] | 0;
    HEAP32[$944 + 4 >> 2] = HEAP32[7608 + 4 >> 2] | 0;
    HEAP32[$944 + 8 >> 2] = HEAP32[7608 + 8 >> 2] | 0;
    HEAP32[$944 + 12 >> 2] = HEAP32[7608 + 12 >> 2] | 0;
    HEAP32[7608 >> 2] = $tbase$255$i;
    HEAP32[7612 >> 2] = $tsize$254$i;
    HEAP32[7620 >> 2] = 0;
    HEAP32[7616 >> 2] = $944;
    $960 = $943 + 28 | 0;
    HEAP32[$960 >> 2] = 7;
    $961 = $943 + 32 | 0;
    $962 = $961 >>> 0 < $$lcssa217 >>> 0;
    if ($962) {
     $964 = $960;
     while (1) {
      $963 = $964 + 4 | 0;
      HEAP32[$963 >> 2] = 7;
      $965 = $964 + 8 | 0;
      $966 = $965 >>> 0 < $$lcssa217 >>> 0;
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943 | 0) == ($635 | 0);
    if (!$967) {
     $968 = $943;
     $969 = $635;
     $970 = $968 - $969 | 0;
     $971 = HEAP32[$959 >> 2] | 0;
     $972 = $971 & -2;
     HEAP32[$959 >> 2] = $972;
     $973 = $970 | 1;
     $974 = $635 + 4 | 0;
     HEAP32[$974 >> 2] = $973;
     HEAP32[$943 >> 2] = $970;
     $975 = $970 >>> 3;
     $976 = $970 >>> 0 < 256;
     if ($976) {
      $977 = $975 << 1;
      $978 = 7200 + ($977 << 2) | 0;
      $979 = HEAP32[7160 >> 2] | 0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981 | 0) == 0;
      if ($982) {
       $983 = $979 | $980;
       HEAP32[7160 >> 2] = $983;
       $$pre$i$i = $977 + 2 | 0;
       $$pre14$i$i = 7200 + ($$pre$i$i << 2) | 0;
       $$pre$phi$i$iZ2D = $$pre14$i$i;
       $F$0$i$i = $978;
      } else {
       $$sum4$i$i = $977 + 2 | 0;
       $984 = 7200 + ($$sum4$i$i << 2) | 0;
       $985 = HEAP32[$984 >> 2] | 0;
       $986 = HEAP32[7176 >> 2] | 0;
       $987 = $985 >>> 0 < $986 >>> 0;
       if ($987) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $$pre$phi$i$iZ2D = $984;
        $F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
      $988 = $F$0$i$i + 12 | 0;
      HEAP32[$988 >> 2] = $635;
      $989 = $635 + 8 | 0;
      HEAP32[$989 >> 2] = $F$0$i$i;
      $990 = $635 + 12 | 0;
      HEAP32[$990 >> 2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991 | 0) == 0;
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = $970 >>> 0 > 16777215;
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = $991 + 1048320 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = $997 + 520192 | 0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = $1002 + 245760 | 0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = 14 - $1006 | 0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = $1007 + $1009 | 0;
       $1011 = $1010 << 1;
       $1012 = $1010 + 7 | 0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = 7464 + ($I1$0$i$i << 2) | 0;
     $1017 = $635 + 28 | 0;
     HEAP32[$1017 >> 2] = $I1$0$i$i;
     $1018 = $635 + 20 | 0;
     HEAP32[$1018 >> 2] = 0;
     HEAP32[$941 >> 2] = 0;
     $1019 = HEAP32[7164 >> 2] | 0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021 | 0) == 0;
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[7164 >> 2] = $1023;
      HEAP32[$1016 >> 2] = $635;
      $1024 = $635 + 24 | 0;
      HEAP32[$1024 >> 2] = $1016;
      $1025 = $635 + 12 | 0;
      HEAP32[$1025 >> 2] = $635;
      $1026 = $635 + 8 | 0;
      HEAP32[$1026 >> 2] = $635;
      break;
     }
     $1027 = HEAP32[$1016 >> 2] | 0;
     $1028 = $1027 + 4 | 0;
     $1029 = HEAP32[$1028 >> 2] | 0;
     $1030 = $1029 & -8;
     $1031 = ($1030 | 0) == ($970 | 0);
     L459 : do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i | 0) == 31;
       $1033 = $I1$0$i$i >>> 1;
       $1034 = 25 - $1033 | 0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;
       $T$06$i$i = $1027;
       while (1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = ($T$06$i$i + 16 | 0) + ($1043 << 2) | 0;
        $1039 = HEAP32[$1044 >> 2] | 0;
        $1045 = ($1039 | 0) == (0 | 0);
        if ($1045) {
         $$lcssa211 = $1044;
         $T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = $1039 + 4 | 0;
        $1040 = HEAP32[$1038 >> 2] | 0;
        $1041 = $1040 & -8;
        $1042 = ($1041 | 0) == ($970 | 0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;
         $T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[7176 >> 2] | 0;
       $1047 = $$lcssa211 >>> 0 < $1046 >>> 0;
       if ($1047) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        HEAP32[$$lcssa211 >> 2] = $635;
        $1048 = $635 + 24 | 0;
        HEAP32[$1048 >> 2] = $T$06$i$i$lcssa;
        $1049 = $635 + 12 | 0;
        HEAP32[$1049 >> 2] = $635;
        $1050 = $635 + 8 | 0;
        HEAP32[$1050 >> 2] = $635;
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0;
     $1052 = HEAP32[$1051 >> 2] | 0;
     $1053 = HEAP32[7176 >> 2] | 0;
     $1054 = $1052 >>> 0 >= $1053 >>> 0;
     $not$$i$i = $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0;
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = $1052 + 12 | 0;
      HEAP32[$1056 >> 2] = $635;
      HEAP32[$1051 >> 2] = $635;
      $1057 = $635 + 8 | 0;
      HEAP32[$1057 >> 2] = $1052;
      $1058 = $635 + 12 | 0;
      HEAP32[$1058 >> 2] = $T$0$lcssa$i$i;
      $1059 = $635 + 24 | 0;
      HEAP32[$1059 >> 2] = 0;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   }
  } while (0);
  $1060 = HEAP32[7172 >> 2] | 0;
  $1061 = $1060 >>> 0 > $nb$0 >>> 0;
  if ($1061) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[7172 >> 2] = $1062;
   $1063 = HEAP32[7184 >> 2] | 0;
   $1064 = $1063 + $nb$0 | 0;
   HEAP32[7184 >> 2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = $nb$0 + 4 | 0;
   $1066 = $1063 + $$sum$i32 | 0;
   HEAP32[$1066 >> 2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = $1063 + 4 | 0;
   HEAP32[$1068 >> 2] = $1067;
   $1069 = $1063 + 8 | 0;
   $mem$0 = $1069;
   return $mem$0 | 0;
  }
 }
 $1070 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$1070 >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i126 = 0, $$0$i$i$i$i158 = 0, $$0$i$i$i$i183 = 0, $$0$i$i$i$i30 = 0, $$0$i$i$i$i51 = 0, $$0$i$i$i$i92 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i132 = 0, $$0$i$i1$i$i164 = 0, $$0$i$i1$i$i189 = 0, $$0$i$i1$i$i36 = 0, $$0$i$i1$i$i57 = 0, $$0$i$i1$i$i98 = 0, $$0$i$i110 = 0, $$0$i$i119 = 0, $$0$i$i122 = 0, $$0$i$i144 = 0, $$0$i$i155 = 0, $$0$i$i179 = 0, $$0$i$i45 = 0, $$0$i$i49 = 0, $$0$i$i66 = 0, $$0$i$i73 = 0, $$0$i$i78 = 0, $$0$i$i86 = 0, $$0$i$i89 = 0, $$in386 = 0, $$lcssa261 = 0, $$lcssa357 = 0, $$lcssa416 = 0, $$lcssa418 = 0, $$ph = 0, $$ph345 = 0, $$ph346 = 0, $$phi$trans$insert = 0, $$phi$trans$insert296 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i128 = 0, $$pre$i$i$i160 = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i53 = 0, $$pre$i$i$i94 = 0, $$pre$i3$i$i100282$ph = 0, $$pre$i3$i$i100282306 = 0, $$pre$i3$i$i100382 = 0, $$pre$i3$i$i134 = 0, $$pre$i3$i$i166 = 0, $$pre$i3$i$i166275 = 0, $$pre$i3$i$i166277 = 0, $$pre$i3$i$i191290 = 0, $$pre$i3$i$i191291 = 0, $$pre$i3$i$i191391 = 0, $$pre$i3$i$i59 = 0, $$pre$i3$i$i59300 = 0, $$pre$i3$i$i59302 = 0, $$pre279 = 0, $$pre281 = 0, $$pre284 = 0, $$pre285 = 0, $$pre286 = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $$pre293 = 0, $$pre294 = 0, $$pre295 = 0, $$pre297 = 0, $$pre298 = 0, $$pre299 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa417 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0397 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0399 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i129 = 0, $phitmp$i$i$i161 = 0, $phitmp$i$i$i186 = 0, $phitmp$i$i$i33 = 0, $phitmp$i$i$i54 = 0, $phitmp$i$i$i95 = 0, $phitmp$i4$i$i101 = 0, $phitmp$i4$i$i167 = 0, $phitmp$i4$i$i192 = 0, $phitmp$i4$i$i60 = 0, $switch = 0, $tmp$i$i103 = 0, $tmp$i$i169 = 0, $tmp$i$i194 = 0, $tmp$i$i62 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 496 | 0;
 $__gbuf = sp + 96 | 0;
 $__gb = sp + 88 | 0;
 $__gn = sp + 80 | 0;
 $__ge = sp + 76 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 72 | 0;
 $__ts = sp + 68 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb >> 2] = $1;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 HEAP32[$__gn >> 2] = $__gbuf;
 $3 = $__gbuf + 400 | 0;
 HEAP32[$__ge >> 2] = $3;
 HEAP32[$__grp >> 2] = 0;
 $4 = $__grp + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $__grp + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$__sym >> 2] = 0;
 $6 = $__sym + 4 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $__sym + 8 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$__psn >> 2] = 0;
 $8 = $__psn + 4 | 0;
 HEAP32[$8 >> 2] = 0;
 $9 = $__psn + 8 | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$__nsn >> 2] = 0;
 $10 = $__nsn + 4 | 0;
 HEAP32[$10 >> 2] = 0;
 $11 = $__nsn + 8 | 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$__spaces >> 2] = 0;
 $12 = $__spaces + 4 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $__spaces + 8 | 0;
 HEAP32[$13 >> 2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(487, $__intl | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__psn | 0, $__nsn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
 $14 = __THREW__;
 __THREW__ = 0;
 $15 = $14 & 1;
 L1 : do {
  if ($15) {
   $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $78 = tempRet0;
   $lpad$phi$index = $77;
   $lpad$phi$index8 = $78;
  } else {
   $16 = HEAP32[$__wb >> 2] | 0;
   HEAP32[$__wn >> 2] = $16;
   $17 = $__psn + 4 | 0;
   $18 = $__nsn + 4 | 0;
   $19 = $__nsn + 8 | 0;
   $20 = $__psn + 8 | 0;
   $21 = $__flags & 512;
   $22 = ($21 | 0) != 0;
   $23 = $__sym + 8 | 0;
   $24 = $__sym + 4 | 0;
   $25 = $__spaces + 4 | 0;
   $26 = $__spaces + 8 | 0;
   $27 = $__pat + 3 | 0;
   $28 = $__grp + 4 | 0;
   $863 = $__gbuf;
   $__p$0397 = 0;
   $__trailing_sign$0399 = 0;
   L4 : while (1) {
    $29 = HEAP32[$__b >> 2] | 0;
    $30 = ($29 | 0) == (0 | 0);
    do {
     if ($30) {
      $864 = 1;
     } else {
      $31 = $29 + 12 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      $33 = $29 + 16 | 0;
      $34 = HEAP32[$33 >> 2] | 0;
      $35 = ($32 | 0) == ($34 | 0);
      if ($35) {
       $36 = HEAP32[$29 >> 2] | 0;
       $37 = $36 + 36 | 0;
       $38 = HEAP32[$37 >> 2] | 0;
       __THREW__ = 0;
       $39 = (tempInt = invoke_ii($38 | 0, $29 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $40 = __THREW__;
       __THREW__ = 0;
       $41 = $40 & 1;
       if ($41) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i30 = $39;
       }
      } else {
       $42 = HEAP32[$32 >> 2] | 0;
       $$0$i$i$i$i30 = $42;
      }
      $43 = ($$0$i$i$i$i30 | 0) == -1;
      if ($43) {
       HEAP32[$__b >> 2] = 0;
       $864 = 1;
       break;
      } else {
       $$pre$i$i$i32 = HEAP32[$__b >> 2] | 0;
       $phitmp$i$i$i33 = ($$pre$i$i$i32 | 0) == (0 | 0);
       $864 = $phitmp$i$i$i33;
       break;
      }
     }
    } while (0);
    $44 = HEAP32[$__e >> 2] | 0;
    $45 = ($44 | 0) == (0 | 0);
    do {
     if ($45) {
      label = 16;
     } else {
      $46 = $44 + 12 | 0;
      $47 = HEAP32[$46 >> 2] | 0;
      $48 = $44 + 16 | 0;
      $49 = HEAP32[$48 >> 2] | 0;
      $50 = ($47 | 0) == ($49 | 0);
      if ($50) {
       $51 = HEAP32[$44 >> 2] | 0;
       $52 = $51 + 36 | 0;
       $53 = HEAP32[$52 >> 2] | 0;
       __THREW__ = 0;
       $54 = (tempInt = invoke_ii($53 | 0, $44 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $55 = __THREW__;
       __THREW__ = 0;
       $56 = $55 & 1;
       if ($56) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i36 = $54;
       }
      } else {
       $57 = HEAP32[$47 >> 2] | 0;
       $$0$i$i1$i$i36 = $57;
      }
      $58 = ($$0$i$i1$i$i36 | 0) == -1;
      if ($58) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($864) {
        $865 = $44;
        break;
       } else {
        $$lcssa357 = $863;
        $__trailing_sign$0$lcssa = $__trailing_sign$0399;
        label = 244;
        break L4;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($864) {
      $$lcssa357 = $863;
      $__trailing_sign$0$lcssa = $__trailing_sign$0399;
      label = 244;
      break;
     } else {
      $865 = 0;
     }
    }
    $59 = $__pat + $__p$0397 | 0;
    $60 = HEAP8[$59 >> 0] | 0;
    $61 = $60 << 24 >> 24;
    L28 : do {
     switch ($61 | 0) {
     case 1:
      {
       $cond = ($__p$0397 | 0) == 3;
       if ($cond) {
        $866 = $863;
        $__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        $86 = HEAP32[$__b >> 2] | 0;
        $87 = $86 + 12 | 0;
        $88 = HEAP32[$87 >> 2] | 0;
        $89 = $86 + 16 | 0;
        $90 = HEAP32[$89 >> 2] | 0;
        $91 = ($88 | 0) == ($90 | 0);
        if ($91) {
         $92 = HEAP32[$86 >> 2] | 0;
         $93 = $92 + 36 | 0;
         $94 = HEAP32[$93 >> 2] | 0;
         __THREW__ = 0;
         $95 = (tempInt = invoke_ii($94 | 0, $86 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $96 = __THREW__;
         __THREW__ = 0;
         $97 = $96 & 1;
         if ($97) {
          label = 26;
          break L4;
         } else {
          $$0$i$i45 = $95;
         }
        } else {
         $98 = HEAP32[$88 >> 2] | 0;
         $$0$i$i45 = $98;
        }
        $99 = HEAP32[$__ct >> 2] | 0;
        $100 = $99 + 12 | 0;
        $101 = HEAP32[$100 >> 2] | 0;
        __THREW__ = 0;
        $102 = (tempInt = invoke_iiii($101 | 0, $__ct | 0, 8192, $$0$i$i45 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $103 = __THREW__;
        __THREW__ = 0;
        $104 = $103 & 1;
        if ($104) {
         label = 26;
         break L4;
        }
        if (!$102) {
         label = 42;
         break L4;
        }
        $105 = HEAP32[$__b >> 2] | 0;
        $106 = $105 + 12 | 0;
        $107 = HEAP32[$106 >> 2] | 0;
        $108 = $105 + 16 | 0;
        $109 = HEAP32[$108 >> 2] | 0;
        $110 = ($107 | 0) == ($109 | 0);
        if ($110) {
         $111 = HEAP32[$105 >> 2] | 0;
         $112 = $111 + 40 | 0;
         $113 = HEAP32[$112 >> 2] | 0;
         __THREW__ = 0;
         $114 = (tempInt = invoke_ii($113 | 0, $105 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $115 = __THREW__;
         __THREW__ = 0;
         $116 = $115 & 1;
         if ($116) {
          label = 26;
          break L4;
         } else {
          $$0$i$i49 = $114;
         }
        } else {
         $117 = $107 + 4 | 0;
         HEAP32[$106 >> 2] = $117;
         $118 = HEAP32[$107 >> 2] | 0;
         $$0$i$i49 = $118;
        }
        __THREW__ = 0;
        invoke_vii(488, $__spaces | 0, $$0$i$i49 | 0), asyncState ? abort(-12) | 0 : 0;
        $119 = __THREW__;
        __THREW__ = 0;
        $120 = $119 & 1;
        if ($120) {
         label = 26;
         break L4;
        } else {
         $$pre$i3$i$i59 = $865;
         $140 = $865;
         label = 44;
        }
       }
       break;
      }
     case 0:
      {
       $123 = ($__p$0397 | 0) == 3;
       if ($123) {
        $866 = $863;
        $__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        $$pre$i3$i$i59 = $865;
        $140 = $865;
        label = 44;
       }
       break;
      }
     case 3:
      {
       $190 = HEAP8[$__psn >> 0] | 0;
       $191 = $190 & 1;
       $192 = $191 << 24 >> 24 == 0;
       $193 = HEAP32[$17 >> 2] | 0;
       $194 = $190 & 255;
       $195 = $194 >>> 1;
       $196 = $192 ? $195 : $193;
       $197 = HEAP8[$__nsn >> 0] | 0;
       $198 = $197 & 1;
       $199 = $198 << 24 >> 24 == 0;
       $200 = HEAP32[$18 >> 2] | 0;
       $201 = $197 & 255;
       $202 = $201 >>> 1;
       $203 = $199 ? $202 : $200;
       $204 = 0 - $203 | 0;
       $205 = ($196 | 0) == ($204 | 0);
       if ($205) {
        $866 = $863;
        $__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        $206 = ($196 | 0) == 0;
        if ($206) {
         $248 = HEAP32[$__b >> 2] | 0;
         $249 = $248 + 12 | 0;
         $250 = HEAP32[$249 >> 2] | 0;
         $251 = $248 + 16 | 0;
         $252 = HEAP32[$251 >> 2] | 0;
         $253 = ($250 | 0) == ($252 | 0);
         if ($253) {
          $254 = HEAP32[$248 >> 2] | 0;
          $255 = $254 + 36 | 0;
          $256 = HEAP32[$255 >> 2] | 0;
          __THREW__ = 0;
          $257 = (tempInt = invoke_ii($256 | 0, $248 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $258 = __THREW__;
          __THREW__ = 0;
          $259 = $258 & 1;
          if ($259) {
           label = 26;
           break L4;
          }
          $$pre299 = HEAP8[$__nsn >> 0] | 0;
          $$0$i$i110 = $257;
          $262 = $$pre299;
         } else {
          $260 = HEAP32[$250 >> 2] | 0;
          $$0$i$i110 = $260;
          $262 = $197;
         }
         $261 = $262 & 1;
         $263 = $261 << 24 >> 24 == 0;
         $264 = HEAP32[$19 >> 2] | 0;
         $265 = $263 ? $18 : $264;
         $266 = HEAP32[$265 >> 2] | 0;
         $267 = ($$0$i$i110 | 0) == ($266 | 0);
         if (!$267) {
          $866 = $863;
          $__trailing_sign$1 = $__trailing_sign$0399;
          break L28;
         }
         $268 = HEAP32[$__b >> 2] | 0;
         $269 = $268 + 12 | 0;
         $270 = HEAP32[$269 >> 2] | 0;
         $271 = $268 + 16 | 0;
         $272 = HEAP32[$271 >> 2] | 0;
         $273 = ($270 | 0) == ($272 | 0);
         if ($273) {
          $274 = HEAP32[$268 >> 2] | 0;
          $275 = $274 + 40 | 0;
          $276 = HEAP32[$275 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($276 | 0, $268 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $277 = __THREW__;
          __THREW__ = 0;
          $278 = $277 & 1;
          if ($278) {
           label = 26;
           break L4;
          }
         } else {
          $279 = $270 + 4 | 0;
          HEAP32[$269 >> 2] = $279;
         }
         HEAP8[$__neg >> 0] = 1;
         $280 = HEAP8[$__nsn >> 0] | 0;
         $281 = $280 & 1;
         $282 = $281 << 24 >> 24 == 0;
         $283 = HEAP32[$18 >> 2] | 0;
         $284 = $280 & 255;
         $285 = $284 >>> 1;
         $286 = $282 ? $285 : $283;
         $287 = $286 >>> 0 > 1;
         $__nsn$__trailing_sign$0 = $287 ? $__nsn : $__trailing_sign$0399;
         $866 = $863;
         $__trailing_sign$1 = $__nsn$__trailing_sign$0;
         break L28;
        }
        $207 = ($203 | 0) == 0;
        $208 = HEAP32[$__b >> 2] | 0;
        $209 = $208 + 12 | 0;
        $210 = HEAP32[$209 >> 2] | 0;
        $211 = $208 + 16 | 0;
        $212 = HEAP32[$211 >> 2] | 0;
        $213 = ($210 | 0) == ($212 | 0);
        if ($207) {
         if ($213) {
          $214 = HEAP32[$208 >> 2] | 0;
          $215 = $214 + 36 | 0;
          $216 = HEAP32[$215 >> 2] | 0;
          __THREW__ = 0;
          $217 = (tempInt = invoke_ii($216 | 0, $208 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $218 = __THREW__;
          __THREW__ = 0;
          $219 = $218 & 1;
          if ($219) {
           label = 26;
           break L4;
          }
          $$pre298 = HEAP8[$__psn >> 0] | 0;
          $$0$i$i89 = $217;
          $222 = $$pre298;
         } else {
          $220 = HEAP32[$210 >> 2] | 0;
          $$0$i$i89 = $220;
          $222 = $190;
         }
         $221 = $222 & 1;
         $223 = $221 << 24 >> 24 == 0;
         $224 = HEAP32[$20 >> 2] | 0;
         $225 = $223 ? $17 : $224;
         $226 = HEAP32[$225 >> 2] | 0;
         $227 = ($$0$i$i89 | 0) == ($226 | 0);
         if (!$227) {
          HEAP8[$__neg >> 0] = 1;
          $866 = $863;
          $__trailing_sign$1 = $__trailing_sign$0399;
          break L28;
         }
         $228 = HEAP32[$__b >> 2] | 0;
         $229 = $228 + 12 | 0;
         $230 = HEAP32[$229 >> 2] | 0;
         $231 = $228 + 16 | 0;
         $232 = HEAP32[$231 >> 2] | 0;
         $233 = ($230 | 0) == ($232 | 0);
         if ($233) {
          $234 = HEAP32[$228 >> 2] | 0;
          $235 = $234 + 40 | 0;
          $236 = HEAP32[$235 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($236 | 0, $228 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $237 = __THREW__;
          __THREW__ = 0;
          $238 = $237 & 1;
          if ($238) {
           label = 26;
           break L4;
          }
         } else {
          $239 = $230 + 4 | 0;
          HEAP32[$229 >> 2] = $239;
         }
         $240 = HEAP8[$__psn >> 0] | 0;
         $241 = $240 & 1;
         $242 = $241 << 24 >> 24 == 0;
         $243 = HEAP32[$17 >> 2] | 0;
         $244 = $240 & 255;
         $245 = $244 >>> 1;
         $246 = $242 ? $245 : $243;
         $247 = $246 >>> 0 > 1;
         $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0399;
         $866 = $863;
         $__trailing_sign$1 = $__psn$__trailing_sign$0;
         break L28;
        }
        if ($213) {
         $288 = HEAP32[$208 >> 2] | 0;
         $289 = $288 + 36 | 0;
         $290 = HEAP32[$289 >> 2] | 0;
         __THREW__ = 0;
         $291 = (tempInt = invoke_ii($290 | 0, $208 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $292 = __THREW__;
         __THREW__ = 0;
         $293 = $292 & 1;
         if ($293) {
          label = 26;
          break L4;
         }
         $$pre293 = HEAP8[$__psn >> 0] | 0;
         $$pre294 = HEAP32[$__b >> 2] | 0;
         $$phi$trans$insert = $$pre294 + 12 | 0;
         $$pre295 = HEAP32[$$phi$trans$insert >> 2] | 0;
         $$phi$trans$insert296 = $$pre294 + 16 | 0;
         $$pre297 = HEAP32[$$phi$trans$insert296 >> 2] | 0;
         $$0$i$i122 = $291;
         $296 = $$pre293;
         $303 = $$pre294;
         $305 = $$pre295;
         $306 = $$pre297;
        } else {
         $294 = HEAP32[$210 >> 2] | 0;
         $$0$i$i122 = $294;
         $296 = $190;
         $303 = $208;
         $305 = $210;
         $306 = $212;
        }
        $295 = $296 & 1;
        $297 = $295 << 24 >> 24 == 0;
        $298 = HEAP32[$20 >> 2] | 0;
        $299 = $297 ? $17 : $298;
        $300 = HEAP32[$299 >> 2] | 0;
        $301 = ($$0$i$i122 | 0) == ($300 | 0);
        $302 = $303 + 12 | 0;
        $304 = ($305 | 0) == ($306 | 0);
        if ($301) {
         if ($304) {
          $307 = HEAP32[$303 >> 2] | 0;
          $308 = $307 + 40 | 0;
          $309 = HEAP32[$308 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($309 | 0, $303 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $310 = __THREW__;
          __THREW__ = 0;
          $311 = $310 & 1;
          if ($311) {
           label = 26;
           break L4;
          }
         } else {
          $312 = $305 + 4 | 0;
          HEAP32[$302 >> 2] = $312;
         }
         $313 = HEAP8[$__psn >> 0] | 0;
         $314 = $313 & 1;
         $315 = $314 << 24 >> 24 == 0;
         $316 = HEAP32[$17 >> 2] | 0;
         $317 = $313 & 255;
         $318 = $317 >>> 1;
         $319 = $315 ? $318 : $316;
         $320 = $319 >>> 0 > 1;
         $__psn$__trailing_sign$010 = $320 ? $__psn : $__trailing_sign$0399;
         $866 = $863;
         $__trailing_sign$1 = $__psn$__trailing_sign$010;
         break L28;
        }
        if ($304) {
         $321 = HEAP32[$303 >> 2] | 0;
         $322 = $321 + 36 | 0;
         $323 = HEAP32[$322 >> 2] | 0;
         __THREW__ = 0;
         $324 = (tempInt = invoke_ii($323 | 0, $303 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $325 = __THREW__;
         __THREW__ = 0;
         $326 = $325 & 1;
         if ($326) {
          label = 26;
          break L4;
         } else {
          $$0$i$i144 = $324;
         }
        } else {
         $327 = HEAP32[$305 >> 2] | 0;
         $$0$i$i144 = $327;
        }
        $328 = HEAP8[$__nsn >> 0] | 0;
        $329 = $328 & 1;
        $330 = $329 << 24 >> 24 == 0;
        $331 = HEAP32[$19 >> 2] | 0;
        $332 = $330 ? $18 : $331;
        $333 = HEAP32[$332 >> 2] | 0;
        $334 = ($$0$i$i144 | 0) == ($333 | 0);
        if (!$334) {
         label = 107;
         break L4;
        }
        $335 = HEAP32[$__b >> 2] | 0;
        $336 = $335 + 12 | 0;
        $337 = HEAP32[$336 >> 2] | 0;
        $338 = $335 + 16 | 0;
        $339 = HEAP32[$338 >> 2] | 0;
        $340 = ($337 | 0) == ($339 | 0);
        if ($340) {
         $341 = HEAP32[$335 >> 2] | 0;
         $342 = $341 + 40 | 0;
         $343 = HEAP32[$342 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($343 | 0, $335 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $344 = __THREW__;
         __THREW__ = 0;
         $345 = $344 & 1;
         if ($345) {
          label = 26;
          break L4;
         }
        } else {
         $346 = $337 + 4 | 0;
         HEAP32[$336 >> 2] = $346;
        }
        HEAP8[$__neg >> 0] = 1;
        $347 = HEAP8[$__nsn >> 0] | 0;
        $348 = $347 & 1;
        $349 = $348 << 24 >> 24 == 0;
        $350 = HEAP32[$18 >> 2] | 0;
        $351 = $347 & 255;
        $352 = $351 >>> 1;
        $353 = $349 ? $352 : $350;
        $354 = $353 >>> 0 > 1;
        $__nsn$__trailing_sign$011 = $354 ? $__nsn : $__trailing_sign$0399;
        $866 = $863;
        $__trailing_sign$1 = $__nsn$__trailing_sign$011;
       }
       break;
      }
     case 2:
      {
       $357 = ($__trailing_sign$0399 | 0) != (0 | 0);
       $358 = $__p$0397 >>> 0 < 2;
       $or$cond = $358 | $357;
       if (!$or$cond) {
        $359 = ($__p$0397 | 0) == 2;
        $360 = HEAP8[$27 >> 0] | 0;
        $361 = $360 << 24 >> 24 != 0;
        $362 = $359 & $361;
        $brmerge = $22 | $362;
        if (!$brmerge) {
         $866 = $863;
         $__trailing_sign$1 = 0;
         break L28;
        }
       }
       $363 = HEAP8[$__sym >> 0] | 0;
       $364 = $363 & 1;
       $365 = $364 << 24 >> 24 == 0;
       $366 = HEAP32[$23 >> 2] | 0;
       $367 = $365 ? $24 : $366;
       $368 = $367;
       $369 = ($__p$0397 | 0) == 0;
       L97 : do {
        if ($369) {
         $$ph = $366;
         $$ph345 = $363;
         $$ph346 = $368;
        } else {
         $380 = $__p$0397 + -1 | 0;
         $381 = $__pat + $380 | 0;
         $382 = HEAP8[$381 >> 0] | 0;
         $switch = ($382 & 255) < 2;
         if ($switch) {
          $383 = $363 & 1;
          $384 = $383 << 24 >> 24 == 0;
          $385 = HEAP32[$24 >> 2] | 0;
          $386 = $363 & 255;
          $387 = $386 >>> 1;
          $388 = $384 ? $24 : $366;
          $389 = $384 ? $387 : $385;
          $390 = $388 + ($389 << 2) | 0;
          $391 = ($367 | 0) == ($390 | 0);
          L100 : do {
           if ($391) {
            $412 = $363;
            $415 = $366;
            $418 = $368;
           } else {
            $393 = $367;
            $868 = $368;
            while (1) {
             $392 = HEAP32[$393 >> 2] | 0;
             $394 = HEAP32[$__ct >> 2] | 0;
             $395 = $394 + 12 | 0;
             $396 = HEAP32[$395 >> 2] | 0;
             __THREW__ = 0;
             $397 = (tempInt = invoke_iiii($396 | 0, $__ct | 0, 8192, $392 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $398 = __THREW__;
             __THREW__ = 0;
             $399 = $398 & 1;
             if ($399) {
              label = 23;
              break L4;
             }
             if (!$397) {
              $$lcssa418 = $868;
              break;
             }
             $400 = $393 + 4 | 0;
             $401 = $400;
             $$pre284 = HEAP8[$__sym >> 0] | 0;
             $$pre285 = HEAP32[$23 >> 2] | 0;
             $402 = $$pre284 & 1;
             $403 = $402 << 24 >> 24 == 0;
             $404 = HEAP32[$24 >> 2] | 0;
             $405 = $$pre284 & 255;
             $406 = $405 >>> 1;
             $407 = $403 ? $24 : $$pre285;
             $408 = $403 ? $406 : $404;
             $409 = $407 + ($408 << 2) | 0;
             $410 = ($400 | 0) == ($409 | 0);
             if ($410) {
              $412 = $$pre284;
              $415 = $$pre285;
              $418 = $401;
              break L100;
             } else {
              $393 = $400;
              $868 = $401;
             }
            }
            $$pre286 = HEAP8[$__sym >> 0] | 0;
            $$pre287 = HEAP32[$23 >> 2] | 0;
            $412 = $$pre286;
            $415 = $$pre287;
            $418 = $$lcssa418;
           }
          } while (0);
          $411 = $412 & 1;
          $413 = $411 << 24 >> 24 == 0;
          $414 = $413 ? $24 : $415;
          $416 = $414;
          $417 = $418 - $416 | 0;
          $419 = $417 >> 2;
          $420 = HEAP8[$__spaces >> 0] | 0;
          $421 = $420 & 1;
          $422 = $421 << 24 >> 24 == 0;
          $423 = HEAP32[$25 >> 2] | 0;
          $424 = $420 & 255;
          $425 = $424 >>> 1;
          $426 = $422 ? $425 : $423;
          $427 = $426 >>> 0 < $419 >>> 0;
          if ($427) {
           $$ph = $415;
           $$ph345 = $412;
           $$ph346 = $416;
          } else {
           $428 = HEAP32[$26 >> 2] | 0;
           $429 = $422 ? $25 : $428;
           $430 = $429 + ($426 << 2) | 0;
           $431 = ($419 | 0) == 0;
           if ($431) {
            $$ph = $415;
            $$ph345 = $412;
            $$ph346 = $418;
           } else {
            $$sum = $426 - $419 | 0;
            $432 = $429 + ($$sum << 2) | 0;
            $$in386 = $414;
            $434 = $432;
            while (1) {
             $433 = HEAP32[$434 >> 2] | 0;
             $435 = HEAP32[$$in386 >> 2] | 0;
             $436 = ($433 | 0) == ($435 | 0);
             if (!$436) {
              $$ph = $415;
              $$ph345 = $412;
              $$ph346 = $416;
              break L97;
             }
             $437 = $434 + 4 | 0;
             $438 = $$in386 + 4 | 0;
             $439 = ($437 | 0) == ($430 | 0);
             if ($439) {
              $$ph = $415;
              $$ph345 = $412;
              $$ph346 = $418;
              break;
             } else {
              $$in386 = $438;
              $434 = $437;
             }
            }
           }
          }
         } else {
          $$ph = $366;
          $$ph345 = $363;
          $$ph346 = $368;
         }
        }
       } while (0);
       $370 = $$ph345 & 1;
       $371 = $370 << 24 >> 24 == 0;
       $372 = HEAP32[$24 >> 2] | 0;
       $373 = $$ph345 & 255;
       $374 = $373 >>> 1;
       $375 = $371 ? $24 : $$ph;
       $376 = $371 ? $374 : $372;
       $377 = $375 + ($376 << 2) | 0;
       $378 = $$ph346;
       $379 = ($378 | 0) == ($377 | 0);
       L113 : do {
        if ($379) {
         $$lcssa261 = $377;
        } else {
         $$pre$i3$i$i191391 = $865;
         $456 = $865;
         $485 = $378;
         while (1) {
          $440 = HEAP32[$__b >> 2] | 0;
          $441 = ($440 | 0) == (0 | 0);
          do {
           if ($441) {
            $470 = 1;
           } else {
            $442 = $440 + 12 | 0;
            $443 = HEAP32[$442 >> 2] | 0;
            $444 = $440 + 16 | 0;
            $445 = HEAP32[$444 >> 2] | 0;
            $446 = ($443 | 0) == ($445 | 0);
            if ($446) {
             $447 = HEAP32[$440 >> 2] | 0;
             $448 = $447 + 36 | 0;
             $449 = HEAP32[$448 >> 2] | 0;
             __THREW__ = 0;
             $450 = (tempInt = invoke_ii($449 | 0, $440 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $451 = __THREW__;
             __THREW__ = 0;
             $452 = $451 & 1;
             if ($452) {
              label = 22;
              break L4;
             } else {
              $$0$i$i$i$i183 = $450;
             }
            } else {
             $453 = HEAP32[$443 >> 2] | 0;
             $$0$i$i$i$i183 = $453;
            }
            $454 = ($$0$i$i$i$i183 | 0) == -1;
            if ($454) {
             HEAP32[$__b >> 2] = 0;
             $470 = 1;
             break;
            } else {
             $$pre$i$i$i185 = HEAP32[$__b >> 2] | 0;
             $phitmp$i$i$i186 = ($$pre$i$i$i185 | 0) == (0 | 0);
             $470 = $phitmp$i$i$i186;
             break;
            }
           }
          } while (0);
          $455 = ($456 | 0) == (0 | 0);
          do {
           if ($455) {
            $$pre$i3$i$i191291 = $$pre$i3$i$i191391;
            label = 136;
           } else {
            $457 = $456 + 12 | 0;
            $458 = HEAP32[$457 >> 2] | 0;
            $459 = $456 + 16 | 0;
            $460 = HEAP32[$459 >> 2] | 0;
            $461 = ($458 | 0) == ($460 | 0);
            if ($461) {
             $462 = HEAP32[$456 >> 2] | 0;
             $463 = $462 + 36 | 0;
             $464 = HEAP32[$463 >> 2] | 0;
             __THREW__ = 0;
             $465 = (tempInt = invoke_ii($464 | 0, $456 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $466 = __THREW__;
             __THREW__ = 0;
             $467 = $466 & 1;
             if ($467) {
              label = 22;
              break L4;
             } else {
              $$0$i$i1$i$i189 = $465;
             }
            } else {
             $468 = HEAP32[$458 >> 2] | 0;
             $$0$i$i1$i$i189 = $468;
            }
            $469 = ($$0$i$i1$i$i189 | 0) == -1;
            if ($469) {
             HEAP32[$__e >> 2] = 0;
             $$pre$i3$i$i191291 = 0;
             label = 136;
             break;
            } else {
             $phitmp$i4$i$i192 = ($$pre$i3$i$i191391 | 0) == (0 | 0);
             $tmp$i$i194 = $470 ^ $phitmp$i4$i$i192;
             if ($tmp$i$i194) {
              $$pre$i3$i$i191290 = $$pre$i3$i$i191391;
              $869 = $$pre$i3$i$i191391;
              break;
             } else {
              $$lcssa261 = $485;
              break L113;
             }
            }
           }
          } while (0);
          if ((label | 0) == 136) {
           label = 0;
           if ($470) {
            $$lcssa261 = $485;
            break L113;
           } else {
            $$pre$i3$i$i191290 = $$pre$i3$i$i191291;
            $869 = 0;
           }
          }
          $471 = HEAP32[$__b >> 2] | 0;
          $472 = $471 + 12 | 0;
          $473 = HEAP32[$472 >> 2] | 0;
          $474 = $471 + 16 | 0;
          $475 = HEAP32[$474 >> 2] | 0;
          $476 = ($473 | 0) == ($475 | 0);
          if ($476) {
           $477 = HEAP32[$471 >> 2] | 0;
           $478 = $477 + 36 | 0;
           $479 = HEAP32[$478 >> 2] | 0;
           __THREW__ = 0;
           $480 = (tempInt = invoke_ii($479 | 0, $471 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $481 = __THREW__;
           __THREW__ = 0;
           $482 = $481 & 1;
           if ($482) {
            label = 22;
            break L4;
           } else {
            $$0$i$i179 = $480;
           }
          } else {
           $483 = HEAP32[$473 >> 2] | 0;
           $$0$i$i179 = $483;
          }
          $484 = HEAP32[$485 >> 2] | 0;
          $486 = ($$0$i$i179 | 0) == ($484 | 0);
          if (!$486) {
           $$lcssa261 = $485;
           break L113;
          }
          $487 = HEAP32[$__b >> 2] | 0;
          $488 = $487 + 12 | 0;
          $489 = HEAP32[$488 >> 2] | 0;
          $490 = $487 + 16 | 0;
          $491 = HEAP32[$490 >> 2] | 0;
          $492 = ($489 | 0) == ($491 | 0);
          if ($492) {
           $493 = HEAP32[$487 >> 2] | 0;
           $494 = $493 + 40 | 0;
           $495 = HEAP32[$494 >> 2] | 0;
           __THREW__ = 0;
           (tempInt = invoke_ii($495 | 0, $487 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $496 = __THREW__;
           __THREW__ = 0;
           $497 = $496 & 1;
           if ($497) {
            label = 22;
            break L4;
           }
          } else {
           $498 = $489 + 4 | 0;
           HEAP32[$488 >> 2] = $498;
          }
          $499 = $485 + 4 | 0;
          $$pre288 = HEAP8[$__sym >> 0] | 0;
          $$pre289 = HEAP32[$23 >> 2] | 0;
          $500 = $$pre288 & 1;
          $501 = $500 << 24 >> 24 == 0;
          $502 = HEAP32[$24 >> 2] | 0;
          $503 = $$pre288 & 255;
          $504 = $503 >>> 1;
          $505 = $501 ? $24 : $$pre289;
          $506 = $501 ? $504 : $502;
          $507 = $505 + ($506 << 2) | 0;
          $508 = ($499 | 0) == ($507 | 0);
          if ($508) {
           $$lcssa261 = $507;
           break;
          } else {
           $$pre$i3$i$i191391 = $$pre$i3$i$i191290;
           $456 = $869;
           $485 = $499;
          }
         }
        }
       } while (0);
       if ($22) {
        $509 = HEAP8[$__sym >> 0] | 0;
        $510 = $509 & 1;
        $511 = $510 << 24 >> 24 == 0;
        $512 = HEAP32[$23 >> 2] | 0;
        $513 = HEAP32[$24 >> 2] | 0;
        $514 = $509 & 255;
        $515 = $514 >>> 1;
        $516 = $511 ? $24 : $512;
        $517 = $511 ? $515 : $513;
        $518 = $516 + ($517 << 2) | 0;
        $519 = ($$lcssa261 | 0) == ($518 | 0);
        if ($519) {
         $866 = $863;
         $__trailing_sign$1 = $__trailing_sign$0399;
        } else {
         label = 148;
         break L4;
        }
       } else {
        $866 = $863;
        $__trailing_sign$1 = $__trailing_sign$0399;
       }
       break;
      }
     case 4:
      {
       $62 = HEAP32[$__ts >> 2] | 0;
       $$pre$i3$i$i166 = $865;
       $538 = $865;
       $592 = $863;
       $__ng$0 = 0;
       L150 : while (1) {
        $522 = HEAP32[$__b >> 2] | 0;
        $523 = ($522 | 0) == (0 | 0);
        do {
         if ($523) {
          $552 = 1;
         } else {
          $524 = $522 + 12 | 0;
          $525 = HEAP32[$524 >> 2] | 0;
          $526 = $522 + 16 | 0;
          $527 = HEAP32[$526 >> 2] | 0;
          $528 = ($525 | 0) == ($527 | 0);
          if ($528) {
           $529 = HEAP32[$522 >> 2] | 0;
           $530 = $529 + 36 | 0;
           $531 = HEAP32[$530 >> 2] | 0;
           __THREW__ = 0;
           $532 = (tempInt = invoke_ii($531 | 0, $522 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $533 = __THREW__;
           __THREW__ = 0;
           $534 = $533 & 1;
           if ($534) {
            label = 25;
            break L4;
           } else {
            $$0$i$i$i$i158 = $532;
           }
          } else {
           $535 = HEAP32[$525 >> 2] | 0;
           $$0$i$i$i$i158 = $535;
          }
          $536 = ($$0$i$i$i$i158 | 0) == -1;
          if ($536) {
           HEAP32[$__b >> 2] = 0;
           $552 = 1;
           break;
          } else {
           $$pre$i$i$i160 = HEAP32[$__b >> 2] | 0;
           $phitmp$i$i$i161 = ($$pre$i$i$i160 | 0) == (0 | 0);
           $552 = $phitmp$i$i$i161;
           break;
          }
         }
        } while (0);
        $537 = ($538 | 0) == (0 | 0);
        do {
         if ($537) {
          $$pre$i3$i$i166275 = $$pre$i3$i$i166;
          label = 162;
         } else {
          $539 = $538 + 12 | 0;
          $540 = HEAP32[$539 >> 2] | 0;
          $541 = $538 + 16 | 0;
          $542 = HEAP32[$541 >> 2] | 0;
          $543 = ($540 | 0) == ($542 | 0);
          if ($543) {
           $544 = HEAP32[$538 >> 2] | 0;
           $545 = $544 + 36 | 0;
           $546 = HEAP32[$545 >> 2] | 0;
           __THREW__ = 0;
           $547 = (tempInt = invoke_ii($546 | 0, $538 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $548 = __THREW__;
           __THREW__ = 0;
           $549 = $548 & 1;
           if ($549) {
            label = 25;
            break L4;
           } else {
            $$0$i$i1$i$i164 = $547;
           }
          } else {
           $550 = HEAP32[$540 >> 2] | 0;
           $$0$i$i1$i$i164 = $550;
          }
          $551 = ($$0$i$i1$i$i164 | 0) == -1;
          if ($551) {
           HEAP32[$__e >> 2] = 0;
           $$pre$i3$i$i166275 = 0;
           label = 162;
           break;
          } else {
           $phitmp$i4$i$i167 = ($$pre$i3$i$i166 | 0) == (0 | 0);
           $tmp$i$i169 = $552 ^ $phitmp$i4$i$i167;
           if ($tmp$i$i169) {
            $$pre$i3$i$i166277 = $$pre$i3$i$i166;
            $870 = $$pre$i3$i$i166;
            break;
           } else {
            $$lcssa416 = $592;
            $$pre$i3$i$i134 = $$pre$i3$i$i166;
            $__ng$0$lcssa417 = $__ng$0;
            break L150;
           }
          }
         }
        } while (0);
        if ((label | 0) == 162) {
         label = 0;
         if ($552) {
          $$lcssa416 = $592;
          $$pre$i3$i$i134 = $$pre$i3$i$i166275;
          $__ng$0$lcssa417 = $__ng$0;
          break;
         } else {
          $$pre$i3$i$i166277 = $$pre$i3$i$i166275;
          $870 = 0;
         }
        }
        $553 = HEAP32[$__b >> 2] | 0;
        $554 = $553 + 12 | 0;
        $555 = HEAP32[$554 >> 2] | 0;
        $556 = $553 + 16 | 0;
        $557 = HEAP32[$556 >> 2] | 0;
        $558 = ($555 | 0) == ($557 | 0);
        if ($558) {
         $559 = HEAP32[$553 >> 2] | 0;
         $560 = $559 + 36 | 0;
         $561 = HEAP32[$560 >> 2] | 0;
         __THREW__ = 0;
         $562 = (tempInt = invoke_ii($561 | 0, $553 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $563 = __THREW__;
         __THREW__ = 0;
         $564 = $563 & 1;
         if ($564) {
          label = 25;
          break L4;
         } else {
          $$0$i$i155 = $562;
         }
        } else {
         $565 = HEAP32[$555 >> 2] | 0;
         $$0$i$i155 = $565;
        }
        $566 = HEAP32[$__ct >> 2] | 0;
        $567 = $566 + 12 | 0;
        $568 = HEAP32[$567 >> 2] | 0;
        __THREW__ = 0;
        $569 = (tempInt = invoke_iiii($568 | 0, $__ct | 0, 2048, $$0$i$i155 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $570 = __THREW__;
        __THREW__ = 0;
        $571 = $570 & 1;
        if ($571) {
         label = 25;
         break L4;
        }
        if ($569) {
         $572 = HEAP32[$__wn >> 2] | 0;
         $573 = HEAP32[$0 >> 2] | 0;
         $574 = ($572 | 0) == ($573 | 0);
         if ($574) {
          __THREW__ = 0;
          invoke_viii(489, $__wb | 0, $__wn | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
          $575 = __THREW__;
          __THREW__ = 0;
          $576 = $575 & 1;
          if ($576) {
           label = 25;
           break L4;
          }
          $$pre279 = HEAP32[$__wn >> 2] | 0;
          $578 = $$pre279;
         } else {
          $578 = $572;
         }
         $577 = $578 + 4 | 0;
         HEAP32[$__wn >> 2] = $577;
         HEAP32[$578 >> 2] = $$0$i$i155;
         $579 = $__ng$0 + 1 | 0;
         $871 = $592;
         $__ng$1 = $579;
        } else {
         $580 = HEAP8[$__grp >> 0] | 0;
         $581 = $580 & 1;
         $582 = $581 << 24 >> 24 == 0;
         $583 = HEAP32[$28 >> 2] | 0;
         $584 = $580 & 255;
         $585 = $584 >>> 1;
         $586 = $582 ? $585 : $583;
         $587 = ($586 | 0) != 0;
         $588 = ($__ng$0 | 0) != 0;
         $or$cond7 = $588 & $587;
         $589 = ($$0$i$i155 | 0) == ($62 | 0);
         $or$cond13 = $589 & $or$cond7;
         if (!$or$cond13) {
          $$lcssa416 = $592;
          $$pre$i3$i$i134 = $$pre$i3$i$i166277;
          $__ng$0$lcssa417 = $__ng$0;
          break;
         }
         $590 = HEAP32[$__ge >> 2] | 0;
         $591 = ($592 | 0) == ($590 | 0);
         if ($591) {
          __THREW__ = 0;
          invoke_viii(483, $__gb | 0, $__gn | 0, $__ge | 0), asyncState ? abort(-12) | 0 : 0;
          $593 = __THREW__;
          __THREW__ = 0;
          $594 = $593 & 1;
          if ($594) {
           label = 25;
           break L4;
          }
          $$pre = HEAP32[$__gn >> 2] | 0;
          $596 = $$pre;
         } else {
          $596 = $592;
         }
         $595 = $596 + 4 | 0;
         HEAP32[$__gn >> 2] = $595;
         HEAP32[$596 >> 2] = $__ng$0;
         $871 = $595;
         $__ng$1 = 0;
        }
        $597 = HEAP32[$__b >> 2] | 0;
        $598 = $597 + 12 | 0;
        $599 = HEAP32[$598 >> 2] | 0;
        $600 = $597 + 16 | 0;
        $601 = HEAP32[$600 >> 2] | 0;
        $602 = ($599 | 0) == ($601 | 0);
        if ($602) {
         $603 = HEAP32[$597 >> 2] | 0;
         $604 = $603 + 40 | 0;
         $605 = HEAP32[$604 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($605 | 0, $597 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $606 = __THREW__;
         __THREW__ = 0;
         $607 = $606 & 1;
         if ($607) {
          label = 25;
          break L4;
         } else {
          $$pre$i3$i$i166 = $$pre$i3$i$i166277;
          $538 = $870;
          $592 = $871;
          $__ng$0 = $__ng$1;
          continue;
         }
        } else {
         $608 = $599 + 4 | 0;
         HEAP32[$598 >> 2] = $608;
         $$pre$i3$i$i166 = $$pre$i3$i$i166277;
         $538 = $870;
         $592 = $871;
         $__ng$0 = $__ng$1;
         continue;
        }
       }
       $609 = HEAP32[$__gb >> 2] | 0;
       $610 = ($609 | 0) != ($$lcssa416 | 0);
       $611 = ($__ng$0$lcssa417 | 0) != 0;
       $or$cond9 = $611 & $610;
       if ($or$cond9) {
        $612 = HEAP32[$__ge >> 2] | 0;
        $613 = ($$lcssa416 | 0) == ($612 | 0);
        if ($613) {
         __THREW__ = 0;
         invoke_viii(483, $__gb | 0, $__gn | 0, $__ge | 0), asyncState ? abort(-12) | 0 : 0;
         $614 = __THREW__;
         __THREW__ = 0;
         $615 = $614 & 1;
         if ($615) {
          label = 26;
          break L4;
         }
         $$pre281 = HEAP32[$__gn >> 2] | 0;
         $617 = $$pre281;
        } else {
         $617 = $$lcssa416;
        }
        $616 = $617 + 4 | 0;
        HEAP32[$__gn >> 2] = $616;
        HEAP32[$617 >> 2] = $__ng$0$lcssa417;
        $872 = $616;
       } else {
        $872 = $$lcssa416;
       }
       $618 = HEAP32[$__fd >> 2] | 0;
       $619 = ($618 | 0) > 0;
       if ($619) {
        $620 = HEAP32[$__b >> 2] | 0;
        $621 = ($620 | 0) == (0 | 0);
        do {
         if ($621) {
          $873 = 1;
         } else {
          $622 = $620 + 12 | 0;
          $623 = HEAP32[$622 >> 2] | 0;
          $624 = $620 + 16 | 0;
          $625 = HEAP32[$624 >> 2] | 0;
          $626 = ($623 | 0) == ($625 | 0);
          if ($626) {
           $627 = HEAP32[$620 >> 2] | 0;
           $628 = $627 + 36 | 0;
           $629 = HEAP32[$628 >> 2] | 0;
           __THREW__ = 0;
           $630 = (tempInt = invoke_ii($629 | 0, $620 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $631 = __THREW__;
           __THREW__ = 0;
           $632 = $631 & 1;
           if ($632) {
            label = 26;
            break L4;
           } else {
            $$0$i$i$i$i126 = $630;
           }
          } else {
           $633 = HEAP32[$623 >> 2] | 0;
           $$0$i$i$i$i126 = $633;
          }
          $634 = ($$0$i$i$i$i126 | 0) == -1;
          if ($634) {
           HEAP32[$__b >> 2] = 0;
           $873 = 1;
           break;
          } else {
           $$pre$i$i$i128 = HEAP32[$__b >> 2] | 0;
           $phitmp$i$i$i129 = ($$pre$i$i$i128 | 0) == (0 | 0);
           $873 = $phitmp$i$i$i129;
           break;
          }
         }
        } while (0);
        $635 = ($$pre$i3$i$i134 | 0) == (0 | 0);
        do {
         if ($635) {
          label = 200;
         } else {
          $636 = $$pre$i3$i$i134 + 12 | 0;
          $637 = HEAP32[$636 >> 2] | 0;
          $638 = $$pre$i3$i$i134 + 16 | 0;
          $639 = HEAP32[$638 >> 2] | 0;
          $640 = ($637 | 0) == ($639 | 0);
          if ($640) {
           $641 = HEAP32[$$pre$i3$i$i134 >> 2] | 0;
           $642 = $641 + 36 | 0;
           $643 = HEAP32[$642 >> 2] | 0;
           __THREW__ = 0;
           $644 = (tempInt = invoke_ii($643 | 0, $$pre$i3$i$i134 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $645 = __THREW__;
           __THREW__ = 0;
           $646 = $645 & 1;
           if ($646) {
            label = 26;
            break L4;
           } else {
            $$0$i$i1$i$i132 = $644;
           }
          } else {
           $647 = HEAP32[$637 >> 2] | 0;
           $$0$i$i1$i$i132 = $647;
          }
          $648 = ($$0$i$i1$i$i132 | 0) == -1;
          if ($648) {
           HEAP32[$__e >> 2] = 0;
           label = 200;
           break;
          } else {
           if ($873) {
            $874 = $$pre$i3$i$i134;
            break;
           } else {
            label = 206;
            break L4;
           }
          }
         }
        } while (0);
        if ((label | 0) == 200) {
         label = 0;
         if ($873) {
          label = 206;
          break L4;
         } else {
          $874 = 0;
         }
        }
        $649 = HEAP32[$__b >> 2] | 0;
        $650 = $649 + 12 | 0;
        $651 = HEAP32[$650 >> 2] | 0;
        $652 = $649 + 16 | 0;
        $653 = HEAP32[$652 >> 2] | 0;
        $654 = ($651 | 0) == ($653 | 0);
        if ($654) {
         $655 = HEAP32[$649 >> 2] | 0;
         $656 = $655 + 36 | 0;
         $657 = HEAP32[$656 >> 2] | 0;
         __THREW__ = 0;
         $658 = (tempInt = invoke_ii($657 | 0, $649 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $659 = __THREW__;
         __THREW__ = 0;
         $660 = $659 & 1;
         if ($660) {
          label = 26;
          break L4;
         } else {
          $$0$i$i119 = $658;
         }
        } else {
         $661 = HEAP32[$651 >> 2] | 0;
         $$0$i$i119 = $661;
        }
        $662 = HEAP32[$__dp >> 2] | 0;
        $663 = ($$0$i$i119 | 0) == ($662 | 0);
        if (!$663) {
         label = 206;
         break L4;
        }
        $666 = HEAP32[$__b >> 2] | 0;
        $667 = $666 + 12 | 0;
        $668 = HEAP32[$667 >> 2] | 0;
        $669 = $666 + 16 | 0;
        $670 = HEAP32[$669 >> 2] | 0;
        $671 = ($668 | 0) == ($670 | 0);
        if ($671) {
         $672 = HEAP32[$666 >> 2] | 0;
         $673 = $672 + 40 | 0;
         $674 = HEAP32[$673 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($674 | 0, $666 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $675 = __THREW__;
         __THREW__ = 0;
         $676 = $675 & 1;
         if ($676) {
          label = 26;
          break L4;
         }
        } else {
         $677 = $668 + 4 | 0;
         HEAP32[$667 >> 2] = $677;
        }
        $678 = ($618 | 0) > 0;
        if ($678) {
         $$pre$i3$i$i100382 = $874;
         $695 = $874;
         $752 = $618;
         while (1) {
          $679 = HEAP32[$__b >> 2] | 0;
          $680 = ($679 | 0) == (0 | 0);
          do {
           if ($680) {
            $709 = 1;
           } else {
            $681 = $679 + 12 | 0;
            $682 = HEAP32[$681 >> 2] | 0;
            $683 = $679 + 16 | 0;
            $684 = HEAP32[$683 >> 2] | 0;
            $685 = ($682 | 0) == ($684 | 0);
            if ($685) {
             $686 = HEAP32[$679 >> 2] | 0;
             $687 = $686 + 36 | 0;
             $688 = HEAP32[$687 >> 2] | 0;
             __THREW__ = 0;
             $689 = (tempInt = invoke_ii($688 | 0, $679 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $690 = __THREW__;
             __THREW__ = 0;
             $691 = $690 & 1;
             if ($691) {
              label = 24;
              break L4;
             } else {
              $$0$i$i$i$i92 = $689;
             }
            } else {
             $692 = HEAP32[$682 >> 2] | 0;
             $$0$i$i$i$i92 = $692;
            }
            $693 = ($$0$i$i$i$i92 | 0) == -1;
            if ($693) {
             HEAP32[$__b >> 2] = 0;
             $709 = 1;
             break;
            } else {
             $$pre$i$i$i94 = HEAP32[$__b >> 2] | 0;
             $phitmp$i$i$i95 = ($$pre$i$i$i94 | 0) == (0 | 0);
             $709 = $phitmp$i$i$i95;
             break;
            }
           }
          } while (0);
          $694 = ($695 | 0) == (0 | 0);
          do {
           if ($694) {
            $$pre$i3$i$i100282$ph = $$pre$i3$i$i100382;
            label = 224;
           } else {
            $696 = $695 + 12 | 0;
            $697 = HEAP32[$696 >> 2] | 0;
            $698 = $695 + 16 | 0;
            $699 = HEAP32[$698 >> 2] | 0;
            $700 = ($697 | 0) == ($699 | 0);
            if ($700) {
             $701 = HEAP32[$695 >> 2] | 0;
             $702 = $701 + 36 | 0;
             $703 = HEAP32[$702 >> 2] | 0;
             __THREW__ = 0;
             $704 = (tempInt = invoke_ii($703 | 0, $695 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $705 = __THREW__;
             __THREW__ = 0;
             $706 = $705 & 1;
             if ($706) {
              label = 24;
              break L4;
             } else {
              $$0$i$i1$i$i98 = $704;
             }
            } else {
             $707 = HEAP32[$697 >> 2] | 0;
             $$0$i$i1$i$i98 = $707;
            }
            $708 = ($$0$i$i1$i$i98 | 0) == -1;
            if ($708) {
             HEAP32[$__e >> 2] = 0;
             $$pre$i3$i$i100282$ph = 0;
             label = 224;
             break;
            } else {
             $phitmp$i4$i$i101 = ($$pre$i3$i$i100382 | 0) == (0 | 0);
             $tmp$i$i103 = $709 ^ $phitmp$i4$i$i101;
             if ($tmp$i$i103) {
              $$pre$i3$i$i100282306 = $$pre$i3$i$i100382;
              $875 = $$pre$i3$i$i100382;
              break;
             } else {
              label = 231;
              break L4;
             }
            }
           }
          } while (0);
          if ((label | 0) == 224) {
           label = 0;
           if ($709) {
            label = 231;
            break L4;
           } else {
            $$pre$i3$i$i100282306 = $$pre$i3$i$i100282$ph;
            $875 = 0;
           }
          }
          $710 = HEAP32[$__b >> 2] | 0;
          $711 = $710 + 12 | 0;
          $712 = HEAP32[$711 >> 2] | 0;
          $713 = $710 + 16 | 0;
          $714 = HEAP32[$713 >> 2] | 0;
          $715 = ($712 | 0) == ($714 | 0);
          if ($715) {
           $716 = HEAP32[$710 >> 2] | 0;
           $717 = $716 + 36 | 0;
           $718 = HEAP32[$717 >> 2] | 0;
           __THREW__ = 0;
           $719 = (tempInt = invoke_ii($718 | 0, $710 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $720 = __THREW__;
           __THREW__ = 0;
           $721 = $720 & 1;
           if ($721) {
            label = 24;
            break L4;
           } else {
            $$0$i$i86 = $719;
           }
          } else {
           $722 = HEAP32[$712 >> 2] | 0;
           $$0$i$i86 = $722;
          }
          $723 = HEAP32[$__ct >> 2] | 0;
          $724 = $723 + 12 | 0;
          $725 = HEAP32[$724 >> 2] | 0;
          __THREW__ = 0;
          $726 = (tempInt = invoke_iiii($725 | 0, $__ct | 0, 2048, $$0$i$i86 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $727 = __THREW__;
          __THREW__ = 0;
          $728 = $727 & 1;
          if ($728) {
           label = 24;
           break L4;
          }
          if (!$726) {
           label = 231;
           break L4;
          }
          $731 = HEAP32[$__wn >> 2] | 0;
          $732 = HEAP32[$0 >> 2] | 0;
          $733 = ($731 | 0) == ($732 | 0);
          if ($733) {
           __THREW__ = 0;
           invoke_viii(489, $__wb | 0, $__wn | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
           $734 = __THREW__;
           __THREW__ = 0;
           $735 = $734 & 1;
           if ($735) {
            label = 24;
            break L4;
           }
          }
          $736 = HEAP32[$__b >> 2] | 0;
          $737 = $736 + 12 | 0;
          $738 = HEAP32[$737 >> 2] | 0;
          $739 = $736 + 16 | 0;
          $740 = HEAP32[$739 >> 2] | 0;
          $741 = ($738 | 0) == ($740 | 0);
          if ($741) {
           $742 = HEAP32[$736 >> 2] | 0;
           $743 = $742 + 36 | 0;
           $744 = HEAP32[$743 >> 2] | 0;
           __THREW__ = 0;
           $745 = (tempInt = invoke_ii($744 | 0, $736 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $746 = __THREW__;
           __THREW__ = 0;
           $747 = $746 & 1;
           if ($747) {
            label = 24;
            break L4;
           } else {
            $$0$i$i78 = $745;
           }
          } else {
           $748 = HEAP32[$738 >> 2] | 0;
           $$0$i$i78 = $748;
          }
          $749 = HEAP32[$__wn >> 2] | 0;
          $750 = $749 + 4 | 0;
          HEAP32[$__wn >> 2] = $750;
          HEAP32[$749 >> 2] = $$0$i$i78;
          $751 = $752 + -1 | 0;
          HEAP32[$__fd >> 2] = $751;
          $753 = HEAP32[$__b >> 2] | 0;
          $754 = $753 + 12 | 0;
          $755 = HEAP32[$754 >> 2] | 0;
          $756 = $753 + 16 | 0;
          $757 = HEAP32[$756 >> 2] | 0;
          $758 = ($755 | 0) == ($757 | 0);
          if ($758) {
           $759 = HEAP32[$753 >> 2] | 0;
           $760 = $759 + 40 | 0;
           $761 = HEAP32[$760 >> 2] | 0;
           __THREW__ = 0;
           (tempInt = invoke_ii($761 | 0, $753 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $762 = __THREW__;
           __THREW__ = 0;
           $763 = $762 & 1;
           if ($763) {
            label = 24;
            break L4;
           }
          } else {
           $765 = $755 + 4 | 0;
           HEAP32[$754 >> 2] = $765;
          }
          $764 = ($752 | 0) > 1;
          if ($764) {
           $$pre$i3$i$i100382 = $$pre$i3$i$i100282306;
           $695 = $875;
           $752 = $751;
          } else {
           break;
          }
         }
        }
       }
       $766 = HEAP32[$__wn >> 2] | 0;
       $767 = HEAP32[$__wb >> 2] | 0;
       $768 = ($766 | 0) == ($767 | 0);
       if ($768) {
        label = 242;
        break L4;
       } else {
        $866 = $872;
        $__trailing_sign$1 = $__trailing_sign$0399;
       }
       break;
      }
     default:
      {
       $866 = $863;
       $__trailing_sign$1 = $__trailing_sign$0399;
      }
     }
    } while (0);
    L278 : do {
     if ((label | 0) == 44) {
      while (1) {
       label = 0;
       $124 = HEAP32[$__b >> 2] | 0;
       $125 = ($124 | 0) == (0 | 0);
       do {
        if ($125) {
         $154 = 1;
        } else {
         $126 = $124 + 12 | 0;
         $127 = HEAP32[$126 >> 2] | 0;
         $128 = $124 + 16 | 0;
         $129 = HEAP32[$128 >> 2] | 0;
         $130 = ($127 | 0) == ($129 | 0);
         if ($130) {
          $131 = HEAP32[$124 >> 2] | 0;
          $132 = $131 + 36 | 0;
          $133 = HEAP32[$132 >> 2] | 0;
          __THREW__ = 0;
          $134 = (tempInt = invoke_ii($133 | 0, $124 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $135 = __THREW__;
          __THREW__ = 0;
          $136 = $135 & 1;
          if ($136) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i51 = $134;
          }
         } else {
          $137 = HEAP32[$127 >> 2] | 0;
          $$0$i$i$i$i51 = $137;
         }
         $138 = ($$0$i$i$i$i51 | 0) == -1;
         if ($138) {
          HEAP32[$__b >> 2] = 0;
          $154 = 1;
          break;
         } else {
          $$pre$i$i$i53 = HEAP32[$__b >> 2] | 0;
          $phitmp$i$i$i54 = ($$pre$i$i$i53 | 0) == (0 | 0);
          $154 = $phitmp$i$i$i54;
          break;
         }
        }
       } while (0);
       $139 = ($140 | 0) == (0 | 0);
       do {
        if ($139) {
         $$pre$i3$i$i59300 = $$pre$i3$i$i59;
         label = 57;
        } else {
         $141 = $140 + 12 | 0;
         $142 = HEAP32[$141 >> 2] | 0;
         $143 = $140 + 16 | 0;
         $144 = HEAP32[$143 >> 2] | 0;
         $145 = ($142 | 0) == ($144 | 0);
         if ($145) {
          $146 = HEAP32[$140 >> 2] | 0;
          $147 = $146 + 36 | 0;
          $148 = HEAP32[$147 >> 2] | 0;
          __THREW__ = 0;
          $149 = (tempInt = invoke_ii($148 | 0, $140 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $150 = __THREW__;
          __THREW__ = 0;
          $151 = $150 & 1;
          if ($151) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i57 = $149;
          }
         } else {
          $152 = HEAP32[$142 >> 2] | 0;
          $$0$i$i1$i$i57 = $152;
         }
         $153 = ($$0$i$i1$i$i57 | 0) == -1;
         if ($153) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i3$i$i59300 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i60 = ($$pre$i3$i$i59 | 0) == (0 | 0);
          $tmp$i$i62 = $154 ^ $phitmp$i4$i$i60;
          if ($tmp$i$i62) {
           $$pre$i3$i$i59302 = $$pre$i3$i$i59;
           $867 = $$pre$i3$i$i59;
           break;
          } else {
           $866 = $863;
           $__trailing_sign$1 = $__trailing_sign$0399;
           break L278;
          }
         }
        }
       } while (0);
       if ((label | 0) == 57) {
        label = 0;
        if ($154) {
         $866 = $863;
         $__trailing_sign$1 = $__trailing_sign$0399;
         break L278;
        } else {
         $$pre$i3$i$i59302 = $$pre$i3$i$i59300;
         $867 = 0;
        }
       }
       $155 = HEAP32[$__b >> 2] | 0;
       $156 = $155 + 12 | 0;
       $157 = HEAP32[$156 >> 2] | 0;
       $158 = $155 + 16 | 0;
       $159 = HEAP32[$158 >> 2] | 0;
       $160 = ($157 | 0) == ($159 | 0);
       if ($160) {
        $161 = HEAP32[$155 >> 2] | 0;
        $162 = $161 + 36 | 0;
        $163 = HEAP32[$162 >> 2] | 0;
        __THREW__ = 0;
        $164 = (tempInt = invoke_ii($163 | 0, $155 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $165 = __THREW__;
        __THREW__ = 0;
        $166 = $165 & 1;
        if ($166) {
         label = 21;
         break L4;
        } else {
         $$0$i$i66 = $164;
        }
       } else {
        $167 = HEAP32[$157 >> 2] | 0;
        $$0$i$i66 = $167;
       }
       $168 = HEAP32[$__ct >> 2] | 0;
       $169 = $168 + 12 | 0;
       $170 = HEAP32[$169 >> 2] | 0;
       __THREW__ = 0;
       $171 = (tempInt = invoke_iiii($170 | 0, $__ct | 0, 8192, $$0$i$i66 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $172 = __THREW__;
       __THREW__ = 0;
       $173 = $172 & 1;
       if ($173) {
        label = 21;
        break L4;
       }
       if (!$171) {
        $866 = $863;
        $__trailing_sign$1 = $__trailing_sign$0399;
        break L278;
       }
       $174 = HEAP32[$__b >> 2] | 0;
       $175 = $174 + 12 | 0;
       $176 = HEAP32[$175 >> 2] | 0;
       $177 = $174 + 16 | 0;
       $178 = HEAP32[$177 >> 2] | 0;
       $179 = ($176 | 0) == ($178 | 0);
       if ($179) {
        $180 = HEAP32[$174 >> 2] | 0;
        $181 = $180 + 40 | 0;
        $182 = HEAP32[$181 >> 2] | 0;
        __THREW__ = 0;
        $183 = (tempInt = invoke_ii($182 | 0, $174 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $184 = __THREW__;
        __THREW__ = 0;
        $185 = $184 & 1;
        if ($185) {
         label = 21;
         break L4;
        } else {
         $$0$i$i73 = $183;
        }
       } else {
        $186 = $176 + 4 | 0;
        HEAP32[$175 >> 2] = $186;
        $187 = HEAP32[$176 >> 2] | 0;
        $$0$i$i73 = $187;
       }
       __THREW__ = 0;
       invoke_vii(488, $__spaces | 0, $$0$i$i73 | 0), asyncState ? abort(-12) | 0 : 0;
       $188 = __THREW__;
       __THREW__ = 0;
       $189 = $188 & 1;
       if ($189) {
        label = 21;
        break L4;
       } else {
        $$pre$i3$i$i59 = $$pre$i3$i$i59302;
        $140 = $867;
        label = 44;
       }
      }
     }
    } while (0);
    $771 = $__p$0397 + 1 | 0;
    $772 = $771 >>> 0 < 4;
    if ($772) {
     $863 = $866;
     $__p$0397 = $771;
     $__trailing_sign$0399 = $__trailing_sign$1;
    } else {
     $$lcssa357 = $866;
     $__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 244;
     break;
    }
   }
   L314 : switch (label | 0) {
   case 21:
    {
     $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $66 = tempRet0;
     $lpad$phi$index = $65;
     $lpad$phi$index8 = $66;
     break L1;
     break;
    }
   case 22:
    {
     $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $68 = tempRet0;
     $lpad$phi$index = $67;
     $lpad$phi$index8 = $68;
     break L1;
     break;
    }
   case 23:
    {
     $69 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $70 = tempRet0;
     $lpad$phi$index = $69;
     $lpad$phi$index8 = $70;
     break L1;
     break;
    }
   case 24:
    {
     $71 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $72 = tempRet0;
     $lpad$phi$index = $71;
     $lpad$phi$index8 = $72;
     break L1;
     break;
    }
   case 25:
    {
     $73 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $74 = tempRet0;
     $lpad$phi$index = $73;
     $lpad$phi$index8 = $74;
     break L1;
     break;
    }
   case 26:
    {
     $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $76 = tempRet0;
     $lpad$phi$index = $75;
     $lpad$phi$index8 = $76;
     break L1;
     break;
    }
   case 42:
    {
     $121 = HEAP32[$__err >> 2] | 0;
     $122 = $121 | 4;
     HEAP32[$__err >> 2] = $122;
     $$0 = 0;
     break;
    }
   case 107:
    {
     $355 = HEAP32[$__err >> 2] | 0;
     $356 = $355 | 4;
     HEAP32[$__err >> 2] = $356;
     $$0 = 0;
     break;
    }
   case 148:
    {
     $520 = HEAP32[$__err >> 2] | 0;
     $521 = $520 | 4;
     HEAP32[$__err >> 2] = $521;
     $$0 = 0;
     break;
    }
   case 206:
    {
     $664 = HEAP32[$__err >> 2] | 0;
     $665 = $664 | 4;
     HEAP32[$__err >> 2] = $665;
     $$0 = 0;
     break;
    }
   case 231:
    {
     $729 = HEAP32[$__err >> 2] | 0;
     $730 = $729 | 4;
     HEAP32[$__err >> 2] = $730;
     $$0 = 0;
     break;
    }
   case 242:
    {
     $769 = HEAP32[$__err >> 2] | 0;
     $770 = $769 | 4;
     HEAP32[$__err >> 2] = $770;
     $$0 = 0;
     break;
    }
   case 244:
    {
     $773 = ($__trailing_sign$0$lcssa | 0) == (0 | 0);
     L316 : do {
      if (!$773) {
       $774 = $__trailing_sign$0$lcssa + 4 | 0;
       $775 = $__trailing_sign$0$lcssa + 8 | 0;
       $__i$0 = 1;
       L318 : while (1) {
        $776 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
        $777 = $776 & 1;
        $778 = $777 << 24 >> 24 == 0;
        if ($778) {
         $780 = $776 & 255;
         $781 = $780 >>> 1;
         $783 = $781;
        } else {
         $779 = HEAP32[$774 >> 2] | 0;
         $783 = $779;
        }
        $782 = $__i$0 >>> 0 < $783 >>> 0;
        if (!$782) {
         break L316;
        }
        $784 = HEAP32[$__b >> 2] | 0;
        $785 = ($784 | 0) == (0 | 0);
        do {
         if ($785) {
          $876 = 1;
         } else {
          $786 = $784 + 12 | 0;
          $787 = HEAP32[$786 >> 2] | 0;
          $788 = $784 + 16 | 0;
          $789 = HEAP32[$788 >> 2] | 0;
          $790 = ($787 | 0) == ($789 | 0);
          if ($790) {
           $791 = HEAP32[$784 >> 2] | 0;
           $792 = $791 + 36 | 0;
           $793 = HEAP32[$792 >> 2] | 0;
           __THREW__ = 0;
           $794 = (tempInt = invoke_ii($793 | 0, $784 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $795 = __THREW__;
           __THREW__ = 0;
           $796 = $795 & 1;
           if ($796) {
            label = 20;
            break L318;
           } else {
            $$0$i$i$i$i = $794;
           }
          } else {
           $797 = HEAP32[$787 >> 2] | 0;
           $$0$i$i$i$i = $797;
          }
          $798 = ($$0$i$i$i$i | 0) == -1;
          if ($798) {
           HEAP32[$__b >> 2] = 0;
           $876 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
           $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
           $876 = $phitmp$i$i$i;
           break;
          }
         }
        } while (0);
        $799 = HEAP32[$__e >> 2] | 0;
        $800 = ($799 | 0) == (0 | 0);
        do {
         if ($800) {
          label = 263;
         } else {
          $801 = $799 + 12 | 0;
          $802 = HEAP32[$801 >> 2] | 0;
          $803 = $799 + 16 | 0;
          $804 = HEAP32[$803 >> 2] | 0;
          $805 = ($802 | 0) == ($804 | 0);
          if ($805) {
           $806 = HEAP32[$799 >> 2] | 0;
           $807 = $806 + 36 | 0;
           $808 = HEAP32[$807 >> 2] | 0;
           __THREW__ = 0;
           $809 = (tempInt = invoke_ii($808 | 0, $799 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $810 = __THREW__;
           __THREW__ = 0;
           $811 = $810 & 1;
           if ($811) {
            label = 20;
            break L318;
           } else {
            $$0$i$i1$i$i = $809;
           }
          } else {
           $812 = HEAP32[$802 >> 2] | 0;
           $$0$i$i1$i$i = $812;
          }
          $813 = ($$0$i$i1$i$i | 0) == -1;
          if ($813) {
           HEAP32[$__e >> 2] = 0;
           label = 263;
           break;
          } else {
           if ($876) {
            break;
           } else {
            label = 271;
            break L318;
           }
          }
         }
        } while (0);
        if ((label | 0) == 263) {
         label = 0;
         if ($876) {
          label = 271;
          break;
         }
        }
        $814 = HEAP32[$__b >> 2] | 0;
        $815 = $814 + 12 | 0;
        $816 = HEAP32[$815 >> 2] | 0;
        $817 = $814 + 16 | 0;
        $818 = HEAP32[$817 >> 2] | 0;
        $819 = ($816 | 0) == ($818 | 0);
        if ($819) {
         $820 = HEAP32[$814 >> 2] | 0;
         $821 = $820 + 36 | 0;
         $822 = HEAP32[$821 >> 2] | 0;
         __THREW__ = 0;
         $823 = (tempInt = invoke_ii($822 | 0, $814 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $824 = __THREW__;
         __THREW__ = 0;
         $825 = $824 & 1;
         if ($825) {
          label = 20;
          break;
         } else {
          $$0$i$i = $823;
         }
        } else {
         $826 = HEAP32[$816 >> 2] | 0;
         $$0$i$i = $826;
        }
        $827 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
        $828 = $827 & 1;
        $829 = $828 << 24 >> 24 == 0;
        if ($829) {
         $832 = $774;
        } else {
         $830 = HEAP32[$775 >> 2] | 0;
         $832 = $830;
        }
        $831 = $832 + ($__i$0 << 2) | 0;
        $833 = HEAP32[$831 >> 2] | 0;
        $834 = ($$0$i$i | 0) == ($833 | 0);
        if (!$834) {
         label = 271;
         break;
        }
        $837 = $__i$0 + 1 | 0;
        $838 = HEAP32[$__b >> 2] | 0;
        $839 = $838 + 12 | 0;
        $840 = HEAP32[$839 >> 2] | 0;
        $841 = $838 + 16 | 0;
        $842 = HEAP32[$841 >> 2] | 0;
        $843 = ($840 | 0) == ($842 | 0);
        if ($843) {
         $844 = HEAP32[$838 >> 2] | 0;
         $845 = $844 + 40 | 0;
         $846 = HEAP32[$845 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($846 | 0, $838 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $847 = __THREW__;
         __THREW__ = 0;
         $848 = $847 & 1;
         if ($848) {
          label = 20;
          break;
         } else {
          $__i$0 = $837;
          continue;
         }
        } else {
         $849 = $840 + 4 | 0;
         HEAP32[$839 >> 2] = $849;
         $__i$0 = $837;
         continue;
        }
       }
       if ((label | 0) == 20) {
        $63 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $64 = tempRet0;
        $lpad$phi$index = $63;
        $lpad$phi$index8 = $64;
        break L1;
       } else if ((label | 0) == 271) {
        $835 = HEAP32[$__err >> 2] | 0;
        $836 = $835 | 4;
        HEAP32[$__err >> 2] = $836;
        $$0 = 0;
        break L314;
       }
      }
     } while (0);
     $850 = HEAP32[$__gb >> 2] | 0;
     $851 = ($850 | 0) == ($$lcssa357 | 0);
     if ($851) {
      $$0 = 1;
     } else {
      HEAP32[$__et >> 2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $850, $$lcssa357, $__et), asyncState ? abort(-12) | 0 : 0;
      $852 = HEAP32[$__et >> 2] | 0;
      $853 = ($852 | 0) == 0;
      if ($853) {
       $$0 = 1;
      } else {
       $854 = HEAP32[$__err >> 2] | 0;
       $855 = $854 | 4;
       HEAP32[$__err >> 2] = $855;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
   $856 = HEAP32[$__gb >> 2] | 0;
   HEAP32[$__gb >> 2] = 0;
   $857 = ($856 | 0) == (0 | 0);
   if (!$857) {
    $858 = HEAP32[$2 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi($858 | 0, $856 | 0), asyncState ? abort(-12) | 0 : 0;
    $859 = __THREW__;
    __THREW__ = 0;
    $860 = $859 & 1;
    if ($860) {
     $861 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $862 = tempRet0;
     ___clang_call_terminate($861), asyncState ? abort(-12) | 0 : 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
 $79 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 $80 = ($79 | 0) == (0 | 0);
 if (!$80) {
  $81 = HEAP32[$2 >> 2] | 0;
  __THREW__ = 0;
  invoke_vi($81 | 0, $79 | 0), asyncState ? abort(-12) | 0 : 0;
  $82 = __THREW__;
  __THREW__ = 0;
  $83 = $82 & 1;
  if ($83) {
   $84 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $85 = tempRet0;
   ___clang_call_terminate($84), asyncState ? abort(-12) | 0 : 0;
  }
 }
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i121 = 0, $$0$i$i130 = 0, $$0$i$i140 = 0, $$0$i$i157 = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i68 = 0, $$0$i$i75 = 0, $$0$i$i94 = 0, $$0$i$i97 = 0, $$in340 = 0, $$lcssa = 0, $$lcssa243 = 0, $$lcssa313 = 0, $$lcssa371 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert274 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i104 = 0, $$pre$i$i$i144 = 0, $$pre$i$i$i161 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i48 = 0, $$pre$i$i$i80 = 0, $$pre$i2$i$i108 = 0, $$pre$i2$i$i148 = 0, $$pre$i2$i$i148256 = 0, $$pre$i2$i$i148258 = 0, $$pre$i2$i$i165268 = 0, $$pre$i2$i$i165269 = 0, $$pre$i2$i$i165345 = 0, $$pre$i2$i$i52 = 0, $$pre$i2$i$i52278 = 0, $$pre$i2$i$i52280 = 0, $$pre$i2$i$i84264$ph = 0, $$pre$i2$i$i84264283 = 0, $$pre$i2$i$i84336 = 0, $$pre261 = 0, $$pre263 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$pre275 = 0, $$pre276 = 0, $$pre277 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa372 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i138 = 0, $isascii1$i171 = 0, $isascii1$i61 = 0, $isascii1$i73 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $sext = 0, $sext210 = 0, $sext211 = 0, $sext212 = 0, $switch = 0, $tmp$i$i150 = 0, $tmp$i$i167 = 0, $tmp$i$i54 = 0, $tmp$i$i86 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 488 | 0;
 $__gbuf = sp + 88 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 72 | 0;
 $__ge = sp + 68 | 0;
 $__pat = sp + 496 | 0;
 $__dp = sp + 493 | 0;
 $__ts = sp + 492 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb >> 2] = $1;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 HEAP32[$__gn >> 2] = $__gbuf;
 $3 = $__gbuf + 400 | 0;
 HEAP32[$__ge >> 2] = $3;
 HEAP32[$__grp >> 2] = 0;
 $4 = $__grp + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $__grp + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$__sym >> 2] = 0;
 $6 = $__sym + 4 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $__sym + 8 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$__psn >> 2] = 0;
 $8 = $__psn + 4 | 0;
 HEAP32[$8 >> 2] = 0;
 $9 = $__psn + 8 | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$__nsn >> 2] = 0;
 $10 = $__nsn + 4 | 0;
 HEAP32[$10 >> 2] = 0;
 $11 = $__nsn + 8 | 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$__spaces >> 2] = 0;
 $12 = $__spaces + 4 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $__spaces + 8 | 0;
 HEAP32[$13 >> 2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(481, $__intl | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__psn | 0, $__nsn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
 $14 = __THREW__;
 __THREW__ = 0;
 $15 = $14 & 1;
 L1 : do {
  if ($15) {
   $80 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $81 = tempRet0;
   $lpad$phi$index = $80;
   $lpad$phi$index7 = $81;
  } else {
   $16 = HEAP32[$__wb >> 2] | 0;
   HEAP32[$__wn >> 2] = $16;
   $17 = $__ct + 8 | 0;
   $18 = $__psn + 4 | 0;
   $19 = $__nsn + 4 | 0;
   $20 = $__nsn + 8 | 0;
   $21 = $__nsn + 1 | 0;
   $22 = $__psn + 8 | 0;
   $23 = $__psn + 1 | 0;
   $24 = $__flags & 512;
   $25 = ($24 | 0) != 0;
   $26 = $__sym + 8 | 0;
   $27 = $__sym + 1 | 0;
   $28 = $__sym + 4 | 0;
   $29 = $__spaces + 4 | 0;
   $30 = $__spaces + 8 | 0;
   $31 = $__spaces + 1 | 0;
   $32 = $__pat + 3 | 0;
   $33 = $__grp + 4 | 0;
   $876 = $__gbuf;
   $__p$0353 = 0;
   $__trailing_sign$0355 = 0;
   L4 : while (1) {
    $34 = HEAP32[$__b >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      $49 = 0;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 24;
        break L4;
       }
       $47 = ($44 | 0) == -1;
       if ($47) {
        HEAP32[$__b >> 2] = 0;
        $49 = 0;
        break;
       } else {
        $$pre$i$i$i32 = HEAP32[$__b >> 2] | 0;
        $49 = $$pre$i$i$i32;
        break;
       }
      } else {
       $49 = $34;
      }
     }
    } while (0);
    $48 = ($49 | 0) == (0 | 0);
    $50 = HEAP32[$__e >> 2] | 0;
    $51 = ($50 | 0) == (0 | 0);
    do {
     if ($51) {
      label = 15;
     } else {
      $52 = $50 + 12 | 0;
      $53 = HEAP32[$52 >> 2] | 0;
      $54 = $50 + 16 | 0;
      $55 = HEAP32[$54 >> 2] | 0;
      $56 = ($53 | 0) == ($55 | 0);
      if (!$56) {
       if ($48) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;
        $__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
      $57 = HEAP32[$50 >> 2] | 0;
      $58 = $57 + 36 | 0;
      $59 = HEAP32[$58 >> 2] | 0;
      __THREW__ = 0;
      $60 = (tempInt = invoke_ii($59 | 0, $50 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $61 = __THREW__;
      __THREW__ = 0;
      $62 = $61 & 1;
      if ($62) {
       label = 24;
       break L4;
      }
      $63 = ($60 | 0) == -1;
      if ($63) {
       HEAP32[$__e >> 2] = 0;
       label = 15;
       break;
      } else {
       if ($48) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;
        $__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
     }
    } while (0);
    if ((label | 0) == 15) {
     label = 0;
     if ($48) {
      $$lcssa313 = $876;
      $__trailing_sign$0$lcssa = $__trailing_sign$0355;
      label = 235;
      break;
     } else {
      $877 = 0;
     }
    }
    $64 = $__pat + $__p$0353 | 0;
    $65 = HEAP8[$64 >> 0] | 0;
    $66 = $65 << 24 >> 24;
    L26 : do {
     switch ($66 | 0) {
     case 1:
      {
       $cond = ($__p$0353 | 0) == 3;
       if ($cond) {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        $89 = HEAP32[$__b >> 2] | 0;
        $90 = $89 + 12 | 0;
        $91 = HEAP32[$90 >> 2] | 0;
        $92 = $89 + 16 | 0;
        $93 = HEAP32[$92 >> 2] | 0;
        $94 = ($91 | 0) == ($93 | 0);
        if ($94) {
         $95 = HEAP32[$89 >> 2] | 0;
         $96 = $95 + 36 | 0;
         $97 = HEAP32[$96 >> 2] | 0;
         __THREW__ = 0;
         $98 = (tempInt = invoke_ii($97 | 0, $89 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $99 = __THREW__;
         __THREW__ = 0;
         $100 = $99 & 1;
         if ($100) {
          label = 24;
          break L4;
         } else {
          $$0$i$i42 = $98;
         }
        } else {
         $101 = HEAP8[$91 >> 0] | 0;
         $102 = $101 & 255;
         $$0$i$i42 = $102;
        }
        $103 = $$0$i$i42 & 255;
        $isascii1$i = $103 << 24 >> 24 > -1;
        if (!$isascii1$i) {
         label = 40;
         break L4;
        }
        $sext212 = $$0$i$i42 << 24;
        $104 = $sext212 >> 24;
        $105 = HEAP32[$17 >> 2] | 0;
        $106 = $105 + ($104 << 1) | 0;
        $107 = HEAP16[$106 >> 1] | 0;
        $108 = $107 & 8192;
        $109 = $108 << 16 >> 16 == 0;
        if ($109) {
         label = 40;
         break L4;
        }
        $110 = HEAP32[$__b >> 2] | 0;
        $111 = $110 + 12 | 0;
        $112 = HEAP32[$111 >> 2] | 0;
        $113 = $110 + 16 | 0;
        $114 = HEAP32[$113 >> 2] | 0;
        $115 = ($112 | 0) == ($114 | 0);
        if ($115) {
         $116 = HEAP32[$110 >> 2] | 0;
         $117 = $116 + 40 | 0;
         $118 = HEAP32[$117 >> 2] | 0;
         __THREW__ = 0;
         $119 = (tempInt = invoke_ii($118 | 0, $110 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $120 = __THREW__;
         __THREW__ = 0;
         $121 = $120 & 1;
         if ($121) {
          label = 24;
          break L4;
         } else {
          $$0$i$i45 = $119;
         }
        } else {
         $122 = $112 + 1 | 0;
         HEAP32[$111 >> 2] = $122;
         $123 = HEAP8[$112 >> 0] | 0;
         $124 = $123 & 255;
         $$0$i$i45 = $124;
        }
        $125 = $$0$i$i45 & 255;
        __THREW__ = 0;
        invoke_vii(407, $__spaces | 0, $125 | 0), asyncState ? abort(-12) | 0 : 0;
        $126 = __THREW__;
        __THREW__ = 0;
        $127 = $126 & 1;
        if ($127) {
         label = 24;
         break L4;
        } else {
         $$pre$i2$i$i52 = $877;
         $148 = $877;
         label = 42;
        }
       }
       break;
      }
     case 0:
      {
       $130 = ($__p$0353 | 0) == 3;
       if ($130) {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        $$pre$i2$i$i52 = $877;
        $148 = $877;
        label = 42;
       }
       break;
      }
     case 3:
      {
       $201 = HEAP8[$__psn >> 0] | 0;
       $202 = $201 & 1;
       $203 = $202 << 24 >> 24 == 0;
       $204 = HEAP32[$18 >> 2] | 0;
       $205 = $201 & 255;
       $206 = $205 >>> 1;
       $207 = $203 ? $206 : $204;
       $208 = HEAP8[$__nsn >> 0] | 0;
       $209 = $208 & 1;
       $210 = $209 << 24 >> 24 == 0;
       $211 = HEAP32[$19 >> 2] | 0;
       $212 = $208 & 255;
       $213 = $212 >>> 1;
       $214 = $210 ? $213 : $211;
       $215 = 0 - $214 | 0;
       $216 = ($207 | 0) == ($215 | 0);
       if ($216) {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        $217 = ($207 | 0) == 0;
        if ($217) {
         $261 = HEAP32[$__b >> 2] | 0;
         $262 = $261 + 12 | 0;
         $263 = HEAP32[$262 >> 2] | 0;
         $264 = $261 + 16 | 0;
         $265 = HEAP32[$264 >> 2] | 0;
         $266 = ($263 | 0) == ($265 | 0);
         if ($266) {
          $267 = HEAP32[$261 >> 2] | 0;
          $268 = $267 + 36 | 0;
          $269 = HEAP32[$268 >> 2] | 0;
          __THREW__ = 0;
          $270 = (tempInt = invoke_ii($269 | 0, $261 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $271 = __THREW__;
          __THREW__ = 0;
          $272 = $271 & 1;
          if ($272) {
           label = 24;
           break L4;
          }
          $$pre277 = HEAP8[$__nsn >> 0] | 0;
          $$0$i$i114 = $270;
          $277 = $$pre277;
         } else {
          $273 = HEAP8[$263 >> 0] | 0;
          $274 = $273 & 255;
          $$0$i$i114 = $274;
          $277 = $208;
         }
         $275 = $$0$i$i114 & 255;
         $276 = $277 & 1;
         $278 = $276 << 24 >> 24 == 0;
         $279 = HEAP32[$20 >> 2] | 0;
         $280 = $278 ? $21 : $279;
         $281 = HEAP8[$280 >> 0] | 0;
         $282 = $275 << 24 >> 24 == $281 << 24 >> 24;
         if (!$282) {
          $878 = $876;
          $__trailing_sign$1 = $__trailing_sign$0355;
          break L26;
         }
         $283 = HEAP32[$__b >> 2] | 0;
         $284 = $283 + 12 | 0;
         $285 = HEAP32[$284 >> 2] | 0;
         $286 = $283 + 16 | 0;
         $287 = HEAP32[$286 >> 2] | 0;
         $288 = ($285 | 0) == ($287 | 0);
         if ($288) {
          $289 = HEAP32[$283 >> 2] | 0;
          $290 = $289 + 40 | 0;
          $291 = HEAP32[$290 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($291 | 0, $283 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $292 = __THREW__;
          __THREW__ = 0;
          $293 = $292 & 1;
          if ($293) {
           label = 24;
           break L4;
          }
         } else {
          $294 = $285 + 1 | 0;
          HEAP32[$284 >> 2] = $294;
         }
         HEAP8[$__neg >> 0] = 1;
         $295 = HEAP8[$__nsn >> 0] | 0;
         $296 = $295 & 1;
         $297 = $296 << 24 >> 24 == 0;
         $298 = HEAP32[$19 >> 2] | 0;
         $299 = $295 & 255;
         $300 = $299 >>> 1;
         $301 = $297 ? $300 : $298;
         $302 = $301 >>> 0 > 1;
         $__nsn$__trailing_sign$0 = $302 ? $__nsn : $__trailing_sign$0355;
         $878 = $876;
         $__trailing_sign$1 = $__nsn$__trailing_sign$0;
         break L26;
        }
        $218 = ($214 | 0) == 0;
        $219 = HEAP32[$__b >> 2] | 0;
        $220 = $219 + 12 | 0;
        $221 = HEAP32[$220 >> 2] | 0;
        $222 = $219 + 16 | 0;
        $223 = HEAP32[$222 >> 2] | 0;
        $224 = ($221 | 0) == ($223 | 0);
        if ($218) {
         if ($224) {
          $225 = HEAP32[$219 >> 2] | 0;
          $226 = $225 + 36 | 0;
          $227 = HEAP32[$226 >> 2] | 0;
          __THREW__ = 0;
          $228 = (tempInt = invoke_ii($227 | 0, $219 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $229 = __THREW__;
          __THREW__ = 0;
          $230 = $229 & 1;
          if ($230) {
           label = 24;
           break L4;
          }
          $$pre276 = HEAP8[$__psn >> 0] | 0;
          $$0$i$i94 = $228;
          $235 = $$pre276;
         } else {
          $231 = HEAP8[$221 >> 0] | 0;
          $232 = $231 & 255;
          $$0$i$i94 = $232;
          $235 = $201;
         }
         $233 = $$0$i$i94 & 255;
         $234 = $235 & 1;
         $236 = $234 << 24 >> 24 == 0;
         $237 = HEAP32[$22 >> 2] | 0;
         $238 = $236 ? $23 : $237;
         $239 = HEAP8[$238 >> 0] | 0;
         $240 = $233 << 24 >> 24 == $239 << 24 >> 24;
         if (!$240) {
          HEAP8[$__neg >> 0] = 1;
          $878 = $876;
          $__trailing_sign$1 = $__trailing_sign$0355;
          break L26;
         }
         $241 = HEAP32[$__b >> 2] | 0;
         $242 = $241 + 12 | 0;
         $243 = HEAP32[$242 >> 2] | 0;
         $244 = $241 + 16 | 0;
         $245 = HEAP32[$244 >> 2] | 0;
         $246 = ($243 | 0) == ($245 | 0);
         if ($246) {
          $247 = HEAP32[$241 >> 2] | 0;
          $248 = $247 + 40 | 0;
          $249 = HEAP32[$248 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($249 | 0, $241 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $250 = __THREW__;
          __THREW__ = 0;
          $251 = $250 & 1;
          if ($251) {
           label = 24;
           break L4;
          }
         } else {
          $252 = $243 + 1 | 0;
          HEAP32[$242 >> 2] = $252;
         }
         $253 = HEAP8[$__psn >> 0] | 0;
         $254 = $253 & 1;
         $255 = $254 << 24 >> 24 == 0;
         $256 = HEAP32[$18 >> 2] | 0;
         $257 = $253 & 255;
         $258 = $257 >>> 1;
         $259 = $255 ? $258 : $256;
         $260 = $259 >>> 0 > 1;
         $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0355;
         $878 = $876;
         $__trailing_sign$1 = $__psn$__trailing_sign$0;
         break L26;
        }
        if ($224) {
         $303 = HEAP32[$219 >> 2] | 0;
         $304 = $303 + 36 | 0;
         $305 = HEAP32[$304 >> 2] | 0;
         __THREW__ = 0;
         $306 = (tempInt = invoke_ii($305 | 0, $219 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $307 = __THREW__;
         __THREW__ = 0;
         $308 = $307 & 1;
         if ($308) {
          label = 24;
          break L4;
         }
         $$pre271 = HEAP8[$__psn >> 0] | 0;
         $$pre272 = HEAP32[$__b >> 2] | 0;
         $$phi$trans$insert = $$pre272 + 12 | 0;
         $$pre273 = HEAP32[$$phi$trans$insert >> 2] | 0;
         $$phi$trans$insert274 = $$pre272 + 16 | 0;
         $$pre275 = HEAP32[$$phi$trans$insert274 >> 2] | 0;
         $$0$i$i121 = $306;
         $313 = $$pre271;
         $320 = $$pre272;
         $322 = $$pre273;
         $323 = $$pre275;
        } else {
         $309 = HEAP8[$221 >> 0] | 0;
         $310 = $309 & 255;
         $$0$i$i121 = $310;
         $313 = $201;
         $320 = $219;
         $322 = $221;
         $323 = $223;
        }
        $311 = $$0$i$i121 & 255;
        $312 = $313 & 1;
        $314 = $312 << 24 >> 24 == 0;
        $315 = HEAP32[$22 >> 2] | 0;
        $316 = $314 ? $23 : $315;
        $317 = HEAP8[$316 >> 0] | 0;
        $318 = $311 << 24 >> 24 == $317 << 24 >> 24;
        $319 = $320 + 12 | 0;
        $321 = ($322 | 0) == ($323 | 0);
        if ($318) {
         if ($321) {
          $324 = HEAP32[$320 >> 2] | 0;
          $325 = $324 + 40 | 0;
          $326 = HEAP32[$325 >> 2] | 0;
          __THREW__ = 0;
          (tempInt = invoke_ii($326 | 0, $320 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $327 = __THREW__;
          __THREW__ = 0;
          $328 = $327 & 1;
          if ($328) {
           label = 24;
           break L4;
          }
         } else {
          $329 = $322 + 1 | 0;
          HEAP32[$319 >> 2] = $329;
         }
         $330 = HEAP8[$__psn >> 0] | 0;
         $331 = $330 & 1;
         $332 = $331 << 24 >> 24 == 0;
         $333 = HEAP32[$18 >> 2] | 0;
         $334 = $330 & 255;
         $335 = $334 >>> 1;
         $336 = $332 ? $335 : $333;
         $337 = $336 >>> 0 > 1;
         $__psn$__trailing_sign$010 = $337 ? $__psn : $__trailing_sign$0355;
         $878 = $876;
         $__trailing_sign$1 = $__psn$__trailing_sign$010;
         break L26;
        }
        if ($321) {
         $338 = HEAP32[$320 >> 2] | 0;
         $339 = $338 + 36 | 0;
         $340 = HEAP32[$339 >> 2] | 0;
         __THREW__ = 0;
         $341 = (tempInt = invoke_ii($340 | 0, $320 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $342 = __THREW__;
         __THREW__ = 0;
         $343 = $342 & 1;
         if ($343) {
          label = 24;
          break L4;
         } else {
          $$0$i$i130 = $341;
         }
        } else {
         $344 = HEAP8[$322 >> 0] | 0;
         $345 = $344 & 255;
         $$0$i$i130 = $345;
        }
        $346 = $$0$i$i130 & 255;
        $347 = HEAP8[$__nsn >> 0] | 0;
        $348 = $347 & 1;
        $349 = $348 << 24 >> 24 == 0;
        $350 = HEAP32[$20 >> 2] | 0;
        $351 = $349 ? $21 : $350;
        $352 = HEAP8[$351 >> 0] | 0;
        $353 = $346 << 24 >> 24 == $352 << 24 >> 24;
        if (!$353) {
         label = 104;
         break L4;
        }
        $354 = HEAP32[$__b >> 2] | 0;
        $355 = $354 + 12 | 0;
        $356 = HEAP32[$355 >> 2] | 0;
        $357 = $354 + 16 | 0;
        $358 = HEAP32[$357 >> 2] | 0;
        $359 = ($356 | 0) == ($358 | 0);
        if ($359) {
         $360 = HEAP32[$354 >> 2] | 0;
         $361 = $360 + 40 | 0;
         $362 = HEAP32[$361 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($362 | 0, $354 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $363 = __THREW__;
         __THREW__ = 0;
         $364 = $363 & 1;
         if ($364) {
          label = 24;
          break L4;
         }
        } else {
         $365 = $356 + 1 | 0;
         HEAP32[$355 >> 2] = $365;
        }
        HEAP8[$__neg >> 0] = 1;
        $366 = HEAP8[$__nsn >> 0] | 0;
        $367 = $366 & 1;
        $368 = $367 << 24 >> 24 == 0;
        $369 = HEAP32[$19 >> 2] | 0;
        $370 = $366 & 255;
        $371 = $370 >>> 1;
        $372 = $368 ? $371 : $369;
        $373 = $372 >>> 0 > 1;
        $__nsn$__trailing_sign$011 = $373 ? $__nsn : $__trailing_sign$0355;
        $878 = $876;
        $__trailing_sign$1 = $__nsn$__trailing_sign$011;
       }
       break;
      }
     case 2:
      {
       $376 = ($__trailing_sign$0355 | 0) != (0 | 0);
       $377 = $__p$0353 >>> 0 < 2;
       $or$cond = $377 | $376;
       if (!$or$cond) {
        $378 = ($__p$0353 | 0) == 2;
        $379 = HEAP8[$32 >> 0] | 0;
        $380 = $379 << 24 >> 24 != 0;
        $381 = $378 & $380;
        $brmerge = $25 | $381;
        if (!$brmerge) {
         $878 = $876;
         $__trailing_sign$1 = 0;
         break L26;
        }
       }
       $382 = HEAP8[$__sym >> 0] | 0;
       $383 = $382 & 1;
       $384 = $383 << 24 >> 24 == 0;
       $385 = HEAP32[$26 >> 2] | 0;
       $386 = $384 ? $27 : $385;
       $387 = $386;
       $388 = ($__p$0353 | 0) == 0;
       L95 : do {
        if ($388) {
         $$ph = $387;
        } else {
         $399 = $__p$0353 + -1 | 0;
         $400 = $__pat + $399 | 0;
         $401 = HEAP8[$400 >> 0] | 0;
         $switch = ($401 & 255) < 2;
         if ($switch) {
          $402 = HEAP32[$28 >> 2] | 0;
          $403 = $382 & 255;
          $404 = $403 >>> 1;
          $405 = $384 ? $404 : $402;
          $406 = $386 + $405 | 0;
          $407 = HEAP32[$17 >> 2] | 0;
          $408 = ($405 | 0) == 0;
          L98 : do {
           if ($408) {
            $$lcssa = $387;
           } else {
            $410 = $386;
            $880 = $387;
            while (1) {
             $409 = HEAP8[$410 >> 0] | 0;
             $isascii1$i171 = $409 << 24 >> 24 > -1;
             if (!$isascii1$i171) {
              $$lcssa = $880;
              break L98;
             }
             $411 = $409 << 24 >> 24;
             $412 = $407 + ($411 << 1) | 0;
             $413 = HEAP16[$412 >> 1] | 0;
             $414 = $413 & 8192;
             $415 = $414 << 16 >> 16 == 0;
             if ($415) {
              $$lcssa = $880;
              break L98;
             }
             $416 = $410 + 1 | 0;
             $417 = $416;
             $418 = ($416 | 0) == ($406 | 0);
             if ($418) {
              $$lcssa = $417;
              break;
             } else {
              $410 = $416;
              $880 = $417;
             }
            }
           }
          } while (0);
          $419 = $$lcssa - $387 | 0;
          $420 = HEAP8[$__spaces >> 0] | 0;
          $421 = $420 & 1;
          $422 = $421 << 24 >> 24 == 0;
          $423 = HEAP32[$29 >> 2] | 0;
          $424 = $420 & 255;
          $425 = $424 >>> 1;
          $426 = $422 ? $425 : $423;
          $427 = $426 >>> 0 < $419 >>> 0;
          if ($427) {
           $$ph = $387;
          } else {
           $428 = HEAP32[$30 >> 2] | 0;
           $429 = $422 ? $31 : $428;
           $430 = $429 + $426 | 0;
           $431 = ($$lcssa | 0) == ($387 | 0);
           if ($431) {
            $$ph = $$lcssa;
           } else {
            $$sum = $426 - $419 | 0;
            $432 = $429 + $$sum | 0;
            $$in340 = $386;
            $434 = $432;
            while (1) {
             $433 = HEAP8[$434 >> 0] | 0;
             $435 = HEAP8[$$in340 >> 0] | 0;
             $436 = $433 << 24 >> 24 == $435 << 24 >> 24;
             if (!$436) {
              $$ph = $387;
              break L95;
             }
             $437 = $434 + 1 | 0;
             $438 = $$in340 + 1 | 0;
             $439 = ($437 | 0) == ($430 | 0);
             if ($439) {
              $$ph = $$lcssa;
              break;
             } else {
              $$in340 = $438;
              $434 = $437;
             }
            }
           }
          }
         } else {
          $$ph = $387;
         }
        }
       } while (0);
       $389 = $382 & 1;
       $390 = $389 << 24 >> 24 == 0;
       $391 = HEAP32[$28 >> 2] | 0;
       $392 = $382 & 255;
       $393 = $392 >>> 1;
       $394 = $390 ? $27 : $385;
       $395 = $390 ? $393 : $391;
       $396 = $394 + $395 | 0;
       $397 = $$ph;
       $398 = ($397 | 0) == ($396 | 0);
       L110 : do {
        if ($398) {
         $$lcssa243 = $396;
        } else {
         $$pre$i2$i$i165345 = $877;
         $457 = $877;
         $487 = $397;
         while (1) {
          $440 = HEAP32[$__b >> 2] | 0;
          $441 = ($440 | 0) == (0 | 0);
          do {
           if ($441) {
            $455 = 0;
           } else {
            $442 = $440 + 12 | 0;
            $443 = HEAP32[$442 >> 2] | 0;
            $444 = $440 + 16 | 0;
            $445 = HEAP32[$444 >> 2] | 0;
            $446 = ($443 | 0) == ($445 | 0);
            if ($446) {
             $447 = HEAP32[$440 >> 2] | 0;
             $448 = $447 + 36 | 0;
             $449 = HEAP32[$448 >> 2] | 0;
             __THREW__ = 0;
             $450 = (tempInt = invoke_ii($449 | 0, $440 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $451 = __THREW__;
             __THREW__ = 0;
             $452 = $451 & 1;
             if ($452) {
              label = 21;
              break L4;
             }
             $453 = ($450 | 0) == -1;
             if ($453) {
              HEAP32[$__b >> 2] = 0;
              $455 = 0;
              break;
             } else {
              $$pre$i$i$i161 = HEAP32[$__b >> 2] | 0;
              $455 = $$pre$i$i$i161;
              break;
             }
            } else {
             $455 = $440;
            }
           }
          } while (0);
          $454 = ($455 | 0) == (0 | 0);
          $456 = ($457 | 0) == (0 | 0);
          do {
           if ($456) {
            $$pre$i2$i$i165269 = $$pre$i2$i$i165345;
            label = 131;
           } else {
            $458 = $457 + 12 | 0;
            $459 = HEAP32[$458 >> 2] | 0;
            $460 = $457 + 16 | 0;
            $461 = HEAP32[$460 >> 2] | 0;
            $462 = ($459 | 0) == ($461 | 0);
            if (!$462) {
             if ($454) {
              $$pre$i2$i$i165268 = $$pre$i2$i$i165345;
              $881 = $457;
              break;
             } else {
              $$lcssa243 = $487;
              break L110;
             }
            }
            $463 = HEAP32[$457 >> 2] | 0;
            $464 = $463 + 36 | 0;
            $465 = HEAP32[$464 >> 2] | 0;
            __THREW__ = 0;
            $466 = (tempInt = invoke_ii($465 | 0, $457 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $467 = __THREW__;
            __THREW__ = 0;
            $468 = $467 & 1;
            if ($468) {
             label = 21;
             break L4;
            }
            $469 = ($466 | 0) == -1;
            if ($469) {
             HEAP32[$__e >> 2] = 0;
             $$pre$i2$i$i165269 = 0;
             label = 131;
             break;
            } else {
             $470 = ($$pre$i2$i$i165345 | 0) == (0 | 0);
             $tmp$i$i167 = $454 ^ $470;
             if ($tmp$i$i167) {
              $$pre$i2$i$i165268 = $$pre$i2$i$i165345;
              $881 = $$pre$i2$i$i165345;
              break;
             } else {
              $$lcssa243 = $487;
              break L110;
             }
            }
           }
          } while (0);
          if ((label | 0) == 131) {
           label = 0;
           if ($454) {
            $$lcssa243 = $487;
            break L110;
           } else {
            $$pre$i2$i$i165268 = $$pre$i2$i$i165269;
            $881 = 0;
           }
          }
          $471 = HEAP32[$__b >> 2] | 0;
          $472 = $471 + 12 | 0;
          $473 = HEAP32[$472 >> 2] | 0;
          $474 = $471 + 16 | 0;
          $475 = HEAP32[$474 >> 2] | 0;
          $476 = ($473 | 0) == ($475 | 0);
          if ($476) {
           $477 = HEAP32[$471 >> 2] | 0;
           $478 = $477 + 36 | 0;
           $479 = HEAP32[$478 >> 2] | 0;
           __THREW__ = 0;
           $480 = (tempInt = invoke_ii($479 | 0, $471 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $481 = __THREW__;
           __THREW__ = 0;
           $482 = $481 & 1;
           if ($482) {
            label = 21;
            break L4;
           } else {
            $$0$i$i157 = $480;
           }
          } else {
           $483 = HEAP8[$473 >> 0] | 0;
           $484 = $483 & 255;
           $$0$i$i157 = $484;
          }
          $485 = $$0$i$i157 & 255;
          $486 = HEAP8[$487 >> 0] | 0;
          $488 = $485 << 24 >> 24 == $486 << 24 >> 24;
          if (!$488) {
           $$lcssa243 = $487;
           break L110;
          }
          $489 = HEAP32[$__b >> 2] | 0;
          $490 = $489 + 12 | 0;
          $491 = HEAP32[$490 >> 2] | 0;
          $492 = $489 + 16 | 0;
          $493 = HEAP32[$492 >> 2] | 0;
          $494 = ($491 | 0) == ($493 | 0);
          if ($494) {
           $495 = HEAP32[$489 >> 2] | 0;
           $496 = $495 + 40 | 0;
           $497 = HEAP32[$496 >> 2] | 0;
           __THREW__ = 0;
           (tempInt = invoke_ii($497 | 0, $489 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $498 = __THREW__;
           __THREW__ = 0;
           $499 = $498 & 1;
           if ($499) {
            label = 21;
            break L4;
           }
          } else {
           $500 = $491 + 1 | 0;
           HEAP32[$490 >> 2] = $500;
          }
          $501 = $487 + 1 | 0;
          $$pre266 = HEAP8[$__sym >> 0] | 0;
          $$pre267 = HEAP32[$26 >> 2] | 0;
          $502 = $$pre266 & 1;
          $503 = $502 << 24 >> 24 == 0;
          $504 = HEAP32[$28 >> 2] | 0;
          $505 = $$pre266 & 255;
          $506 = $505 >>> 1;
          $507 = $503 ? $27 : $$pre267;
          $508 = $503 ? $506 : $504;
          $509 = $507 + $508 | 0;
          $510 = ($501 | 0) == ($509 | 0);
          if ($510) {
           $$lcssa243 = $509;
           break;
          } else {
           $$pre$i2$i$i165345 = $$pre$i2$i$i165268;
           $457 = $881;
           $487 = $501;
          }
         }
        }
       } while (0);
       if ($25) {
        $511 = HEAP8[$__sym >> 0] | 0;
        $512 = $511 & 1;
        $513 = $512 << 24 >> 24 == 0;
        $514 = HEAP32[$26 >> 2] | 0;
        $515 = HEAP32[$28 >> 2] | 0;
        $516 = $511 & 255;
        $517 = $516 >>> 1;
        $518 = $513 ? $27 : $514;
        $519 = $513 ? $517 : $515;
        $520 = $518 + $519 | 0;
        $521 = ($$lcssa243 | 0) == ($520 | 0);
        if ($521) {
         $878 = $876;
         $__trailing_sign$1 = $__trailing_sign$0355;
        } else {
         label = 143;
         break L4;
        }
       } else {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
       }
       break;
      }
     case 4:
      {
       $67 = HEAP8[$__ts >> 0] | 0;
       $$pre$i2$i$i148 = $877;
       $541 = $877;
       $596 = $876;
       $__ng$0 = 0;
       L145 : while (1) {
        $524 = HEAP32[$__b >> 2] | 0;
        $525 = ($524 | 0) == (0 | 0);
        do {
         if ($525) {
          $539 = 0;
         } else {
          $526 = $524 + 12 | 0;
          $527 = HEAP32[$526 >> 2] | 0;
          $528 = $524 + 16 | 0;
          $529 = HEAP32[$528 >> 2] | 0;
          $530 = ($527 | 0) == ($529 | 0);
          if ($530) {
           $531 = HEAP32[$524 >> 2] | 0;
           $532 = $531 + 36 | 0;
           $533 = HEAP32[$532 >> 2] | 0;
           __THREW__ = 0;
           $534 = (tempInt = invoke_ii($533 | 0, $524 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $535 = __THREW__;
           __THREW__ = 0;
           $536 = $535 & 1;
           if ($536) {
            label = 23;
            break L4;
           }
           $537 = ($534 | 0) == -1;
           if ($537) {
            HEAP32[$__b >> 2] = 0;
            $539 = 0;
            break;
           } else {
            $$pre$i$i$i144 = HEAP32[$__b >> 2] | 0;
            $539 = $$pre$i$i$i144;
            break;
           }
          } else {
           $539 = $524;
          }
         }
        } while (0);
        $538 = ($539 | 0) == (0 | 0);
        $540 = ($541 | 0) == (0 | 0);
        do {
         if ($540) {
          $$pre$i2$i$i148256 = $$pre$i2$i$i148;
          label = 156;
         } else {
          $542 = $541 + 12 | 0;
          $543 = HEAP32[$542 >> 2] | 0;
          $544 = $541 + 16 | 0;
          $545 = HEAP32[$544 >> 2] | 0;
          $546 = ($543 | 0) == ($545 | 0);
          if (!$546) {
           if ($538) {
            $$pre$i2$i$i148258 = $$pre$i2$i$i148;
            $882 = $541;
            break;
           } else {
            $$lcssa371 = $596;
            $$pre$i2$i$i108 = $$pre$i2$i$i148;
            $__ng$0$lcssa372 = $__ng$0;
            break L145;
           }
          }
          $547 = HEAP32[$541 >> 2] | 0;
          $548 = $547 + 36 | 0;
          $549 = HEAP32[$548 >> 2] | 0;
          __THREW__ = 0;
          $550 = (tempInt = invoke_ii($549 | 0, $541 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $551 = __THREW__;
          __THREW__ = 0;
          $552 = $551 & 1;
          if ($552) {
           label = 23;
           break L4;
          }
          $553 = ($550 | 0) == -1;
          if ($553) {
           HEAP32[$__e >> 2] = 0;
           $$pre$i2$i$i148256 = 0;
           label = 156;
           break;
          } else {
           $554 = ($$pre$i2$i$i148 | 0) == (0 | 0);
           $tmp$i$i150 = $538 ^ $554;
           if ($tmp$i$i150) {
            $$pre$i2$i$i148258 = $$pre$i2$i$i148;
            $882 = $$pre$i2$i$i148;
            break;
           } else {
            $$lcssa371 = $596;
            $$pre$i2$i$i108 = $$pre$i2$i$i148;
            $__ng$0$lcssa372 = $__ng$0;
            break L145;
           }
          }
         }
        } while (0);
        if ((label | 0) == 156) {
         label = 0;
         if ($538) {
          $$lcssa371 = $596;
          $$pre$i2$i$i108 = $$pre$i2$i$i148256;
          $__ng$0$lcssa372 = $__ng$0;
          break;
         } else {
          $$pre$i2$i$i148258 = $$pre$i2$i$i148256;
          $882 = 0;
         }
        }
        $555 = HEAP32[$__b >> 2] | 0;
        $556 = $555 + 12 | 0;
        $557 = HEAP32[$556 >> 2] | 0;
        $558 = $555 + 16 | 0;
        $559 = HEAP32[$558 >> 2] | 0;
        $560 = ($557 | 0) == ($559 | 0);
        if ($560) {
         $561 = HEAP32[$555 >> 2] | 0;
         $562 = $561 + 36 | 0;
         $563 = HEAP32[$562 >> 2] | 0;
         __THREW__ = 0;
         $564 = (tempInt = invoke_ii($563 | 0, $555 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $565 = __THREW__;
         __THREW__ = 0;
         $566 = $565 & 1;
         if ($566) {
          label = 23;
          break L4;
         } else {
          $$0$i$i140 = $564;
         }
        } else {
         $567 = HEAP8[$557 >> 0] | 0;
         $568 = $567 & 255;
         $$0$i$i140 = $568;
        }
        $569 = $$0$i$i140 & 255;
        $isascii1$i138 = $569 << 24 >> 24 > -1;
        if ($isascii1$i138) {
         $sext210 = $$0$i$i140 << 24;
         $570 = $sext210 >> 24;
         $571 = HEAP32[$17 >> 2] | 0;
         $572 = $571 + ($570 << 1) | 0;
         $573 = HEAP16[$572 >> 1] | 0;
         $574 = $573 & 2048;
         $575 = $574 << 16 >> 16 == 0;
         if ($575) {
          label = 167;
         } else {
          $576 = HEAP32[$__wn >> 2] | 0;
          $577 = HEAP32[$0 >> 2] | 0;
          $578 = ($576 | 0) == ($577 | 0);
          if ($578) {
           __THREW__ = 0;
           invoke_viii(482, $__wb | 0, $__wn | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
           $579 = __THREW__;
           __THREW__ = 0;
           $580 = $579 & 1;
           if ($580) {
            label = 23;
            break L4;
           }
           $$pre = HEAP32[$__wn >> 2] | 0;
           $582 = $$pre;
          } else {
           $582 = $576;
          }
          $581 = $582 + 1 | 0;
          HEAP32[$__wn >> 2] = $581;
          HEAP8[$582 >> 0] = $569;
          $583 = $__ng$0 + 1 | 0;
          $883 = $596;
          $__ng$1 = $583;
         }
        } else {
         label = 167;
        }
        if ((label | 0) == 167) {
         label = 0;
         $584 = HEAP8[$__grp >> 0] | 0;
         $585 = $584 & 1;
         $586 = $585 << 24 >> 24 == 0;
         $587 = HEAP32[$33 >> 2] | 0;
         $588 = $584 & 255;
         $589 = $588 >>> 1;
         $590 = $586 ? $589 : $587;
         $591 = ($590 | 0) != 0;
         $592 = ($__ng$0 | 0) != 0;
         $or$cond7 = $592 & $591;
         $593 = $569 << 24 >> 24 == $67 << 24 >> 24;
         $or$cond13 = $593 & $or$cond7;
         if (!$or$cond13) {
          $$lcssa371 = $596;
          $$pre$i2$i$i108 = $$pre$i2$i$i148258;
          $__ng$0$lcssa372 = $__ng$0;
          break;
         }
         $594 = HEAP32[$__ge >> 2] | 0;
         $595 = ($596 | 0) == ($594 | 0);
         if ($595) {
          __THREW__ = 0;
          invoke_viii(483, $__gb | 0, $__gn | 0, $__ge | 0), asyncState ? abort(-12) | 0 : 0;
          $597 = __THREW__;
          __THREW__ = 0;
          $598 = $597 & 1;
          if ($598) {
           label = 23;
           break L4;
          }
          $$pre261 = HEAP32[$__gn >> 2] | 0;
          $600 = $$pre261;
         } else {
          $600 = $596;
         }
         $599 = $600 + 4 | 0;
         HEAP32[$__gn >> 2] = $599;
         HEAP32[$600 >> 2] = $__ng$0;
         $883 = $599;
         $__ng$1 = 0;
        }
        $601 = HEAP32[$__b >> 2] | 0;
        $602 = $601 + 12 | 0;
        $603 = HEAP32[$602 >> 2] | 0;
        $604 = $601 + 16 | 0;
        $605 = HEAP32[$604 >> 2] | 0;
        $606 = ($603 | 0) == ($605 | 0);
        if ($606) {
         $607 = HEAP32[$601 >> 2] | 0;
         $608 = $607 + 40 | 0;
         $609 = HEAP32[$608 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($609 | 0, $601 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $610 = __THREW__;
         __THREW__ = 0;
         $611 = $610 & 1;
         if ($611) {
          label = 23;
          break L4;
         } else {
          $$pre$i2$i$i148 = $$pre$i2$i$i148258;
          $541 = $882;
          $596 = $883;
          $__ng$0 = $__ng$1;
          continue;
         }
        } else {
         $612 = $603 + 1 | 0;
         HEAP32[$602 >> 2] = $612;
         $$pre$i2$i$i148 = $$pre$i2$i$i148258;
         $541 = $882;
         $596 = $883;
         $__ng$0 = $__ng$1;
         continue;
        }
       }
       $613 = HEAP32[$__gb >> 2] | 0;
       $614 = ($613 | 0) != ($$lcssa371 | 0);
       $615 = ($__ng$0$lcssa372 | 0) != 0;
       $or$cond9 = $615 & $614;
       if ($or$cond9) {
        $616 = HEAP32[$__ge >> 2] | 0;
        $617 = ($$lcssa371 | 0) == ($616 | 0);
        if ($617) {
         __THREW__ = 0;
         invoke_viii(483, $__gb | 0, $__gn | 0, $__ge | 0), asyncState ? abort(-12) | 0 : 0;
         $618 = __THREW__;
         __THREW__ = 0;
         $619 = $618 & 1;
         if ($619) {
          label = 24;
          break L4;
         }
         $$pre263 = HEAP32[$__gn >> 2] | 0;
         $621 = $$pre263;
        } else {
         $621 = $$lcssa371;
        }
        $620 = $621 + 4 | 0;
        HEAP32[$__gn >> 2] = $620;
        HEAP32[$621 >> 2] = $__ng$0$lcssa372;
        $884 = $620;
       } else {
        $884 = $$lcssa371;
       }
       $622 = HEAP32[$__fd >> 2] | 0;
       $623 = ($622 | 0) > 0;
       if ($623) {
        $624 = HEAP32[$__b >> 2] | 0;
        $625 = ($624 | 0) == (0 | 0);
        do {
         if ($625) {
          $639 = 0;
         } else {
          $626 = $624 + 12 | 0;
          $627 = HEAP32[$626 >> 2] | 0;
          $628 = $624 + 16 | 0;
          $629 = HEAP32[$628 >> 2] | 0;
          $630 = ($627 | 0) == ($629 | 0);
          if ($630) {
           $631 = HEAP32[$624 >> 2] | 0;
           $632 = $631 + 36 | 0;
           $633 = HEAP32[$632 >> 2] | 0;
           __THREW__ = 0;
           $634 = (tempInt = invoke_ii($633 | 0, $624 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $635 = __THREW__;
           __THREW__ = 0;
           $636 = $635 & 1;
           if ($636) {
            label = 24;
            break L4;
           }
           $637 = ($634 | 0) == -1;
           if ($637) {
            HEAP32[$__b >> 2] = 0;
            $639 = 0;
            break;
           } else {
            $$pre$i$i$i104 = HEAP32[$__b >> 2] | 0;
            $639 = $$pre$i$i$i104;
            break;
           }
          } else {
           $639 = $624;
          }
         }
        } while (0);
        $638 = ($639 | 0) == (0 | 0);
        $640 = ($$pre$i2$i$i108 | 0) == (0 | 0);
        do {
         if ($640) {
          label = 193;
         } else {
          $641 = $$pre$i2$i$i108 + 12 | 0;
          $642 = HEAP32[$641 >> 2] | 0;
          $643 = $$pre$i2$i$i108 + 16 | 0;
          $644 = HEAP32[$643 >> 2] | 0;
          $645 = ($642 | 0) == ($644 | 0);
          if ($645) {
           $646 = HEAP32[$$pre$i2$i$i108 >> 2] | 0;
           $647 = $646 + 36 | 0;
           $648 = HEAP32[$647 >> 2] | 0;
           __THREW__ = 0;
           $649 = (tempInt = invoke_ii($648 | 0, $$pre$i2$i$i108 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $650 = __THREW__;
           __THREW__ = 0;
           $651 = $650 & 1;
           if ($651) {
            label = 24;
            break L4;
           }
           $652 = ($649 | 0) == -1;
           if ($652) {
            HEAP32[$__e >> 2] = 0;
            label = 193;
            break;
           }
          }
          if ($638) {
           $885 = $$pre$i2$i$i108;
          } else {
           label = 198;
           break L4;
          }
         }
        } while (0);
        if ((label | 0) == 193) {
         label = 0;
         if ($638) {
          label = 198;
          break L4;
         } else {
          $885 = 0;
         }
        }
        $653 = HEAP32[$__b >> 2] | 0;
        $654 = $653 + 12 | 0;
        $655 = HEAP32[$654 >> 2] | 0;
        $656 = $653 + 16 | 0;
        $657 = HEAP32[$656 >> 2] | 0;
        $658 = ($655 | 0) == ($657 | 0);
        if ($658) {
         $659 = HEAP32[$653 >> 2] | 0;
         $660 = $659 + 36 | 0;
         $661 = HEAP32[$660 >> 2] | 0;
         __THREW__ = 0;
         $662 = (tempInt = invoke_ii($661 | 0, $653 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $663 = __THREW__;
         __THREW__ = 0;
         $664 = $663 & 1;
         if ($664) {
          label = 24;
          break L4;
         } else {
          $$0$i$i97 = $662;
         }
        } else {
         $665 = HEAP8[$655 >> 0] | 0;
         $666 = $665 & 255;
         $$0$i$i97 = $666;
        }
        $667 = $$0$i$i97 & 255;
        $668 = HEAP8[$__dp >> 0] | 0;
        $669 = $667 << 24 >> 24 == $668 << 24 >> 24;
        if (!$669) {
         label = 198;
         break L4;
        }
        $672 = HEAP32[$__b >> 2] | 0;
        $673 = $672 + 12 | 0;
        $674 = HEAP32[$673 >> 2] | 0;
        $675 = $672 + 16 | 0;
        $676 = HEAP32[$675 >> 2] | 0;
        $677 = ($674 | 0) == ($676 | 0);
        if ($677) {
         $678 = HEAP32[$672 >> 2] | 0;
         $679 = $678 + 40 | 0;
         $680 = HEAP32[$679 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($680 | 0, $672 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $681 = __THREW__;
         __THREW__ = 0;
         $682 = $681 & 1;
         if ($682) {
          label = 24;
          break L4;
         }
        } else {
         $683 = $674 + 1 | 0;
         HEAP32[$673 >> 2] = $683;
        }
        $684 = ($622 | 0) > 0;
        if ($684) {
         $$pre$i2$i$i84336 = $885;
         $702 = $885;
         $762 = $622;
         while (1) {
          $685 = HEAP32[$__b >> 2] | 0;
          $686 = ($685 | 0) == (0 | 0);
          do {
           if ($686) {
            $700 = 0;
           } else {
            $687 = $685 + 12 | 0;
            $688 = HEAP32[$687 >> 2] | 0;
            $689 = $685 + 16 | 0;
            $690 = HEAP32[$689 >> 2] | 0;
            $691 = ($688 | 0) == ($690 | 0);
            if ($691) {
             $692 = HEAP32[$685 >> 2] | 0;
             $693 = $692 + 36 | 0;
             $694 = HEAP32[$693 >> 2] | 0;
             __THREW__ = 0;
             $695 = (tempInt = invoke_ii($694 | 0, $685 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $696 = __THREW__;
             __THREW__ = 0;
             $697 = $696 & 1;
             if ($697) {
              label = 22;
              break L4;
             }
             $698 = ($695 | 0) == -1;
             if ($698) {
              HEAP32[$__b >> 2] = 0;
              $700 = 0;
              break;
             } else {
              $$pre$i$i$i80 = HEAP32[$__b >> 2] | 0;
              $700 = $$pre$i$i$i80;
              break;
             }
            } else {
             $700 = $685;
            }
           }
          } while (0);
          $699 = ($700 | 0) == (0 | 0);
          $701 = ($702 | 0) == (0 | 0);
          do {
           if ($701) {
            $$pre$i2$i$i84264$ph = $$pre$i2$i$i84336;
            label = 215;
           } else {
            $703 = $702 + 12 | 0;
            $704 = HEAP32[$703 >> 2] | 0;
            $705 = $702 + 16 | 0;
            $706 = HEAP32[$705 >> 2] | 0;
            $707 = ($704 | 0) == ($706 | 0);
            if (!$707) {
             if ($699) {
              $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;
              $886 = $702;
              break;
             } else {
              label = 222;
              break L4;
             }
            }
            $708 = HEAP32[$702 >> 2] | 0;
            $709 = $708 + 36 | 0;
            $710 = HEAP32[$709 >> 2] | 0;
            __THREW__ = 0;
            $711 = (tempInt = invoke_ii($710 | 0, $702 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $712 = __THREW__;
            __THREW__ = 0;
            $713 = $712 & 1;
            if ($713) {
             label = 22;
             break L4;
            }
            $714 = ($711 | 0) == -1;
            if ($714) {
             HEAP32[$__e >> 2] = 0;
             $$pre$i2$i$i84264$ph = 0;
             label = 215;
             break;
            } else {
             $715 = ($$pre$i2$i$i84336 | 0) == (0 | 0);
             $tmp$i$i86 = $699 ^ $715;
             if ($tmp$i$i86) {
              $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;
              $886 = $$pre$i2$i$i84336;
              break;
             } else {
              label = 222;
              break L4;
             }
            }
           }
          } while (0);
          if ((label | 0) == 215) {
           label = 0;
           if ($699) {
            label = 222;
            break L4;
           } else {
            $$pre$i2$i$i84264283 = $$pre$i2$i$i84264$ph;
            $886 = 0;
           }
          }
          $716 = HEAP32[$__b >> 2] | 0;
          $717 = $716 + 12 | 0;
          $718 = HEAP32[$717 >> 2] | 0;
          $719 = $716 + 16 | 0;
          $720 = HEAP32[$719 >> 2] | 0;
          $721 = ($718 | 0) == ($720 | 0);
          if ($721) {
           $722 = HEAP32[$716 >> 2] | 0;
           $723 = $722 + 36 | 0;
           $724 = HEAP32[$723 >> 2] | 0;
           __THREW__ = 0;
           $725 = (tempInt = invoke_ii($724 | 0, $716 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $726 = __THREW__;
           __THREW__ = 0;
           $727 = $726 & 1;
           if ($727) {
            label = 22;
            break L4;
           } else {
            $$0$i$i75 = $725;
           }
          } else {
           $728 = HEAP8[$718 >> 0] | 0;
           $729 = $728 & 255;
           $$0$i$i75 = $729;
          }
          $730 = $$0$i$i75 & 255;
          $isascii1$i73 = $730 << 24 >> 24 > -1;
          if (!$isascii1$i73) {
           label = 222;
           break L4;
          }
          $sext = $$0$i$i75 << 24;
          $731 = $sext >> 24;
          $732 = HEAP32[$17 >> 2] | 0;
          $733 = $732 + ($731 << 1) | 0;
          $734 = HEAP16[$733 >> 1] | 0;
          $735 = $734 & 2048;
          $736 = $735 << 16 >> 16 == 0;
          if ($736) {
           label = 222;
           break L4;
          }
          $739 = HEAP32[$__wn >> 2] | 0;
          $740 = HEAP32[$0 >> 2] | 0;
          $741 = ($739 | 0) == ($740 | 0);
          if ($741) {
           __THREW__ = 0;
           invoke_viii(482, $__wb | 0, $__wn | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
           $742 = __THREW__;
           __THREW__ = 0;
           $743 = $742 & 1;
           if ($743) {
            label = 22;
            break L4;
           }
          }
          $744 = HEAP32[$__b >> 2] | 0;
          $745 = $744 + 12 | 0;
          $746 = HEAP32[$745 >> 2] | 0;
          $747 = $744 + 16 | 0;
          $748 = HEAP32[$747 >> 2] | 0;
          $749 = ($746 | 0) == ($748 | 0);
          if ($749) {
           $750 = HEAP32[$744 >> 2] | 0;
           $751 = $750 + 36 | 0;
           $752 = HEAP32[$751 >> 2] | 0;
           __THREW__ = 0;
           $753 = (tempInt = invoke_ii($752 | 0, $744 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $754 = __THREW__;
           __THREW__ = 0;
           $755 = $754 & 1;
           if ($755) {
            label = 22;
            break L4;
           } else {
            $$0$i$i68 = $753;
           }
          } else {
           $756 = HEAP8[$746 >> 0] | 0;
           $757 = $756 & 255;
           $$0$i$i68 = $757;
          }
          $758 = $$0$i$i68 & 255;
          $759 = HEAP32[$__wn >> 2] | 0;
          $760 = $759 + 1 | 0;
          HEAP32[$__wn >> 2] = $760;
          HEAP8[$759 >> 0] = $758;
          $761 = $762 + -1 | 0;
          HEAP32[$__fd >> 2] = $761;
          $763 = HEAP32[$__b >> 2] | 0;
          $764 = $763 + 12 | 0;
          $765 = HEAP32[$764 >> 2] | 0;
          $766 = $763 + 16 | 0;
          $767 = HEAP32[$766 >> 2] | 0;
          $768 = ($765 | 0) == ($767 | 0);
          if ($768) {
           $769 = HEAP32[$763 >> 2] | 0;
           $770 = $769 + 40 | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           __THREW__ = 0;
           (tempInt = invoke_ii($771 | 0, $763 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $772 = __THREW__;
           __THREW__ = 0;
           $773 = $772 & 1;
           if ($773) {
            label = 22;
            break L4;
           }
          } else {
           $775 = $765 + 1 | 0;
           HEAP32[$764 >> 2] = $775;
          }
          $774 = ($762 | 0) > 1;
          if ($774) {
           $$pre$i2$i$i84336 = $$pre$i2$i$i84264283;
           $702 = $886;
           $762 = $761;
          } else {
           break;
          }
         }
        }
       }
       $776 = HEAP32[$__wn >> 2] | 0;
       $777 = HEAP32[$__wb >> 2] | 0;
       $778 = ($776 | 0) == ($777 | 0);
       if ($778) {
        label = 233;
        break L4;
       } else {
        $878 = $884;
        $__trailing_sign$1 = $__trailing_sign$0355;
       }
       break;
      }
     default:
      {
       $878 = $876;
       $__trailing_sign$1 = $__trailing_sign$0355;
      }
     }
    } while (0);
    L266 : do {
     if ((label | 0) == 42) {
      while (1) {
       label = 0;
       $131 = HEAP32[$__b >> 2] | 0;
       $132 = ($131 | 0) == (0 | 0);
       do {
        if ($132) {
         $146 = 0;
        } else {
         $133 = $131 + 12 | 0;
         $134 = HEAP32[$133 >> 2] | 0;
         $135 = $131 + 16 | 0;
         $136 = HEAP32[$135 >> 2] | 0;
         $137 = ($134 | 0) == ($136 | 0);
         if ($137) {
          $138 = HEAP32[$131 >> 2] | 0;
          $139 = $138 + 36 | 0;
          $140 = HEAP32[$139 >> 2] | 0;
          __THREW__ = 0;
          $141 = (tempInt = invoke_ii($140 | 0, $131 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $142 = __THREW__;
          __THREW__ = 0;
          $143 = $142 & 1;
          if ($143) {
           label = 20;
           break L4;
          }
          $144 = ($141 | 0) == -1;
          if ($144) {
           HEAP32[$__b >> 2] = 0;
           $146 = 0;
           break;
          } else {
           $$pre$i$i$i48 = HEAP32[$__b >> 2] | 0;
           $146 = $$pre$i$i$i48;
           break;
          }
         } else {
          $146 = $131;
         }
        }
       } while (0);
       $145 = ($146 | 0) == (0 | 0);
       $147 = ($148 | 0) == (0 | 0);
       do {
        if ($147) {
         $$pre$i2$i$i52278 = $$pre$i2$i$i52;
         label = 54;
        } else {
         $149 = $148 + 12 | 0;
         $150 = HEAP32[$149 >> 2] | 0;
         $151 = $148 + 16 | 0;
         $152 = HEAP32[$151 >> 2] | 0;
         $153 = ($150 | 0) == ($152 | 0);
         if (!$153) {
          if ($145) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;
           $879 = $148;
           break;
          } else {
           $878 = $876;
           $__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
         $154 = HEAP32[$148 >> 2] | 0;
         $155 = $154 + 36 | 0;
         $156 = HEAP32[$155 >> 2] | 0;
         __THREW__ = 0;
         $157 = (tempInt = invoke_ii($156 | 0, $148 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $158 = __THREW__;
         __THREW__ = 0;
         $159 = $158 & 1;
         if ($159) {
          label = 20;
          break L4;
         }
         $160 = ($157 | 0) == -1;
         if ($160) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i2$i$i52278 = 0;
          label = 54;
          break;
         } else {
          $161 = ($$pre$i2$i$i52 | 0) == (0 | 0);
          $tmp$i$i54 = $145 ^ $161;
          if ($tmp$i$i54) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;
           $879 = $$pre$i2$i$i52;
           break;
          } else {
           $878 = $876;
           $__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
        }
       } while (0);
       if ((label | 0) == 54) {
        label = 0;
        if ($145) {
         $878 = $876;
         $__trailing_sign$1 = $__trailing_sign$0355;
         break L266;
        } else {
         $$pre$i2$i$i52280 = $$pre$i2$i$i52278;
         $879 = 0;
        }
       }
       $162 = HEAP32[$__b >> 2] | 0;
       $163 = $162 + 12 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       $165 = $162 + 16 | 0;
       $166 = HEAP32[$165 >> 2] | 0;
       $167 = ($164 | 0) == ($166 | 0);
       if ($167) {
        $168 = HEAP32[$162 >> 2] | 0;
        $169 = $168 + 36 | 0;
        $170 = HEAP32[$169 >> 2] | 0;
        __THREW__ = 0;
        $171 = (tempInt = invoke_ii($170 | 0, $162 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $172 = __THREW__;
        __THREW__ = 0;
        $173 = $172 & 1;
        if ($173) {
         label = 20;
         break L4;
        } else {
         $$0$i$i58 = $171;
        }
       } else {
        $174 = HEAP8[$164 >> 0] | 0;
        $175 = $174 & 255;
        $$0$i$i58 = $175;
       }
       $176 = $$0$i$i58 & 255;
       $isascii1$i61 = $176 << 24 >> 24 > -1;
       if (!$isascii1$i61) {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $sext211 = $$0$i$i58 << 24;
       $177 = $sext211 >> 24;
       $178 = HEAP32[$17 >> 2] | 0;
       $179 = $178 + ($177 << 1) | 0;
       $180 = HEAP16[$179 >> 1] | 0;
       $181 = $180 & 8192;
       $182 = $181 << 16 >> 16 == 0;
       if ($182) {
        $878 = $876;
        $__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $183 = HEAP32[$__b >> 2] | 0;
       $184 = $183 + 12 | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = $183 + 16 | 0;
       $187 = HEAP32[$186 >> 2] | 0;
       $188 = ($185 | 0) == ($187 | 0);
       if ($188) {
        $189 = HEAP32[$183 >> 2] | 0;
        $190 = $189 + 40 | 0;
        $191 = HEAP32[$190 >> 2] | 0;
        __THREW__ = 0;
        $192 = (tempInt = invoke_ii($191 | 0, $183 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $193 = __THREW__;
        __THREW__ = 0;
        $194 = $193 & 1;
        if ($194) {
         label = 20;
         break L4;
        } else {
         $$0$i$i65 = $192;
        }
       } else {
        $195 = $185 + 1 | 0;
        HEAP32[$184 >> 2] = $195;
        $196 = HEAP8[$185 >> 0] | 0;
        $197 = $196 & 255;
        $$0$i$i65 = $197;
       }
       $198 = $$0$i$i65 & 255;
       __THREW__ = 0;
       invoke_vii(407, $__spaces | 0, $198 | 0), asyncState ? abort(-12) | 0 : 0;
       $199 = __THREW__;
       __THREW__ = 0;
       $200 = $199 & 1;
       if ($200) {
        label = 20;
        break L4;
       } else {
        $$pre$i2$i$i52 = $$pre$i2$i$i52280;
        $148 = $879;
        label = 42;
       }
      }
     }
    } while (0);
    $781 = $__p$0353 + 1 | 0;
    $782 = $781 >>> 0 < 4;
    if ($782) {
     $876 = $878;
     $__p$0353 = $781;
     $__trailing_sign$0355 = $__trailing_sign$1;
    } else {
     $$lcssa313 = $878;
     $__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 235;
     break;
    }
   }
   L300 : switch (label | 0) {
   case 20:
    {
     $70 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $71 = tempRet0;
     $lpad$phi$index = $70;
     $lpad$phi$index7 = $71;
     break L1;
     break;
    }
   case 21:
    {
     $72 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $73 = tempRet0;
     $lpad$phi$index = $72;
     $lpad$phi$index7 = $73;
     break L1;
     break;
    }
   case 22:
    {
     $74 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $75 = tempRet0;
     $lpad$phi$index = $74;
     $lpad$phi$index7 = $75;
     break L1;
     break;
    }
   case 23:
    {
     $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $77 = tempRet0;
     $lpad$phi$index = $76;
     $lpad$phi$index7 = $77;
     break L1;
     break;
    }
   case 24:
    {
     $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $79 = tempRet0;
     $lpad$phi$index = $78;
     $lpad$phi$index7 = $79;
     break L1;
     break;
    }
   case 40:
    {
     $128 = HEAP32[$__err >> 2] | 0;
     $129 = $128 | 4;
     HEAP32[$__err >> 2] = $129;
     $$0 = 0;
     break;
    }
   case 104:
    {
     $374 = HEAP32[$__err >> 2] | 0;
     $375 = $374 | 4;
     HEAP32[$__err >> 2] = $375;
     $$0 = 0;
     break;
    }
   case 143:
    {
     $522 = HEAP32[$__err >> 2] | 0;
     $523 = $522 | 4;
     HEAP32[$__err >> 2] = $523;
     $$0 = 0;
     break;
    }
   case 198:
    {
     $670 = HEAP32[$__err >> 2] | 0;
     $671 = $670 | 4;
     HEAP32[$__err >> 2] = $671;
     $$0 = 0;
     break;
    }
   case 222:
    {
     $737 = HEAP32[$__err >> 2] | 0;
     $738 = $737 | 4;
     HEAP32[$__err >> 2] = $738;
     $$0 = 0;
     break;
    }
   case 233:
    {
     $779 = HEAP32[$__err >> 2] | 0;
     $780 = $779 | 4;
     HEAP32[$__err >> 2] = $780;
     $$0 = 0;
     break;
    }
   case 235:
    {
     $783 = ($__trailing_sign$0$lcssa | 0) == (0 | 0);
     L302 : do {
      if (!$783) {
       $784 = $__trailing_sign$0$lcssa + 1 | 0;
       $785 = $__trailing_sign$0$lcssa + 8 | 0;
       $786 = $__trailing_sign$0$lcssa + 4 | 0;
       $__i$0 = 1;
       L304 : while (1) {
        $787 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
        $788 = $787 & 1;
        $789 = $788 << 24 >> 24 == 0;
        if ($789) {
         $791 = $787 & 255;
         $792 = $791 >>> 1;
         $794 = $792;
        } else {
         $790 = HEAP32[$786 >> 2] | 0;
         $794 = $790;
        }
        $793 = $__i$0 >>> 0 < $794 >>> 0;
        if (!$793) {
         break L302;
        }
        $795 = HEAP32[$__b >> 2] | 0;
        $796 = ($795 | 0) == (0 | 0);
        do {
         if ($796) {
          $810 = 0;
         } else {
          $797 = $795 + 12 | 0;
          $798 = HEAP32[$797 >> 2] | 0;
          $799 = $795 + 16 | 0;
          $800 = HEAP32[$799 >> 2] | 0;
          $801 = ($798 | 0) == ($800 | 0);
          if ($801) {
           $802 = HEAP32[$795 >> 2] | 0;
           $803 = $802 + 36 | 0;
           $804 = HEAP32[$803 >> 2] | 0;
           __THREW__ = 0;
           $805 = (tempInt = invoke_ii($804 | 0, $795 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $806 = __THREW__;
           __THREW__ = 0;
           $807 = $806 & 1;
           if ($807) {
            label = 19;
            break L304;
           }
           $808 = ($805 | 0) == -1;
           if ($808) {
            HEAP32[$__b >> 2] = 0;
            $810 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
            $810 = $$pre$i$i$i;
            break;
           }
          } else {
           $810 = $795;
          }
         }
        } while (0);
        $809 = ($810 | 0) == (0 | 0);
        $811 = HEAP32[$__e >> 2] | 0;
        $812 = ($811 | 0) == (0 | 0);
        do {
         if ($812) {
          label = 253;
         } else {
          $813 = $811 + 12 | 0;
          $814 = HEAP32[$813 >> 2] | 0;
          $815 = $811 + 16 | 0;
          $816 = HEAP32[$815 >> 2] | 0;
          $817 = ($814 | 0) == ($816 | 0);
          if ($817) {
           $818 = HEAP32[$811 >> 2] | 0;
           $819 = $818 + 36 | 0;
           $820 = HEAP32[$819 >> 2] | 0;
           __THREW__ = 0;
           $821 = (tempInt = invoke_ii($820 | 0, $811 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $822 = __THREW__;
           __THREW__ = 0;
           $823 = $822 & 1;
           if ($823) {
            label = 19;
            break L304;
           }
           $824 = ($821 | 0) == -1;
           if ($824) {
            HEAP32[$__e >> 2] = 0;
            label = 253;
            break;
           }
          }
          if (!$809) {
           label = 260;
           break L304;
          }
         }
        } while (0);
        if ((label | 0) == 253) {
         label = 0;
         if ($809) {
          label = 260;
          break;
         }
        }
        $825 = HEAP32[$__b >> 2] | 0;
        $826 = $825 + 12 | 0;
        $827 = HEAP32[$826 >> 2] | 0;
        $828 = $825 + 16 | 0;
        $829 = HEAP32[$828 >> 2] | 0;
        $830 = ($827 | 0) == ($829 | 0);
        if ($830) {
         $831 = HEAP32[$825 >> 2] | 0;
         $832 = $831 + 36 | 0;
         $833 = HEAP32[$832 >> 2] | 0;
         __THREW__ = 0;
         $834 = (tempInt = invoke_ii($833 | 0, $825 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $835 = __THREW__;
         __THREW__ = 0;
         $836 = $835 & 1;
         if ($836) {
          label = 19;
          break;
         } else {
          $$0$i$i = $834;
         }
        } else {
         $837 = HEAP8[$827 >> 0] | 0;
         $838 = $837 & 255;
         $$0$i$i = $838;
        }
        $839 = $$0$i$i & 255;
        $840 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
        $841 = $840 & 1;
        $842 = $841 << 24 >> 24 == 0;
        if ($842) {
         $845 = $784;
        } else {
         $843 = HEAP32[$785 >> 2] | 0;
         $845 = $843;
        }
        $844 = $845 + $__i$0 | 0;
        $846 = HEAP8[$844 >> 0] | 0;
        $847 = $839 << 24 >> 24 == $846 << 24 >> 24;
        if (!$847) {
         label = 260;
         break;
        }
        $850 = $__i$0 + 1 | 0;
        $851 = HEAP32[$__b >> 2] | 0;
        $852 = $851 + 12 | 0;
        $853 = HEAP32[$852 >> 2] | 0;
        $854 = $851 + 16 | 0;
        $855 = HEAP32[$854 >> 2] | 0;
        $856 = ($853 | 0) == ($855 | 0);
        if ($856) {
         $857 = HEAP32[$851 >> 2] | 0;
         $858 = $857 + 40 | 0;
         $859 = HEAP32[$858 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($859 | 0, $851 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $860 = __THREW__;
         __THREW__ = 0;
         $861 = $860 & 1;
         if ($861) {
          label = 19;
          break;
         } else {
          $__i$0 = $850;
          continue;
         }
        } else {
         $862 = $853 + 1 | 0;
         HEAP32[$852 >> 2] = $862;
         $__i$0 = $850;
         continue;
        }
       }
       if ((label | 0) == 19) {
        $68 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $69 = tempRet0;
        $lpad$phi$index = $68;
        $lpad$phi$index7 = $69;
        break L1;
       } else if ((label | 0) == 260) {
        $848 = HEAP32[$__err >> 2] | 0;
        $849 = $848 | 4;
        HEAP32[$__err >> 2] = $849;
        $$0 = 0;
        break L300;
       }
      }
     } while (0);
     $863 = HEAP32[$__gb >> 2] | 0;
     $864 = ($863 | 0) == ($$lcssa313 | 0);
     if ($864) {
      $$0 = 1;
     } else {
      HEAP32[$__et >> 2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $863, $$lcssa313, $__et), asyncState ? abort(-12) | 0 : 0;
      $865 = HEAP32[$__et >> 2] | 0;
      $866 = ($865 | 0) == 0;
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err >> 2] | 0;
       $868 = $867 | 4;
       HEAP32[$__err >> 2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
   $869 = HEAP32[$__gb >> 2] | 0;
   HEAP32[$__gb >> 2] = 0;
   $870 = ($869 | 0) == (0 | 0);
   if (!$870) {
    $871 = HEAP32[$2 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi($871 | 0, $869 | 0), asyncState ? abort(-12) | 0 : 0;
    $872 = __THREW__;
    __THREW__ = 0;
    $873 = $872 & 1;
    if ($873) {
     $874 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $875 = tempRet0;
     ___clang_call_terminate($874), asyncState ? abort(-12) | 0 : 0;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
 $82 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 $83 = ($82 | 0) == (0 | 0);
 if (!$83) {
  $84 = HEAP32[$2 >> 2] | 0;
  __THREW__ = 0;
  invoke_vi($84 | 0, $82 | 0), asyncState ? abort(-12) | 0 : 0;
  $85 = __THREW__;
  __THREW__ = 0;
  $86 = $85 & 1;
  if ($86) {
   $87 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $88 = tempRet0;
   ___clang_call_terminate($87), asyncState ? abort(-12) | 0 : 0;
  }
 }
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0, $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  {
   $$0 = 0.0;
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $0 = $f + 4 | 0;
   $1 = $f + 100 | 0;
   while (1) {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[$1 >> 2] | 0;
    $4 = $2 >>> 0 < $3 >>> 0;
    if ($4) {
     $5 = $2 + 1 | 0;
     HEAP32[$0 >> 2] = $5;
     $6 = HEAP8[$2 >> 0] | 0;
     $7 = $6 & 255;
     $9 = $7;
    } else {
     $8 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $9 = $8;
    }
    $10 = (tempInt = _isspace($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $11 = ($10 | 0) == 0;
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275 | 0) == 45;
   L13 : do {
    switch ($$lcssa275 | 0) {
    case 43:
    case 45:
     {
      $13 = $12 & 1;
      $14 = $13 << 1;
      $15 = 1 - $14 | 0;
      $16 = HEAP32[$0 >> 2] | 0;
      $17 = HEAP32[$1 >> 2] | 0;
      $18 = $16 >>> 0 < $17 >>> 0;
      if ($18) {
       $19 = $16 + 1 | 0;
       HEAP32[$0 >> 2] = $19;
       $20 = HEAP8[$16 >> 0] | 0;
       $21 = $20 & 255;
       $c$0 = $21;
       $sign$0 = $15;
       break L13;
      } else {
       $22 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $c$0 = $22;
       $sign$0 = $15;
       break L13;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa275;
      $sign$0 = 1;
     }
    }
   } while (0);
   $c$179 = $c$0;
   $i$078 = 0;
   while (1) {
    $23 = $c$179 | 32;
    $24 = 17992 + $i$078 | 0;
    $25 = HEAP8[$24 >> 0] | 0;
    $26 = $25 << 24 >> 24;
    $27 = ($23 | 0) == ($26 | 0);
    if (!$27) {
     $c$1$lcssa = $c$179;
     $i$0$lcssa = $i$078;
     break;
    }
    $28 = $i$078 >>> 0 < 7;
    do {
     if ($28) {
      $29 = HEAP32[$0 >> 2] | 0;
      $30 = HEAP32[$1 >> 2] | 0;
      $31 = $29 >>> 0 < $30 >>> 0;
      if ($31) {
       $32 = $29 + 1 | 0;
       HEAP32[$0 >> 2] = $32;
       $33 = HEAP8[$29 >> 0] | 0;
       $34 = $33 & 255;
       $c$2 = $34;
       break;
      } else {
       $35 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while (0);
    $36 = $i$078 + 1 | 0;
    $37 = $36 >>> 0 < 8;
    if ($37) {
     $c$179 = $c$2;
     $i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;
     $i$0$lcssa = $36;
     break;
    }
   }
   L29 : do {
    switch ($i$0$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23;
      break;
     }
    default:
     {
      $38 = $i$0$lcssa >>> 0 > 3;
      $39 = ($pok | 0) != 0;
      $or$cond5 = $39 & $38;
      if ($or$cond5) {
       $40 = ($i$0$lcssa | 0) == 8;
       if ($40) {
        break L29;
       } else {
        label = 23;
        break L29;
       }
      }
      $53 = ($i$0$lcssa | 0) == 0;
      L34 : do {
       if ($53) {
        $c$377 = $c$1$lcssa;
        $i$276 = 0;
        while (1) {
         $54 = $c$377 | 32;
         $55 = 19841 + $i$276 | 0;
         $56 = HEAP8[$55 >> 0] | 0;
         $57 = $56 << 24 >> 24;
         $58 = ($54 | 0) == ($57 | 0);
         if (!$58) {
          $c$5 = $c$377;
          $i$3 = $i$276;
          break L34;
         }
         $59 = $i$276 >>> 0 < 2;
         do {
          if ($59) {
           $60 = HEAP32[$0 >> 2] | 0;
           $61 = HEAP32[$1 >> 2] | 0;
           $62 = $60 >>> 0 < $61 >>> 0;
           if ($62) {
            $63 = $60 + 1 | 0;
            HEAP32[$0 >> 2] = $63;
            $64 = HEAP8[$60 >> 0] | 0;
            $65 = $64 & 255;
            $c$4 = $65;
            break;
           } else {
            $66 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $c$4 = $66;
            break;
           }
          } else {
           $c$4 = $c$377;
          }
         } while (0);
         $67 = $i$276 + 1 | 0;
         $68 = $67 >>> 0 < 3;
         if ($68) {
          $c$377 = $c$4;
          $i$276 = $67;
         } else {
          $c$5 = $c$4;
          $i$3 = $67;
          break;
         }
        }
       } else {
        $c$5 = $c$1$lcssa;
        $i$3 = $i$0$lcssa;
       }
      } while (0);
      switch ($i$3 | 0) {
      case 3:
       {
        $69 = HEAP32[$0 >> 2] | 0;
        $70 = HEAP32[$1 >> 2] | 0;
        $71 = $69 >>> 0 < $70 >>> 0;
        if ($71) {
         $72 = $69 + 1 | 0;
         HEAP32[$0 >> 2] = $72;
         $73 = HEAP8[$69 >> 0] | 0;
         $74 = $73 & 255;
         $77 = $74;
        } else {
         $75 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $77 = $75;
        }
        $76 = ($77 | 0) == 40;
        if ($76) {
         $i$4 = 1;
        } else {
         $78 = HEAP32[$1 >> 2] | 0;
         $79 = ($78 | 0) == (0 | 0);
         if ($79) {
          $$0 = nan;
          break L4;
         }
         $80 = HEAP32[$0 >> 2] | 0;
         $81 = $80 + -1 | 0;
         HEAP32[$0 >> 2] = $81;
         $$0 = nan;
         break L4;
        }
        while (1) {
         $82 = HEAP32[$0 >> 2] | 0;
         $83 = HEAP32[$1 >> 2] | 0;
         $84 = $82 >>> 0 < $83 >>> 0;
         if ($84) {
          $85 = $82 + 1 | 0;
          HEAP32[$0 >> 2] = $85;
          $86 = HEAP8[$82 >> 0] | 0;
          $87 = $86 & 255;
          $90 = $87;
         } else {
          $88 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $90 = $88;
         }
         $89 = $90 + -48 | 0;
         $91 = $89 >>> 0 < 10;
         $92 = $90 + -65 | 0;
         $93 = $92 >>> 0 < 26;
         $or$cond = $91 | $93;
         if (!$or$cond) {
          $94 = $90 + -97 | 0;
          $95 = $94 >>> 0 < 26;
          $96 = ($90 | 0) == 95;
          $or$cond7 = $96 | $95;
          if (!$or$cond7) {
           $$lcssa = $90;
           $i$4$lcssa = $i$4;
           break;
          }
         }
         $108 = $i$4 + 1 | 0;
         $i$4 = $108;
        }
        $97 = ($$lcssa | 0) == 41;
        if ($97) {
         $$0 = nan;
         break L4;
        }
        $98 = HEAP32[$1 >> 2] | 0;
        $99 = ($98 | 0) == (0 | 0);
        if (!$99) {
         $100 = HEAP32[$0 >> 2] | 0;
         $101 = $100 + -1 | 0;
         HEAP32[$0 >> 2] = $101;
        }
        if (!$39) {
         $103 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         HEAP32[$103 >> 2] = 22;
         ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
         $$0 = 0.0;
         break L4;
        }
        $102 = ($i$4$lcssa | 0) == 0;
        if ($102) {
         $$0 = nan;
         break L4;
        } else {
         $$in = $i$4$lcssa;
        }
        while (1) {
         $104 = $$in + -1 | 0;
         if (!$99) {
          $105 = HEAP32[$0 >> 2] | 0;
          $106 = $105 + -1 | 0;
          HEAP32[$0 >> 2] = $106;
         }
         $107 = ($104 | 0) == 0;
         if ($107) {
          $$0 = nan;
          break L4;
         } else {
          $$in = $104;
         }
        }
        break;
       }
      case 0:
       {
        $114 = ($c$5 | 0) == 48;
        do {
         if ($114) {
          $115 = HEAP32[$0 >> 2] | 0;
          $116 = HEAP32[$1 >> 2] | 0;
          $117 = $115 >>> 0 < $116 >>> 0;
          if ($117) {
           $118 = $115 + 1 | 0;
           HEAP32[$0 >> 2] = $118;
           $119 = HEAP8[$115 >> 0] | 0;
           $120 = $119 & 255;
           $123 = $120;
          } else {
           $121 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $123 = $121;
          }
          $122 = $123 | 32;
          $124 = ($122 | 0) == 120;
          if (!$124) {
           $326 = HEAP32[$1 >> 2] | 0;
           $327 = ($326 | 0) == (0 | 0);
           if ($327) {
            $c$6 = 48;
            break;
           }
           $328 = HEAP32[$0 >> 2] | 0;
           $329 = $328 + -1 | 0;
           HEAP32[$0 >> 2] = $329;
           $c$6 = 48;
           break;
          }
          $125 = HEAP32[$0 >> 2] | 0;
          $126 = HEAP32[$1 >> 2] | 0;
          $127 = $125 >>> 0 < $126 >>> 0;
          if ($127) {
           $128 = $125 + 1 | 0;
           HEAP32[$0 >> 2] = $128;
           $129 = HEAP8[$125 >> 0] | 0;
           $130 = $129 & 255;
           $c$0$i = $130;
           $gotdig$0$i = 0;
          } else {
           $131 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $c$0$i = $131;
           $gotdig$0$i = 0;
          }
          L94 : while (1) {
           switch ($c$0$i | 0) {
           case 46:
            {
             $gotdig$0$i$lcssa242 = $gotdig$0$i;
             label = 74;
             break L94;
             break;
            }
           case 48:
            {
             break;
            }
           default:
            {
             $169 = 0;
             $171 = 0;
             $694 = 0;
             $695 = 0;
             $c$2$i = $c$0$i;
             $gotdig$2$i = $gotdig$0$i;
             $gotrad$0$i = 0;
             $gottail$0$i = 0;
             $scale$0$i = 1.0;
             $x$0$i = 0;
             $y$0$i = 0.0;
             break L94;
            }
           }
           $132 = HEAP32[$0 >> 2] | 0;
           $133 = HEAP32[$1 >> 2] | 0;
           $134 = $132 >>> 0 < $133 >>> 0;
           if ($134) {
            $135 = $132 + 1 | 0;
            HEAP32[$0 >> 2] = $135;
            $136 = HEAP8[$132 >> 0] | 0;
            $137 = $136 & 255;
            $c$0$i = $137;
            $gotdig$0$i = 1;
            continue;
           } else {
            $138 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $c$0$i = $138;
            $gotdig$0$i = 1;
            continue;
           }
          }
          if ((label | 0) == 74) {
           $139 = HEAP32[$0 >> 2] | 0;
           $140 = HEAP32[$1 >> 2] | 0;
           $141 = $139 >>> 0 < $140 >>> 0;
           if ($141) {
            $142 = $139 + 1 | 0;
            HEAP32[$0 >> 2] = $142;
            $143 = HEAP8[$139 >> 0] | 0;
            $144 = $143 & 255;
            $c$1$ph$i = $144;
           } else {
            $145 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $c$1$ph$i = $145;
           }
           $146 = ($c$1$ph$i | 0) == 48;
           if ($146) {
            $154 = 0;
            $155 = 0;
            while (1) {
             $147 = HEAP32[$0 >> 2] | 0;
             $148 = HEAP32[$1 >> 2] | 0;
             $149 = $147 >>> 0 < $148 >>> 0;
             if ($149) {
              $150 = $147 + 1 | 0;
              HEAP32[$0 >> 2] = $150;
              $151 = HEAP8[$147 >> 0] | 0;
              $152 = $151 & 255;
              $159 = $152;
             } else {
              $153 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $159 = $153;
             }
             $156 = (tempInt = _i64Add($154 | 0, $155 | 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $157 = tempRet0;
             $158 = ($159 | 0) == 48;
             if ($158) {
              $154 = $156;
              $155 = $157;
             } else {
              $169 = 0;
              $171 = 0;
              $694 = $156;
              $695 = $157;
              $c$2$i = $159;
              $gotdig$2$i = 1;
              $gotrad$0$i = 1;
              $gottail$0$i = 0;
              $scale$0$i = 1.0;
              $x$0$i = 0;
              $y$0$i = 0.0;
              break;
             }
            }
           } else {
            $169 = 0;
            $171 = 0;
            $694 = 0;
            $695 = 0;
            $c$2$i = $c$1$ph$i;
            $gotdig$2$i = $gotdig$0$i$lcssa242;
            $gotrad$0$i = 1;
            $gottail$0$i = 0;
            $scale$0$i = 1.0;
            $x$0$i = 0;
            $y$0$i = 0.0;
           }
          }
          while (1) {
           $160 = $c$2$i + -48 | 0;
           $161 = $160 >>> 0 < 10;
           $$pre$i = $c$2$i | 32;
           if ($161) {
            label = 86;
           } else {
            $162 = $$pre$i + -97 | 0;
            $163 = $162 >>> 0 < 6;
            $164 = ($c$2$i | 0) == 46;
            $or$cond6$i = $164 | $163;
            if (!$or$cond6$i) {
             $213 = $171;
             $214 = $694;
             $216 = $169;
             $217 = $695;
             $c$2$lcssa$i = $c$2$i;
             $gotdig$2$i$lcssa = $gotdig$2$i;
             $gotrad$0$i$lcssa = $gotrad$0$i;
             $x$0$i$lcssa = $x$0$i;
             $y$0$i$lcssa = $y$0$i;
             break;
            }
            if ($164) {
             $165 = ($gotrad$0$i | 0) == 0;
             if ($165) {
              $696 = $171;
              $697 = $169;
              $698 = $171;
              $699 = $169;
              $gotdig$3$i = $gotdig$2$i;
              $gotrad$1$i = 1;
              $gottail$2$i = $gottail$0$i;
              $scale$2$i = $scale$0$i;
              $x$2$i = $x$0$i;
              $y$2$i = $y$0$i;
             } else {
              $213 = $171;
              $214 = $694;
              $216 = $169;
              $217 = $695;
              $c$2$lcssa$i = 46;
              $gotdig$2$i$lcssa = $gotdig$2$i;
              $gotrad$0$i$lcssa = $gotrad$0$i;
              $x$0$i$lcssa = $x$0$i;
              $y$0$i$lcssa = $y$0$i;
              break;
             }
            } else {
             label = 86;
            }
           }
           if ((label | 0) == 86) {
            label = 0;
            $166 = ($c$2$i | 0) > 57;
            $167 = $$pre$i + -87 | 0;
            $d$0$i = $166 ? $167 : $160;
            $168 = ($169 | 0) < 0;
            $170 = $171 >>> 0 < 8;
            $172 = ($169 | 0) == 0;
            $173 = $172 & $170;
            $174 = $168 | $173;
            do {
             if ($174) {
              $175 = $x$0$i << 4;
              $176 = $d$0$i + $175 | 0;
              $gottail$1$i = $gottail$0$i;
              $scale$1$i = $scale$0$i;
              $x$1$i = $176;
              $y$1$i = $y$0$i;
             } else {
              $177 = ($169 | 0) < 0;
              $178 = $171 >>> 0 < 14;
              $179 = ($169 | 0) == 0;
              $180 = $179 & $178;
              $181 = $177 | $180;
              if ($181) {
               $182 = +($d$0$i | 0);
               $183 = $scale$0$i * .0625;
               $184 = $183 * $182;
               $185 = $y$0$i + $184;
               $gottail$1$i = $gottail$0$i;
               $scale$1$i = $183;
               $x$1$i = $x$0$i;
               $y$1$i = $185;
               break;
              }
              $186 = ($d$0$i | 0) == 0;
              $187 = ($gottail$0$i | 0) != 0;
              $or$cond$i = $187 | $186;
              if ($or$cond$i) {
               $gottail$1$i = $gottail$0$i;
               $scale$1$i = $scale$0$i;
               $x$1$i = $x$0$i;
               $y$1$i = $y$0$i;
              } else {
               $188 = $scale$0$i * .5;
               $189 = $y$0$i + $188;
               $gottail$1$i = 1;
               $scale$1$i = $scale$0$i;
               $x$1$i = $x$0$i;
               $y$1$i = $189;
              }
             }
            } while (0);
            $190 = (tempInt = _i64Add($171 | 0, $169 | 0, 1, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $191 = tempRet0;
            $696 = $694;
            $697 = $695;
            $698 = $190;
            $699 = $191;
            $gotdig$3$i = 1;
            $gotrad$1$i = $gotrad$0$i;
            $gottail$2$i = $gottail$1$i;
            $scale$2$i = $scale$1$i;
            $x$2$i = $x$1$i;
            $y$2$i = $y$1$i;
           }
           $192 = HEAP32[$0 >> 2] | 0;
           $193 = HEAP32[$1 >> 2] | 0;
           $194 = $192 >>> 0 < $193 >>> 0;
           if ($194) {
            $195 = $192 + 1 | 0;
            HEAP32[$0 >> 2] = $195;
            $196 = HEAP8[$192 >> 0] | 0;
            $197 = $196 & 255;
            $169 = $699;
            $171 = $698;
            $694 = $696;
            $695 = $697;
            $c$2$i = $197;
            $gotdig$2$i = $gotdig$3$i;
            $gotrad$0$i = $gotrad$1$i;
            $gottail$0$i = $gottail$2$i;
            $scale$0$i = $scale$2$i;
            $x$0$i = $x$2$i;
            $y$0$i = $y$2$i;
            continue;
           } else {
            $198 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $169 = $699;
            $171 = $698;
            $694 = $696;
            $695 = $697;
            $c$2$i = $198;
            $gotdig$2$i = $gotdig$3$i;
            $gotrad$0$i = $gotrad$1$i;
            $gottail$0$i = $gottail$2$i;
            $scale$0$i = $scale$2$i;
            $x$0$i = $x$2$i;
            $y$0$i = $y$2$i;
            continue;
           }
          }
          $199 = ($gotdig$2$i$lcssa | 0) == 0;
          if ($199) {
           $200 = HEAP32[$1 >> 2] | 0;
           $201 = ($200 | 0) == (0 | 0);
           if (!$201) {
            $202 = HEAP32[$0 >> 2] | 0;
            $203 = $202 + -1 | 0;
            HEAP32[$0 >> 2] = $203;
           }
           $204 = ($pok | 0) == 0;
           if ($204) {
            ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
           } else {
            if (!$201) {
             $205 = HEAP32[$0 >> 2] | 0;
             $206 = $205 + -1 | 0;
             HEAP32[$0 >> 2] = $206;
             $207 = ($gotrad$0$i$lcssa | 0) == 0;
             if (!$207) {
              $208 = $205 + -2 | 0;
              HEAP32[$0 >> 2] = $208;
             }
            }
           }
           $209 = +($sign$0 | 0);
           $210 = $209 * 0.0;
           $$0 = $210;
           break L4;
          }
          $211 = ($gotrad$0$i$lcssa | 0) == 0;
          $212 = $211 ? $213 : $214;
          $215 = $211 ? $216 : $217;
          $218 = ($216 | 0) < 0;
          $219 = $213 >>> 0 < 8;
          $220 = ($216 | 0) == 0;
          $221 = $220 & $219;
          $222 = $218 | $221;
          if ($222) {
           $224 = $213;
           $225 = $216;
           $x$324$i = $x$0$i$lcssa;
           while (1) {
            $223 = $x$324$i << 4;
            $226 = (tempInt = _i64Add($224 | 0, $225 | 0, 1, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $227 = tempRet0;
            $228 = ($227 | 0) < 0;
            $229 = $226 >>> 0 < 8;
            $230 = ($227 | 0) == 0;
            $231 = $230 & $229;
            $232 = $228 | $231;
            if ($232) {
             $224 = $226;
             $225 = $227;
             $x$324$i = $223;
            } else {
             $x$3$lcssa$i = $223;
             break;
            }
           }
          } else {
           $x$3$lcssa$i = $x$0$i$lcssa;
          }
          $233 = $c$2$lcssa$i | 32;
          $234 = ($233 | 0) == 112;
          if ($234) {
           $235 = (tempInt = _scanexp($f, $pok) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $236 = tempRet0;
           $237 = ($235 | 0) == 0;
           $238 = ($236 | 0) == -2147483648;
           $239 = $237 & $238;
           if ($239) {
            $240 = ($pok | 0) == 0;
            if ($240) {
             ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
             $$0 = 0.0;
             break L4;
            }
            $241 = HEAP32[$1 >> 2] | 0;
            $242 = ($241 | 0) == (0 | 0);
            if ($242) {
             $253 = 0;
             $254 = 0;
            } else {
             $243 = HEAP32[$0 >> 2] | 0;
             $244 = $243 + -1 | 0;
             HEAP32[$0 >> 2] = $244;
             $253 = 0;
             $254 = 0;
            }
           } else {
            $253 = $235;
            $254 = $236;
           }
          } else {
           $245 = HEAP32[$1 >> 2] | 0;
           $246 = ($245 | 0) == (0 | 0);
           if ($246) {
            $253 = 0;
            $254 = 0;
           } else {
            $247 = HEAP32[$0 >> 2] | 0;
            $248 = $247 + -1 | 0;
            HEAP32[$0 >> 2] = $248;
            $253 = 0;
            $254 = 0;
           }
          }
          $249 = (tempInt = _bitshift64Shl($212 | 0, $215 | 0, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $250 = tempRet0;
          $251 = (tempInt = _i64Add($249 | 0, $250 | 0, -32, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $252 = tempRet0;
          $255 = (tempInt = _i64Add($251 | 0, $252 | 0, $253 | 0, $254 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $256 = tempRet0;
          $257 = ($x$3$lcssa$i | 0) == 0;
          if ($257) {
           $258 = +($sign$0 | 0);
           $259 = $258 * 0.0;
           $$0 = $259;
           break L4;
          }
          $260 = 0 - $emin$0$ph | 0;
          $261 = ($256 | 0) > 0;
          $262 = $255 >>> 0 > $260 >>> 0;
          $263 = ($256 | 0) == 0;
          $264 = $263 & $262;
          $265 = $261 | $264;
          if ($265) {
           $266 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           HEAP32[$266 >> 2] = 34;
           $267 = +($sign$0 | 0);
           $268 = $267 * 1797693134862315708145274.0e284;
           $269 = $268 * 1797693134862315708145274.0e284;
           $$0 = $269;
           break L4;
          }
          $270 = $emin$0$ph + -106 | 0;
          $271 = ($270 | 0) < 0;
          $272 = $271 << 31 >> 31;
          $273 = ($256 | 0) < ($272 | 0);
          $274 = $255 >>> 0 < $270 >>> 0;
          $275 = ($256 | 0) == ($272 | 0);
          $276 = $275 & $274;
          $277 = $273 | $276;
          if ($277) {
           $279 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           HEAP32[$279 >> 2] = 34;
           $280 = +($sign$0 | 0);
           $281 = $280 * 2.2250738585072014e-308;
           $282 = $281 * 2.2250738585072014e-308;
           $$0 = $282;
           break L4;
          }
          $278 = ($x$3$lcssa$i | 0) > -1;
          if ($278) {
           $288 = $255;
           $289 = $256;
           $x$419$i = $x$3$lcssa$i;
           $y$320$i = $y$0$i$lcssa;
           while (1) {
            $283 = !($y$320$i >= .5);
            $284 = $x$419$i << 1;
            $285 = $y$320$i + -1.0;
            $286 = $283 & 1;
            $287 = $286 | $284;
            $x$5$i = $287 ^ 1;
            $$pn$i = $283 ? $y$320$i : $285;
            $y$4$i = $y$320$i + $$pn$i;
            $290 = (tempInt = _i64Add($288 | 0, $289 | 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $291 = tempRet0;
            $292 = ($287 | 0) > -1;
            if ($292) {
             $288 = $290;
             $289 = $291;
             $x$419$i = $x$5$i;
             $y$320$i = $y$4$i;
            } else {
             $297 = $290;
             $298 = $291;
             $x$4$lcssa$i = $x$5$i;
             $y$3$lcssa$i = $y$4$i;
             break;
            }
           }
          } else {
           $297 = $255;
           $298 = $256;
           $x$4$lcssa$i = $x$3$lcssa$i;
           $y$3$lcssa$i = $y$0$i$lcssa;
          }
          $293 = ($emin$0$ph | 0) < 0;
          $294 = $293 << 31 >> 31;
          $295 = (tempInt = _i64Subtract(32, 0, $emin$0$ph | 0, $294 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $296 = tempRet0;
          $299 = (tempInt = _i64Add($297 | 0, $298 | 0, $295 | 0, $296 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $300 = tempRet0;
          $301 = 0 > ($300 | 0);
          $302 = $bits$0$ph >>> 0 > $299 >>> 0;
          $303 = 0 == ($300 | 0);
          $304 = $303 & $302;
          $305 = $301 | $304;
          if ($305) {
           $306 = ($299 | 0) < 0;
           if ($306) {
            $$0710$i = 0;
            label = 127;
           } else {
            $$07$i = $299;
            label = 125;
           }
          } else {
           $$07$i = $bits$0$ph;
           label = 125;
          }
          if ((label | 0) == 125) {
           $307 = ($$07$i | 0) < 53;
           if ($307) {
            $$0710$i = $$07$i;
            label = 127;
           } else {
            $$pre41$i = +($sign$0 | 0);
            $$0711$i = $$07$i;
            $$pre$phi42$iZ2D = $$pre41$i;
            $bias$0$i = 0.0;
           }
          }
          if ((label | 0) == 127) {
           $308 = 84 - $$0710$i | 0;
           $309 = +(tempDouble = +_scalbn(1.0, $308), asyncState ? +abort(-12) : tempDouble);
           $310 = +($sign$0 | 0);
           $311 = +(tempDouble = +_copysignl($309, $310), asyncState ? +abort(-12) : tempDouble);
           $$0711$i = $$0710$i;
           $$pre$phi42$iZ2D = $310;
           $bias$0$i = $311;
          }
          $312 = ($$0711$i | 0) < 32;
          $313 = $y$3$lcssa$i != 0.0;
          $or$cond4$i = $313 & $312;
          $314 = $x$4$lcssa$i & 1;
          $315 = ($314 | 0) == 0;
          $or$cond9$i = $315 & $or$cond4$i;
          $316 = $or$cond9$i & 1;
          $x$6$i = $316 + $x$4$lcssa$i | 0;
          $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
          $317 = +($x$6$i >>> 0);
          $318 = $$pre$phi42$iZ2D * $317;
          $319 = $bias$0$i + $318;
          $320 = $$pre$phi42$iZ2D * $y$5$i;
          $321 = $320 + $319;
          $322 = $321 - $bias$0$i;
          $323 = $322 != 0.0;
          if (!$323) {
           $324 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           HEAP32[$324 >> 2] = 34;
          }
          $325 = +(tempDouble = +_scalbnl($322, $297), asyncState ? +abort(-12) : tempDouble);
          $$0 = $325;
          break L4;
         } else {
          $c$6 = $c$5;
         }
        } while (0);
        $sum$i = $emin$0$ph + $bits$0$ph | 0;
        $330 = 0 - $sum$i | 0;
        $$09$i = $c$6;
        $gotdig$0$i12 = 0;
        L184 : while (1) {
         switch ($$09$i | 0) {
         case 46:
          {
           $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
           label = 138;
           break L184;
           break;
          }
         case 48:
          {
           break;
          }
         default:
          {
           $$2$i = $$09$i;
           $700 = 0;
           $701 = 0;
           $gotdig$2$i13 = $gotdig$0$i12;
           $gotrad$0$i14 = 0;
           break L184;
          }
         }
         $331 = HEAP32[$0 >> 2] | 0;
         $332 = HEAP32[$1 >> 2] | 0;
         $333 = $331 >>> 0 < $332 >>> 0;
         if ($333) {
          $334 = $331 + 1 | 0;
          HEAP32[$0 >> 2] = $334;
          $335 = HEAP8[$331 >> 0] | 0;
          $336 = $335 & 255;
          $$09$i = $336;
          $gotdig$0$i12 = 1;
          continue;
         } else {
          $337 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $$09$i = $337;
          $gotdig$0$i12 = 1;
          continue;
         }
        }
        if ((label | 0) == 138) {
         $338 = HEAP32[$0 >> 2] | 0;
         $339 = HEAP32[$1 >> 2] | 0;
         $340 = $338 >>> 0 < $339 >>> 0;
         if ($340) {
          $341 = $338 + 1 | 0;
          HEAP32[$0 >> 2] = $341;
          $342 = HEAP8[$338 >> 0] | 0;
          $343 = $342 & 255;
          $$1$ph$i = $343;
         } else {
          $344 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $$1$ph$i = $344;
         }
         $345 = ($$1$ph$i | 0) == 48;
         if ($345) {
          $346 = 0;
          $347 = 0;
          while (1) {
           $348 = (tempInt = _i64Add($346 | 0, $347 | 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $349 = tempRet0;
           $350 = HEAP32[$0 >> 2] | 0;
           $351 = HEAP32[$1 >> 2] | 0;
           $352 = $350 >>> 0 < $351 >>> 0;
           if ($352) {
            $353 = $350 + 1 | 0;
            HEAP32[$0 >> 2] = $353;
            $354 = HEAP8[$350 >> 0] | 0;
            $355 = $354 & 255;
            $$1$be$i = $355;
           } else {
            $356 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $$1$be$i = $356;
           }
           $357 = ($$1$be$i | 0) == 48;
           if ($357) {
            $346 = $348;
            $347 = $349;
           } else {
            $$2$i = $$1$be$i;
            $700 = $348;
            $701 = $349;
            $gotdig$2$i13 = 1;
            $gotrad$0$i14 = 1;
            break;
           }
          }
         } else {
          $$2$i = $$1$ph$i;
          $700 = 0;
          $701 = 0;
          $gotdig$2$i13 = $gotdig$0$i12$lcssa273;
          $gotrad$0$i14 = 1;
         }
        }
        HEAP32[$x$i >> 2] = 0;
        $358 = $$2$i + -48 | 0;
        $359 = $358 >>> 0 < 10;
        $360 = ($$2$i | 0) == 46;
        $361 = $360 | $359;
        L203 : do {
         if ($361) {
          $362 = $x$i + 496 | 0;
          $$3105$i = $$2$i;
          $365 = 0;
          $366 = 0;
          $702 = $360;
          $703 = $358;
          $704 = $700;
          $705 = $701;
          $gotdig$3101$i = $gotdig$2$i13;
          $gotrad$1102$i = $gotrad$0$i14;
          $j$0104$i = 0;
          $k$0103$i = 0;
          $lnz$0100$i = 0;
          L205 : while (1) {
           do {
            if ($702) {
             $cond$i = ($gotrad$1102$i | 0) == 0;
             if ($cond$i) {
              $706 = $365;
              $707 = $366;
              $708 = $365;
              $709 = $366;
              $gotdig$4$i = $gotdig$3101$i;
              $gotrad$2$i = 1;
              $j$2$i = $j$0104$i;
              $k$2$i = $k$0103$i;
              $lnz$2$i = $lnz$0100$i;
             } else {
              $710 = $704;
              $711 = $705;
              $712 = $365;
              $713 = $366;
              $gotdig$3101$i$lcssa = $gotdig$3101$i;
              $j$0104$i$lcssa = $j$0104$i;
              $k$0103$i$lcssa = $k$0103$i;
              $lnz$0100$i$lcssa = $lnz$0100$i;
              break L205;
             }
            } else {
             $364 = ($k$0103$i | 0) < 125;
             $367 = (tempInt = _i64Add($365 | 0, $366 | 0, 1, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $368 = tempRet0;
             $369 = ($$3105$i | 0) != 48;
             if (!$364) {
              if (!$369) {
               $706 = $704;
               $707 = $705;
               $708 = $367;
               $709 = $368;
               $gotdig$4$i = $gotdig$3101$i;
               $gotrad$2$i = $gotrad$1102$i;
               $j$2$i = $j$0104$i;
               $k$2$i = $k$0103$i;
               $lnz$2$i = $lnz$0100$i;
               break;
              }
              $379 = HEAP32[$362 >> 2] | 0;
              $380 = $379 | 1;
              HEAP32[$362 >> 2] = $380;
              $706 = $704;
              $707 = $705;
              $708 = $367;
              $709 = $368;
              $gotdig$4$i = $gotdig$3101$i;
              $gotrad$2$i = $gotrad$1102$i;
              $j$2$i = $j$0104$i;
              $k$2$i = $k$0103$i;
              $lnz$2$i = $lnz$0100$i;
              break;
             }
             $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
             $370 = ($j$0104$i | 0) == 0;
             $371 = $x$i + ($k$0103$i << 2) | 0;
             if ($370) {
              $storemerge$i = $703;
             } else {
              $372 = HEAP32[$371 >> 2] | 0;
              $373 = $372 * 10 | 0;
              $374 = $$3105$i + -48 | 0;
              $375 = $374 + $373 | 0;
              $storemerge$i = $375;
             }
             HEAP32[$371 >> 2] = $storemerge$i;
             $376 = $j$0104$i + 1 | 0;
             $377 = ($376 | 0) == 9;
             $378 = $377 & 1;
             $$k$0$i = $378 + $k$0103$i | 0;
             $$11$i = $377 ? 0 : $376;
             $706 = $704;
             $707 = $705;
             $708 = $367;
             $709 = $368;
             $gotdig$4$i = 1;
             $gotrad$2$i = $gotrad$1102$i;
             $j$2$i = $$11$i;
             $k$2$i = $$k$0$i;
             $lnz$2$i = $$lnz$0$i;
            }
           } while (0);
           $381 = HEAP32[$0 >> 2] | 0;
           $382 = HEAP32[$1 >> 2] | 0;
           $383 = $381 >>> 0 < $382 >>> 0;
           if ($383) {
            $384 = $381 + 1 | 0;
            HEAP32[$0 >> 2] = $384;
            $385 = HEAP8[$381 >> 0] | 0;
            $386 = $385 & 255;
            $$3$be$i = $386;
           } else {
            $387 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $$3$be$i = $387;
           }
           $388 = $$3$be$i + -48 | 0;
           $389 = $388 >>> 0 < 10;
           $390 = ($$3$be$i | 0) == 46;
           $391 = $390 | $389;
           if ($391) {
            $$3105$i = $$3$be$i;
            $365 = $708;
            $366 = $709;
            $702 = $390;
            $703 = $388;
            $704 = $706;
            $705 = $707;
            $gotdig$3101$i = $gotdig$4$i;
            $gotrad$1102$i = $gotrad$2$i;
            $j$0104$i = $j$2$i;
            $k$0103$i = $k$2$i;
            $lnz$0100$i = $lnz$2$i;
           } else {
            $$3$lcssa$i = $$3$be$i;
            $394 = $708;
            $395 = $706;
            $397 = $709;
            $398 = $707;
            $gotdig$3$lcssa$i = $gotdig$4$i;
            $gotrad$1$lcssa$i = $gotrad$2$i;
            $j$0$lcssa$i = $j$2$i;
            $k$0$lcssa$i = $k$2$i;
            $lnz$0$lcssa$i = $lnz$2$i;
            label = 161;
            break L203;
           }
          }
          $363 = ($gotdig$3101$i$lcssa | 0) != 0;
          $714 = $712;
          $715 = $713;
          $716 = $710;
          $717 = $711;
          $718 = $363;
          $j$069$i = $j$0104$i$lcssa;
          $k$065$i = $k$0103$i$lcssa;
          $lnz$059$i = $lnz$0100$i$lcssa;
          label = 169;
         } else {
          $$3$lcssa$i = $$2$i;
          $394 = 0;
          $395 = $700;
          $397 = 0;
          $398 = $701;
          $gotdig$3$lcssa$i = $gotdig$2$i13;
          $gotrad$1$lcssa$i = $gotrad$0$i14;
          $j$0$lcssa$i = 0;
          $k$0$lcssa$i = 0;
          $lnz$0$lcssa$i = 0;
          label = 161;
         }
        } while (0);
        do {
         if ((label | 0) == 161) {
          $392 = ($gotrad$1$lcssa$i | 0) == 0;
          $393 = $392 ? $394 : $395;
          $396 = $392 ? $397 : $398;
          $399 = ($gotdig$3$lcssa$i | 0) != 0;
          $400 = $$3$lcssa$i | 32;
          $401 = ($400 | 0) == 101;
          $or$cond13$i = $401 & $399;
          if (!$or$cond13$i) {
           $416 = ($$3$lcssa$i | 0) > -1;
           if ($416) {
            $714 = $394;
            $715 = $397;
            $716 = $393;
            $717 = $396;
            $718 = $399;
            $j$069$i = $j$0$lcssa$i;
            $k$065$i = $k$0$lcssa$i;
            $lnz$059$i = $lnz$0$lcssa$i;
            label = 169;
            break;
           } else {
            $719 = $394;
            $720 = $397;
            $721 = $399;
            $722 = $393;
            $723 = $396;
            $j$068$i = $j$0$lcssa$i;
            $k$064$i = $k$0$lcssa$i;
            $lnz$058$i = $lnz$0$lcssa$i;
            label = 171;
            break;
           }
          }
          $402 = (tempInt = _scanexp($f, $pok) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $403 = tempRet0;
          $404 = ($402 | 0) == 0;
          $405 = ($403 | 0) == -2147483648;
          $406 = $404 & $405;
          if ($406) {
           $407 = ($pok | 0) == 0;
           if ($407) {
            ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
            $$0$i27 = 0.0;
            break;
           }
           $408 = HEAP32[$1 >> 2] | 0;
           $409 = ($408 | 0) == (0 | 0);
           if ($409) {
            $412 = 0;
            $413 = 0;
           } else {
            $410 = HEAP32[$0 >> 2] | 0;
            $411 = $410 + -1 | 0;
            HEAP32[$0 >> 2] = $411;
            $412 = 0;
            $413 = 0;
           }
          } else {
           $412 = $402;
           $413 = $403;
          }
          $414 = (tempInt = _i64Add($412 | 0, $413 | 0, $393 | 0, $396 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $415 = tempRet0;
          $427 = $414;
          $428 = $394;
          $430 = $415;
          $431 = $397;
          $j$067$i = $j$0$lcssa$i;
          $k$063$i = $k$0$lcssa$i;
          $lnz$057$i = $lnz$0$lcssa$i;
          label = 173;
         }
        } while (0);
        if ((label | 0) == 169) {
         $417 = HEAP32[$1 >> 2] | 0;
         $418 = ($417 | 0) == (0 | 0);
         if ($418) {
          $719 = $714;
          $720 = $715;
          $721 = $718;
          $722 = $716;
          $723 = $717;
          $j$068$i = $j$069$i;
          $k$064$i = $k$065$i;
          $lnz$058$i = $lnz$059$i;
          label = 171;
         } else {
          $419 = HEAP32[$0 >> 2] | 0;
          $420 = $419 + -1 | 0;
          HEAP32[$0 >> 2] = $420;
          if ($718) {
           $427 = $716;
           $428 = $714;
           $430 = $717;
           $431 = $715;
           $j$067$i = $j$069$i;
           $k$063$i = $k$065$i;
           $lnz$057$i = $lnz$059$i;
           label = 173;
          } else {
           label = 172;
          }
         }
        }
        if ((label | 0) == 171) {
         if ($721) {
          $427 = $722;
          $428 = $719;
          $430 = $723;
          $431 = $720;
          $j$067$i = $j$068$i;
          $k$063$i = $k$064$i;
          $lnz$057$i = $lnz$058$i;
          label = 173;
         } else {
          label = 172;
         }
        }
        do {
         if ((label | 0) == 172) {
          $421 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          HEAP32[$421 >> 2] = 22;
          ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
          $$0$i27 = 0.0;
         } else if ((label | 0) == 173) {
          $422 = HEAP32[$x$i >> 2] | 0;
          $423 = ($422 | 0) == 0;
          if ($423) {
           $424 = +($sign$0 | 0);
           $425 = $424 * 0.0;
           $$0$i27 = $425;
           break;
          }
          $426 = ($427 | 0) == ($428 | 0);
          $429 = ($430 | 0) == ($431 | 0);
          $432 = $426 & $429;
          $433 = ($431 | 0) < 0;
          $434 = $428 >>> 0 < 10;
          $435 = ($431 | 0) == 0;
          $436 = $435 & $434;
          $437 = $433 | $436;
          $or$cond$i16 = $437 & $432;
          if ($or$cond$i16) {
           $438 = $bits$0$ph >>> 0 > 30;
           $439 = $422 >>> $bits$0$ph;
           $440 = ($439 | 0) == 0;
           $or$cond15$i = $438 | $440;
           if ($or$cond15$i) {
            $441 = +($sign$0 | 0);
            $442 = +($422 >>> 0);
            $443 = $441 * $442;
            $$0$i27 = $443;
            break;
           }
          }
          $444 = ($emin$0$ph | 0) / -2 & -1;
          $445 = ($444 | 0) < 0;
          $446 = $445 << 31 >> 31;
          $447 = ($430 | 0) > ($446 | 0);
          $448 = $427 >>> 0 > $444 >>> 0;
          $449 = ($430 | 0) == ($446 | 0);
          $450 = $449 & $448;
          $451 = $447 | $450;
          if ($451) {
           $452 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           HEAP32[$452 >> 2] = 34;
           $453 = +($sign$0 | 0);
           $454 = $453 * 1797693134862315708145274.0e284;
           $455 = $454 * 1797693134862315708145274.0e284;
           $$0$i27 = $455;
           break;
          }
          $456 = $emin$0$ph + -106 | 0;
          $457 = ($456 | 0) < 0;
          $458 = $457 << 31 >> 31;
          $459 = ($430 | 0) < ($458 | 0);
          $460 = $427 >>> 0 < $456 >>> 0;
          $461 = ($430 | 0) == ($458 | 0);
          $462 = $461 & $460;
          $463 = $459 | $462;
          if ($463) {
           $464 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           HEAP32[$464 >> 2] = 34;
           $465 = +($sign$0 | 0);
           $466 = $465 * 2.2250738585072014e-308;
           $467 = $466 * 2.2250738585072014e-308;
           $$0$i27 = $467;
           break;
          }
          $468 = ($j$067$i | 0) == 0;
          if ($468) {
           $k$3$i = $k$063$i;
          } else {
           $469 = ($j$067$i | 0) < 9;
           if ($469) {
            $470 = $x$i + ($k$063$i << 2) | 0;
            $$promoted$i = HEAP32[$470 >> 2] | 0;
            $472 = $$promoted$i;
            $j$394$i = $j$067$i;
            while (1) {
             $471 = $472 * 10 | 0;
             $473 = $j$394$i + 1 | 0;
             $exitcond$i = ($473 | 0) == 9;
             if ($exitcond$i) {
              $$lcssa265 = $471;
              break;
             } else {
              $472 = $471;
              $j$394$i = $473;
             }
            }
            HEAP32[$470 >> 2] = $$lcssa265;
           }
           $474 = $k$063$i + 1 | 0;
           $k$3$i = $474;
          }
          $475 = ($lnz$057$i | 0) < 9;
          if ($475) {
           $476 = ($lnz$057$i | 0) <= ($427 | 0);
           $477 = ($427 | 0) < 18;
           $or$cond3$i = $476 & $477;
           if ($or$cond3$i) {
            $478 = ($427 | 0) == 9;
            if ($478) {
             $479 = +($sign$0 | 0);
             $480 = HEAP32[$x$i >> 2] | 0;
             $481 = +($480 >>> 0);
             $482 = $479 * $481;
             $$0$i27 = $482;
             break;
            }
            $483 = ($427 | 0) < 9;
            if ($483) {
             $484 = +($sign$0 | 0);
             $485 = HEAP32[$x$i >> 2] | 0;
             $486 = +($485 >>> 0);
             $487 = $484 * $486;
             $488 = 8 - $427 | 0;
             $489 = 3712 + ($488 << 2) | 0;
             $490 = HEAP32[$489 >> 2] | 0;
             $491 = +($490 | 0);
             $492 = $487 / $491;
             $$0$i27 = $492;
             break;
            }
            $$neg32$i = $bits$0$ph + 27 | 0;
            $493 = Math_imul($427, -3) | 0;
            $494 = $$neg32$i + $493 | 0;
            $495 = ($494 | 0) > 30;
            $$pre$i17 = HEAP32[$x$i >> 2] | 0;
            $496 = $$pre$i17 >>> $494;
            $497 = ($496 | 0) == 0;
            $or$cond182$i = $495 | $497;
            if ($or$cond182$i) {
             $498 = +($sign$0 | 0);
             $499 = +($$pre$i17 >>> 0);
             $500 = $498 * $499;
             $501 = $427 + -10 | 0;
             $502 = 3712 + ($501 << 2) | 0;
             $503 = HEAP32[$502 >> 2] | 0;
             $504 = +($503 | 0);
             $505 = $500 * $504;
             $$0$i27 = $505;
             break;
            }
           }
          }
          $506 = ($427 | 0) % 9 & -1;
          $507 = ($506 | 0) == 0;
          if ($507) {
           $a$2$ph38$i = 0;
           $e2$0$ph$i = 0;
           $rp$2$ph36$i = $427;
           $z$1$ph37$i = $k$3$i;
          } else {
           $508 = ($427 | 0) > -1;
           $509 = $506 + 9 | 0;
           $510 = $508 ? $506 : $509;
           $511 = 8 - $510 | 0;
           $512 = 3712 + ($511 << 2) | 0;
           $513 = HEAP32[$512 >> 2] | 0;
           $514 = ($k$3$i | 0) == 0;
           if ($514) {
            $a$0$lcssa151$i = 0;
            $rp$0$lcssa152$i = $427;
            $z$0$i = 0;
           } else {
            $515 = 1e9 / ($513 | 0) & -1;
            $a$085$i = 0;
            $carry$087$i = 0;
            $k$486$i = 0;
            $rp$084$i = $427;
            while (1) {
             $516 = $x$i + ($k$486$i << 2) | 0;
             $517 = HEAP32[$516 >> 2] | 0;
             $518 = ($517 >>> 0) % ($513 >>> 0) & -1;
             $519 = ($517 >>> 0) / ($513 >>> 0) & -1;
             $520 = $519 + $carry$087$i | 0;
             HEAP32[$516 >> 2] = $520;
             $521 = Math_imul($518, $515) | 0;
             $522 = ($k$486$i | 0) == ($a$085$i | 0);
             $523 = ($520 | 0) == 0;
             $or$cond16$i = $522 & $523;
             $524 = $k$486$i + 1 | 0;
             $525 = $524 & 127;
             $526 = $rp$084$i + -9 | 0;
             $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
             $a$1$i = $or$cond16$i ? $525 : $a$085$i;
             $527 = ($524 | 0) == ($k$3$i | 0);
             if ($527) {
              $$lcssa264 = $521;
              $a$1$i$lcssa = $a$1$i;
              $rp$1$i18$lcssa = $rp$1$i18;
              break;
             } else {
              $a$085$i = $a$1$i;
              $carry$087$i = $521;
              $k$486$i = $524;
              $rp$084$i = $rp$1$i18;
             }
            }
            $528 = ($$lcssa264 | 0) == 0;
            if ($528) {
             $a$0$lcssa151$i = $a$1$i$lcssa;
             $rp$0$lcssa152$i = $rp$1$i18$lcssa;
             $z$0$i = $k$3$i;
            } else {
             $529 = $k$3$i + 1 | 0;
             $530 = $x$i + ($k$3$i << 2) | 0;
             HEAP32[$530 >> 2] = $$lcssa264;
             $a$0$lcssa151$i = $a$1$i$lcssa;
             $rp$0$lcssa152$i = $rp$1$i18$lcssa;
             $z$0$i = $529;
            }
           }
           $531 = 9 - $510 | 0;
           $532 = $531 + $rp$0$lcssa152$i | 0;
           $a$2$ph38$i = $a$0$lcssa151$i;
           $e2$0$ph$i = 0;
           $rp$2$ph36$i = $532;
           $z$1$ph37$i = $z$0$i;
          }
          L284 : while (1) {
           $533 = ($rp$2$ph36$i | 0) < 18;
           $534 = ($rp$2$ph36$i | 0) == 18;
           $535 = $x$i + ($a$2$ph38$i << 2) | 0;
           $e2$0$i19 = $e2$0$ph$i;
           $z$1$i = $z$1$ph37$i;
           while (1) {
            if (!$533) {
             if (!$534) {
              $a$3$ph$i = $a$2$ph38$i;
              $e2$1$ph$i = $e2$0$i19;
              $rp$3$ph34$i = $rp$2$ph36$i;
              $z$5$ph$i = $z$1$i;
              break L284;
             }
             $536 = HEAP32[$535 >> 2] | 0;
             $537 = $536 >>> 0 < 9007199;
             if (!$537) {
              $a$3$ph$i = $a$2$ph38$i;
              $e2$1$ph$i = $e2$0$i19;
              $rp$3$ph34$i = 18;
              $z$5$ph$i = $z$1$i;
              break L284;
             }
            }
            $538 = $z$1$i + 127 | 0;
            $carry1$0$i = 0;
            $k$5$in$i = $538;
            $z$2$i = $z$1$i;
            while (1) {
             $k$5$i = $k$5$in$i & 127;
             $539 = $x$i + ($k$5$i << 2) | 0;
             $540 = HEAP32[$539 >> 2] | 0;
             $541 = (tempInt = _bitshift64Shl($540 | 0, 0, 29) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $542 = tempRet0;
             $543 = (tempInt = _i64Add($541 | 0, $542 | 0, $carry1$0$i | 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $544 = tempRet0;
             $545 = $544 >>> 0 > 0;
             $546 = $543 >>> 0 > 1e9;
             $547 = ($544 | 0) == 0;
             $548 = $547 & $546;
             $549 = $545 | $548;
             if ($549) {
              $550 = (tempInt = ___udivdi3($543 | 0, $544 | 0, 1e9, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $551 = tempRet0;
              $552 = (tempInt = ___uremdi3($543 | 0, $544 | 0, 1e9, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $553 = tempRet0;
              $$sink$off0$i = $552;
              $carry1$1$i = $550;
             } else {
              $$sink$off0$i = $543;
              $carry1$1$i = 0;
             }
             HEAP32[$539 >> 2] = $$sink$off0$i;
             $554 = $z$2$i + 127 | 0;
             $555 = $554 & 127;
             $556 = ($k$5$i | 0) != ($555 | 0);
             $557 = ($k$5$i | 0) == ($a$2$ph38$i | 0);
             $or$cond17$i = $556 | $557;
             $558 = ($$sink$off0$i | 0) == 0;
             $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
             $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
             $559 = $k$5$i + -1 | 0;
             if ($557) {
              $carry1$1$i$lcssa = $carry1$1$i;
              $z$3$i$lcssa = $z$3$i;
              break;
             } else {
              $carry1$0$i = $carry1$1$i;
              $k$5$in$i = $559;
              $z$2$i = $z$3$i;
             }
            }
            $560 = $e2$0$i19 + -29 | 0;
            $561 = ($carry1$1$i$lcssa | 0) == 0;
            if ($561) {
             $e2$0$i19 = $560;
             $z$1$i = $z$3$i$lcssa;
            } else {
             $$lcssa263 = $560;
             $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
             $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
             break;
            }
           }
           $562 = $rp$2$ph36$i + 9 | 0;
           $563 = $a$2$ph38$i + 127 | 0;
           $564 = $563 & 127;
           $565 = ($564 | 0) == ($z$3$i$lcssa$lcssa | 0);
           if ($565) {
            $566 = $z$3$i$lcssa$lcssa + 127 | 0;
            $567 = $566 & 127;
            $568 = $x$i + ($567 << 2) | 0;
            $569 = HEAP32[$568 >> 2] | 0;
            $570 = $z$3$i$lcssa$lcssa + 126 | 0;
            $571 = $570 & 127;
            $572 = $x$i + ($571 << 2) | 0;
            $573 = HEAP32[$572 >> 2] | 0;
            $574 = $573 | $569;
            HEAP32[$572 >> 2] = $574;
            $z$4$i = $567;
           } else {
            $z$4$i = $z$3$i$lcssa$lcssa;
           }
           $575 = $x$i + ($564 << 2) | 0;
           HEAP32[$575 >> 2] = $carry1$1$i$lcssa$lcssa;
           $a$2$ph38$i = $564;
           $e2$0$ph$i = $$lcssa263;
           $rp$2$ph36$i = $562;
           $z$1$ph37$i = $z$4$i;
          }
          L302 : while (1) {
           $606 = $z$5$ph$i + 1 | 0;
           $604 = $606 & 127;
           $607 = $z$5$ph$i + 127 | 0;
           $608 = $607 & 127;
           $609 = $x$i + ($608 << 2) | 0;
           $a$3$ph157$i = $a$3$ph$i;
           $e2$1$ph156$i = $e2$1$ph$i;
           $rp$3$ph$i = $rp$3$ph34$i;
           while (1) {
            $610 = ($rp$3$ph$i | 0) == 18;
            $611 = ($rp$3$ph$i | 0) > 27;
            $$18$i = $611 ? 9 : 1;
            $$not$i = $610 ^ 1;
            $a$3$i = $a$3$ph157$i;
            $e2$1$i = $e2$1$ph156$i;
            while (1) {
             $576 = $a$3$i & 127;
             $577 = ($576 | 0) == ($z$5$ph$i | 0);
             do {
              if ($577) {
               label = 219;
              } else {
               $578 = $x$i + ($576 << 2) | 0;
               $579 = HEAP32[$578 >> 2] | 0;
               $580 = $579 >>> 0 < 9007199;
               if ($580) {
                label = 219;
                break;
               }
               $581 = $579 >>> 0 > 9007199;
               if ($581) {
                break;
               }
               $582 = $a$3$i + 1 | 0;
               $583 = $582 & 127;
               $584 = ($583 | 0) == ($z$5$ph$i | 0);
               if ($584) {
                label = 219;
                break;
               }
               $690 = $x$i + ($583 << 2) | 0;
               $691 = HEAP32[$690 >> 2] | 0;
               $692 = $691 >>> 0 < 254740991;
               if ($692) {
                label = 219;
                break;
               }
               $693 = $691 >>> 0 > 254740991;
               $brmerge$i28 = $693 | $$not$i;
               if (!$brmerge$i28) {
                $617 = $576;
                $a$3$i249 = $a$3$i;
                $e2$1$i246 = $e2$1$i;
                $z$7$i = $z$5$ph$i;
                break L302;
               }
              }
             } while (0);
             if ((label | 0) == 219) {
              label = 0;
              if ($610) {
               label = 220;
               break L302;
              }
             }
             $585 = $e2$1$i + $$18$i | 0;
             $586 = ($a$3$i | 0) == ($z$5$ph$i | 0);
             if ($586) {
              $a$3$i = $z$5$ph$i;
              $e2$1$i = $585;
             } else {
              $$lcssa256 = $585;
              $a$3$i$lcssa248 = $a$3$i;
              break;
             }
            }
            $587 = 1 << $$18$i;
            $588 = $587 + -1 | 0;
            $589 = 1e9 >>> $$18$i;
            $a$478$i = $a$3$i$lcssa248;
            $carry3$081$i = 0;
            $k$679$i = $a$3$i$lcssa248;
            $rp$477$i = $rp$3$ph$i;
            while (1) {
             $590 = $x$i + ($k$679$i << 2) | 0;
             $591 = HEAP32[$590 >> 2] | 0;
             $592 = $591 & $588;
             $593 = $591 >>> $$18$i;
             $594 = $593 + $carry3$081$i | 0;
             HEAP32[$590 >> 2] = $594;
             $595 = Math_imul($592, $589) | 0;
             $596 = ($k$679$i | 0) == ($a$478$i | 0);
             $597 = ($594 | 0) == 0;
             $or$cond19$i = $596 & $597;
             $598 = $k$679$i + 1 | 0;
             $599 = $598 & 127;
             $600 = $rp$477$i + -9 | 0;
             $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
             $a$5$i = $or$cond19$i ? $599 : $a$478$i;
             $601 = ($599 | 0) == ($z$5$ph$i | 0);
             if ($601) {
              $$lcssa257 = $595;
              $a$5$i$lcssa = $a$5$i;
              $rp$5$i$lcssa = $rp$5$i;
              break;
             } else {
              $a$478$i = $a$5$i;
              $carry3$081$i = $595;
              $k$679$i = $599;
              $rp$477$i = $rp$5$i;
             }
            }
            $602 = ($$lcssa257 | 0) == 0;
            if ($602) {
             $a$3$ph157$i = $a$5$i$lcssa;
             $e2$1$ph156$i = $$lcssa256;
             $rp$3$ph$i = $rp$5$i$lcssa;
             continue;
            }
            $603 = ($604 | 0) == ($a$5$i$lcssa | 0);
            if (!$603) {
             $$lcssa256$lcssa = $$lcssa256;
             $$lcssa257$lcssa = $$lcssa257;
             $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
             $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
             break;
            }
            $612 = HEAP32[$609 >> 2] | 0;
            $613 = $612 | 1;
            HEAP32[$609 >> 2] = $613;
            $a$3$ph157$i = $a$5$i$lcssa;
            $e2$1$ph156$i = $$lcssa256;
            $rp$3$ph$i = $rp$5$i$lcssa;
           }
           $605 = $x$i + ($z$5$ph$i << 2) | 0;
           HEAP32[$605 >> 2] = $$lcssa257$lcssa;
           $a$3$ph$i = $a$5$i$lcssa$lcssa;
           $e2$1$ph$i = $$lcssa256$lcssa;
           $rp$3$ph34$i = $rp$5$i$lcssa$lcssa;
           $z$5$ph$i = $604;
          }
          if ((label | 0) == 220) {
           if ($577) {
            $614 = $604 + -1 | 0;
            $615 = $x$i + ($614 << 2) | 0;
            HEAP32[$615 >> 2] = 0;
            $617 = $z$5$ph$i;
            $a$3$i249 = $a$3$i;
            $e2$1$i246 = $e2$1$i;
            $z$7$i = $604;
           } else {
            $617 = $576;
            $a$3$i249 = $a$3$i;
            $e2$1$i246 = $e2$1$i;
            $z$7$i = $z$5$ph$i;
           }
          }
          $616 = $x$i + ($617 << 2) | 0;
          $618 = HEAP32[$616 >> 2] | 0;
          $619 = +($618 >>> 0);
          $620 = $a$3$i249 + 1 | 0;
          $621 = $620 & 127;
          $622 = ($621 | 0) == ($z$7$i | 0);
          if ($622) {
           $679 = $a$3$i249 + 2 | 0;
           $680 = $679 & 127;
           $681 = $680 + -1 | 0;
           $682 = $x$i + ($681 << 2) | 0;
           HEAP32[$682 >> 2] = 0;
           $z$7$1$i = $680;
          } else {
           $z$7$1$i = $z$7$i;
          }
          $683 = $619 * 1.0e9;
          $684 = $x$i + ($621 << 2) | 0;
          $685 = HEAP32[$684 >> 2] | 0;
          $686 = +($685 >>> 0);
          $687 = $683 + $686;
          $643 = +($sign$0 | 0);
          $625 = $643 * $687;
          $663 = $e2$1$i246 + 53 | 0;
          $669 = $663 - $emin$0$ph | 0;
          $670 = ($669 | 0) < ($bits$0$ph | 0);
          $688 = ($669 | 0) < 0;
          $$$i = $688 ? 0 : $669;
          $denormal$0$i = $670 & 1;
          $$010$i = $670 ? $$$i : $bits$0$ph;
          $689 = ($$010$i | 0) < 53;
          if ($689) {
           $623 = 105 - $$010$i | 0;
           $624 = +(tempDouble = +_scalbn(1.0, $623), asyncState ? +abort(-12) : tempDouble);
           $626 = +(tempDouble = +_copysignl($624, $625), asyncState ? +abort(-12) : tempDouble);
           $627 = 53 - $$010$i | 0;
           $628 = +(tempDouble = +_scalbn(1.0, $627), asyncState ? +abort(-12) : tempDouble);
           $629 = +(tempDouble = +_fmodl($625, $628), asyncState ? +abort(-12) : tempDouble);
           $630 = $625 - $629;
           $631 = $626 + $630;
           $bias$0$i25 = $626;
           $frac$0$i = $629;
           $y$1$i24 = $631;
          } else {
           $bias$0$i25 = 0.0;
           $frac$0$i = 0.0;
           $y$1$i24 = $625;
          }
          $632 = $a$3$i249 + 2 | 0;
          $633 = $632 & 127;
          $634 = ($633 | 0) == ($z$7$1$i | 0);
          do {
           if ($634) {
            $frac$2$i = $frac$0$i;
           } else {
            $635 = $x$i + ($633 << 2) | 0;
            $636 = HEAP32[$635 >> 2] | 0;
            $637 = $636 >>> 0 < 5e8;
            do {
             if ($637) {
              $638 = ($636 | 0) == 0;
              if ($638) {
               $639 = $a$3$i249 + 3 | 0;
               $640 = $639 & 127;
               $641 = ($640 | 0) == ($z$7$1$i | 0);
               if ($641) {
                $frac$1$i = $frac$0$i;
                break;
               }
              }
              $642 = $643 * .25;
              $644 = $642 + $frac$0$i;
              $frac$1$i = $644;
             } else {
              $645 = $636 >>> 0 > 5e8;
              if ($645) {
               $646 = $643 * .75;
               $647 = $646 + $frac$0$i;
               $frac$1$i = $647;
               break;
              }
              $648 = $a$3$i249 + 3 | 0;
              $649 = $648 & 127;
              $650 = ($649 | 0) == ($z$7$1$i | 0);
              if ($650) {
               $651 = $643 * .5;
               $652 = $651 + $frac$0$i;
               $frac$1$i = $652;
               break;
              } else {
               $653 = $643 * .75;
               $654 = $653 + $frac$0$i;
               $frac$1$i = $654;
               break;
              }
             }
            } while (0);
            $655 = 53 - $$010$i | 0;
            $656 = ($655 | 0) > 1;
            if (!$656) {
             $frac$2$i = $frac$1$i;
             break;
            }
            $657 = +(tempDouble = +_fmodl($frac$1$i, 1.0), asyncState ? +abort(-12) : tempDouble);
            $658 = $657 != 0.0;
            if ($658) {
             $frac$2$i = $frac$1$i;
             break;
            }
            $659 = $frac$1$i + 1.0;
            $frac$2$i = $659;
           }
          } while (0);
          $660 = $y$1$i24 + $frac$2$i;
          $661 = $660 - $bias$0$i25;
          $662 = $663 & 2147483647;
          $664 = -2 - $sum$i | 0;
          $665 = ($662 | 0) > ($664 | 0);
          do {
           if ($665) {
            $666 = +Math_abs(+$661);
            $667 = !($666 >= 9007199254740992.0);
            if ($667) {
             $denormal$2$i = $denormal$0$i;
             $e2$2$i = $e2$1$i246;
             $y$2$i26 = $661;
            } else {
             $668 = ($$010$i | 0) == ($669 | 0);
             $or$cond20$i = $670 & $668;
             $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
             $671 = $661 * .5;
             $672 = $e2$1$i246 + 1 | 0;
             $denormal$2$i = $denormal$1$i;
             $e2$2$i = $672;
             $y$2$i26 = $671;
            }
            $673 = $e2$2$i + 50 | 0;
            $674 = ($673 | 0) > ($330 | 0);
            if (!$674) {
             $675 = ($denormal$2$i | 0) != 0;
             $676 = $frac$2$i != 0.0;
             $or$cond8$i = $676 & $675;
             if (!$or$cond8$i) {
              $e2$3$i = $e2$2$i;
              $y$3$i = $y$2$i26;
              break;
             }
            }
            $677 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            HEAP32[$677 >> 2] = 34;
            $e2$3$i = $e2$2$i;
            $y$3$i = $y$2$i26;
           } else {
            $e2$3$i = $e2$1$i246;
            $y$3$i = $661;
           }
          } while (0);
          $678 = +(tempDouble = +_scalbnl($y$3$i, $e2$3$i), asyncState ? +abort(-12) : tempDouble);
          $$0$i27 = $678;
         }
        } while (0);
        $$0 = $$0$i27;
        break L4;
        break;
       }
      default:
       {
        $109 = HEAP32[$1 >> 2] | 0;
        $110 = ($109 | 0) == (0 | 0);
        if (!$110) {
         $111 = HEAP32[$0 >> 2] | 0;
         $112 = $111 + -1 | 0;
         HEAP32[$0 >> 2] = $112;
        }
        $113 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        HEAP32[$113 >> 2] = 22;
        ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
        $$0 = 0.0;
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $41 = HEAP32[$1 >> 2] | 0;
    $42 = ($41 | 0) == (0 | 0);
    if (!$42) {
     $43 = HEAP32[$0 >> 2] | 0;
     $44 = $43 + -1 | 0;
     HEAP32[$0 >> 2] = $44;
    }
    $45 = ($pok | 0) != 0;
    $46 = $i$0$lcssa >>> 0 > 3;
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while (1) {
      if (!$42) {
       $47 = HEAP32[$0 >> 2] | 0;
       $48 = $47 + -1 | 0;
       HEAP32[$0 >> 2] = $48;
      }
      $49 = $i$1 + -1 | 0;
      $$old8 = $49 >>> 0 > 3;
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = +($sign$0 | 0);
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0, $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0, $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0, $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != (0 | 0);
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $ebuf0$i + 12 | 0;
 $6 = $ebuf0$i + 11 | 0;
 $7 = $buf$i;
 $8 = $5;
 $9 = $8 - $7 | 0;
 $10 = -2 - $7 | 0;
 $11 = $8 + 2 | 0;
 $12 = $big$i + 288 | 0;
 $13 = $buf$i + 9 | 0;
 $14 = $13;
 $15 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $fmt41 = $fmt;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  $16 = ($cnt$0 | 0) > -1;
  do {
   if ($16) {
    $17 = 2147483647 - $cnt$0 | 0;
    $18 = ($l$0 | 0) > ($17 | 0);
    if ($18) {
     $19 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$19 >> 2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = $l$0 + $cnt$0 | 0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while (0);
  $21 = HEAP8[$fmt41 >> 0] | 0;
  $22 = $21 << 24 >> 24 == 0;
  if ($22) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;
   $fmt40 = $fmt41;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $fmt39101 = $fmt40;
     $z$0102 = $fmt40;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $fmt39$lcssa = $fmt40;
     $z$0$lcssa = $fmt40;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $fmt40 + 1 | 0;
   $$pre = HEAP8[$24 >> 0] | 0;
   $23 = $$pre;
   $fmt40 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     $25 = $fmt39101 + 1 | 0;
     $26 = HEAP8[$25 >> 0] | 0;
     $27 = $26 << 24 >> 24 == 37;
     if (!$27) {
      $fmt39$lcssa = $fmt39101;
      $z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = $z$0102 + 1 | 0;
     $29 = $fmt39101 + 2 | 0;
     $30 = HEAP8[$29 >> 0] | 0;
     $31 = $30 << 24 >> 24 == 37;
     if ($31) {
      $fmt39101 = $29;
      $z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;
      $z$0$lcssa = $28;
      break;
     }
    }
   }
  } while (0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = $32 - $33 | 0;
  if ($0) {
   $35 = HEAP32[$f >> 2] | 0;
   $36 = $35 & 32;
   $37 = ($36 | 0) == 0;
   if ($37) {
    (tempInt = ___fwritex($fmt41, $34, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
  }
  $38 = ($z$0$lcssa | 0) == ($fmt41 | 0);
  if (!$38) {
   $l10n$0$phi = $l10n$0;
   $cnt$0 = $cnt$1;
   $fmt41 = $fmt39$lcssa;
   $l$0 = $34;
   $l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = $fmt39$lcssa + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = $41 + -48 | 0;
  $isdigit = $isdigittmp >>> 0 < 10;
  if ($isdigit) {
   $42 = $fmt39$lcssa + 2 | 0;
   $43 = HEAP8[$42 >> 0] | 0;
   $44 = $43 << 24 >> 24 == 36;
   $45 = $fmt39$lcssa + 3 | 0;
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51 >> 0] | 0;
   $47 = $$pre193;
   $argpos$0 = $isdigittmp$;
   $l10n$1 = $$l10n$0;
   $storemerge = $$51;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48 | 0) == 32;
  L25 : do {
   if ($49) {
    $51 = $46;
    $56 = $47;
    $fl$0109 = 0;
    $storemerge8108 = $storemerge;
    while (1) {
     $50 = $51 + -32 | 0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53 | 0) == 0;
     if ($54) {
      $66 = $56;
      $fl$062 = $fl$0109;
      $storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = $55 + -32 | 0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = $storemerge8108 + 1 | 0;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63 | 0) == 32;
     if ($64) {
      $51 = $62;
      $56 = $61;
      $fl$0109 = $59;
      $storemerge8108 = $60;
     } else {
      $66 = $61;
      $fl$062 = $59;
      $storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;
    $fl$062 = 0;
    $storemerge860 = $storemerge;
   }
  } while (0);
  $65 = $66 << 24 >> 24 == 42;
  do {
   if ($65) {
    $67 = $storemerge860 + 1 | 0;
    $68 = HEAP8[$67 >> 0] | 0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = $69 + -48 | 0;
    $isdigit12 = $isdigittmp11 >>> 0 < 10;
    if ($isdigit12) {
     $70 = $storemerge860 + 2 | 0;
     $71 = HEAP8[$70 >> 0] | 0;
     $72 = $71 << 24 >> 24 == 36;
     if ($72) {
      $73 = $nl_type + ($isdigittmp11 << 2) | 0;
      HEAP32[$73 >> 2] = 10;
      $74 = HEAP8[$67 >> 0] | 0;
      $75 = $74 << 24 >> 24;
      $76 = $75 + -48 | 0;
      $77 = $nl_arg + ($76 << 3) | 0;
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79 >> 2] | 0;
      $81 = $78 + 4 | 0;
      $82 = $81;
      $83 = HEAP32[$82 >> 2] | 0;
      $84 = $storemerge860 + 3 | 0;
      $l10n$2 = 1;
      $storemerge13 = $84;
      $w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label | 0) == 24) {
     label = 0;
     $85 = ($l10n$1 | 0) == 0;
     if (!$85) {
      $$0 = -1;
      break L1;
     }
     if (!$0) {
      $fl$1 = $fl$062;
      $fmt42 = $67;
      $l10n$3 = 0;
      $w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap >> 2] | 0;
     $86 = $arglist_current;
     $87 = 0 + 4 | 0;
     $expanded4 = $87;
     $expanded = $expanded4 - 1 | 0;
     $88 = $86 + $expanded | 0;
     $89 = 0 + 4 | 0;
     $expanded8 = $89;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91 >> 2] | 0;
     $arglist_next = $91 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next;
     $l10n$2 = 0;
     $storemerge13 = $67;
     $w$0 = $92;
    }
    $93 = ($w$0 | 0) < 0;
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = 0 - $w$0 | 0;
     $fl$1 = $94;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $95;
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = $96 + -48 | 0;
    $isdigit2$i = $isdigittmp1$i >>> 0 < 10;
    if ($isdigit2$i) {
     $100 = $storemerge860;
     $i$03$i = 0;
     $isdigittmp4$i = $isdigittmp1$i;
     while (1) {
      $97 = $i$03$i * 10 | 0;
      $98 = $97 + $isdigittmp4$i | 0;
      $99 = $100 + 1 | 0;
      $101 = HEAP8[$99 >> 0] | 0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = $102 + -48 | 0;
      $isdigit$i = $isdigittmp$i >>> 0 < 10;
      if ($isdigit$i) {
       $100 = $99;
       $i$03$i = $98;
       $isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;
       $$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa | 0) < 0;
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;
      $fmt42 = $$lcssa318;
      $l10n$3 = $l10n$1;
      $w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge860;
     $l10n$3 = $l10n$1;
     $w$1 = 0;
    }
   }
  } while (0);
  $104 = HEAP8[$fmt42 >> 0] | 0;
  $105 = $104 << 24 >> 24 == 46;
  L46 : do {
   if ($105) {
    $106 = $fmt42 + 1 | 0;
    $107 = HEAP8[$106 >> 0] | 0;
    $108 = $107 << 24 >> 24 == 42;
    if (!$108) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = $135 + -48 | 0;
     $isdigit2$i23 = $isdigittmp1$i22 >>> 0 < 10;
     if ($isdigit2$i23) {
      $139 = $106;
      $i$03$i25 = 0;
      $isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;
      $p$0 = 0;
      break;
     }
     while (1) {
      $136 = $i$03$i25 * 10 | 0;
      $137 = $136 + $isdigittmp4$i24 | 0;
      $138 = $139 + 1 | 0;
      $140 = HEAP8[$138 >> 0] | 0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = $141 + -48 | 0;
      $isdigit$i27 = $isdigittmp$i26 >>> 0 < 10;
      if ($isdigit$i27) {
       $139 = $138;
       $i$03$i25 = $137;
       $isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;
       $p$0 = $137;
       break L46;
      }
     }
    }
    $109 = $fmt42 + 2 | 0;
    $110 = HEAP8[$109 >> 0] | 0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = $111 + -48 | 0;
    $isdigit10 = $isdigittmp9 >>> 0 < 10;
    if ($isdigit10) {
     $112 = $fmt42 + 3 | 0;
     $113 = HEAP8[$112 >> 0] | 0;
     $114 = $113 << 24 >> 24 == 36;
     if ($114) {
      $115 = $nl_type + ($isdigittmp9 << 2) | 0;
      HEAP32[$115 >> 2] = 10;
      $116 = HEAP8[$109 >> 0] | 0;
      $117 = $116 << 24 >> 24;
      $118 = $117 + -48 | 0;
      $119 = $nl_arg + ($118 << 3) | 0;
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121 >> 2] | 0;
      $123 = $120 + 4 | 0;
      $124 = $123;
      $125 = HEAP32[$124 >> 2] | 0;
      $126 = $fmt42 + 4 | 0;
      $fmt45 = $126;
      $p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3 | 0) == 0;
    if (!$127) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $128 = $arglist_current2;
     $129 = 0 + 4 | 0;
     $expanded11 = $129;
     $expanded10 = $expanded11 - 1 | 0;
     $130 = $128 + $expanded10 | 0;
     $131 = 0 + 4 | 0;
     $expanded15 = $131;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133 >> 2] | 0;
     $arglist_next3 = $133 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next3;
     $fmt45 = $109;
     $p$0 = $134;
    } else {
     $fmt45 = $109;
     $p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;
    $p$0 = -1;
   }
  } while (0);
  $fmt44 = $fmt45;
  $st$0 = 0;
  while (1) {
   $142 = HEAP8[$fmt44 >> 0] | 0;
   $143 = $142 << 24 >> 24;
   $144 = $143 + -65 | 0;
   $145 = $144 >>> 0 > 57;
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = $fmt44 + 1 | 0;
   $147 = (19317 + ($st$0 * 58 | 0) | 0) + $144 | 0;
   $148 = HEAP8[$147 >> 0] | 0;
   $149 = $148 & 255;
   $150 = $149 + -1 | 0;
   $151 = $150 >>> 0 < 8;
   if ($151) {
    $fmt44 = $146;
    $st$0 = $149;
   } else {
    $$lcssa323 = $146;
    $$lcssa324 = $148;
    $$lcssa325 = $149;
    $fmt44$lcssa321 = $fmt44;
    $st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = $$lcssa324 << 24 >> 24 == 0;
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = $$lcssa324 << 24 >> 24 == 19;
  $154 = ($argpos$0 | 0) > -1;
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = $nl_type + ($argpos$0 << 2) | 0;
     HEAP32[$155 >> 2] = $$lcssa325;
     $156 = $nl_arg + ($argpos$0 << 3) | 0;
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158 >> 2] | 0;
     $160 = $157 + 4 | 0;
     $161 = $160;
     $162 = HEAP32[$161 >> 2] | 0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164 >> 2] = $159;
     $165 = $163 + 4 | 0;
     $166 = $165;
     HEAP32[$166 >> 2] = $162;
     label = 52;
     break;
    }
    if (!$0) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg, $$lcssa325, $ap), asyncState ? abort(-12) | 0 : 0;
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $fmt41 = $$lcssa323;
    $l$0 = $34;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321 >> 0] | 0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322 | 0) != 0;
  $170 = $168 & 15;
  $171 = ($170 | 0) == 3;
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173 | 0) == 0;
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75 : do {
   switch ($t$0 | 0) {
   case 110:
    {
     switch ($st$0$lcssa322 | 0) {
     case 0:
      {
       $182 = HEAP32[$arg >> 2] | 0;
       HEAP32[$182 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 1:
      {
       $183 = HEAP32[$arg >> 2] | 0;
       HEAP32[$183 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 2:
      {
       $184 = ($cnt$1 | 0) < 0;
       $185 = $184 << 31 >> 31;
       $186 = HEAP32[$arg >> 2] | 0;
       $187 = $186;
       $188 = $187;
       HEAP32[$188 >> 2] = $cnt$1;
       $189 = $187 + 4 | 0;
       $190 = $189;
       HEAP32[$190 >> 2] = $185;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 3:
      {
       $191 = $cnt$1 & 65535;
       $192 = HEAP32[$arg >> 2] | 0;
       HEAP16[$192 >> 1] = $191;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 4:
      {
       $193 = $cnt$1 & 255;
       $194 = HEAP32[$arg >> 2] | 0;
       HEAP8[$194 >> 0] = $193;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 6:
      {
       $195 = HEAP32[$arg >> 2] | 0;
       HEAP32[$195 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 7:
      {
       $196 = ($cnt$1 | 0) < 0;
       $197 = $196 << 31 >> 31;
       $198 = HEAP32[$arg >> 2] | 0;
       $199 = $198;
       $200 = $199;
       HEAP32[$200 >> 2] = $cnt$1;
       $201 = $199 + 4 | 0;
       $202 = $201;
       HEAP32[$202 >> 2] = $197;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     default:
      {
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $203 = $p$0 >>> 0 > 8;
     $204 = $203 ? $p$0 : 8;
     $205 = $fl$1$ | 8;
     $fl$3 = $205;
     $p$1 = $204;
     $t$1 = 120;
     label = 64;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 64;
     break;
    }
   case 111:
    {
     $243 = $arg;
     $244 = $243;
     $245 = HEAP32[$244 >> 2] | 0;
     $246 = $243 + 4 | 0;
     $247 = $246;
     $248 = HEAP32[$247 >> 2] | 0;
     $249 = ($245 | 0) == 0;
     $250 = ($248 | 0) == 0;
     $251 = $249 & $250;
     if ($251) {
      $$0$lcssa$i = $1;
     } else {
      $$03$i33 = $1;
      $253 = $245;
      $257 = $248;
      while (1) {
       $252 = $253 & 7;
       $254 = $252 | 48;
       $255 = $254 & 255;
       $256 = $$03$i33 + -1 | 0;
       HEAP8[$256 >> 0] = $255;
       $258 = (tempInt = _bitshift64Lshr($253 | 0, $257 | 0, 3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $259 = tempRet0;
       $260 = ($258 | 0) == 0;
       $261 = ($259 | 0) == 0;
       $262 = $260 & $261;
       if ($262) {
        $$0$lcssa$i = $256;
        break;
       } else {
        $$03$i33 = $256;
        $253 = $258;
        $257 = $259;
       }
      }
     }
     $263 = $fl$1$ & 8;
     $264 = ($263 | 0) == 0;
     if ($264) {
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = 0;
      $prefix$1 = 19797;
      label = 77;
     } else {
      $265 = $$0$lcssa$i;
      $266 = $2 - $265 | 0;
      $267 = $266 + 1 | 0;
      $268 = ($p$0 | 0) < ($267 | 0);
      $$p$0 = $268 ? $267 : $p$0;
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $$p$0;
      $pl$1 = 0;
      $prefix$1 = 19797;
      label = 77;
     }
     break;
    }
   case 105:
   case 100:
    {
     $269 = $arg;
     $270 = $269;
     $271 = HEAP32[$270 >> 2] | 0;
     $272 = $269 + 4 | 0;
     $273 = $272;
     $274 = HEAP32[$273 >> 2] | 0;
     $275 = ($274 | 0) < 0;
     if ($275) {
      $276 = (tempInt = _i64Subtract(0, 0, $271 | 0, $274 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $277 = tempRet0;
      $278 = $arg;
      $279 = $278;
      HEAP32[$279 >> 2] = $276;
      $280 = $278 + 4 | 0;
      $281 = $280;
      HEAP32[$281 >> 2] = $277;
      $286 = $276;
      $287 = $277;
      $pl$0 = 1;
      $prefix$0 = 19797;
      label = 76;
      break L75;
     }
     $282 = $fl$1$ & 2048;
     $283 = ($282 | 0) == 0;
     if ($283) {
      $284 = $fl$1$ & 1;
      $285 = ($284 | 0) == 0;
      $$ = $285 ? 19797 : 19799;
      $286 = $271;
      $287 = $274;
      $pl$0 = $284;
      $prefix$0 = $$;
      label = 76;
     } else {
      $286 = $271;
      $287 = $274;
      $pl$0 = 1;
      $prefix$0 = 19798;
      label = 76;
     }
     break;
    }
   case 117:
    {
     $176 = $arg;
     $177 = $176;
     $178 = HEAP32[$177 >> 2] | 0;
     $179 = $176 + 4 | 0;
     $180 = $179;
     $181 = HEAP32[$180 >> 2] | 0;
     $286 = $178;
     $287 = $181;
     $pl$0 = 0;
     $prefix$0 = 19797;
     label = 76;
     break;
    }
   case 99:
    {
     $307 = $arg;
     $308 = $307;
     $309 = HEAP32[$308 >> 2] | 0;
     $310 = $307 + 4 | 0;
     $311 = $310;
     $312 = HEAP32[$311 >> 2] | 0;
     $313 = $309 & 255;
     HEAP8[$3 >> 0] = $313;
     $a$2 = $3;
     $fl$6 = $175;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 19797;
     $z$2 = $1;
     break;
    }
   case 109:
    {
     $314 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $315 = HEAP32[$314 >> 2] | 0;
     $316 = (tempInt = _strerror($315) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $a$1 = $316;
     label = 82;
     break;
    }
   case 115:
    {
     $317 = HEAP32[$arg >> 2] | 0;
     $318 = ($317 | 0) != (0 | 0);
     $319 = $318 ? $317 : 19807;
     $a$1 = $319;
     label = 82;
     break;
    }
   case 67:
    {
     $326 = $arg;
     $327 = $326;
     $328 = HEAP32[$327 >> 2] | 0;
     $329 = $326 + 4 | 0;
     $330 = $329;
     $331 = HEAP32[$330 >> 2] | 0;
     HEAP32[$wc >> 2] = $328;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4198 = -1;
     label = 86;
     break;
    }
   case 83:
    {
     $332 = ($p$0 | 0) == 0;
     if ($332) {
      _pad($f, 32, $w$1, 0, $fl$1$), asyncState ? abort(-12) | 0 : 0;
      $i$0$lcssa200 = 0;
      label = 98;
     } else {
      $p$4198 = $p$0;
      label = 86;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $359 = +HEAPF64[$arg >> 3];
     HEAP32[$e2$i >> 2] = 0;
     HEAPF64[tempDoublePtr >> 3] = $359;
     $360 = HEAP32[tempDoublePtr >> 2] | 0;
     $361 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $362 = ($361 | 0) < 0;
     if ($362) {
      $363 = -$359;
      $$07$i = $363;
      $pl$0$i = 1;
      $prefix$0$i = 19814;
     } else {
      $364 = $fl$1$ & 2048;
      $365 = ($364 | 0) == 0;
      if ($365) {
       $366 = $fl$1$ & 1;
       $367 = ($366 | 0) == 0;
       $$$i = $367 ? 19815 : 19820;
       $$07$i = $359;
       $pl$0$i = $366;
       $prefix$0$i = $$$i;
      } else {
       $$07$i = $359;
       $pl$0$i = 1;
       $prefix$0$i = 19817;
      }
     }
     HEAPF64[tempDoublePtr >> 3] = $$07$i;
     $368 = HEAP32[tempDoublePtr >> 2] | 0;
     $369 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $370 = $369 & 2146435072;
     $371 = $370 >>> 0 < 2146435072;
     $372 = 0 < 0;
     $373 = ($370 | 0) == 2146435072;
     $374 = $373 & $372;
     $375 = $371 | $374;
     do {
      if ($375) {
       $391 = +(tempDouble = +_frexpl($$07$i, $e2$i), asyncState ? +abort(-12) : tempDouble);
       $392 = $391 * 2.0;
       $393 = $392 != 0.0;
       if ($393) {
        $394 = HEAP32[$e2$i >> 2] | 0;
        $395 = $394 + -1 | 0;
        HEAP32[$e2$i >> 2] = $395;
       }
       $396 = $t$0 | 32;
       $397 = ($396 | 0) == 97;
       if ($397) {
        $398 = $t$0 & 32;
        $399 = ($398 | 0) == 0;
        $400 = $prefix$0$i + 9 | 0;
        $prefix$0$$i = $399 ? $prefix$0$i : $400;
        $401 = $pl$0$i | 2;
        $402 = $p$0 >>> 0 > 11;
        $403 = 12 - $p$0 | 0;
        $404 = ($403 | 0) == 0;
        $405 = $402 | $404;
        do {
         if ($405) {
          $$1$i = $392;
         } else {
          $re$169$i = $403;
          $round$068$i = 8.0;
          while (1) {
           $406 = $re$169$i + -1 | 0;
           $407 = $round$068$i * 16.0;
           $408 = ($406 | 0) == 0;
           if ($408) {
            $$lcssa342 = $407;
            break;
           } else {
            $re$169$i = $406;
            $round$068$i = $407;
           }
          }
          $409 = HEAP8[$prefix$0$$i >> 0] | 0;
          $410 = $409 << 24 >> 24 == 45;
          if ($410) {
           $411 = -$392;
           $412 = $411 - $$lcssa342;
           $413 = $$lcssa342 + $412;
           $414 = -$413;
           $$1$i = $414;
           break;
          } else {
           $415 = $392 + $$lcssa342;
           $416 = $415 - $$lcssa342;
           $$1$i = $416;
           break;
          }
         }
        } while (0);
        $417 = HEAP32[$e2$i >> 2] | 0;
        $418 = ($417 | 0) < 0;
        $419 = 0 - $417 | 0;
        $420 = $418 ? $419 : $417;
        $421 = ($420 | 0) < 0;
        $422 = $421 << 31 >> 31;
        $423 = (tempInt = _fmt_u($420, $422, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $424 = ($423 | 0) == ($5 | 0);
        if ($424) {
         HEAP8[$6 >> 0] = 48;
         $estr$0$i = $6;
        } else {
         $estr$0$i = $423;
        }
        $425 = $417 >> 31;
        $426 = $425 & 2;
        $427 = $426 + 43 | 0;
        $428 = $427 & 255;
        $429 = $estr$0$i + -1 | 0;
        HEAP8[$429 >> 0] = $428;
        $430 = $t$0 + 15 | 0;
        $431 = $430 & 255;
        $432 = $estr$0$i + -2 | 0;
        HEAP8[$432 >> 0] = $431;
        $notrhs$i = ($p$0 | 0) < 1;
        $433 = $fl$1$ & 8;
        $434 = ($433 | 0) == 0;
        $$2$i = $$1$i;
        $s$0$i = $buf$i;
        while (1) {
         $435 = ~~$$2$i;
         $436 = 19781 + $435 | 0;
         $437 = HEAP8[$436 >> 0] | 0;
         $438 = $437 & 255;
         $439 = $438 | $398;
         $440 = $439 & 255;
         $441 = $s$0$i + 1 | 0;
         HEAP8[$s$0$i >> 0] = $440;
         $442 = +($435 | 0);
         $443 = $$2$i - $442;
         $444 = $443 * 16.0;
         $445 = $441;
         $446 = $445 - $7 | 0;
         $447 = ($446 | 0) == 1;
         do {
          if ($447) {
           $notlhs$i = $444 == 0.0;
           $or$cond3$not$i = $notrhs$i & $notlhs$i;
           $or$cond$i = $434 & $or$cond3$not$i;
           if ($or$cond$i) {
            $s$1$i = $441;
            break;
           }
           $448 = $s$0$i + 2 | 0;
           HEAP8[$441 >> 0] = 46;
           $s$1$i = $448;
          } else {
           $s$1$i = $441;
          }
         } while (0);
         $449 = $444 != 0.0;
         if ($449) {
          $$2$i = $444;
          $s$0$i = $s$1$i;
         } else {
          $s$1$i$lcssa = $s$1$i;
          break;
         }
        }
        $450 = ($p$0 | 0) != 0;
        $$pre182$i = $s$1$i$lcssa;
        $451 = $10 + $$pre182$i | 0;
        $452 = ($451 | 0) < ($p$0 | 0);
        $or$cond240 = $450 & $452;
        $453 = $432;
        $454 = $11 + $p$0 | 0;
        $455 = $454 - $453 | 0;
        $456 = $432;
        $457 = $9 - $456 | 0;
        $458 = $457 + $$pre182$i | 0;
        $l$0$i = $or$cond240 ? $455 : $458;
        $459 = $l$0$i + $401 | 0;
        _pad($f, 32, $w$1, $459, $fl$1$), asyncState ? abort(-12) | 0 : 0;
        $460 = HEAP32[$f >> 2] | 0;
        $461 = $460 & 32;
        $462 = ($461 | 0) == 0;
        if ($462) {
         (tempInt = ___fwritex($prefix$0$$i, $401, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        }
        $463 = $fl$1$ ^ 65536;
        _pad($f, 48, $w$1, $459, $463), asyncState ? abort(-12) | 0 : 0;
        $464 = $$pre182$i - $7 | 0;
        $465 = HEAP32[$f >> 2] | 0;
        $466 = $465 & 32;
        $467 = ($466 | 0) == 0;
        if ($467) {
         (tempInt = ___fwritex($buf$i, $464, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        }
        $468 = $432;
        $469 = $8 - $468 | 0;
        $sum = $464 + $469 | 0;
        $470 = $l$0$i - $sum | 0;
        _pad($f, 48, $470, 0, 0), asyncState ? abort(-12) | 0 : 0;
        $471 = HEAP32[$f >> 2] | 0;
        $472 = $471 & 32;
        $473 = ($472 | 0) == 0;
        if ($473) {
         (tempInt = ___fwritex($432, $469, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        }
        $474 = $fl$1$ ^ 8192;
        _pad($f, 32, $w$1, $459, $474), asyncState ? abort(-12) | 0 : 0;
        $475 = ($459 | 0) < ($w$1 | 0);
        $w$$i = $475 ? $w$1 : $459;
        $$0$i = $w$$i;
        break;
       }
       $476 = ($p$0 | 0) < 0;
       $$p$i = $476 ? 6 : $p$0;
       if ($393) {
        $477 = $392 * 268435456.0;
        $478 = HEAP32[$e2$i >> 2] | 0;
        $479 = $478 + -28 | 0;
        HEAP32[$e2$i >> 2] = $479;
        $$3$i = $477;
        $481 = $479;
       } else {
        $$pre179$i = HEAP32[$e2$i >> 2] | 0;
        $$3$i = $392;
        $481 = $$pre179$i;
       }
       $480 = ($481 | 0) < 0;
       $$31$i = $480 ? $big$i : $12;
       $482 = $$31$i;
       $$4$i = $$3$i;
       $z$0$i = $$31$i;
       while (1) {
        $483 = ~~$$4$i >>> 0;
        HEAP32[$z$0$i >> 2] = $483;
        $484 = $z$0$i + 4 | 0;
        $485 = +($483 >>> 0);
        $486 = $$4$i - $485;
        $487 = $486 * 1.0e9;
        $488 = $487 != 0.0;
        if ($488) {
         $$4$i = $487;
         $z$0$i = $484;
        } else {
         $$lcssa326 = $484;
         break;
        }
       }
       $$pr$i = HEAP32[$e2$i >> 2] | 0;
       $489 = ($$pr$i | 0) > 0;
       if ($489) {
        $491 = $$pr$i;
        $a$1147$i = $$31$i;
        $z$1146$i = $$lcssa326;
        while (1) {
         $490 = ($491 | 0) > 29;
         $492 = $490 ? 29 : $491;
         $d$0139$i = $z$1146$i + -4 | 0;
         $493 = $d$0139$i >>> 0 < $a$1147$i >>> 0;
         do {
          if ($493) {
           $a$2$ph$i = $a$1147$i;
          } else {
           $carry$0140$i = 0;
           $d$0141$i = $d$0139$i;
           while (1) {
            $494 = HEAP32[$d$0141$i >> 2] | 0;
            $495 = (tempInt = _bitshift64Shl($494 | 0, 0, $492 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $496 = tempRet0;
            $497 = (tempInt = _i64Add($495 | 0, $496 | 0, $carry$0140$i | 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $498 = tempRet0;
            $499 = (tempInt = ___uremdi3($497 | 0, $498 | 0, 1e9, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $500 = tempRet0;
            HEAP32[$d$0141$i >> 2] = $499;
            $501 = (tempInt = ___udivdi3($497 | 0, $498 | 0, 1e9, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $502 = tempRet0;
            $d$0$i = $d$0141$i + -4 | 0;
            $503 = $d$0$i >>> 0 < $a$1147$i >>> 0;
            if ($503) {
             $$lcssa327 = $501;
             break;
            } else {
             $carry$0140$i = $501;
             $d$0141$i = $d$0$i;
            }
           }
           $504 = ($$lcssa327 | 0) == 0;
           if ($504) {
            $a$2$ph$i = $a$1147$i;
            break;
           }
           $505 = $a$1147$i + -4 | 0;
           HEAP32[$505 >> 2] = $$lcssa327;
           $a$2$ph$i = $505;
          }
         } while (0);
         $z$2$i = $z$1146$i;
         while (1) {
          $506 = $z$2$i >>> 0 > $a$2$ph$i >>> 0;
          if (!$506) {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
          $507 = $z$2$i + -4 | 0;
          $508 = HEAP32[$507 >> 2] | 0;
          $509 = ($508 | 0) == 0;
          if ($509) {
           $z$2$i = $507;
          } else {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
         }
         $510 = HEAP32[$e2$i >> 2] | 0;
         $511 = $510 - $492 | 0;
         HEAP32[$e2$i >> 2] = $511;
         $512 = ($511 | 0) > 0;
         if ($512) {
          $491 = $511;
          $a$1147$i = $a$2$ph$i;
          $z$1146$i = $z$2$i$lcssa;
         } else {
          $$pr47$i = $511;
          $a$1$lcssa$i = $a$2$ph$i;
          $z$1$lcssa$i = $z$2$i$lcssa;
          break;
         }
        }
       } else {
        $$pr47$i = $$pr$i;
        $a$1$lcssa$i = $$31$i;
        $z$1$lcssa$i = $$lcssa326;
       }
       $513 = ($$pr47$i | 0) < 0;
       if ($513) {
        $514 = $$p$i + 25 | 0;
        $515 = ($514 | 0) / 9 & -1;
        $516 = $515 + 1 | 0;
        $517 = ($396 | 0) == 102;
        $519 = $$pr47$i;
        $a$3134$i = $a$1$lcssa$i;
        $z$3133$i = $z$1$lcssa$i;
        while (1) {
         $518 = 0 - $519 | 0;
         $520 = ($518 | 0) > 9;
         $521 = $520 ? 9 : $518;
         $522 = $a$3134$i >>> 0 < $z$3133$i >>> 0;
         do {
          if ($522) {
           $526 = 1 << $521;
           $527 = $526 + -1 | 0;
           $528 = 1e9 >>> $521;
           $carry3$0128$i = 0;
           $d$1127$i = $a$3134$i;
           while (1) {
            $529 = HEAP32[$d$1127$i >> 2] | 0;
            $530 = $529 & $527;
            $531 = $529 >>> $521;
            $532 = $531 + $carry3$0128$i | 0;
            HEAP32[$d$1127$i >> 2] = $532;
            $533 = Math_imul($530, $528) | 0;
            $534 = $d$1127$i + 4 | 0;
            $535 = $534 >>> 0 < $z$3133$i >>> 0;
            if ($535) {
             $carry3$0128$i = $533;
             $d$1127$i = $534;
            } else {
             $$lcssa329 = $533;
             break;
            }
           }
           $536 = HEAP32[$a$3134$i >> 2] | 0;
           $537 = ($536 | 0) == 0;
           $538 = $a$3134$i + 4 | 0;
           $$a$3$i = $537 ? $538 : $a$3134$i;
           $539 = ($$lcssa329 | 0) == 0;
           if ($539) {
            $$a$3186$i = $$a$3$i;
            $z$4$i = $z$3133$i;
            break;
           }
           $540 = $z$3133$i + 4 | 0;
           HEAP32[$z$3133$i >> 2] = $$lcssa329;
           $$a$3186$i = $$a$3$i;
           $z$4$i = $540;
          } else {
           $523 = HEAP32[$a$3134$i >> 2] | 0;
           $524 = ($523 | 0) == 0;
           $525 = $a$3134$i + 4 | 0;
           $$a$3185$i = $524 ? $525 : $a$3134$i;
           $$a$3186$i = $$a$3185$i;
           $z$4$i = $z$3133$i;
          }
         } while (0);
         $541 = $517 ? $$31$i : $$a$3186$i;
         $542 = $z$4$i;
         $543 = $541;
         $544 = $542 - $543 | 0;
         $545 = $544 >> 2;
         $546 = ($545 | 0) > ($516 | 0);
         $547 = $541 + ($516 << 2) | 0;
         $$z$4$i = $546 ? $547 : $z$4$i;
         $548 = HEAP32[$e2$i >> 2] | 0;
         $549 = $548 + $521 | 0;
         HEAP32[$e2$i >> 2] = $549;
         $550 = ($549 | 0) < 0;
         if ($550) {
          $519 = $549;
          $a$3134$i = $$a$3186$i;
          $z$3133$i = $$z$4$i;
         } else {
          $a$3$lcssa$i = $$a$3186$i;
          $z$3$lcssa$i = $$z$4$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;
        $z$3$lcssa$i = $z$1$lcssa$i;
       }
       $551 = $a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0;
       do {
        if ($551) {
         $552 = $a$3$lcssa$i;
         $553 = $482 - $552 | 0;
         $554 = $553 >> 2;
         $555 = $554 * 9 | 0;
         $556 = HEAP32[$a$3$lcssa$i >> 2] | 0;
         $557 = $556 >>> 0 < 10;
         if ($557) {
          $e$1$i = $555;
          break;
         } else {
          $e$0123$i = $555;
          $i$0122$i = 10;
         }
         while (1) {
          $558 = $i$0122$i * 10 | 0;
          $559 = $e$0123$i + 1 | 0;
          $560 = $556 >>> 0 < $558 >>> 0;
          if ($560) {
           $e$1$i = $559;
           break;
          } else {
           $e$0123$i = $559;
           $i$0122$i = $558;
          }
         }
        } else {
         $e$1$i = 0;
        }
       } while (0);
       $561 = ($396 | 0) != 102;
       $562 = $561 ? $e$1$i : 0;
       $563 = $$p$i - $562 | 0;
       $564 = ($396 | 0) == 103;
       $565 = ($$p$i | 0) != 0;
       $566 = $565 & $564;
       $$neg52$i = $566 << 31 >> 31;
       $567 = $563 + $$neg52$i | 0;
       $568 = $z$3$lcssa$i;
       $569 = $568 - $482 | 0;
       $570 = $569 >> 2;
       $571 = $570 * 9 | 0;
       $572 = $571 + -9 | 0;
       $573 = ($567 | 0) < ($572 | 0);
       if ($573) {
        $574 = $567 + 9216 | 0;
        $575 = ($574 | 0) / 9 & -1;
        $$sum$i = $575 + -1023 | 0;
        $576 = $$31$i + ($$sum$i << 2) | 0;
        $577 = ($574 | 0) % 9 & -1;
        $j$0115$i = $577 + 1 | 0;
        $578 = ($j$0115$i | 0) < 9;
        if ($578) {
         $i$1116$i = 10;
         $j$0117$i = $j$0115$i;
         while (1) {
          $579 = $i$1116$i * 10 | 0;
          $j$0$i = $j$0117$i + 1 | 0;
          $exitcond$i = ($j$0$i | 0) == 9;
          if ($exitcond$i) {
           $i$1$lcssa$i = $579;
           break;
          } else {
           $i$1116$i = $579;
           $j$0117$i = $j$0$i;
          }
         }
        } else {
         $i$1$lcssa$i = 10;
        }
        $580 = HEAP32[$576 >> 2] | 0;
        $581 = ($580 >>> 0) % ($i$1$lcssa$i >>> 0) & -1;
        $582 = ($581 | 0) == 0;
        if ($582) {
         $$sum15$i = $575 + -1022 | 0;
         $583 = $$31$i + ($$sum15$i << 2) | 0;
         $584 = ($583 | 0) == ($z$3$lcssa$i | 0);
         if ($584) {
          $a$7$i = $a$3$lcssa$i;
          $d$3$i = $576;
          $e$3$i = $e$1$i;
         } else {
          label = 163;
         }
        } else {
         label = 163;
        }
        do {
         if ((label | 0) == 163) {
          label = 0;
          $585 = ($580 >>> 0) / ($i$1$lcssa$i >>> 0) & -1;
          $586 = $585 & 1;
          $587 = ($586 | 0) == 0;
          $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
          $588 = ($i$1$lcssa$i | 0) / 2 & -1;
          $589 = $581 >>> 0 < $588 >>> 0;
          do {
           if ($589) {
            $small$0$i = .5;
           } else {
            $590 = ($581 | 0) == ($588 | 0);
            if ($590) {
             $$sum16$i = $575 + -1022 | 0;
             $591 = $$31$i + ($$sum16$i << 2) | 0;
             $592 = ($591 | 0) == ($z$3$lcssa$i | 0);
             if ($592) {
              $small$0$i = 1.0;
              break;
             }
            }
            $small$0$i = 1.5;
           }
          } while (0);
          $593 = ($pl$0$i | 0) == 0;
          do {
           if ($593) {
            $round6$1$i = $$20$i;
            $small$1$i = $small$0$i;
           } else {
            $594 = HEAP8[$prefix$0$i >> 0] | 0;
            $595 = $594 << 24 >> 24 == 45;
            if (!$595) {
             $round6$1$i = $$20$i;
             $small$1$i = $small$0$i;
             break;
            }
            $596 = -$$20$i;
            $597 = -$small$0$i;
            $round6$1$i = $596;
            $small$1$i = $597;
           }
          } while (0);
          $598 = $580 - $581 | 0;
          HEAP32[$576 >> 2] = $598;
          $599 = $round6$1$i + $small$1$i;
          $600 = $599 != $round6$1$i;
          if (!$600) {
           $a$7$i = $a$3$lcssa$i;
           $d$3$i = $576;
           $e$3$i = $e$1$i;
           break;
          }
          $601 = $598 + $i$1$lcssa$i | 0;
          HEAP32[$576 >> 2] = $601;
          $602 = $601 >>> 0 > 999999999;
          if ($602) {
           $a$5109$i = $a$3$lcssa$i;
           $d$2108$i = $576;
           while (1) {
            $603 = $d$2108$i + -4 | 0;
            HEAP32[$d$2108$i >> 2] = 0;
            $604 = $603 >>> 0 < $a$5109$i >>> 0;
            if ($604) {
             $605 = $a$5109$i + -4 | 0;
             HEAP32[$605 >> 2] = 0;
             $a$6$i = $605;
            } else {
             $a$6$i = $a$5109$i;
            }
            $606 = HEAP32[$603 >> 2] | 0;
            $607 = $606 + 1 | 0;
            HEAP32[$603 >> 2] = $607;
            $608 = $607 >>> 0 > 999999999;
            if ($608) {
             $a$5109$i = $a$6$i;
             $d$2108$i = $603;
            } else {
             $a$5$lcssa$i = $a$6$i;
             $d$2$lcssa$i = $603;
             break;
            }
           }
          } else {
           $a$5$lcssa$i = $a$3$lcssa$i;
           $d$2$lcssa$i = $576;
          }
          $609 = $a$5$lcssa$i;
          $610 = $482 - $609 | 0;
          $611 = $610 >> 2;
          $612 = $611 * 9 | 0;
          $613 = HEAP32[$a$5$lcssa$i >> 2] | 0;
          $614 = $613 >>> 0 < 10;
          if ($614) {
           $a$7$i = $a$5$lcssa$i;
           $d$3$i = $d$2$lcssa$i;
           $e$3$i = $612;
           break;
          } else {
           $e$2104$i = $612;
           $i$2103$i = 10;
          }
          while (1) {
           $615 = $i$2103$i * 10 | 0;
           $616 = $e$2104$i + 1 | 0;
           $617 = $613 >>> 0 < $615 >>> 0;
           if ($617) {
            $a$7$i = $a$5$lcssa$i;
            $d$3$i = $d$2$lcssa$i;
            $e$3$i = $616;
            break;
           } else {
            $e$2104$i = $616;
            $i$2103$i = $615;
           }
          }
         }
        } while (0);
        $618 = $d$3$i + 4 | 0;
        $619 = $z$3$lcssa$i >>> 0 > $618 >>> 0;
        $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
        $a$8$ph$i = $a$7$i;
        $e$4$ph$i = $e$3$i;
        $z$6$ph$i = $$z$3$i;
       } else {
        $a$8$ph$i = $a$3$lcssa$i;
        $e$4$ph$i = $e$1$i;
        $z$6$ph$i = $z$3$lcssa$i;
       }
       $620 = 0 - $e$4$ph$i | 0;
       $z$6$i = $z$6$ph$i;
       while (1) {
        $621 = $z$6$i >>> 0 > $a$8$ph$i >>> 0;
        if (!$621) {
         $$lcssa159$i = 0;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
        $622 = $z$6$i + -4 | 0;
        $623 = HEAP32[$622 >> 2] | 0;
        $624 = ($623 | 0) == 0;
        if ($624) {
         $z$6$i = $622;
        } else {
         $$lcssa159$i = 1;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
       }
       do {
        if ($564) {
         $625 = $565 & 1;
         $626 = $625 ^ 1;
         $$p$$i = $626 + $$p$i | 0;
         $627 = ($$p$$i | 0) > ($e$4$ph$i | 0);
         $628 = ($e$4$ph$i | 0) > -5;
         $or$cond6$i = $627 & $628;
         if ($or$cond6$i) {
          $629 = $t$0 + -1 | 0;
          $$neg53$i = $$p$$i + -1 | 0;
          $630 = $$neg53$i - $e$4$ph$i | 0;
          $$013$i = $629;
          $$210$i = $630;
         } else {
          $631 = $t$0 + -2 | 0;
          $632 = $$p$$i + -1 | 0;
          $$013$i = $631;
          $$210$i = $632;
         }
         $633 = $fl$1$ & 8;
         $634 = ($633 | 0) == 0;
         if (!$634) {
          $$114$i = $$013$i;
          $$311$i = $$210$i;
          $$pre$phi184$iZ2D = $633;
          break;
         }
         do {
          if ($$lcssa159$i) {
           $635 = $z$6$i$lcssa + -4 | 0;
           $636 = HEAP32[$635 >> 2] | 0;
           $637 = ($636 | 0) == 0;
           if ($637) {
            $j$2$i = 9;
            break;
           }
           $638 = ($636 >>> 0) % 10 & -1;
           $639 = ($638 | 0) == 0;
           if ($639) {
            $i$399$i = 10;
            $j$1100$i = 0;
           } else {
            $j$2$i = 0;
            break;
           }
           while (1) {
            $640 = $i$399$i * 10 | 0;
            $641 = $j$1100$i + 1 | 0;
            $642 = ($636 >>> 0) % ($640 >>> 0) & -1;
            $643 = ($642 | 0) == 0;
            if ($643) {
             $i$399$i = $640;
             $j$1100$i = $641;
            } else {
             $j$2$i = $641;
             break;
            }
           }
          } else {
           $j$2$i = 9;
          }
         } while (0);
         $644 = $$013$i | 32;
         $645 = ($644 | 0) == 102;
         $646 = $z$6$i$lcssa;
         $647 = $646 - $482 | 0;
         $648 = $647 >> 2;
         $649 = $648 * 9 | 0;
         $650 = $649 + -9 | 0;
         if ($645) {
          $651 = $650 - $j$2$i | 0;
          $652 = ($651 | 0) < 0;
          $$21$i = $652 ? 0 : $651;
          $653 = ($$210$i | 0) < ($$21$i | 0);
          $$210$$22$i = $653 ? $$210$i : $$21$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$22$i;
          $$pre$phi184$iZ2D = 0;
          break;
         } else {
          $654 = $650 + $e$4$ph$i | 0;
          $655 = $654 - $j$2$i | 0;
          $656 = ($655 | 0) < 0;
          $$23$i = $656 ? 0 : $655;
          $657 = ($$210$i | 0) < ($$23$i | 0);
          $$210$$24$i = $657 ? $$210$i : $$23$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$24$i;
          $$pre$phi184$iZ2D = 0;
          break;
         }
        } else {
         $$pre183$i = $fl$1$ & 8;
         $$114$i = $t$0;
         $$311$i = $$p$i;
         $$pre$phi184$iZ2D = $$pre183$i;
        }
       } while (0);
       $658 = $$311$i | $$pre$phi184$iZ2D;
       $659 = ($658 | 0) != 0;
       $660 = $659 & 1;
       $661 = $$114$i | 32;
       $662 = ($661 | 0) == 102;
       if ($662) {
        $663 = ($e$4$ph$i | 0) > 0;
        $664 = $663 ? $e$4$ph$i : 0;
        $$pn$i = $664;
        $estr$2$i = 0;
       } else {
        $665 = ($e$4$ph$i | 0) < 0;
        $666 = $665 ? $620 : $e$4$ph$i;
        $667 = ($666 | 0) < 0;
        $668 = $667 << 31 >> 31;
        $669 = (tempInt = _fmt_u($666, $668, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $670 = $669;
        $671 = $8 - $670 | 0;
        $672 = ($671 | 0) < 2;
        if ($672) {
         $estr$193$i = $669;
         while (1) {
          $673 = $estr$193$i + -1 | 0;
          HEAP8[$673 >> 0] = 48;
          $674 = $673;
          $675 = $8 - $674 | 0;
          $676 = ($675 | 0) < 2;
          if ($676) {
           $estr$193$i = $673;
          } else {
           $estr$1$lcssa$i = $673;
           break;
          }
         }
        } else {
         $estr$1$lcssa$i = $669;
        }
        $677 = $e$4$ph$i >> 31;
        $678 = $677 & 2;
        $679 = $678 + 43 | 0;
        $680 = $679 & 255;
        $681 = $estr$1$lcssa$i + -1 | 0;
        HEAP8[$681 >> 0] = $680;
        $682 = $$114$i & 255;
        $683 = $estr$1$lcssa$i + -2 | 0;
        HEAP8[$683 >> 0] = $682;
        $684 = $683;
        $685 = $8 - $684 | 0;
        $$pn$i = $685;
        $estr$2$i = $683;
       }
       $686 = $pl$0$i + 1 | 0;
       $687 = $686 + $$311$i | 0;
       $l$1$i = $687 + $660 | 0;
       $688 = $l$1$i + $$pn$i | 0;
       _pad($f, 32, $w$1, $688, $fl$1$), asyncState ? abort(-12) | 0 : 0;
       $689 = HEAP32[$f >> 2] | 0;
       $690 = $689 & 32;
       $691 = ($690 | 0) == 0;
       if ($691) {
        (tempInt = ___fwritex($prefix$0$i, $pl$0$i, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       }
       $692 = $fl$1$ ^ 65536;
       _pad($f, 48, $w$1, $688, $692), asyncState ? abort(-12) | 0 : 0;
       do {
        if ($662) {
         $693 = $a$8$ph$i >>> 0 > $$31$i >>> 0;
         $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
         $d$482$i = $r$0$a$8$i;
         while (1) {
          $694 = HEAP32[$d$482$i >> 2] | 0;
          $695 = (tempInt = _fmt_u($694, 0, $13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $696 = ($d$482$i | 0) == ($r$0$a$8$i | 0);
          do {
           if ($696) {
            $700 = ($695 | 0) == ($13 | 0);
            if (!$700) {
             $s7$1$i = $695;
             break;
            }
            HEAP8[$15 >> 0] = 48;
            $s7$1$i = $15;
           } else {
            $697 = $695 >>> 0 > $buf$i >>> 0;
            if ($697) {
             $s7$079$i = $695;
            } else {
             $s7$1$i = $695;
             break;
            }
            while (1) {
             $698 = $s7$079$i + -1 | 0;
             HEAP8[$698 >> 0] = 48;
             $699 = $698 >>> 0 > $buf$i >>> 0;
             if ($699) {
              $s7$079$i = $698;
             } else {
              $s7$1$i = $698;
              break;
             }
            }
           }
          } while (0);
          $701 = HEAP32[$f >> 2] | 0;
          $702 = $701 & 32;
          $703 = ($702 | 0) == 0;
          if ($703) {
           $704 = $s7$1$i;
           $705 = $14 - $704 | 0;
           (tempInt = ___fwritex($s7$1$i, $705, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          }
          $706 = $d$482$i + 4 | 0;
          $707 = $706 >>> 0 > $$31$i >>> 0;
          if ($707) {
           $$lcssa339 = $706;
           break;
          } else {
           $d$482$i = $706;
          }
         }
         $708 = ($658 | 0) == 0;
         do {
          if (!$708) {
           $709 = HEAP32[$f >> 2] | 0;
           $710 = $709 & 32;
           $711 = ($710 | 0) == 0;
           if (!$711) {
            break;
           }
           (tempInt = ___fwritex(19849, 1, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          }
         } while (0);
         $712 = $$lcssa339 >>> 0 < $z$6$i$lcssa >>> 0;
         $713 = ($$311$i | 0) > 0;
         $714 = $713 & $712;
         if ($714) {
          $$41276$i = $$311$i;
          $d$575$i = $$lcssa339;
          while (1) {
           $715 = HEAP32[$d$575$i >> 2] | 0;
           $716 = (tempInt = _fmt_u($715, 0, $13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $717 = $716 >>> 0 > $buf$i >>> 0;
           if ($717) {
            $s8$070$i = $716;
            while (1) {
             $718 = $s8$070$i + -1 | 0;
             HEAP8[$718 >> 0] = 48;
             $719 = $718 >>> 0 > $buf$i >>> 0;
             if ($719) {
              $s8$070$i = $718;
             } else {
              $s8$0$lcssa$i = $718;
              break;
             }
            }
           } else {
            $s8$0$lcssa$i = $716;
           }
           $720 = HEAP32[$f >> 2] | 0;
           $721 = $720 & 32;
           $722 = ($721 | 0) == 0;
           if ($722) {
            $723 = ($$41276$i | 0) > 9;
            $724 = $723 ? 9 : $$41276$i;
            (tempInt = ___fwritex($s8$0$lcssa$i, $724, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           }
           $725 = $d$575$i + 4 | 0;
           $726 = $$41276$i + -9 | 0;
           $727 = $725 >>> 0 < $z$6$i$lcssa >>> 0;
           $728 = ($$41276$i | 0) > 9;
           $729 = $728 & $727;
           if ($729) {
            $$41276$i = $726;
            $d$575$i = $725;
           } else {
            $$412$lcssa$i = $726;
            break;
           }
          }
         } else {
          $$412$lcssa$i = $$311$i;
         }
         $730 = $$412$lcssa$i + 9 | 0;
         _pad($f, 48, $730, 9, 0), asyncState ? abort(-12) | 0 : 0;
        } else {
         $731 = $a$8$ph$i + 4 | 0;
         $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
         $732 = ($$311$i | 0) > -1;
         if ($732) {
          $733 = ($$pre$phi184$iZ2D | 0) == 0;
          $$587$i = $$311$i;
          $d$686$i = $a$8$ph$i;
          while (1) {
           $734 = HEAP32[$d$686$i >> 2] | 0;
           $735 = (tempInt = _fmt_u($734, 0, $13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $736 = ($735 | 0) == ($13 | 0);
           if ($736) {
            HEAP8[$15 >> 0] = 48;
            $s9$0$i = $15;
           } else {
            $s9$0$i = $735;
           }
           $737 = ($d$686$i | 0) == ($a$8$ph$i | 0);
           do {
            if ($737) {
             $741 = $s9$0$i + 1 | 0;
             $742 = HEAP32[$f >> 2] | 0;
             $743 = $742 & 32;
             $744 = ($743 | 0) == 0;
             if ($744) {
              (tempInt = ___fwritex($s9$0$i, 1, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             }
             $745 = ($$587$i | 0) < 1;
             $or$cond29$i = $733 & $745;
             if ($or$cond29$i) {
              $s9$2$i = $741;
              break;
             }
             $746 = HEAP32[$f >> 2] | 0;
             $747 = $746 & 32;
             $748 = ($747 | 0) == 0;
             if (!$748) {
              $s9$2$i = $741;
              break;
             }
             (tempInt = ___fwritex(19849, 1, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $s9$2$i = $741;
            } else {
             $738 = $s9$0$i >>> 0 > $buf$i >>> 0;
             if ($738) {
              $s9$183$i = $s9$0$i;
             } else {
              $s9$2$i = $s9$0$i;
              break;
             }
             while (1) {
              $739 = $s9$183$i + -1 | 0;
              HEAP8[$739 >> 0] = 48;
              $740 = $739 >>> 0 > $buf$i >>> 0;
              if ($740) {
               $s9$183$i = $739;
              } else {
               $s9$2$i = $739;
               break;
              }
             }
            }
           } while (0);
           $749 = $s9$2$i;
           $750 = $14 - $749 | 0;
           $751 = HEAP32[$f >> 2] | 0;
           $752 = $751 & 32;
           $753 = ($752 | 0) == 0;
           if ($753) {
            $754 = ($$587$i | 0) > ($750 | 0);
            $755 = $754 ? $750 : $$587$i;
            (tempInt = ___fwritex($s9$2$i, $755, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           }
           $756 = $$587$i - $750 | 0;
           $757 = $d$686$i + 4 | 0;
           $758 = $757 >>> 0 < $z$6$$i >>> 0;
           $759 = ($756 | 0) > -1;
           $760 = $758 & $759;
           if ($760) {
            $$587$i = $756;
            $d$686$i = $757;
           } else {
            $$5$lcssa$i = $756;
            break;
           }
          }
         } else {
          $$5$lcssa$i = $$311$i;
         }
         $761 = $$5$lcssa$i + 18 | 0;
         _pad($f, 48, $761, 18, 0), asyncState ? abort(-12) | 0 : 0;
         $762 = HEAP32[$f >> 2] | 0;
         $763 = $762 & 32;
         $764 = ($763 | 0) == 0;
         if (!$764) {
          break;
         }
         $765 = $estr$2$i;
         $766 = $8 - $765 | 0;
         (tempInt = ___fwritex($estr$2$i, $766, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        }
       } while (0);
       $767 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $688, $767), asyncState ? abort(-12) | 0 : 0;
       $768 = ($688 | 0) < ($w$1 | 0);
       $w$30$i = $768 ? $w$1 : $688;
       $$0$i = $w$30$i;
      } else {
       $376 = $t$0 & 32;
       $377 = ($376 | 0) != 0;
       $378 = $377 ? 19833 : 19837;
       $379 = $$07$i != $$07$i | 0.0 != 0.0;
       $380 = $377 ? 19841 : 19845;
       $pl$1$i = $379 ? 0 : $pl$0$i;
       $s1$0$i = $379 ? $380 : $378;
       $381 = $pl$1$i + 3 | 0;
       _pad($f, 32, $w$1, $381, $175), asyncState ? abort(-12) | 0 : 0;
       $382 = HEAP32[$f >> 2] | 0;
       $383 = $382 & 32;
       $384 = ($383 | 0) == 0;
       if ($384) {
        (tempInt = ___fwritex($prefix$0$i, $pl$1$i, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $$pre$i = HEAP32[$f >> 2] | 0;
        $386 = $$pre$i;
       } else {
        $386 = $382;
       }
       $385 = $386 & 32;
       $387 = ($385 | 0) == 0;
       if ($387) {
        (tempInt = ___fwritex($s1$0$i, 3, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       }
       $388 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $381, $388), asyncState ? abort(-12) | 0 : 0;
       $389 = ($381 | 0) < ($w$1 | 0);
       $390 = $389 ? $w$1 : $381;
       $$0$i = $390;
      }
     } while (0);
     $cnt$0 = $cnt$1;
     $fmt41 = $$lcssa323;
     $l$0 = $$0$i;
     $l10n$0 = $l10n$3;
     continue L1;
     break;
    }
   default:
    {
     $a$2 = $fmt41;
     $fl$6 = $fl$1$;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 19797;
     $z$2 = $1;
    }
   }
  } while (0);
  L313 : do {
   if ((label | 0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207 >> 2] | 0;
    $209 = $206 + 4 | 0;
    $210 = $209;
    $211 = HEAP32[$210 >> 2] | 0;
    $212 = $t$1 & 32;
    $213 = ($208 | 0) == 0;
    $214 = ($211 | 0) == 0;
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 19797;
     label = 77;
    } else {
     $$012$i = $1;
     $217 = $208;
     $224 = $211;
     while (1) {
      $216 = $217 & 15;
      $218 = 19781 + $216 | 0;
      $219 = HEAP8[$218 >> 0] | 0;
      $220 = $219 & 255;
      $221 = $220 | $212;
      $222 = $221 & 255;
      $223 = $$012$i + -1 | 0;
      HEAP8[$223 >> 0] = $222;
      $225 = (tempInt = _bitshift64Lshr($217 | 0, $224 | 0, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $226 = tempRet0;
      $227 = ($225 | 0) == 0;
      $228 = ($226 | 0) == 0;
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;
       $217 = $225;
       $224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231 >> 2] | 0;
     $233 = $230 + 4 | 0;
     $234 = $233;
     $235 = HEAP32[$234 >> 2] | 0;
     $236 = ($232 | 0) == 0;
     $237 = ($235 | 0) == 0;
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239 | 0) == 0;
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 0;
      $prefix$1 = 19797;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = 19797 + $241 | 0;
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 2;
      $prefix$1 = $242;
      label = 77;
     }
    }
   } else if ((label | 0) == 76) {
    label = 0;
    $288 = (tempInt = _fmt_u($286, $287, $1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $a$0 = $288;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 77;
   } else if ((label | 0) == 82) {
    label = 0;
    $320 = (tempInt = _memchr($a$1, 0, $p$0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $321 = ($320 | 0) == (0 | 0);
    $322 = $320;
    $323 = $a$1;
    $324 = $322 - $323 | 0;
    $325 = $a$1 + $p$0 | 0;
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;
    $fl$6 = $175;
    $p$5 = $p$3;
    $pl$2 = 0;
    $prefix$2 = 19797;
    $z$2 = $z$1;
   } else if ((label | 0) == 86) {
    label = 0;
    $333 = HEAP32[$arg >> 2] | 0;
    $i$0114 = 0;
    $l$1113 = 0;
    $ws$0115 = $333;
    while (1) {
     $334 = HEAP32[$ws$0115 >> 2] | 0;
     $335 = ($334 | 0) == 0;
     if ($335) {
      $i$0$lcssa = $i$0114;
      $l$2 = $l$1113;
      break;
     }
     $336 = (tempInt = _wctomb($mb, $334) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $337 = ($336 | 0) < 0;
     $338 = $p$4198 - $i$0114 | 0;
     $339 = $336 >>> 0 > $338 >>> 0;
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;
      $l$2 = $336;
      break;
     }
     $340 = $ws$0115 + 4 | 0;
     $341 = $336 + $i$0114 | 0;
     $342 = $p$4198 >>> 0 > $341 >>> 0;
     if ($342) {
      $i$0114 = $341;
      $l$1113 = $336;
      $ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;
      $l$2 = $336;
      break;
     }
    }
    $343 = ($l$2 | 0) < 0;
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$), asyncState ? abort(-12) | 0 : 0;
    $344 = ($i$0$lcssa | 0) == 0;
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg >> 2] | 0;
     $i$1125 = 0;
     $ws$1126 = $345;
     while (1) {
      $346 = HEAP32[$ws$1126 >> 2] | 0;
      $347 = ($346 | 0) == 0;
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = $ws$1126 + 4 | 0;
      $349 = (tempInt = _wctomb($mb, $346) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $350 = $349 + $i$1125 | 0;
      $351 = ($350 | 0) > ($i$0$lcssa | 0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f >> 2] | 0;
      $353 = $352 & 32;
      $354 = ($353 | 0) == 0;
      if ($354) {
       (tempInt = ___fwritex($mb, $349, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      }
      $355 = $350 >>> 0 < $i$0$lcssa >>> 0;
      if ($355) {
       $i$1125 = $350;
       $ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f, 32, $w$1, $i$0$lcssa200, $356), asyncState ? abort(-12) | 0 : 0;
   $357 = ($w$1 | 0) > ($i$0$lcssa200 | 0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;
   $fmt41 = $$lcssa323;
   $l$0 = $358;
   $l10n$0 = $l10n$3;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $289 = ($p$2 | 0) > -1;
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292 >> 2] | 0;
   $294 = $291 + 4 | 0;
   $295 = $294;
   $296 = HEAP32[$295 >> 2] | 0;
   $297 = ($293 | 0) != 0;
   $298 = ($296 | 0) != 0;
   $299 = $297 | $298;
   $300 = ($p$2 | 0) != 0;
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = $2 - $301 | 0;
    $303 = $299 & 1;
    $304 = $303 ^ 1;
    $305 = $304 + $302 | 0;
    $306 = ($p$2 | 0) > ($305 | 0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = $p$2$;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = $769 - $770 | 0;
  $772 = ($p$5 | 0) < ($771 | 0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = $pl$2 + $$p$5 | 0;
  $774 = ($w$1 | 0) < ($773 | 0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f, 32, $w$2, $773, $fl$6), asyncState ? abort(-12) | 0 : 0;
  $775 = HEAP32[$f >> 2] | 0;
  $776 = $775 & 32;
  $777 = ($776 | 0) == 0;
  if ($777) {
   (tempInt = ___fwritex($prefix$2, $pl$2, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
  $778 = $fl$6 ^ 65536;
  _pad($f, 48, $w$2, $773, $778), asyncState ? abort(-12) | 0 : 0;
  _pad($f, 48, $$p$5, $771, 0), asyncState ? abort(-12) | 0 : 0;
  $779 = HEAP32[$f >> 2] | 0;
  $780 = $779 & 32;
  $781 = ($780 | 0) == 0;
  if ($781) {
   (tempInt = ___fwritex($a$2, $771, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
  $782 = $fl$6 ^ 8192;
  _pad($f, 32, $w$2, $773, $782), asyncState ? abort(-12) | 0 : 0;
  $cnt$0 = $cnt$1;
  $fmt41 = $$lcssa323;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 L348 : do {
  if ((label | 0) == 245) {
   $783 = ($f | 0) == (0 | 0);
   if ($783) {
    $784 = ($l10n$0$lcssa | 0) == 0;
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while (1) {
      $785 = $nl_type + ($i$2100 << 2) | 0;
      $786 = HEAP32[$785 >> 2] | 0;
      $787 = ($786 | 0) == 0;
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = $nl_arg + ($i$2100 << 3) | 0;
      _pop_arg($789, $786, $ap), asyncState ? abort(-12) | 0 : 0;
      $790 = $i$2100 + 1 | 0;
      $791 = ($790 | 0) < 10;
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa | 0) < 10;
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while (1) {
       $794 = $nl_type + ($i$398 << 2) | 0;
       $795 = HEAP32[$794 >> 2] | 0;
       $796 = ($795 | 0) == 0;
       $793 = $i$398 + 1 | 0;
       if (!$796) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793 | 0) < 10;
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser14parse_internalEb($agg$result, $this, $keep) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $keep = $keep | 0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val15 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i4 = 0, $__i$i$i$i = 0, $__i$i$i$i5 = 0, $float_val = 0.0, $int_val = 0, $k = 0, $keep_tag = 0, $key = 0, $s = 0, $value = 0, $value1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $65 = sp + 590 | 0;
 $68 = sp + 216 | 0;
 $69 = sp + 200 | 0;
 $key = sp + 300 | 0;
 $k = sp + 184 | 0;
 $value = sp + 168 | 0;
 $71 = sp + 152 | 0;
 $72 = sp + 136 | 0;
 $73 = sp + 128 | 0;
 $74 = sp + 112 | 0;
 $value1 = sp + 96 | 0;
 $75 = sp + 80 | 0;
 $s = sp + 288 | 0;
 $76 = sp + 64 | 0;
 $77 = sp + 56 | 0;
 $78 = sp + 48 | 0;
 $79 = sp + 276 | 0;
 $80 = sp + 264 | 0;
 $81 = sp + 252 | 0;
 $82 = sp + 240 | 0;
 $83 = sp + 588 | 0;
 $int_val = sp + 32 | 0;
 $84 = sp + 24 | 0;
 $85 = sp + 16 | 0;
 $86 = sp;
 $63 = $this;
 $87 = $keep & 1;
 $64 = $87;
 $88 = $63;
 $$expand_i1_val = 0;
 HEAP8[$65 >> 0] = $$expand_i1_val;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ENSA_7value_tE($agg$result, 7), asyncState ? abort(-12) | 0 : 0;
 $89 = $88 + 32 | 0;
 $90 = HEAP32[$89 >> 2] | 0;
 L1 : do {
  switch ($90 | 0) {
  case 7:
   {
    $91 = $64;
    $92 = $91 & 1;
    do {
     if ($92) {
      $93 = $88 + 8 | 0;
      $62 = $93;
      $94 = $62;
      $95 = $94 + 16 | 0;
      $96 = HEAP32[$95 >> 2] | 0;
      $97 = ($96 | 0) != (0 | 0);
      if ($97) {
       $98 = $88 + 8 | 0;
       $99 = HEAP32[$88 >> 2] | 0;
       $100 = $99 + 1 | 0;
       HEAP32[$88 >> 2] = $100;
       __THREW__ = 0;
       $101 = (tempInt = invoke_iiiii(421, $98 | 0, $99 | 0, 0, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $102 = __THREW__;
       __THREW__ = 0;
       $103 = $102 & 1;
       if ($103) {
        label = 8;
        break L1;
       }
       $104 = $101 & 1;
       $64 = $104;
       if (!$101) {
        break;
       }
      }
      HEAP8[$agg$result >> 0] = 1;
      $105 = $agg$result + 8 | 0;
      __THREW__ = 0;
      invoke_vii(422, $68 | 0, 1), asyncState ? abort(-12) | 0 : 0;
      $106 = __THREW__;
      __THREW__ = 0;
      $107 = $106 & 1;
      if ($107) {
       label = 8;
       break L1;
      }
      HEAP32[$105 >> 2] = HEAP32[$68 >> 2] | 0;
      HEAP32[$105 + 4 >> 2] = HEAP32[$68 + 4 >> 2] | 0;
     }
    } while (0);
    __THREW__ = 0;
    (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $110 = __THREW__;
    __THREW__ = 0;
    $111 = $110 & 1;
    if ($111) {
     label = 8;
    } else {
     $112 = $88 + 32 | 0;
     $113 = HEAP32[$112 >> 2] | 0;
     $114 = ($113 | 0) == 9;
     __THREW__ = 0;
     if ($114) {
      (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser9get_tokenEv($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $115 = __THREW__;
      __THREW__ = 0;
      $116 = $115 & 1;
      if ($116) {
       label = 8;
       break L1;
      }
      $117 = $64;
      $118 = $117 & 1;
      if ($118) {
       $119 = $88 + 8 | 0;
       $61 = $119;
       $120 = $61;
       $121 = $120 + 16 | 0;
       $122 = HEAP32[$121 >> 2] | 0;
       $123 = ($122 | 0) != (0 | 0);
       if ($123) {
        $124 = $88 + 8 | 0;
        $125 = HEAP32[$88 >> 2] | 0;
        $126 = $125 + -1 | 0;
        HEAP32[$88 >> 2] = $126;
        __THREW__ = 0;
        $127 = (tempInt = invoke_iiiii(421, $124 | 0, $126 | 0, 1, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $128 = __THREW__;
        __THREW__ = 0;
        $129 = $128 & 1;
        if ($129) {
         label = 8;
         break L1;
        }
        if (!$127) {
         __THREW__ = 0;
         invoke_vii(423, $69 | 0, 7), asyncState ? abort(-12) | 0 : 0;
         $130 = __THREW__;
         __THREW__ = 0;
         $131 = $130 & 1;
         if ($131) {
          label = 8;
          break L1;
         }
         (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $69) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($69), asyncState ? abort(-12) | 0 : 0;
        }
       }
      }
      $$expand_i1_val2 = 1;
      HEAP8[$65 >> 0] = $$expand_i1_val2;
      $70 = 1;
      break L1;
     }
     __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser8unexpectENSA_5lexer10token_typeE($88, 11), asyncState ? abort(-12) | 0 : 0;
     $132 = __THREW__;
     __THREW__ = 0;
     $133 = $132 & 1;
     if ($133) {
      label = 8;
     } else {
      L24 : while (1) {
       $134 = $88 + 32 | 0;
       $135 = HEAP32[$134 >> 2] | 0;
       $136 = ($135 | 0) == 11;
       if ($136) {
        __THREW__ = 0;
        (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $137 = __THREW__;
        __THREW__ = 0;
        $138 = $137 & 1;
        if ($138) {
         label = 8;
         break L1;
        }
       }
       __THREW__ = 0;
       invoke_vii(415, $88 | 0, 4), asyncState ? abort(-12) | 0 : 0;
       $139 = __THREW__;
       __THREW__ = 0;
       $140 = $139 & 1;
       if ($140) {
        label = 8;
        break L1;
       }
       $141 = $88 + 36 | 0;
       __THREW__ = 0;
       invoke_vii(424, $key | 0, $141 | 0), asyncState ? abort(-12) | 0 : 0;
       $142 = __THREW__;
       __THREW__ = 0;
       $143 = $142 & 1;
       if ($143) {
        label = 8;
        break L1;
       }
       $keep_tag = 0;
       $144 = $64;
       $145 = $144 & 1;
       do {
        if ($145) {
         $146 = $88 + 8 | 0;
         $60 = $146;
         $147 = $60;
         $148 = $147 + 16 | 0;
         $149 = HEAP32[$148 >> 2] | 0;
         $150 = ($149 | 0) != (0 | 0);
         if (!$150) {
          $keep_tag = 1;
          break;
         }
         __THREW__ = 0;
         invoke_vii(389, $k | 0, $key | 0), asyncState ? abort(-12) | 0 : 0;
         $151 = __THREW__;
         __THREW__ = 0;
         $152 = $151 & 1;
         if ($152) {
          label = 29;
          break L24;
         }
         $153 = $88 + 8 | 0;
         $154 = HEAP32[$88 >> 2] | 0;
         __THREW__ = 0;
         $155 = (tempInt = invoke_iiiii(421, $153 | 0, $154 | 0, 4, $k | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $156 = __THREW__;
         __THREW__ = 0;
         $157 = $156 & 1;
         if ($157) {
          label = 30;
          break L24;
         }
         $158 = $155 & 1;
         $keep_tag = $158;
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($k), asyncState ? abort(-12) | 0 : 0;
        }
       } while (0);
       __THREW__ = 0;
       (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $163 = __THREW__;
       __THREW__ = 0;
       $164 = $163 & 1;
       if ($164) {
        label = 29;
        break;
       }
       __THREW__ = 0;
       invoke_vii(415, $88 | 0, 10), asyncState ? abort(-12) | 0 : 0;
       $165 = __THREW__;
       __THREW__ = 0;
       $166 = $165 & 1;
       if ($166) {
        label = 29;
        break;
       }
       __THREW__ = 0;
       (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $167 = __THREW__;
       __THREW__ = 0;
       $168 = $167 & 1;
       if ($168) {
        label = 29;
        break;
       }
       $169 = $64;
       $170 = $169 & 1;
       __THREW__ = 0;
       invoke_viii(425, $value | 0, $88 | 0, $170 | 0), asyncState ? abort(-12) | 0 : 0;
       $171 = __THREW__;
       __THREW__ = 0;
       $172 = $171 & 1;
       if ($172) {
        label = 29;
        break;
       }
       $173 = $64;
       $174 = $173 & 1;
       if ($174) {
        $175 = $keep_tag;
        $176 = $175 & 1;
        if ($176) {
         $177 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E12is_discardedEv($value) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         if (!$177) {
          __THREW__ = 0;
          $178 = (tempInt = invoke_iii(426, $agg$result | 0, $key | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $179 = __THREW__;
          __THREW__ = 0;
          $180 = $179 & 1;
          if ($180) {
           label = 41;
           break;
          }
          $59 = $value;
          $181 = $59;
          __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EOSA_($71, $181), asyncState ? abort(-12) | 0 : 0;
          (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($178, $71) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($71), asyncState ? abort(-12) | 0 : 0;
         }
        }
       }
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($value), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($key), asyncState ? abort(-12) | 0 : 0;
       $184 = $88 + 32 | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = ($185 | 0) == 11;
       if (!$186) {
        label = 43;
        break;
       }
      }
      if ((label | 0) == 29) {
       $159 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $160 = tempRet0;
       $66 = $159;
       $67 = $160;
      } else if ((label | 0) == 30) {
       $161 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $162 = tempRet0;
       $66 = $161;
       $67 = $162;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($k), asyncState ? abort(-12) | 0 : 0;
      } else if ((label | 0) == 41) {
       $182 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $183 = tempRet0;
       $66 = $182;
       $67 = $183;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($value), asyncState ? abort(-12) | 0 : 0;
      } else if ((label | 0) == 43) {
       __THREW__ = 0;
       invoke_vii(415, $88 | 0, 9), asyncState ? abort(-12) | 0 : 0;
       $187 = __THREW__;
       __THREW__ = 0;
       $188 = $187 & 1;
       if ($188) {
        label = 8;
        break L1;
       }
       __THREW__ = 0;
       (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $189 = __THREW__;
       __THREW__ = 0;
       $190 = $189 & 1;
       if ($190) {
        label = 8;
        break L1;
       }
       $191 = $64;
       $192 = $191 & 1;
       if ($192) {
        $193 = $88 + 8 | 0;
        $58 = $193;
        $194 = $58;
        $195 = $194 + 16 | 0;
        $196 = HEAP32[$195 >> 2] | 0;
        $197 = ($196 | 0) != (0 | 0);
        if ($197) {
         $198 = $88 + 8 | 0;
         $199 = HEAP32[$88 >> 2] | 0;
         $200 = $199 + -1 | 0;
         HEAP32[$88 >> 2] = $200;
         __THREW__ = 0;
         $201 = (tempInt = invoke_iiiii(421, $198 | 0, $200 | 0, 1, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $202 = __THREW__;
         __THREW__ = 0;
         $203 = $202 & 1;
         if ($203) {
          label = 8;
          break L1;
         }
         if (!$201) {
          __THREW__ = 0;
          invoke_vii(423, $72 | 0, 7), asyncState ? abort(-12) | 0 : 0;
          $204 = __THREW__;
          __THREW__ = 0;
          $205 = $204 & 1;
          if ($205) {
           label = 8;
           break L1;
          }
          (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $72) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($72), asyncState ? abort(-12) | 0 : 0;
         }
        }
       }
       $$expand_i1_val4 = 1;
       HEAP8[$65 >> 0] = $$expand_i1_val4;
       $70 = 1;
       break L1;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($key), asyncState ? abort(-12) | 0 : 0;
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
      $480 = $66;
      $481 = $67;
      ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    break;
   }
  case 6:
   {
    $206 = $64;
    $207 = $206 & 1;
    do {
     if ($207) {
      $208 = $88 + 8 | 0;
      $57 = $208;
      $209 = $57;
      $210 = $209 + 16 | 0;
      $211 = HEAP32[$210 >> 2] | 0;
      $212 = ($211 | 0) != (0 | 0);
      if ($212) {
       $213 = $88 + 8 | 0;
       $214 = HEAP32[$88 >> 2] | 0;
       $215 = $214 + 1 | 0;
       HEAP32[$88 >> 2] = $215;
       __THREW__ = 0;
       $216 = (tempInt = invoke_iiiii(421, $213 | 0, $214 | 0, 2, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $217 = __THREW__;
       __THREW__ = 0;
       $218 = $217 & 1;
       if ($218) {
        label = 8;
        break L1;
       }
       $219 = $216 & 1;
       $64 = $219;
       if (!$216) {
        break;
       }
      }
      HEAP8[$agg$result >> 0] = 2;
      $220 = $agg$result + 8 | 0;
      __THREW__ = 0;
      invoke_vii(422, $73 | 0, 2), asyncState ? abort(-12) | 0 : 0;
      $221 = __THREW__;
      __THREW__ = 0;
      $222 = $221 & 1;
      if ($222) {
       label = 8;
       break L1;
      }
      HEAP32[$220 >> 2] = HEAP32[$73 >> 2] | 0;
      HEAP32[$220 + 4 >> 2] = HEAP32[$73 + 4 >> 2] | 0;
     }
    } while (0);
    __THREW__ = 0;
    (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $223 = __THREW__;
    __THREW__ = 0;
    $224 = $223 & 1;
    if ($224) {
     label = 8;
    } else {
     $225 = $88 + 32 | 0;
     $226 = HEAP32[$225 >> 2] | 0;
     $227 = ($226 | 0) == 8;
     __THREW__ = 0;
     if ($227) {
      (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser9get_tokenEv($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $228 = __THREW__;
      __THREW__ = 0;
      $229 = $228 & 1;
      if ($229) {
       label = 8;
       break L1;
      }
      $230 = $88 + 8 | 0;
      $56 = $230;
      $231 = $56;
      $232 = $231 + 16 | 0;
      $233 = HEAP32[$232 >> 2] | 0;
      $234 = ($233 | 0) != (0 | 0);
      if ($234) {
       $235 = $88 + 8 | 0;
       $236 = HEAP32[$88 >> 2] | 0;
       $237 = $236 + -1 | 0;
       HEAP32[$88 >> 2] = $237;
       __THREW__ = 0;
       $238 = (tempInt = invoke_iiiii(421, $235 | 0, $237 | 0, 3, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $239 = __THREW__;
       __THREW__ = 0;
       $240 = $239 & 1;
       if ($240) {
        label = 8;
        break L1;
       }
       if (!$238) {
        __THREW__ = 0;
        invoke_vii(423, $74 | 0, 7), asyncState ? abort(-12) | 0 : 0;
        $241 = __THREW__;
        __THREW__ = 0;
        $242 = $241 & 1;
        if ($242) {
         label = 8;
         break L1;
        }
        (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $74) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($74), asyncState ? abort(-12) | 0 : 0;
       }
      }
      $$expand_i1_val6 = 1;
      HEAP8[$65 >> 0] = $$expand_i1_val6;
      $70 = 1;
      break L1;
     }
     __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser8unexpectENSA_5lexer10token_typeE($88, 11), asyncState ? abort(-12) | 0 : 0;
     $243 = __THREW__;
     __THREW__ = 0;
     $244 = $243 & 1;
     if ($244) {
      label = 8;
     } else {
      while (1) {
       $245 = $88 + 32 | 0;
       $246 = HEAP32[$245 >> 2] | 0;
       $247 = ($246 | 0) == 11;
       if ($247) {
        __THREW__ = 0;
        (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $248 = __THREW__;
        __THREW__ = 0;
        $249 = $248 & 1;
        if ($249) {
         label = 8;
         break L1;
        }
       }
       $250 = $64;
       $251 = $250 & 1;
       __THREW__ = 0;
       invoke_viii(425, $value1 | 0, $88 | 0, $251 | 0), asyncState ? abort(-12) | 0 : 0;
       $252 = __THREW__;
       __THREW__ = 0;
       $253 = $252 & 1;
       if ($253) {
        label = 8;
        break L1;
       }
       $254 = $64;
       $255 = $254 & 1;
       if ($255) {
        $256 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E12is_discardedEv($value1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        if (!$256) {
         $54 = $value1;
         $257 = $54;
         __THREW__ = 0;
         invoke_vii(427, $agg$result | 0, $257 | 0), asyncState ? abort(-12) | 0 : 0;
         $258 = __THREW__;
         __THREW__ = 0;
         $259 = $258 & 1;
         if ($259) {
          label = 75;
          break;
         }
        }
       }
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($value1), asyncState ? abort(-12) | 0 : 0;
       $262 = $88 + 32 | 0;
       $263 = HEAP32[$262 >> 2] | 0;
       $264 = ($263 | 0) == 11;
       if (!$264) {
        break;
       }
      }
      if ((label | 0) == 75) {
       $260 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $261 = tempRet0;
       $66 = $260;
       $67 = $261;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($value1), asyncState ? abort(-12) | 0 : 0;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
       $480 = $66;
       $481 = $67;
       ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
      }
      __THREW__ = 0;
      invoke_vii(415, $88 | 0, 8), asyncState ? abort(-12) | 0 : 0;
      $265 = __THREW__;
      __THREW__ = 0;
      $266 = $265 & 1;
      if ($266) {
       label = 8;
      } else {
       __THREW__ = 0;
       (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $267 = __THREW__;
       __THREW__ = 0;
       $268 = $267 & 1;
       if ($268) {
        label = 8;
       } else {
        $269 = $64;
        $270 = $269 & 1;
        if ($270) {
         $271 = $88 + 8 | 0;
         $53 = $271;
         $272 = $53;
         $273 = $272 + 16 | 0;
         $274 = HEAP32[$273 >> 2] | 0;
         $275 = ($274 | 0) != (0 | 0);
         if ($275) {
          $276 = $88 + 8 | 0;
          $277 = HEAP32[$88 >> 2] | 0;
          $278 = $277 + -1 | 0;
          HEAP32[$88 >> 2] = $278;
          __THREW__ = 0;
          $279 = (tempInt = invoke_iiiii(421, $276 | 0, $278 | 0, 3, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $280 = __THREW__;
          __THREW__ = 0;
          $281 = $280 & 1;
          if ($281) {
           label = 8;
           break L1;
          }
          if (!$279) {
           __THREW__ = 0;
           invoke_vii(423, $75 | 0, 7), asyncState ? abort(-12) | 0 : 0;
           $282 = __THREW__;
           __THREW__ = 0;
           $283 = $282 & 1;
           if ($283) {
            label = 8;
            break L1;
           }
           (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $75) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($75), asyncState ? abort(-12) | 0 : 0;
          }
         }
        }
        $$expand_i1_val8 = 1;
        HEAP8[$65 >> 0] = $$expand_i1_val8;
        $70 = 1;
       }
      }
     }
    }
    break;
   }
  case 3:
   {
    __THREW__ = 0;
    (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $284 = __THREW__;
    __THREW__ = 0;
    $285 = $284 & 1;
    if ($285) {
     label = 8;
    } else {
     HEAP8[$agg$result >> 0] = 0;
     label = 133;
    }
    break;
   }
  case 4:
   {
    $286 = $88 + 36 | 0;
    __THREW__ = 0;
    invoke_vii(424, $s | 0, $286 | 0), asyncState ? abort(-12) | 0 : 0;
    $287 = __THREW__;
    __THREW__ = 0;
    $288 = $287 & 1;
    if ($288) {
     label = 8;
    } else {
     __THREW__ = 0;
     (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $289 = __THREW__;
     __THREW__ = 0;
     $290 = $289 & 1;
     if (!$290) {
      __THREW__ = 0;
      invoke_vii(389, $76 | 0, $s | 0), asyncState ? abort(-12) | 0 : 0;
      $291 = __THREW__;
      __THREW__ = 0;
      $292 = $291 & 1;
      if (!$292) {
       (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $76) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($76), asyncState ? abort(-12) | 0 : 0;
       $70 = 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($s), asyncState ? abort(-12) | 0 : 0;
       label = 133;
       break L1;
      }
     }
     $293 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $294 = tempRet0;
     $66 = $293;
     $67 = $294;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($s), asyncState ? abort(-12) | 0 : 0;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
     $480 = $66;
     $481 = $67;
     ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
    }
    break;
   }
  case 1:
   {
    __THREW__ = 0;
    (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $295 = __THREW__;
    __THREW__ = 0;
    $296 = $295 & 1;
    if ($296) {
     label = 8;
    } else {
     HEAP8[$agg$result >> 0] = 4;
     $297 = $agg$result + 8 | 0;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Eb($77, 1), asyncState ? abort(-12) | 0 : 0;
     HEAP32[$297 >> 2] = HEAP32[$77 >> 2] | 0;
     HEAP32[$297 + 4 >> 2] = HEAP32[$77 + 4 >> 2] | 0;
     label = 133;
    }
    break;
   }
  case 2:
   {
    __THREW__ = 0;
    (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $298 = __THREW__;
    __THREW__ = 0;
    $299 = $298 & 1;
    if ($299) {
     label = 8;
    } else {
     HEAP8[$agg$result >> 0] = 4;
     $300 = $agg$result + 8 | 0;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Eb($78, 0), asyncState ? abort(-12) | 0 : 0;
     HEAP32[$300 >> 2] = HEAP32[$78 >> 2] | 0;
     HEAP32[$300 + 4 >> 2] = HEAP32[$78 + 4 >> 2] | 0;
     label = 133;
    }
    break;
   }
  case 5:
   {
    $301 = $88 + 36 | 0;
    __THREW__ = 0;
    $302 = +(tempDouble = +invoke_di(428, $301 | 0), asyncState ? +abort(-12) : tempDouble);
    $303 = __THREW__;
    __THREW__ = 0;
    $304 = $303 & 1;
    if ($304) {
     label = 8;
    } else {
     $float_val = $302;
     $305 = $float_val;
     $52 = $305;
     $306 = $52;
     $51 = $306;
     $307 = $51;
     __THREW__ = 0;
     $308 = (tempInt = invoke_id(429, +$307) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $309 = tempRet0;
     $310 = __THREW__;
     __THREW__ = 0;
     $311 = $310 & 1;
     if ($311) {
      $312 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $313 = tempRet0;
      ___clang_call_terminate($312), asyncState ? abort(-12) | 0 : 0;
     }
     $314 = $309 & 2147483647;
     $315 = $314 >>> 0 > 2146435072;
     $316 = $308 >>> 0 > 0;
     $317 = ($314 | 0) == 2146435072;
     $318 = $317 & $316;
     $319 = $315 | $318;
     if (!$319) {
      __THREW__ = 0;
      (tempInt = invoke_ii(414, $88 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $432 = __THREW__;
      __THREW__ = 0;
      $433 = $432 & 1;
      if ($433) {
       label = 8;
       break L1;
      }
      $434 = $float_val;
      $435 = ~~$434 >>> 0;
      $436 = +Math_abs($434) >= 1.0 ? ($434 > 0.0 ? ~~+Math_min(+Math_floor($434 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($434 - +(~~$434 >>> 0)) / 4294967296.0) >>> 0) : 0;
      $437 = $int_val;
      $438 = $437;
      HEAP32[$438 >> 2] = $435;
      $439 = $437 + 4 | 0;
      $440 = $439;
      HEAP32[$440 >> 2] = $436;
      $441 = $float_val;
      $442 = $int_val;
      $443 = $442;
      $444 = HEAP32[$443 >> 2] | 0;
      $445 = $442 + 4 | 0;
      $446 = $445;
      $447 = HEAP32[$446 >> 2] | 0;
      $448 = +($444 >>> 0) + 4294967296.0 * +($447 | 0);
      __THREW__ = 0;
      $449 = (tempInt = invoke_idd(430, +$441, +$448) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $450 = __THREW__;
      __THREW__ = 0;
      $451 = $450 & 1;
      if ($451) {
       label = 8;
       break L1;
      }
      if ($449) {
       HEAP8[$agg$result >> 0] = 5;
       $452 = $agg$result + 8 | 0;
       $453 = $int_val;
       $454 = $453;
       $455 = HEAP32[$454 >> 2] | 0;
       $456 = $453 + 4 | 0;
       $457 = $456;
       $458 = HEAP32[$457 >> 2] | 0;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ex($84, $455, $458), asyncState ? abort(-12) | 0 : 0;
       HEAP32[$452 >> 2] = HEAP32[$84 >> 2] | 0;
       HEAP32[$452 + 4 >> 2] = HEAP32[$84 + 4 >> 2] | 0;
       label = 133;
       break L1;
      } else {
       HEAP8[$agg$result >> 0] = 6;
       $459 = $agg$result + 8 | 0;
       $460 = $float_val;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ed($85, $460), asyncState ? abort(-12) | 0 : 0;
       HEAP32[$459 >> 2] = HEAP32[$85 >> 2] | 0;
       HEAP32[$459 + 4 >> 2] = HEAP32[$85 + 4 >> 2] | 0;
       label = 133;
       break L1;
      }
     }
     $320 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$expand_i1_val10 = 1;
     HEAP8[$83 >> 0] = $$expand_i1_val10;
     $49 = $81;
     $50 = 14475;
     $321 = $49;
     $48 = $321;
     $322 = $48;
     $47 = $322;
     $323 = $47;
     $46 = $323;
     $324 = $50;
     $325 = $50;
     __THREW__ = 0;
     $326 = (tempInt = invoke_ii(363, $325 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $327 = __THREW__;
     __THREW__ = 0;
     $328 = $327 & 1;
     if ($328) {
      label = 119;
     } else {
      __THREW__ = 0;
      invoke_viii(393, $321 | 0, $324 | 0, $326 | 0), asyncState ? abort(-12) | 0 : 0;
      $329 = __THREW__;
      __THREW__ = 0;
      $330 = $329 & 1;
      if ($330) {
       label = 119;
      } else {
       $331 = $88 + 36 | 0;
       __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer9get_tokenEv($82, $331), asyncState ? abort(-12) | 0 : 0;
       $44 = $81;
       $45 = $82;
       $332 = $44;
       $333 = $45;
       $42 = $332;
       $43 = $333;
       $334 = $42;
       $335 = $43;
       $41 = $335;
       $336 = $41;
       $40 = $336;
       $337 = $40;
       $39 = $337;
       $338 = $39;
       $38 = $338;
       $339 = $38;
       $37 = $339;
       $340 = $37;
       $341 = HEAP8[$340 >> 0] | 0;
       $342 = $341 & 255;
       $343 = $342 & 1;
       $344 = ($343 | 0) != 0;
       if ($344) {
        $31 = $337;
        $345 = $31;
        $30 = $345;
        $346 = $30;
        $29 = $346;
        $347 = $29;
        $348 = $347 + 8 | 0;
        $349 = HEAP32[$348 >> 2] | 0;
        $356 = $349;
       } else {
        $36 = $337;
        $350 = $36;
        $35 = $350;
        $351 = $35;
        $34 = $351;
        $352 = $34;
        $353 = $352 + 1 | 0;
        $33 = $353;
        $354 = $33;
        $32 = $354;
        $355 = $32;
        $356 = $355;
       }
       $28 = $356;
       $357 = $28;
       $358 = $43;
       $27 = $358;
       $359 = $27;
       $26 = $359;
       $360 = $26;
       $25 = $360;
       $361 = $25;
       $24 = $361;
       $362 = $24;
       $363 = HEAP8[$362 >> 0] | 0;
       $364 = $363 & 255;
       $365 = $364 & 1;
       $366 = ($365 | 0) != 0;
       if ($366) {
        $20 = $359;
        $367 = $20;
        $19 = $367;
        $368 = $19;
        $18 = $368;
        $369 = $18;
        $370 = $369 + 4 | 0;
        $371 = HEAP32[$370 >> 2] | 0;
        $378 = $371;
       } else {
        $23 = $359;
        $372 = $23;
        $22 = $372;
        $373 = $22;
        $21 = $373;
        $374 = $21;
        $375 = HEAP8[$374 >> 0] | 0;
        $376 = $375 & 255;
        $377 = $376 >> 1;
        $378 = $377;
       }
       __THREW__ = 0;
       $379 = (tempInt = invoke_iiii(365, $334 | 0, $357 | 0, $378 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $380 = __THREW__;
       __THREW__ = 0;
       $381 = $380 & 1;
       if ($381) {
        $425 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $426 = tempRet0;
        $66 = $425;
        $67 = $426;
       } else {
        $17 = $379;
        $382 = $17;
        $15 = $80;
        $16 = $382;
        $383 = $15;
        $384 = $16;
        $14 = $384;
        $385 = $14;
        HEAP32[$383 >> 2] = HEAP32[$385 >> 2] | 0;
        HEAP32[$383 + 4 >> 2] = HEAP32[$385 + 4 >> 2] | 0;
        HEAP32[$383 + 8 >> 2] = HEAP32[$385 + 8 >> 2] | 0;
        $386 = $16;
        $13 = $386;
        $387 = $13;
        $12 = $387;
        $388 = $12;
        $11 = $388;
        $389 = $11;
        $__a$i$i$i = $389;
        $__i$i$i$i = 0;
        while (1) {
         $390 = $__i$i$i$i;
         $391 = $390 >>> 0 < 3;
         if (!$391) {
          break;
         }
         $392 = $__i$i$i$i;
         $393 = $__a$i$i$i;
         $394 = $393 + ($392 << 2) | 0;
         HEAP32[$394 >> 2] = 0;
         $395 = $__i$i$i$i;
         $396 = $395 + 1 | 0;
         $__i$i$i$i = $396;
        }
        $9 = $80;
        $10 = 14490;
        $397 = $9;
        $398 = $10;
        __THREW__ = 0;
        $399 = (tempInt = invoke_iii(402, $397 | 0, $398 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $400 = __THREW__;
        __THREW__ = 0;
        $401 = $400 & 1;
        if ($401) {
         $427 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $428 = tempRet0;
         $66 = $427;
         $67 = $428;
        } else {
         $8 = $399;
         $402 = $8;
         $6 = $79;
         $7 = $402;
         $403 = $6;
         $404 = $7;
         $5 = $404;
         $405 = $5;
         HEAP32[$403 >> 2] = HEAP32[$405 >> 2] | 0;
         HEAP32[$403 + 4 >> 2] = HEAP32[$405 + 4 >> 2] | 0;
         HEAP32[$403 + 8 >> 2] = HEAP32[$405 + 8 >> 2] | 0;
         $406 = $7;
         $4 = $406;
         $407 = $4;
         $3 = $407;
         $408 = $3;
         $2 = $408;
         $409 = $2;
         $__a$i$i$i4 = $409;
         $__i$i$i$i5 = 0;
         while (1) {
          $410 = $__i$i$i$i5;
          $411 = $410 >>> 0 < 3;
          if (!$411) {
           break;
          }
          $412 = $__i$i$i$i5;
          $413 = $__a$i$i$i4;
          $414 = $413 + ($412 << 2) | 0;
          HEAP32[$414 >> 2] = 0;
          $415 = $__i$i$i$i5;
          $416 = $415 + 1 | 0;
          $__i$i$i$i5 = $416;
         }
         $0 = $320;
         $1 = $79;
         $417 = $0;
         $418 = $1;
         __THREW__ = 0;
         invoke_vii(386, $417 | 0, $418 | 0), asyncState ? abort(-12) | 0 : 0;
         $419 = __THREW__;
         __THREW__ = 0;
         $420 = $419 & 1;
         if (!$420) {
          $421 = 3256;
          HEAP32[$417 >> 2] = $421;
          $$expand_i1_val12 = 0;
          HEAP8[$83 >> 0] = $$expand_i1_val12;
          __THREW__ = 0;
          invoke_viii(387, $320 | 0, 176 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
          $422 = __THREW__;
          __THREW__ = 0;
         }
         $429 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $430 = tempRet0;
         $66 = $429;
         $67 = $430;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($79), asyncState ? abort(-12) | 0 : 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($80), asyncState ? abort(-12) | 0 : 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($82), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($81), asyncState ? abort(-12) | 0 : 0;
      }
     }
     if ((label | 0) == 119) {
      $423 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $424 = tempRet0;
      $66 = $423;
      $67 = $424;
     }
     $$pre_trunc = HEAP8[$83 >> 0] | 0;
     $431 = $$pre_trunc & 1;
     if (!$431) {
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
      $480 = $66;
      $481 = $67;
      ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
     }
     ___cxa_free_exception($320 | 0), asyncState ? abort(-12) | 0 : 0;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
     $480 = $66;
     $481 = $67;
     ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
    }
    break;
   }
  default:
   {
    $461 = $88 + 32 | 0;
    $462 = HEAP32[$461 >> 2] | 0;
    __THREW__ = 0;
    invoke_vii(431, $88 | 0, $462 | 0), asyncState ? abort(-12) | 0 : 0;
    $463 = __THREW__;
    __THREW__ = 0;
    $464 = $463 & 1;
    if ($464) {
     label = 8;
    } else {
     label = 133;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 133) {
   $465 = $64;
   $466 = $465 & 1;
   if ($466) {
    $467 = $88 + 8 | 0;
    $55 = $467;
    $468 = $55;
    $469 = $468 + 16 | 0;
    $470 = HEAP32[$469 >> 2] | 0;
    $471 = ($470 | 0) != (0 | 0);
    if ($471) {
     $472 = $88 + 8 | 0;
     $473 = HEAP32[$88 >> 2] | 0;
     __THREW__ = 0;
     $474 = (tempInt = invoke_iiiii(421, $472 | 0, $473 | 0, 5, $agg$result | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $475 = __THREW__;
     __THREW__ = 0;
     $476 = $475 & 1;
     if ($476) {
      label = 8;
      break;
     }
     if (!$474) {
      __THREW__ = 0;
      invoke_vii(423, $86 | 0, 7), asyncState ? abort(-12) | 0 : 0;
      $477 = __THREW__;
      __THREW__ = 0;
      $478 = $477 & 1;
      if ($478) {
       label = 8;
       break;
      }
      (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($agg$result, $86) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($86), asyncState ? abort(-12) | 0 : 0;
     }
    }
   }
   $$expand_i1_val15 = 1;
   HEAP8[$65 >> 0] = $$expand_i1_val15;
   $70 = 1;
  }
 } while (0);
 if ((label | 0) == 8) {
  $108 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $109 = tempRet0;
  $66 = $108;
  $67 = $109;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $480 = $66;
  $481 = $67;
  ___resumeException($480 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $$pre_trunc17 = HEAP8[$65 >> 0] | 0;
 $479 = $$pre_trunc17 & 1;
 if ($479) {
  STACKTOP = sp;
  return;
 }
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0, $width$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 $1 = $f + 76 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) > -1;
 if ($3) {
  $4 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $334 = $4;
 } else {
  $334 = 0;
 }
 $5 = HEAP8[$fmt >> 0] | 0;
 $6 = $5 << 24 >> 24 == 0;
 L4 : do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = $f + 4 | 0;
   $8 = $f + 100 | 0;
   $9 = $f + 108 | 0;
   $10 = $f + 8 | 0;
   $11 = $scanset + 10 | 0;
   $12 = $scanset + 33 | 0;
   $13 = $st + 4 | 0;
   $14 = $scanset + 46 | 0;
   $15 = $scanset + 94 | 0;
   $17 = $5;
   $matches$0104 = 0;
   $p$0109 = $fmt;
   $pos$0108 = 0;
   $s$0107 = 0;
   $wcs$0103 = 0;
   L6 : while (1) {
    $16 = $17 & 255;
    $18 = (tempInt = _isspace($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $19 = ($18 | 0) == 0;
    L8 : do {
     if ($19) {
      $46 = HEAP8[$p$0109 >> 0] | 0;
      $47 = $46 << 24 >> 24 == 37;
      L10 : do {
       if ($47) {
        $48 = $p$0109 + 1 | 0;
        $49 = HEAP8[$48 >> 0] | 0;
        L12 : do {
         switch ($49 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $70 = $p$0109 + 2 | 0;
           $dest$0 = 0;
           $p$2 = $70;
           break;
          }
         default:
          {
           $71 = $49 & 255;
           $isdigittmp = $71 + -48 | 0;
           $isdigit = $isdigittmp >>> 0 < 10;
           if ($isdigit) {
            $72 = $p$0109 + 2 | 0;
            $73 = HEAP8[$72 >> 0] | 0;
            $74 = $73 << 24 >> 24 == 36;
            if ($74) {
             $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
             HEAP32[$ap2$i >> 2] = $vacopy_currentptr;
             $i$0$i = $isdigittmp;
             while (1) {
              $75 = $i$0$i >>> 0 > 1;
              $arglist_current = HEAP32[$ap2$i >> 2] | 0;
              $76 = $arglist_current;
              $77 = 0 + 4 | 0;
              $expanded4 = $77;
              $expanded = $expanded4 - 1 | 0;
              $78 = $76 + $expanded | 0;
              $79 = 0 + 4 | 0;
              $expanded8 = $79;
              $expanded7 = $expanded8 - 1 | 0;
              $expanded6 = $expanded7 ^ -1;
              $80 = $78 & $expanded6;
              $81 = $80;
              $82 = HEAP32[$81 >> 2] | 0;
              $arglist_next = $81 + 4 | 0;
              HEAP32[$ap2$i >> 2] = $arglist_next;
              $83 = $i$0$i + -1 | 0;
              if ($75) {
               $i$0$i = $83;
              } else {
               $$lcssa = $82;
               break;
              }
             }
             $84 = $p$0109 + 3 | 0;
             $dest$0 = $$lcssa;
             $p$2 = $84;
             break L12;
            }
           }
           $arglist_current2 = HEAP32[$ap >> 2] | 0;
           $85 = $arglist_current2;
           $86 = 0 + 4 | 0;
           $expanded11 = $86;
           $expanded10 = $expanded11 - 1 | 0;
           $87 = $85 + $expanded10 | 0;
           $88 = 0 + 4 | 0;
           $expanded15 = $88;
           $expanded14 = $expanded15 - 1 | 0;
           $expanded13 = $expanded14 ^ -1;
           $89 = $87 & $expanded13;
           $90 = $89;
           $91 = HEAP32[$90 >> 2] | 0;
           $arglist_next3 = $90 + 4 | 0;
           HEAP32[$ap >> 2] = $arglist_next3;
           $dest$0 = $91;
           $p$2 = $48;
          }
         }
        } while (0);
        $92 = HEAP8[$p$2 >> 0] | 0;
        $93 = $92 & 255;
        $isdigittmp694 = $93 + -48 | 0;
        $isdigit795 = $isdigittmp694 >>> 0 < 10;
        if ($isdigit795) {
         $97 = $93;
         $p$396 = $p$2;
         $width$097 = 0;
         while (1) {
          $94 = $width$097 * 10 | 0;
          $95 = $94 + -48 | 0;
          $96 = $95 + $97 | 0;
          $98 = $p$396 + 1 | 0;
          $99 = HEAP8[$98 >> 0] | 0;
          $100 = $99 & 255;
          $isdigittmp6 = $100 + -48 | 0;
          $isdigit7 = $isdigittmp6 >>> 0 < 10;
          if ($isdigit7) {
           $97 = $100;
           $p$396 = $98;
           $width$097 = $96;
          } else {
           $$lcssa38 = $99;
           $p$3$lcssa = $98;
           $width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;
         $p$3$lcssa = $p$2;
         $width$0$lcssa = 0;
        }
        $101 = $$lcssa38 << 24 >> 24 == 109;
        if ($101) {
         $102 = ($dest$0 | 0) != (0 | 0);
         $103 = $102 & 1;
         $104 = $p$3$lcssa + 1 | 0;
         $$pre168 = HEAP8[$104 >> 0] | 0;
         $107 = $$pre168;
         $alloc$0 = $103;
         $p$4 = $104;
         $s$1 = 0;
         $wcs$1 = 0;
        } else {
         $107 = $$lcssa38;
         $alloc$0 = 0;
         $p$4 = $p$3$lcssa;
         $s$1 = $s$0107;
         $wcs$1 = $wcs$0103;
        }
        $105 = $p$4 + 1 | 0;
        $106 = $107 & 255;
        switch ($106 | 0) {
        case 104:
         {
          $108 = HEAP8[$105 >> 0] | 0;
          $109 = $108 << 24 >> 24 == 104;
          $110 = $p$4 + 2 | 0;
          $$9 = $109 ? $110 : $105;
          $$10 = $109 ? -2 : -1;
          $p$5 = $$9;
          $size$0 = $$10;
          break;
         }
        case 108:
         {
          $111 = HEAP8[$105 >> 0] | 0;
          $112 = $111 << 24 >> 24 == 108;
          $113 = $p$4 + 2 | 0;
          $$11 = $112 ? $113 : $105;
          $$12 = $112 ? 3 : 1;
          $p$5 = $$11;
          $size$0 = $$12;
          break;
         }
        case 106:
         {
          $p$5 = $105;
          $size$0 = 3;
          break;
         }
        case 116:
        case 122:
         {
          $p$5 = $105;
          $size$0 = 1;
          break;
         }
        case 76:
         {
          $p$5 = $105;
          $size$0 = 2;
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $p$5 = $p$4;
          $size$0 = 0;
          break;
         }
        default:
         {
          $alloc$0400 = $alloc$0;
          $matches$0104376 = $matches$0104;
          $s$6 = $s$1;
          $wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
        }
        $114 = HEAP8[$p$5 >> 0] | 0;
        $115 = $114 & 255;
        $116 = $115 & 47;
        $117 = ($116 | 0) == 3;
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$ | 0) {
        case 99:
         {
          $119 = ($width$0$lcssa | 0) < 1;
          $$width$0 = $119 ? 1 : $width$0$lcssa;
          $pos$1 = $pos$0108;
          $width$1 = $$width$0;
          break;
         }
        case 91:
         {
          $pos$1 = $pos$0108;
          $width$1 = $width$0$lcssa;
          break;
         }
        case 110:
         {
          $120 = ($pos$0108 | 0) < 0;
          $121 = $120 << 31 >> 31;
          $122 = ($dest$0 | 0) == (0 | 0);
          if ($122) {
           $matches$1 = $matches$0104;
           $p$11 = $p$5;
           $pos$2 = $pos$0108;
           $s$5 = $s$1;
           $wcs$6 = $wcs$1;
           break L8;
          }
          switch ($$size$0 | 0) {
          case -2:
           {
            $123 = $pos$0108 & 255;
            HEAP8[$dest$0 >> 0] = $123;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case -1:
           {
            $124 = $pos$0108 & 65535;
            HEAP16[$dest$0 >> 1] = $124;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 0:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 1:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 3:
           {
            $125 = $dest$0;
            $126 = $125;
            HEAP32[$126 >> 2] = $pos$0108;
            $127 = $125 + 4 | 0;
            $128 = $127;
            HEAP32[$128 >> 2] = $121;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          default:
           {
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
           }
          }
          break;
         }
        default:
         {
          ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
          while (1) {
           $129 = HEAP32[$7 >> 2] | 0;
           $130 = HEAP32[$8 >> 2] | 0;
           $131 = $129 >>> 0 < $130 >>> 0;
           if ($131) {
            $132 = $129 + 1 | 0;
            HEAP32[$7 >> 2] = $132;
            $133 = HEAP8[$129 >> 0] | 0;
            $134 = $133 & 255;
            $136 = $134;
           } else {
            $135 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $136 = $135;
           }
           $137 = (tempInt = _isspace($136) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $138 = ($137 | 0) == 0;
           if ($138) {
            break;
           }
          }
          $139 = HEAP32[$8 >> 2] | 0;
          $140 = ($139 | 0) == (0 | 0);
          $$pre170 = HEAP32[$7 >> 2] | 0;
          if ($140) {
           $145 = $$pre170;
          } else {
           $141 = $$pre170 + -1 | 0;
           HEAP32[$7 >> 2] = $141;
           $145 = $141;
          }
          $142 = HEAP32[$9 >> 2] | 0;
          $143 = HEAP32[$10 >> 2] | 0;
          $144 = $145;
          $146 = $143;
          $147 = $142 + $pos$0108 | 0;
          $148 = $147 + $144 | 0;
          $149 = $148 - $146 | 0;
          $pos$1 = $149;
          $width$1 = $width$0$lcssa;
         }
        }
        ___shlim($f, $width$1), asyncState ? abort(-12) | 0 : 0;
        $150 = HEAP32[$7 >> 2] | 0;
        $151 = HEAP32[$8 >> 2] | 0;
        $152 = $150 >>> 0 < $151 >>> 0;
        if ($152) {
         $153 = $150 + 1 | 0;
         HEAP32[$7 >> 2] = $153;
         $157 = $151;
        } else {
         $154 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $155 = ($154 | 0) < 0;
         if ($155) {
          $alloc$0400 = $alloc$0;
          $matches$0104376 = $matches$0104;
          $s$6 = $s$1;
          $wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8 >> 2] | 0;
         $157 = $$pre172;
        }
        $156 = ($157 | 0) == (0 | 0);
        if (!$156) {
         $158 = HEAP32[$7 >> 2] | 0;
         $159 = $158 + -1 | 0;
         HEAP32[$7 >> 2] = $159;
        }
        L67 : do {
         switch ($$ | 0) {
         case 91:
         case 99:
         case 115:
          {
           $160 = ($$ | 0) == 99;
           $161 = $$ & 239;
           $162 = ($161 | 0) == 99;
           L69 : do {
            if ($162) {
             $163 = ($$ | 0) == 115;
             (tempInt = _memset($scanset | 0, -1, 257) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             HEAP8[$scanset >> 0] = 0;
             if ($163) {
              HEAP8[$12 >> 0] = 0;
              HEAP8[$11 >> 0] = 0 | 0;
              HEAP8[$11 + 1 >> 0] = 0 | 0;
              HEAP8[$11 + 2 >> 0] = 0 | 0;
              HEAP8[$11 + 3 >> 0] = 0 | 0;
              HEAP8[$11 + 4 >> 0] = 0 | 0;
              $p$9 = $p$5;
             } else {
              $p$9 = $p$5;
             }
            } else {
             $164 = $p$5 + 1 | 0;
             $165 = HEAP8[$164 >> 0] | 0;
             $166 = $165 << 24 >> 24 == 94;
             $167 = $p$5 + 2 | 0;
             $invert$0 = $166 & 1;
             $168 = $166 ? $164 : $p$5;
             $p$6 = $166 ? $167 : $164;
             $169 = $166 & 1;
             (tempInt = _memset($scanset | 0, $169 | 0, 257) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             HEAP8[$scanset >> 0] = 0;
             $170 = HEAP8[$p$6 >> 0] | 0;
             switch ($170 << 24 >> 24) {
             case 45:
              {
               $171 = $168 + 2 | 0;
               $172 = $invert$0 ^ 1;
               $173 = $172 & 255;
               HEAP8[$14 >> 0] = $173;
               $$pre$phi182Z2D = $173;
               $p$7$ph = $171;
               break;
              }
             case 93:
              {
               $174 = $168 + 2 | 0;
               $175 = $invert$0 ^ 1;
               $176 = $175 & 255;
               HEAP8[$15 >> 0] = $176;
               $$pre$phi182Z2D = $176;
               $p$7$ph = $174;
               break;
              }
             default:
              {
               $$pre180 = $invert$0 ^ 1;
               $$pre181 = $$pre180 & 255;
               $$pre$phi182Z2D = $$pre181;
               $p$7$ph = $p$6;
              }
             }
             $p$7 = $p$7$ph;
             while (1) {
              $177 = HEAP8[$p$7 >> 0] | 0;
              L80 : do {
               switch ($177 << 24 >> 24) {
               case 0:
                {
                 $alloc$0400 = $alloc$0;
                 $matches$0104376 = $matches$0104;
                 $s$6 = $s$1;
                 $wcs$7 = $wcs$1;
                 label = 152;
                 break L6;
                 break;
                }
               case 93:
                {
                 $p$9 = $p$7;
                 break L69;
                 break;
                }
               case 45:
                {
                 $178 = $p$7 + 1 | 0;
                 $179 = HEAP8[$178 >> 0] | 0;
                 switch ($179 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $190 = 45;
                   $p$8 = $p$7;
                   break L80;
                   break;
                  }
                 default:
                  {}
                 }
                 $180 = $p$7 + -1 | 0;
                 $181 = HEAP8[$180 >> 0] | 0;
                 $182 = ($181 & 255) < ($179 & 255);
                 if ($182) {
                  $183 = $181 & 255;
                  $c$0100 = $183;
                  while (1) {
                   $184 = $c$0100 + 1 | 0;
                   $185 = $scanset + $184 | 0;
                   HEAP8[$185 >> 0] = $$pre$phi182Z2D;
                   $186 = HEAP8[$178 >> 0] | 0;
                   $187 = $186 & 255;
                   $188 = ($184 | 0) < ($187 | 0);
                   if ($188) {
                    $c$0100 = $184;
                   } else {
                    $190 = $186;
                    $p$8 = $178;
                    break;
                   }
                  }
                 } else {
                  $190 = $179;
                  $p$8 = $178;
                 }
                 break;
                }
               default:
                {
                 $190 = $177;
                 $p$8 = $p$7;
                }
               }
              } while (0);
              $189 = $190 & 255;
              $191 = $189 + 1 | 0;
              $192 = $scanset + $191 | 0;
              HEAP8[$192 >> 0] = $$pre$phi182Z2D;
              $193 = $p$8 + 1 | 0;
              $p$7 = $193;
             }
            }
           } while (0);
           $194 = $width$1 + 1 | 0;
           $195 = $160 ? $194 : 31;
           $196 = ($$size$0 | 0) == 1;
           $197 = ($alloc$0 | 0) != 0;
           L88 : do {
            if ($196) {
             if ($197) {
              $198 = $195 << 2;
              $199 = (tempInt = _malloc($198) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $200 = ($199 | 0) == (0 | 0);
              if ($200) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = $199;
               label = 152;
               break L6;
              } else {
               $wcs$2 = $199;
              }
             } else {
              $wcs$2 = $dest$0;
             }
             HEAP32[$st >> 2] = 0;
             HEAP32[$13 >> 2] = 0;
             $i$0$ph = 0;
             $k$0$ph = $195;
             $wcs$3$ph = $wcs$2;
             L94 : while (1) {
              $201 = ($wcs$3$ph | 0) == (0 | 0);
              $i$0$ph20 = $i$0$ph;
              while (1) {
               L98 : while (1) {
                $202 = HEAP32[$7 >> 2] | 0;
                $203 = HEAP32[$8 >> 2] | 0;
                $204 = $202 >>> 0 < $203 >>> 0;
                if ($204) {
                 $205 = $202 + 1 | 0;
                 HEAP32[$7 >> 2] = $205;
                 $206 = HEAP8[$202 >> 0] | 0;
                 $207 = $206 & 255;
                 $210 = $207;
                } else {
                 $208 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $210 = $208;
                }
                $209 = $210 + 1 | 0;
                $211 = $scanset + $209 | 0;
                $212 = HEAP8[$211 >> 0] | 0;
                $213 = $212 << 24 >> 24 == 0;
                if ($213) {
                 $i$0$ph20$lcssa = $i$0$ph20;
                 $wcs$3$ph$lcssa = $wcs$3$ph;
                 break L94;
                }
                $214 = $210 & 255;
                HEAP8[$0 >> 0] = $214;
                $215 = (tempInt = _mbrtowc($wc, $0, 1, $st) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                switch ($215 | 0) {
                case -1:
                 {
                  $alloc$0400 = $alloc$0;
                  $matches$0104376 = $matches$0104;
                  $s$6 = 0;
                  $wcs$7 = $wcs$3$ph;
                  label = 152;
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L98;
                 }
                }
               }
               if ($201) {
                $i$1 = $i$0$ph20;
               } else {
                $216 = HEAP32[$wc >> 2] | 0;
                $217 = $i$0$ph20 + 1 | 0;
                $218 = $wcs$3$ph + ($i$0$ph20 << 2) | 0;
                HEAP32[$218 >> 2] = $216;
                $i$1 = $217;
               }
               $219 = ($i$1 | 0) == ($k$0$ph | 0);
               $or$cond = $197 & $219;
               if ($or$cond) {
                break;
               } else {
                $i$0$ph20 = $i$1;
               }
              }
              $factor = $k$0$ph << 1;
              $220 = $factor | 1;
              $221 = $220 << 2;
              $222 = (tempInt = _realloc($wcs$3$ph, $221) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $223 = ($222 | 0) == (0 | 0);
              if ($223) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = $wcs$3$ph;
               label = 152;
               break L6;
              }
              $i$0$ph$phi = $k$0$ph;
              $k$0$ph = $220;
              $wcs$3$ph = $222;
              $i$0$ph = $i$0$ph$phi;
             }
             $224 = (tempInt = _mbsinit($st) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $225 = ($224 | 0) == 0;
             if ($225) {
              $alloc$0400 = $alloc$0;
              $matches$0104376 = $matches$0104;
              $s$6 = 0;
              $wcs$7 = $wcs$3$ph$lcssa;
              label = 152;
              break L6;
             } else {
              $i$4 = $i$0$ph20$lcssa;
              $s$3 = 0;
              $wcs$4 = $wcs$3$ph$lcssa;
             }
            } else {
             if ($197) {
              $226 = (tempInt = _malloc($195) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $227 = ($226 | 0) == (0 | 0);
              if ($227) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph = 0;
               $k$1$ph = $195;
               $s$2$ph = $226;
              }
              while (1) {
               $i$2 = $i$2$ph;
               while (1) {
                $228 = HEAP32[$7 >> 2] | 0;
                $229 = HEAP32[$8 >> 2] | 0;
                $230 = $228 >>> 0 < $229 >>> 0;
                if ($230) {
                 $231 = $228 + 1 | 0;
                 HEAP32[$7 >> 2] = $231;
                 $232 = HEAP8[$228 >> 0] | 0;
                 $233 = $232 & 255;
                 $236 = $233;
                } else {
                 $234 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $236 = $234;
                }
                $235 = $236 + 1 | 0;
                $237 = $scanset + $235 | 0;
                $238 = HEAP8[$237 >> 0] | 0;
                $239 = $238 << 24 >> 24 == 0;
                if ($239) {
                 $i$4 = $i$2;
                 $s$3 = $s$2$ph;
                 $wcs$4 = 0;
                 break L88;
                }
                $240 = $236 & 255;
                $241 = $i$2 + 1 | 0;
                $242 = $s$2$ph + $i$2 | 0;
                HEAP8[$242 >> 0] = $240;
                $243 = ($241 | 0) == ($k$1$ph | 0);
                if ($243) {
                 break;
                } else {
                 $i$2 = $241;
                }
               }
               $factor16 = $k$1$ph << 1;
               $244 = $factor16 | 1;
               $245 = (tempInt = _realloc($s$2$ph, $244) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
               $246 = ($245 | 0) == (0 | 0);
               if ($246) {
                $alloc$0400 = $alloc$0;
                $matches$0104376 = $matches$0104;
                $s$6 = $s$2$ph;
                $wcs$7 = 0;
                label = 152;
                break L6;
               } else {
                $i$2$ph$phi = $k$1$ph;
                $k$1$ph = $244;
                $s$2$ph = $245;
                $i$2$ph = $i$2$ph$phi;
               }
              }
             }
             $247 = ($dest$0 | 0) == (0 | 0);
             if ($247) {
              $265 = $157;
              while (1) {
               $263 = HEAP32[$7 >> 2] | 0;
               $264 = $263 >>> 0 < $265 >>> 0;
               if ($264) {
                $266 = $263 + 1 | 0;
                HEAP32[$7 >> 2] = $266;
                $267 = HEAP8[$263 >> 0] | 0;
                $268 = $267 & 255;
                $271 = $268;
               } else {
                $269 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $271 = $269;
               }
               $270 = $271 + 1 | 0;
               $272 = $scanset + $270 | 0;
               $273 = HEAP8[$272 >> 0] | 0;
               $274 = $273 << 24 >> 24 == 0;
               if ($274) {
                $i$4 = 0;
                $s$3 = 0;
                $wcs$4 = 0;
                break L88;
               }
               $$pre176 = HEAP32[$8 >> 2] | 0;
               $265 = $$pre176;
              }
             } else {
              $250 = $157;
              $i$3 = 0;
              while (1) {
               $248 = HEAP32[$7 >> 2] | 0;
               $249 = $248 >>> 0 < $250 >>> 0;
               if ($249) {
                $251 = $248 + 1 | 0;
                HEAP32[$7 >> 2] = $251;
                $252 = HEAP8[$248 >> 0] | 0;
                $253 = $252 & 255;
                $256 = $253;
               } else {
                $254 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $256 = $254;
               }
               $255 = $256 + 1 | 0;
               $257 = $scanset + $255 | 0;
               $258 = HEAP8[$257 >> 0] | 0;
               $259 = $258 << 24 >> 24 == 0;
               if ($259) {
                $i$4 = $i$3;
                $s$3 = $dest$0;
                $wcs$4 = 0;
                break L88;
               }
               $260 = $256 & 255;
               $261 = $i$3 + 1 | 0;
               $262 = $dest$0 + $i$3 | 0;
               HEAP8[$262 >> 0] = $260;
               $$pre174 = HEAP32[$8 >> 2] | 0;
               $250 = $$pre174;
               $i$3 = $261;
              }
             }
            }
           } while (0);
           $275 = HEAP32[$8 >> 2] | 0;
           $276 = ($275 | 0) == (0 | 0);
           $$pre178 = HEAP32[$7 >> 2] | 0;
           if ($276) {
            $281 = $$pre178;
           } else {
            $277 = $$pre178 + -1 | 0;
            HEAP32[$7 >> 2] = $277;
            $281 = $277;
           }
           $278 = HEAP32[$9 >> 2] | 0;
           $279 = HEAP32[$10 >> 2] | 0;
           $280 = $281;
           $282 = $279;
           $283 = $280 - $282 | 0;
           $284 = $283 + $278 | 0;
           $285 = ($284 | 0) == 0;
           if ($285) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$3;
            $wcs$9 = $wcs$4;
            break L6;
           }
           $$not = $160 ^ 1;
           $286 = ($284 | 0) == ($width$1 | 0);
           $or$cond8 = $286 | $$not;
           if (!$or$cond8) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$3;
            $wcs$9 = $wcs$4;
            break L6;
           }
           do {
            if ($197) {
             if ($196) {
              HEAP32[$dest$0 >> 2] = $wcs$4;
              break;
             } else {
              HEAP32[$dest$0 >> 2] = $s$3;
              break;
             }
            }
           } while (0);
           if ($160) {
            $p$10 = $p$9;
            $s$4 = $s$3;
            $wcs$5 = $wcs$4;
           } else {
            $287 = ($wcs$4 | 0) == (0 | 0);
            if (!$287) {
             $288 = $wcs$4 + ($i$4 << 2) | 0;
             HEAP32[$288 >> 2] = 0;
            }
            $289 = ($s$3 | 0) == (0 | 0);
            if ($289) {
             $p$10 = $p$9;
             $s$4 = 0;
             $wcs$5 = $wcs$4;
             break L67;
            }
            $290 = $s$3 + $i$4 | 0;
            HEAP8[$290 >> 0] = 0;
            $p$10 = $p$9;
            $s$4 = $s$3;
            $wcs$5 = $wcs$4;
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $base$0 = 16;
           label = 134;
           break;
          }
         case 111:
          {
           $base$0 = 8;
           label = 134;
           break;
          }
         case 117:
         case 100:
          {
           $base$0 = 10;
           label = 134;
           break;
          }
         case 105:
          {
           $base$0 = 0;
           label = 134;
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $310 = +(tempDouble = +___floatscan($f, $$size$0, 0), asyncState ? +abort(-12) : tempDouble);
           $311 = HEAP32[$9 >> 2] | 0;
           $312 = HEAP32[$7 >> 2] | 0;
           $313 = HEAP32[$10 >> 2] | 0;
           $314 = $312;
           $315 = $313;
           $316 = $315 - $314 | 0;
           $317 = ($311 | 0) == ($316 | 0);
           if ($317) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$1;
            $wcs$9 = $wcs$1;
            break L6;
           }
           $318 = ($dest$0 | 0) == (0 | 0);
           if ($318) {
            $p$10 = $p$5;
            $s$4 = $s$1;
            $wcs$5 = $wcs$1;
           } else {
            switch ($$size$0 | 0) {
            case 0:
             {
              $319 = $310;
              HEAPF32[$dest$0 >> 2] = $319;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            case 1:
             {
              HEAPF64[$dest$0 >> 3] = $310;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            case 2:
             {
              HEAPF64[$dest$0 >> 3] = $310;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            default:
             {
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
             }
            }
           }
           break;
          }
         default:
          {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
          }
         }
        } while (0);
        L168 : do {
         if ((label | 0) == 134) {
          label = 0;
          $291 = (tempInt = ___intscan($f, $base$0, 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $292 = tempRet0;
          $293 = HEAP32[$9 >> 2] | 0;
          $294 = HEAP32[$7 >> 2] | 0;
          $295 = HEAP32[$10 >> 2] | 0;
          $296 = $294;
          $297 = $295;
          $298 = $297 - $296 | 0;
          $299 = ($293 | 0) == ($298 | 0);
          if ($299) {
           $alloc$2 = $alloc$0;
           $matches$2 = $matches$0104;
           $s$8 = $s$1;
           $wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$ | 0) == 112;
          $301 = ($dest$0 | 0) != (0 | 0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0 >> 2] = $302;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0 | 0) == (0 | 0);
          if ($303) {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
          } else {
           switch ($$size$0 | 0) {
           case -2:
            {
             $304 = $291 & 255;
             HEAP8[$dest$0 >> 0] = $304;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case -1:
            {
             $305 = $291 & 65535;
             HEAP16[$dest$0 >> 1] = $305;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 0:
            {
             HEAP32[$dest$0 >> 2] = $291;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 1:
            {
             HEAP32[$dest$0 >> 2] = $291;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 3:
            {
             $306 = $dest$0;
             $307 = $306;
             HEAP32[$307 >> 2] = $291;
             $308 = $306 + 4 | 0;
             $309 = $308;
             HEAP32[$309 >> 2] = $292;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           default:
            {
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
            }
           }
          }
         }
        } while (0);
        $320 = HEAP32[$9 >> 2] | 0;
        $321 = HEAP32[$7 >> 2] | 0;
        $322 = HEAP32[$10 >> 2] | 0;
        $323 = $321;
        $324 = $322;
        $325 = $320 + $pos$1 | 0;
        $326 = $325 + $323 | 0;
        $327 = $326 - $324 | 0;
        $not$ = ($dest$0 | 0) != (0 | 0);
        $328 = $not$ & 1;
        $matches$0$ = $328 + $matches$0104 | 0;
        $matches$1 = $matches$0$;
        $p$11 = $p$10;
        $pos$2 = $327;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
        break L8;
       }
      } while (0);
      $50 = $47 & 1;
      $51 = $p$0109 + $50 | 0;
      ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
      $52 = HEAP32[$7 >> 2] | 0;
      $53 = HEAP32[$8 >> 2] | 0;
      $54 = $52 >>> 0 < $53 >>> 0;
      if ($54) {
       $55 = $52 + 1 | 0;
       HEAP32[$7 >> 2] = $55;
       $56 = HEAP8[$52 >> 0] | 0;
       $57 = $56 & 255;
       $62 = $57;
      } else {
       $58 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $62 = $58;
      }
      $59 = HEAP8[$51 >> 0] | 0;
      $60 = $59 & 255;
      $61 = ($62 | 0) == ($60 | 0);
      if (!$61) {
       $$lcssa384 = $62;
       $matches$0104$lcssa = $matches$0104;
       $s$0107$lcssa = $s$0107;
       $wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = $pos$0108 + 1 | 0;
      $matches$1 = $matches$0104;
      $p$11 = $51;
      $pos$2 = $69;
      $s$5 = $s$0107;
      $wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while (1) {
       $20 = $p$1 + 1 | 0;
       $21 = HEAP8[$20 >> 0] | 0;
       $22 = $21 & 255;
       $23 = (tempInt = _isspace($22) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $24 = ($23 | 0) == 0;
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
      while (1) {
       $25 = HEAP32[$7 >> 2] | 0;
       $26 = HEAP32[$8 >> 2] | 0;
       $27 = $25 >>> 0 < $26 >>> 0;
       if ($27) {
        $28 = $25 + 1 | 0;
        HEAP32[$7 >> 2] = $28;
        $29 = HEAP8[$25 >> 0] | 0;
        $30 = $29 & 255;
        $32 = $30;
       } else {
        $31 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $32 = $31;
       }
       $33 = (tempInt = _isspace($32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $34 = ($33 | 0) == 0;
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8 >> 2] | 0;
      $36 = ($35 | 0) == (0 | 0);
      $$pre = HEAP32[$7 >> 2] | 0;
      if ($36) {
       $41 = $$pre;
      } else {
       $37 = $$pre + -1 | 0;
       HEAP32[$7 >> 2] = $37;
       $41 = $37;
      }
      $38 = HEAP32[$9 >> 2] | 0;
      $39 = HEAP32[$10 >> 2] | 0;
      $40 = $41;
      $42 = $39;
      $43 = $38 + $pos$0108 | 0;
      $44 = $43 + $40 | 0;
      $45 = $44 - $42 | 0;
      $matches$1 = $matches$0104;
      $p$11 = $p$1$lcssa;
      $pos$2 = $45;
      $s$5 = $s$0107;
      $wcs$6 = $wcs$0103;
     }
    } while (0);
    $329 = $p$11 + 1 | 0;
    $330 = HEAP8[$329 >> 0] | 0;
    $331 = $330 << 24 >> 24 == 0;
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;
     $matches$0104 = $matches$1;
     $p$0109 = $329;
     $pos$0108 = $pos$2;
     $s$0107 = $s$5;
     $wcs$0103 = $wcs$6;
    }
   }
   if ((label | 0) == 21) {
    $63 = HEAP32[$8 >> 2] | 0;
    $64 = ($63 | 0) == (0 | 0);
    if (!$64) {
     $65 = HEAP32[$7 >> 2] | 0;
     $66 = $65 + -1 | 0;
     HEAP32[$7 >> 2] = $66;
    }
    $67 = ($$lcssa384 | 0) > -1;
    $68 = ($matches$0104$lcssa | 0) != 0;
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;
     $s$7 = $s$0107$lcssa;
     $wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   } else if ((label | 0) == 152) {
    $$old4 = ($matches$0104376 | 0) == 0;
    if ($$old4) {
     $alloc$1 = $alloc$0400;
     $s$7 = $s$6;
     $wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;
     $matches$2 = $matches$0104376;
     $s$8 = $s$6;
     $wcs$9 = $wcs$7;
    }
   }
   if ((label | 0) == 153) {
    $alloc$2 = $alloc$1;
    $matches$2 = -1;
    $s$8 = $s$7;
    $wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2 | 0) == 0;
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8), asyncState ? abort(-12) | 0 : 0;
    _free($wcs$9), asyncState ? abort(-12) | 0 : 0;
    $matches$3 = $matches$2;
   }
  }
 } while (0);
 $333 = ($334 | 0) == 0;
 if (!$333) {
  ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
 }
 STACKTOP = sp;
 return $matches$3 | 0;
}

function __ZN8nlohmanneqERKNS_10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EESC_($lhs, $rhs) {
 $lhs = $lhs | 0;
 $rhs = $rhs | 0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val20 = 0, $$expand_i1_val22 = 0, $$expand_i1_val26 = 0, $$expand_i1_val28 = 0, $$expand_i1_val30 = 0, $$expand_i1_val32 = 0, $$expand_i1_val34 = 0, $$expand_i1_val36 = 0, $$expand_i1_val40 = 0, $$expand_i1_val42 = 0, $$expand_i1_val44 = 0, $$expand_i1_val46 = 0, $$expand_i1_val48 = 0, $$expand_i1_val5 = 0, $$expand_i1_val50 = 0, $$expand_i1_val52 = 0, $$expand_i1_val54 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc18 = 0, $$pre_trunc24 = 0, $$pre_trunc38 = 0, $$pre_trunc56 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i = 0, $__lhs_sz$i$i$i = 0, $__lp$i = 0, $__lp$i$i$i = 0, $__rp$i = 0, $__rp$i$i$i = 0, $__sz$i = 0, $lhs_type = 0, $or$cond = 0, $or$cond3 = 0, $rhs_type = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $51 = sp + 1056 | 0;
 $77 = sp + 1055 | 0;
 $78 = sp + 128 | 0;
 $79 = sp + 120 | 0;
 $80 = sp + 112 | 0;
 $81 = sp + 104 | 0;
 $82 = sp + 728 | 0;
 $83 = sp + 724 | 0;
 $84 = sp + 720 | 0;
 $85 = sp + 1054 | 0;
 $86 = sp + 96 | 0;
 $87 = sp + 88 | 0;
 $88 = sp + 80 | 0;
 $102 = sp + 1053 | 0;
 $103 = sp + 72 | 0;
 $104 = sp + 64 | 0;
 $105 = sp + 56 | 0;
 $106 = sp + 48 | 0;
 $108 = sp + 40 | 0;
 $112 = sp + 648 | 0;
 $114 = sp + 640 | 0;
 $116 = sp + 632 | 0;
 $118 = sp + 32 | 0;
 $126 = sp + 596 | 0;
 $128 = sp + 588 | 0;
 $130 = sp + 580 | 0;
 $132 = sp + 24 | 0;
 $136 = sp + 560 | 0;
 $138 = sp + 552 | 0;
 $140 = sp + 544 | 0;
 $151 = sp + 500 | 0;
 $152 = sp + 496 | 0;
 $153 = sp + 492 | 0;
 $154 = sp + 488 | 0;
 $155 = sp + 484 | 0;
 $156 = sp + 480 | 0;
 $157 = sp + 1052 | 0;
 $158 = sp + 16 | 0;
 $159 = sp + 8 | 0;
 $160 = sp;
 $163 = sp + 468 | 0;
 $166 = sp + 456 | 0;
 $170 = sp + 440 | 0;
 $173 = sp + 428 | 0;
 $179 = sp + 404 | 0;
 $182 = sp + 392 | 0;
 $186 = sp + 372 | 0;
 $187 = sp + 368 | 0;
 $188 = sp + 364 | 0;
 $240 = sp + 1051 | 0;
 $243 = sp + 1050 | 0;
 $244 = $lhs;
 $245 = $rhs;
 $246 = $244;
 $247 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4typeEv($246) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $lhs_type = $247;
 $248 = $245;
 $249 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4typeEv($248) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $rhs_type = $249;
 $250 = $lhs_type;
 $251 = $rhs_type;
 $252 = $250 << 24 >> 24 == $251 << 24 >> 24;
 $253 = $lhs_type;
 L1 : do {
  if ($252) {
   switch ($253 << 24 >> 24) {
   case 2:
    {
     $254 = $244;
     $255 = $254 + 8 | 0;
     $256 = HEAP32[$255 >> 2] | 0;
     $257 = $245;
     $258 = $257 + 8 | 0;
     $259 = HEAP32[$258 >> 2] | 0;
     $184 = $256;
     $185 = $259;
     $260 = $184;
     $176 = $260;
     $261 = $176;
     $262 = $261 + 4 | 0;
     $263 = HEAP32[$262 >> 2] | 0;
     $264 = HEAP32[$261 >> 2] | 0;
     $265 = $263;
     $266 = $264;
     $267 = $265 - $266 | 0;
     $268 = ($267 | 0) / 16 & -1;
     $__sz$i = $268;
     $269 = $__sz$i;
     $270 = $185;
     $175 = $270;
     $271 = $175;
     $272 = $271 + 4 | 0;
     $273 = HEAP32[$272 >> 2] | 0;
     $274 = HEAP32[$271 >> 2] | 0;
     $275 = $273;
     $276 = $274;
     $277 = $275 - $276 | 0;
     $278 = ($277 | 0) / 16 & -1;
     $279 = ($269 | 0) == ($278 | 0);
     if ($279) {
      $280 = $184;
      $174 = $280;
      $281 = $174;
      $282 = HEAP32[$281 >> 2] | 0;
      $171 = $281;
      $172 = $282;
      $283 = $172;
      $168 = $170;
      $169 = $283;
      $284 = $168;
      $285 = $169;
      HEAP32[$284 >> 2] = $285;
      $286 = HEAP32[$170 >> 2] | 0;
      HEAP32[$173 >> 2] = $286;
      $287 = HEAP32[$173 >> 2] | 0;
      HEAP32[$186 >> 2] = $287;
      $288 = $184;
      $167 = $288;
      $289 = $167;
      $290 = $289 + 4 | 0;
      $291 = HEAP32[$290 >> 2] | 0;
      $164 = $289;
      $165 = $291;
      $292 = $165;
      $161 = $163;
      $162 = $292;
      $293 = $161;
      $294 = $162;
      HEAP32[$293 >> 2] = $294;
      $295 = HEAP32[$163 >> 2] | 0;
      HEAP32[$166 >> 2] = $295;
      $296 = HEAP32[$166 >> 2] | 0;
      HEAP32[$187 >> 2] = $296;
      $297 = $185;
      $183 = $297;
      $298 = $183;
      $299 = HEAP32[$298 >> 2] | 0;
      $180 = $298;
      $181 = $299;
      $300 = $181;
      $177 = $179;
      $178 = $300;
      $301 = $177;
      $302 = $178;
      HEAP32[$301 >> 2] = $302;
      $303 = HEAP32[$179 >> 2] | 0;
      HEAP32[$182 >> 2] = $303;
      $304 = HEAP32[$182 >> 2] | 0;
      HEAP32[$188 >> 2] = $304;
      HEAP8[$158 >> 0] = HEAP8[$188 >> 0] | 0;
      HEAP8[$158 + 1 >> 0] = HEAP8[$188 + 1 >> 0] | 0;
      HEAP8[$158 + 2 >> 0] = HEAP8[$188 + 2 >> 0] | 0;
      HEAP8[$158 + 3 >> 0] = HEAP8[$188 + 3 >> 0] | 0;
      HEAP8[$159 >> 0] = HEAP8[$187 >> 0] | 0;
      HEAP8[$159 + 1 >> 0] = HEAP8[$187 + 1 >> 0] | 0;
      HEAP8[$159 + 2 >> 0] = HEAP8[$187 + 2 >> 0] | 0;
      HEAP8[$159 + 3 >> 0] = HEAP8[$187 + 3 >> 0] | 0;
      HEAP8[$160 >> 0] = HEAP8[$186 >> 0] | 0;
      HEAP8[$160 + 1 >> 0] = HEAP8[$186 + 1 >> 0] | 0;
      HEAP8[$160 + 2 >> 0] = HEAP8[$186 + 2 >> 0] | 0;
      HEAP8[$160 + 3 >> 0] = HEAP8[$186 + 3 >> 0] | 0;
      HEAP32[$154 >> 2] = HEAP32[$160 >> 2] | 0;
      HEAP32[$155 >> 2] = HEAP32[$159 >> 2] | 0;
      HEAP32[$156 >> 2] = HEAP32[$158 >> 2] | 0;
      HEAP8[$103 >> 0] = HEAP8[$157 >> 0] | 0;
      HEAP8[$104 >> 0] = HEAP8[$156 >> 0] | 0;
      HEAP8[$104 + 1 >> 0] = HEAP8[$156 + 1 >> 0] | 0;
      HEAP8[$104 + 2 >> 0] = HEAP8[$156 + 2 >> 0] | 0;
      HEAP8[$104 + 3 >> 0] = HEAP8[$156 + 3 >> 0] | 0;
      HEAP8[$105 >> 0] = HEAP8[$155 >> 0] | 0;
      HEAP8[$105 + 1 >> 0] = HEAP8[$155 + 1 >> 0] | 0;
      HEAP8[$105 + 2 >> 0] = HEAP8[$155 + 2 >> 0] | 0;
      HEAP8[$105 + 3 >> 0] = HEAP8[$155 + 3 >> 0] | 0;
      HEAP8[$106 >> 0] = HEAP8[$154 >> 0] | 0;
      HEAP8[$106 + 1 >> 0] = HEAP8[$154 + 1 >> 0] | 0;
      HEAP8[$106 + 2 >> 0] = HEAP8[$154 + 2 >> 0] | 0;
      HEAP8[$106 + 3 >> 0] = HEAP8[$154 + 3 >> 0] | 0;
      while (1) {
       $100 = $106;
       $101 = $105;
       $305 = $100;
       $306 = $101;
       $98 = $305;
       $99 = $306;
       $307 = $98;
       $97 = $307;
       $308 = $97;
       $309 = HEAP32[$308 >> 2] | 0;
       $310 = $99;
       $96 = $310;
       $311 = $96;
       $312 = HEAP32[$311 >> 2] | 0;
       $313 = ($309 | 0) == ($312 | 0);
       $314 = $313 ^ 1;
       if (!$314) {
        label = 9;
        break;
       }
       $95 = $106;
       $315 = $95;
       $316 = HEAP32[$315 >> 2] | 0;
       $94 = $104;
       $317 = $94;
       $318 = HEAP32[$317 >> 2] | 0;
       $89 = $103;
       $90 = $316;
       $91 = $318;
       $319 = $90;
       $320 = $91;
       $321 = (tempInt = __ZN8nlohmanneqERKNS_10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EESC_($319, $320) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       if (!$321) {
        label = 7;
        break;
       }
       $93 = $106;
       $322 = $93;
       $323 = HEAP32[$322 >> 2] | 0;
       $324 = $323 + 16 | 0;
       HEAP32[$322 >> 2] = $324;
       $92 = $104;
       $325 = $92;
       $326 = HEAP32[$325 >> 2] | 0;
       $327 = $326 + 16 | 0;
       HEAP32[$325 >> 2] = $327;
      }
      if ((label | 0) == 7) {
       $$expand_i1_val = 0;
       HEAP8[$102 >> 0] = $$expand_i1_val;
      } else if ((label | 0) == 9) {
       $$expand_i1_val5 = 1;
       HEAP8[$102 >> 0] = $$expand_i1_val5;
      }
      $$pre_trunc = HEAP8[$102 >> 0] | 0;
      $328 = $$pre_trunc & 1;
      $329 = $328;
     } else {
      $329 = 0;
     }
     $$expand_i1_val8 = $329 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val8;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 1:
    {
     $330 = $244;
     $331 = $330 + 8 | 0;
     $332 = HEAP32[$331 >> 2] | 0;
     $333 = $245;
     $334 = $333 + 8 | 0;
     $335 = HEAP32[$334 >> 2] | 0;
     $149 = $332;
     $150 = $335;
     $336 = $149;
     $148 = $336;
     $337 = $148;
     $147 = $337;
     $338 = $147;
     $339 = $338 + 8 | 0;
     $146 = $339;
     $340 = $146;
     $145 = $340;
     $341 = $145;
     $342 = HEAP32[$341 >> 2] | 0;
     $343 = $150;
     $144 = $343;
     $344 = $144;
     $143 = $344;
     $345 = $143;
     $346 = $345 + 8 | 0;
     $142 = $346;
     $347 = $142;
     $141 = $347;
     $348 = $141;
     $349 = HEAP32[$348 >> 2] | 0;
     $350 = ($342 | 0) == ($349 | 0);
     if ($350) {
      $351 = $149;
      $139 = $351;
      $352 = $139;
      $137 = $352;
      $353 = $137;
      $135 = $353;
      $354 = $135;
      $355 = HEAP32[$354 >> 2] | 0;
      $133 = $136;
      $134 = $355;
      $356 = $133;
      $357 = $134;
      HEAP32[$356 >> 2] = $357;
      $358 = HEAP32[$136 >> 2] | 0;
      HEAP32[$140 >> 2] = $358;
      HEAP8[$132 >> 0] = HEAP8[$140 >> 0] | 0;
      HEAP8[$132 + 1 >> 0] = HEAP8[$140 + 1 >> 0] | 0;
      HEAP8[$132 + 2 >> 0] = HEAP8[$140 + 2 >> 0] | 0;
      HEAP8[$132 + 3 >> 0] = HEAP8[$140 + 3 >> 0] | 0;
      $131 = $138;
      $359 = $131;
      HEAP32[$359 >> 2] = HEAP32[$132 >> 2] | 0;
      $360 = HEAP32[$138 >> 2] | 0;
      HEAP32[$151 >> 2] = $360;
      $361 = $149;
      $129 = $361;
      $362 = $129;
      $127 = $362;
      $363 = $127;
      $125 = $363;
      $364 = $125;
      $365 = $364 + 4 | 0;
      $124 = $365;
      $366 = $124;
      $123 = $366;
      $367 = $123;
      $122 = $367;
      $368 = $122;
      $121 = $368;
      $369 = $121;
      $119 = $126;
      $120 = $369;
      $370 = $119;
      $371 = $120;
      HEAP32[$370 >> 2] = $371;
      $372 = HEAP32[$126 >> 2] | 0;
      HEAP32[$130 >> 2] = $372;
      HEAP8[$118 >> 0] = HEAP8[$130 >> 0] | 0;
      HEAP8[$118 + 1 >> 0] = HEAP8[$130 + 1 >> 0] | 0;
      HEAP8[$118 + 2 >> 0] = HEAP8[$130 + 2 >> 0] | 0;
      HEAP8[$118 + 3 >> 0] = HEAP8[$130 + 3 >> 0] | 0;
      $117 = $128;
      $373 = $117;
      HEAP32[$373 >> 2] = HEAP32[$118 >> 2] | 0;
      $374 = HEAP32[$128 >> 2] | 0;
      HEAP32[$152 >> 2] = $374;
      $375 = $150;
      $115 = $375;
      $376 = $115;
      $113 = $376;
      $377 = $113;
      $111 = $377;
      $378 = $111;
      $379 = HEAP32[$378 >> 2] | 0;
      $109 = $112;
      $110 = $379;
      $380 = $109;
      $381 = $110;
      HEAP32[$380 >> 2] = $381;
      $382 = HEAP32[$112 >> 2] | 0;
      HEAP32[$116 >> 2] = $382;
      HEAP8[$108 >> 0] = HEAP8[$116 >> 0] | 0;
      HEAP8[$108 + 1 >> 0] = HEAP8[$116 + 1 >> 0] | 0;
      HEAP8[$108 + 2 >> 0] = HEAP8[$116 + 2 >> 0] | 0;
      HEAP8[$108 + 3 >> 0] = HEAP8[$116 + 3 >> 0] | 0;
      $107 = $114;
      $383 = $107;
      HEAP32[$383 >> 2] = HEAP32[$108 >> 2] | 0;
      $384 = HEAP32[$114 >> 2] | 0;
      HEAP32[$153 >> 2] = $384;
      HEAP8[$86 >> 0] = HEAP8[$153 >> 0] | 0;
      HEAP8[$86 + 1 >> 0] = HEAP8[$153 + 1 >> 0] | 0;
      HEAP8[$86 + 2 >> 0] = HEAP8[$153 + 2 >> 0] | 0;
      HEAP8[$86 + 3 >> 0] = HEAP8[$153 + 3 >> 0] | 0;
      HEAP8[$87 >> 0] = HEAP8[$152 >> 0] | 0;
      HEAP8[$87 + 1 >> 0] = HEAP8[$152 + 1 >> 0] | 0;
      HEAP8[$87 + 2 >> 0] = HEAP8[$152 + 2 >> 0] | 0;
      HEAP8[$87 + 3 >> 0] = HEAP8[$152 + 3 >> 0] | 0;
      HEAP8[$88 >> 0] = HEAP8[$151 >> 0] | 0;
      HEAP8[$88 + 1 >> 0] = HEAP8[$151 + 1 >> 0] | 0;
      HEAP8[$88 + 2 >> 0] = HEAP8[$151 + 2 >> 0] | 0;
      HEAP8[$88 + 3 >> 0] = HEAP8[$151 + 3 >> 0] | 0;
      HEAP32[$82 >> 2] = HEAP32[$88 >> 2] | 0;
      HEAP32[$83 >> 2] = HEAP32[$87 >> 2] | 0;
      HEAP32[$84 >> 2] = HEAP32[$86 >> 2] | 0;
      HEAP8[$78 >> 0] = HEAP8[$85 >> 0] | 0;
      HEAP8[$79 >> 0] = HEAP8[$84 >> 0] | 0;
      HEAP8[$79 + 1 >> 0] = HEAP8[$84 + 1 >> 0] | 0;
      HEAP8[$79 + 2 >> 0] = HEAP8[$84 + 2 >> 0] | 0;
      HEAP8[$79 + 3 >> 0] = HEAP8[$84 + 3 >> 0] | 0;
      HEAP8[$80 >> 0] = HEAP8[$83 >> 0] | 0;
      HEAP8[$80 + 1 >> 0] = HEAP8[$83 + 1 >> 0] | 0;
      HEAP8[$80 + 2 >> 0] = HEAP8[$83 + 2 >> 0] | 0;
      HEAP8[$80 + 3 >> 0] = HEAP8[$83 + 3 >> 0] | 0;
      HEAP8[$81 >> 0] = HEAP8[$82 >> 0] | 0;
      HEAP8[$81 + 1 >> 0] = HEAP8[$82 + 1 >> 0] | 0;
      HEAP8[$81 + 2 >> 0] = HEAP8[$82 + 2 >> 0] | 0;
      HEAP8[$81 + 3 >> 0] = HEAP8[$82 + 3 >> 0] | 0;
      L20 : while (1) {
       $75 = $81;
       $76 = $80;
       $385 = $75;
       $386 = $76;
       $73 = $385;
       $74 = $386;
       $387 = $73;
       $388 = $74;
       $71 = $387;
       $72 = $388;
       $389 = $71;
       $390 = HEAP32[$389 >> 2] | 0;
       $391 = $72;
       $392 = HEAP32[$391 >> 2] | 0;
       $393 = ($390 | 0) == ($392 | 0);
       $394 = $393 ^ 1;
       if (!$394) {
        label = 42;
        break;
       }
       $70 = $81;
       $395 = $70;
       $69 = $395;
       $396 = $69;
       $397 = HEAP32[$396 >> 2] | 0;
       $398 = $397 + 16 | 0;
       $68 = $398;
       $399 = $68;
       $67 = $399;
       $400 = $67;
       $66 = $79;
       $401 = $66;
       $65 = $401;
       $402 = $65;
       $403 = HEAP32[$402 >> 2] | 0;
       $404 = $403 + 16 | 0;
       $64 = $404;
       $405 = $64;
       $63 = $405;
       $406 = $63;
       $56 = $78;
       $57 = $400;
       $58 = $406;
       $407 = $57;
       $408 = $58;
       $54 = $407;
       $55 = $408;
       $409 = $54;
       $410 = $55;
       $52 = $409;
       $53 = $410;
       $411 = $52;
       $50 = $411;
       $412 = $50;
       $49 = $412;
       $413 = $49;
       $48 = $413;
       $414 = $48;
       $47 = $414;
       $415 = $47;
       $416 = HEAP8[$415 >> 0] | 0;
       $417 = $416 & 255;
       $418 = $417 & 1;
       $419 = ($418 | 0) != 0;
       if ($419) {
        $43 = $412;
        $420 = $43;
        $42 = $420;
        $421 = $42;
        $41 = $421;
        $422 = $41;
        $423 = $422 + 4 | 0;
        $424 = HEAP32[$423 >> 2] | 0;
        $431 = $424;
       } else {
        $46 = $412;
        $425 = $46;
        $45 = $425;
        $426 = $45;
        $44 = $426;
        $427 = $44;
        $428 = HEAP8[$427 >> 0] | 0;
        $429 = $428 & 255;
        $430 = $429 >> 1;
        $431 = $430;
       }
       $__lhs_sz$i$i$i = $431;
       $432 = $__lhs_sz$i$i$i;
       $433 = $53;
       $40 = $433;
       $434 = $40;
       $39 = $434;
       $435 = $39;
       $38 = $435;
       $436 = $38;
       $37 = $436;
       $437 = $37;
       $438 = HEAP8[$437 >> 0] | 0;
       $439 = $438 & 255;
       $440 = $439 & 1;
       $441 = ($440 | 0) != 0;
       if ($441) {
        $33 = $434;
        $442 = $33;
        $32 = $442;
        $443 = $32;
        $31 = $443;
        $444 = $31;
        $445 = $444 + 4 | 0;
        $446 = HEAP32[$445 >> 2] | 0;
        $454 = $446;
       } else {
        $36 = $434;
        $447 = $36;
        $35 = $447;
        $448 = $35;
        $34 = $448;
        $449 = $34;
        $450 = HEAP8[$449 >> 0] | 0;
        $451 = $450 & 255;
        $452 = $451 >> 1;
        $454 = $452;
       }
       $453 = ($432 | 0) != ($454 | 0);
       do {
        if ($453) {
         $$expand_i1_val10 = 0;
         HEAP8[$51 >> 0] = $$expand_i1_val10;
        } else {
         $455 = $52;
         $30 = $455;
         $456 = $30;
         $29 = $456;
         $457 = $29;
         $28 = $457;
         $458 = $28;
         $27 = $458;
         $459 = $27;
         $26 = $459;
         $460 = $26;
         $461 = HEAP8[$460 >> 0] | 0;
         $462 = $461 & 255;
         $463 = $462 & 1;
         $464 = ($463 | 0) != 0;
         if ($464) {
          $20 = $457;
          $465 = $20;
          $19 = $465;
          $466 = $19;
          $18 = $466;
          $467 = $18;
          $468 = $467 + 8 | 0;
          $469 = HEAP32[$468 >> 2] | 0;
          $476 = $469;
         } else {
          $25 = $457;
          $470 = $25;
          $24 = $470;
          $471 = $24;
          $23 = $471;
          $472 = $23;
          $473 = $472 + 1 | 0;
          $22 = $473;
          $474 = $22;
          $21 = $474;
          $475 = $21;
          $476 = $475;
         }
         $17 = $476;
         $477 = $17;
         $__lp$i$i$i = $477;
         $478 = $53;
         $13 = $478;
         $479 = $13;
         $12 = $479;
         $480 = $12;
         $11 = $480;
         $481 = $11;
         $10 = $481;
         $482 = $10;
         $9 = $482;
         $483 = $9;
         $484 = HEAP8[$483 >> 0] | 0;
         $485 = $484 & 255;
         $486 = $485 & 1;
         $487 = ($486 | 0) != 0;
         if ($487) {
          $3 = $480;
          $488 = $3;
          $2 = $488;
          $489 = $2;
          $1 = $489;
          $490 = $1;
          $491 = $490 + 8 | 0;
          $492 = HEAP32[$491 >> 2] | 0;
          $499 = $492;
         } else {
          $8 = $480;
          $493 = $8;
          $7 = $493;
          $494 = $7;
          $6 = $494;
          $495 = $6;
          $496 = $495 + 1 | 0;
          $5 = $496;
          $497 = $5;
          $4 = $497;
          $498 = $4;
          $499 = $498;
         }
         $0 = $499;
         $500 = $0;
         $__rp$i$i$i = $500;
         $501 = $52;
         $16 = $501;
         $502 = $16;
         $15 = $502;
         $503 = $15;
         $14 = $503;
         $504 = $14;
         $505 = HEAP8[$504 >> 0] | 0;
         $506 = $505 & 255;
         $507 = $506 & 1;
         $508 = ($507 | 0) != 0;
         if ($508) {
          $509 = $__lp$i$i$i;
          $510 = $__rp$i$i$i;
          $511 = $__lhs_sz$i$i$i;
          __THREW__ = 0;
          $512 = (tempInt = invoke_iiii(382, $509 | 0, $510 | 0, $511 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $513 = __THREW__;
          __THREW__ = 0;
          $514 = $513 & 1;
          if ($514) {
           label = 37;
           break L20;
          }
          $515 = ($512 | 0) == 0;
          $$expand_i1_val12 = $515 & 1;
          HEAP8[$51 >> 0] = $$expand_i1_val12;
          break;
         }
         while (1) {
          $516 = $__lhs_sz$i$i$i;
          $517 = ($516 | 0) != 0;
          if (!$517) {
           label = 36;
           break;
          }
          $518 = $__lp$i$i$i;
          $519 = HEAP8[$518 >> 0] | 0;
          $520 = $519 << 24 >> 24;
          $521 = $__rp$i$i$i;
          $522 = HEAP8[$521 >> 0] | 0;
          $523 = $522 << 24 >> 24;
          $524 = ($520 | 0) != ($523 | 0);
          if ($524) {
           label = 34;
           break;
          }
          $525 = $__lhs_sz$i$i$i;
          $526 = $525 + -1 | 0;
          $__lhs_sz$i$i$i = $526;
          $527 = $__lp$i$i$i;
          $528 = $527 + 1 | 0;
          $__lp$i$i$i = $528;
          $529 = $__rp$i$i$i;
          $530 = $529 + 1 | 0;
          $__rp$i$i$i = $530;
         }
         if ((label | 0) == 34) {
          label = 0;
          $$expand_i1_val14 = 0;
          HEAP8[$51 >> 0] = $$expand_i1_val14;
          break;
         } else if ((label | 0) == 36) {
          label = 0;
          $$expand_i1_val16 = 1;
          HEAP8[$51 >> 0] = $$expand_i1_val16;
          break;
         }
        }
       } while (0);
       $$pre_trunc18 = HEAP8[$51 >> 0] | 0;
       $533 = $$pre_trunc18 & 1;
       if (!$533) {
        label = 40;
        break;
       }
       $534 = $54;
       $535 = $534 + 16 | 0;
       $536 = $55;
       $537 = $536 + 16 | 0;
       $538 = (tempInt = __ZN8nlohmanneqERKNS_10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EESC_($535, $537) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       if (!$538) {
        label = 40;
        break;
       }
       $62 = $81;
       $539 = $62;
       $61 = $539;
       $540 = $61;
       $541 = HEAP32[$540 >> 2] | 0;
       $542 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($541) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       HEAP32[$540 >> 2] = $542;
       $60 = $79;
       $543 = $60;
       $59 = $543;
       $544 = $59;
       $545 = HEAP32[$544 >> 2] | 0;
       $546 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($545) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       HEAP32[$544 >> 2] = $546;
      }
      if ((label | 0) == 37) {
       $531 = (tempInt = ___cxa_find_matching_catch(0 | 0, 0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $532 = tempRet0;
       ___clang_call_terminate($531), asyncState ? abort(-12) | 0 : 0;
      } else if ((label | 0) == 40) {
       $$expand_i1_val20 = 0;
       HEAP8[$77 >> 0] = $$expand_i1_val20;
      } else if ((label | 0) == 42) {
       $$expand_i1_val22 = 1;
       HEAP8[$77 >> 0] = $$expand_i1_val22;
      }
      $$pre_trunc24 = HEAP8[$77 >> 0] | 0;
      $547 = $$pre_trunc24 & 1;
      $548 = $547;
     } else {
      $548 = 0;
     }
     $$expand_i1_val26 = $548 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val26;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 0:
    {
     $$expand_i1_val28 = 1;
     HEAP8[$243 >> 0] = $$expand_i1_val28;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 3:
    {
     $549 = $244;
     $550 = $549 + 8 | 0;
     $551 = HEAP32[$550 >> 2] | 0;
     $552 = $245;
     $553 = $552 + 8 | 0;
     $554 = HEAP32[$553 >> 2] | 0;
     $241 = $551;
     $242 = $554;
     $555 = $241;
     $239 = $555;
     $556 = $239;
     $238 = $556;
     $557 = $238;
     $237 = $557;
     $558 = $237;
     $236 = $558;
     $559 = $236;
     $560 = HEAP8[$559 >> 0] | 0;
     $561 = $560 & 255;
     $562 = $561 & 1;
     $563 = ($562 | 0) != 0;
     if ($563) {
      $232 = $556;
      $564 = $232;
      $231 = $564;
      $565 = $231;
      $230 = $565;
      $566 = $230;
      $567 = $566 + 4 | 0;
      $568 = HEAP32[$567 >> 2] | 0;
      $575 = $568;
     } else {
      $235 = $556;
      $569 = $235;
      $234 = $569;
      $570 = $234;
      $233 = $570;
      $571 = $233;
      $572 = HEAP8[$571 >> 0] | 0;
      $573 = $572 & 255;
      $574 = $573 >> 1;
      $575 = $574;
     }
     $__lhs_sz$i = $575;
     $576 = $__lhs_sz$i;
     $577 = $242;
     $229 = $577;
     $578 = $229;
     $228 = $578;
     $579 = $228;
     $227 = $579;
     $580 = $227;
     $226 = $580;
     $581 = $226;
     $582 = HEAP8[$581 >> 0] | 0;
     $583 = $582 & 255;
     $584 = $583 & 1;
     $585 = ($584 | 0) != 0;
     if ($585) {
      $222 = $578;
      $586 = $222;
      $221 = $586;
      $587 = $221;
      $220 = $587;
      $588 = $220;
      $589 = $588 + 4 | 0;
      $590 = HEAP32[$589 >> 2] | 0;
      $598 = $590;
     } else {
      $225 = $578;
      $591 = $225;
      $224 = $591;
      $592 = $224;
      $223 = $592;
      $593 = $223;
      $594 = HEAP8[$593 >> 0] | 0;
      $595 = $594 & 255;
      $596 = $595 >> 1;
      $598 = $596;
     }
     $597 = ($576 | 0) != ($598 | 0);
     do {
      if ($597) {
       $$expand_i1_val30 = 0;
       HEAP8[$240 >> 0] = $$expand_i1_val30;
      } else {
       $599 = $241;
       $219 = $599;
       $600 = $219;
       $218 = $600;
       $601 = $218;
       $217 = $601;
       $602 = $217;
       $216 = $602;
       $603 = $216;
       $215 = $603;
       $604 = $215;
       $605 = HEAP8[$604 >> 0] | 0;
       $606 = $605 & 255;
       $607 = $606 & 1;
       $608 = ($607 | 0) != 0;
       if ($608) {
        $209 = $601;
        $609 = $209;
        $208 = $609;
        $610 = $208;
        $207 = $610;
        $611 = $207;
        $612 = $611 + 8 | 0;
        $613 = HEAP32[$612 >> 2] | 0;
        $620 = $613;
       } else {
        $214 = $601;
        $614 = $214;
        $213 = $614;
        $615 = $213;
        $212 = $615;
        $616 = $212;
        $617 = $616 + 1 | 0;
        $211 = $617;
        $618 = $211;
        $210 = $618;
        $619 = $210;
        $620 = $619;
       }
       $206 = $620;
       $621 = $206;
       $__lp$i = $621;
       $622 = $242;
       $202 = $622;
       $623 = $202;
       $201 = $623;
       $624 = $201;
       $200 = $624;
       $625 = $200;
       $199 = $625;
       $626 = $199;
       $198 = $626;
       $627 = $198;
       $628 = HEAP8[$627 >> 0] | 0;
       $629 = $628 & 255;
       $630 = $629 & 1;
       $631 = ($630 | 0) != 0;
       if ($631) {
        $192 = $624;
        $632 = $192;
        $191 = $632;
        $633 = $191;
        $190 = $633;
        $634 = $190;
        $635 = $634 + 8 | 0;
        $636 = HEAP32[$635 >> 2] | 0;
        $643 = $636;
       } else {
        $197 = $624;
        $637 = $197;
        $196 = $637;
        $638 = $196;
        $195 = $638;
        $639 = $195;
        $640 = $639 + 1 | 0;
        $194 = $640;
        $641 = $194;
        $193 = $641;
        $642 = $193;
        $643 = $642;
       }
       $189 = $643;
       $644 = $189;
       $__rp$i = $644;
       $645 = $241;
       $205 = $645;
       $646 = $205;
       $204 = $646;
       $647 = $204;
       $203 = $647;
       $648 = $203;
       $649 = HEAP8[$648 >> 0] | 0;
       $650 = $649 & 255;
       $651 = $650 & 1;
       $652 = ($651 | 0) != 0;
       if ($652) {
        $653 = $__lp$i;
        $654 = $__rp$i;
        $655 = $__lhs_sz$i;
        __THREW__ = 0;
        $656 = (tempInt = invoke_iiii(382, $653 | 0, $654 | 0, $655 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $657 = __THREW__;
        __THREW__ = 0;
        $658 = $657 & 1;
        if ($658) {
         $675 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $676 = tempRet0;
         ___clang_call_terminate($675), asyncState ? abort(-12) | 0 : 0;
        } else {
         $659 = ($656 | 0) == 0;
         $$expand_i1_val32 = $659 & 1;
         HEAP8[$240 >> 0] = $$expand_i1_val32;
         break;
        }
       }
       while (1) {
        $660 = $__lhs_sz$i;
        $661 = ($660 | 0) != 0;
        if (!$661) {
         label = 67;
         break;
        }
        $662 = $__lp$i;
        $663 = HEAP8[$662 >> 0] | 0;
        $664 = $663 << 24 >> 24;
        $665 = $__rp$i;
        $666 = HEAP8[$665 >> 0] | 0;
        $667 = $666 << 24 >> 24;
        $668 = ($664 | 0) != ($667 | 0);
        if ($668) {
         label = 65;
         break;
        }
        $669 = $__lhs_sz$i;
        $670 = $669 + -1 | 0;
        $__lhs_sz$i = $670;
        $671 = $__lp$i;
        $672 = $671 + 1 | 0;
        $__lp$i = $672;
        $673 = $__rp$i;
        $674 = $673 + 1 | 0;
        $__rp$i = $674;
       }
       if ((label | 0) == 65) {
        $$expand_i1_val34 = 0;
        HEAP8[$240 >> 0] = $$expand_i1_val34;
        break;
       } else if ((label | 0) == 67) {
        $$expand_i1_val36 = 1;
        HEAP8[$240 >> 0] = $$expand_i1_val36;
        break;
       }
      }
     } while (0);
     $$pre_trunc38 = HEAP8[$240 >> 0] | 0;
     $677 = $$pre_trunc38 & 1;
     $$expand_i1_val40 = $677 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val40;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 4:
    {
     $678 = $244;
     $679 = $678 + 8 | 0;
     $680 = HEAP8[$679 >> 0] | 0;
     $681 = $680 & 1;
     $682 = $681 & 1;
     $683 = $245;
     $684 = $683 + 8 | 0;
     $685 = HEAP8[$684 >> 0] | 0;
     $686 = $685 & 1;
     $687 = $686 & 1;
     $688 = ($682 | 0) == ($687 | 0);
     $$expand_i1_val42 = $688 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val42;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 5:
    {
     $689 = $244;
     $690 = $689 + 8 | 0;
     $691 = $690;
     $692 = $691;
     $693 = HEAP32[$692 >> 2] | 0;
     $694 = $691 + 4 | 0;
     $695 = $694;
     $696 = HEAP32[$695 >> 2] | 0;
     $697 = $245;
     $698 = $697 + 8 | 0;
     $699 = $698;
     $700 = $699;
     $701 = HEAP32[$700 >> 2] | 0;
     $702 = $699 + 4 | 0;
     $703 = $702;
     $704 = HEAP32[$703 >> 2] | 0;
     $705 = ($693 | 0) == ($701 | 0);
     $706 = ($696 | 0) == ($704 | 0);
     $707 = $705 & $706;
     $$expand_i1_val44 = $707 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val44;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 6:
    {
     $708 = $244;
     $709 = $708 + 8 | 0;
     $710 = +HEAPF64[$709 >> 3];
     $711 = $245;
     $712 = $711 + 8 | 0;
     $713 = +HEAPF64[$712 >> 3];
     __THREW__ = 0;
     $714 = (tempInt = invoke_idd(383, +$710, +$713) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $715 = __THREW__;
     __THREW__ = 0;
     $716 = $715 & 1;
     if ($716) {
      $755 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $756 = tempRet0;
      ___clang_call_terminate($755), asyncState ? abort(-12) | 0 : 0;
     }
     $$expand_i1_val46 = $714 & 1;
     HEAP8[$243 >> 0] = $$expand_i1_val46;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   case 7:
    {
     $$expand_i1_val48 = 0;
     HEAP8[$243 >> 0] = $$expand_i1_val48;
     $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
     $754 = $$pre_trunc56 & 1;
     STACKTOP = sp;
     return $754 | 0;
     break;
    }
   default:
    {
     break L1;
    }
   }
  } else {
   $717 = $253 << 24 >> 24 == 5;
   $718 = $rhs_type;
   $719 = $718 << 24 >> 24 == 6;
   $or$cond = $717 & $719;
   if ($or$cond) {
    $720 = $244;
    $721 = $720 + 8 | 0;
    $722 = $721;
    $723 = $722;
    $724 = HEAP32[$723 >> 2] | 0;
    $725 = $722 + 4 | 0;
    $726 = $725;
    $727 = HEAP32[$726 >> 2] | 0;
    $728 = +($724 >>> 0) + 4294967296.0 * +($727 | 0);
    $729 = $245;
    $730 = $729 + 8 | 0;
    $731 = +HEAPF64[$730 >> 3];
    __THREW__ = 0;
    $732 = (tempInt = invoke_idd(383, +$728, +$731) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $733 = __THREW__;
    __THREW__ = 0;
    $734 = $733 & 1;
    if ($734) {
     $755 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $756 = tempRet0;
     ___clang_call_terminate($755), asyncState ? abort(-12) | 0 : 0;
    }
    $$expand_i1_val50 = $732 & 1;
    HEAP8[$243 >> 0] = $$expand_i1_val50;
    $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
    $754 = $$pre_trunc56 & 1;
    STACKTOP = sp;
    return $754 | 0;
   }
   $735 = $lhs_type;
   $736 = $735 << 24 >> 24 == 6;
   $737 = $rhs_type;
   $738 = $737 << 24 >> 24 == 5;
   $or$cond3 = $736 & $738;
   if ($or$cond3) {
    $739 = $244;
    $740 = $739 + 8 | 0;
    $741 = +HEAPF64[$740 >> 3];
    $742 = $245;
    $743 = $742 + 8 | 0;
    $744 = $743;
    $745 = $744;
    $746 = HEAP32[$745 >> 2] | 0;
    $747 = $744 + 4 | 0;
    $748 = $747;
    $749 = HEAP32[$748 >> 2] | 0;
    $750 = +($746 >>> 0) + 4294967296.0 * +($749 | 0);
    __THREW__ = 0;
    $751 = (tempInt = invoke_idd(383, +$741, +$750) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $752 = __THREW__;
    __THREW__ = 0;
    $753 = $752 & 1;
    if ($753) {
     $755 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $756 = tempRet0;
     ___clang_call_terminate($755), asyncState ? abort(-12) | 0 : 0;
    }
    $$expand_i1_val52 = $751 & 1;
    HEAP8[$243 >> 0] = $$expand_i1_val52;
    $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
    $754 = $$pre_trunc56 & 1;
    STACKTOP = sp;
    return $754 | 0;
   }
  }
 } while (0);
 $$expand_i1_val54 = 0;
 HEAP8[$243 >> 0] = $$expand_i1_val54;
 $$pre_trunc56 = HEAP8[$243 >> 0] | 0;
 $754 = $$pre_trunc56 & 1;
 STACKTOP = sp;
 return $754 | 0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE12__find_equalISD_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISD_PNS_11__tree_nodeISD_SM_EEiEESP_RKT_($this, $__hint, $__parent, $__v) {
 $this = $this | 0;
 $__hint = $__hint | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__lhs_sz$i$i$i$i1 = 0, $__lhs_sz$i$i$i$i10 = 0, $__lhs_sz$i$i$i$i19 = 0, $__next = 0, $__prior = 0, $__result$i$i$i$i = 0, $__result$i$i$i$i12 = 0, $__result$i$i$i$i21 = 0, $__result$i$i$i$i3 = 0, $__rhs_sz$i$i$i$i = 0, $__rhs_sz$i$i$i$i11 = 0, $__rhs_sz$i$i$i$i2 = 0, $__rhs_sz$i$i$i$i20 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $19 = sp + 64 | 0;
 $22 = sp + 1460 | 0;
 $__lhs_sz$i$i$i$i19 = sp + 1220 | 0;
 $__rhs_sz$i$i$i$i20 = sp + 1216 | 0;
 $98 = sp + 56 | 0;
 $101 = sp + 1459 | 0;
 $__lhs_sz$i$i$i$i10 = sp + 900 | 0;
 $__rhs_sz$i$i$i$i11 = sp + 896 | 0;
 $148 = sp + 48 | 0;
 $152 = sp + 840 | 0;
 $173 = sp + 40 | 0;
 $176 = sp + 1458 | 0;
 $__lhs_sz$i$i$i$i1 = sp + 600 | 0;
 $__rhs_sz$i$i$i$i2 = sp + 596 | 0;
 $227 = sp + 32 | 0;
 $230 = sp + 1457 | 0;
 $231 = sp + 528 | 0;
 $234 = sp + 24 | 0;
 $242 = sp + 488 | 0;
 $245 = sp + 16 | 0;
 $276 = sp + 8 | 0;
 $279 = sp + 1456 | 0;
 $__lhs_sz$i$i$i$i = sp + 200 | 0;
 $__rhs_sz$i$i$i$i = sp + 196 | 0;
 $326 = sp;
 $334 = sp + 124 | 0;
 $340 = sp + 100 | 0;
 $341 = sp + 96 | 0;
 $__prior = sp + 92 | 0;
 $342 = sp + 88 | 0;
 $343 = sp + 84 | 0;
 $__next = sp + 80 | 0;
 $344 = sp + 76 | 0;
 $345 = sp + 72 | 0;
 $346 = sp + 68 | 0;
 $337 = $this;
 $338 = $__parent;
 $339 = $__v;
 $347 = $337;
 $335 = $347;
 $348 = $335;
 $333 = $348;
 $349 = $333;
 $350 = $349 + 4 | 0;
 $332 = $350;
 $351 = $332;
 $331 = $351;
 $352 = $331;
 $330 = $352;
 $353 = $330;
 $329 = $353;
 $354 = $329;
 $327 = $334;
 $328 = $354;
 $355 = $327;
 $356 = $328;
 HEAP32[$355 >> 2] = $356;
 $357 = HEAP32[$334 >> 2] | 0;
 HEAP32[$341 >> 2] = $357;
 HEAP8[$326 >> 0] = HEAP8[$341 >> 0] | 0;
 HEAP8[$326 + 1 >> 0] = HEAP8[$341 + 1 >> 0] | 0;
 HEAP8[$326 + 2 >> 0] = HEAP8[$341 + 2 >> 0] | 0;
 HEAP8[$326 + 3 >> 0] = HEAP8[$341 + 3 >> 0] | 0;
 $325 = $340;
 $358 = $325;
 $359 = HEAP32[$326 >> 2] | 0;
 HEAP32[$358 >> 2] = $359;
 $255 = $__hint;
 $256 = $340;
 $360 = $255;
 $361 = HEAP32[$360 >> 2] | 0;
 $362 = $256;
 $363 = HEAP32[$362 >> 2] | 0;
 $364 = ($361 | 0) == ($363 | 0);
 if (!$364) {
  $254 = $347;
  $365 = $254;
  $366 = $365 + 8 | 0;
  $253 = $366;
  $367 = $253;
  $252 = $367;
  $368 = $252;
  $369 = $339;
  $222 = $__hint;
  $370 = $222;
  $371 = HEAP32[$370 >> 2] | 0;
  $372 = $371 + 16 | 0;
  $219 = $368;
  $220 = $369;
  $221 = $372;
  $373 = $219;
  $374 = $220;
  $375 = $221;
  $216 = $373;
  $217 = $374;
  $218 = $375;
  $376 = $217;
  $377 = $218;
  $214 = $376;
  $215 = $377;
  $378 = $214;
  $379 = $215;
  $212 = $378;
  $213 = $379;
  $380 = $212;
  $210 = $380;
  $381 = $210;
  $209 = $381;
  $382 = $209;
  $208 = $382;
  $383 = $208;
  $207 = $383;
  $384 = $207;
  $385 = HEAP8[$384 >> 0] | 0;
  $386 = $385 & 255;
  $387 = $386 & 1;
  $388 = ($387 | 0) != 0;
  if ($388) {
   $203 = $381;
   $389 = $203;
   $202 = $389;
   $390 = $202;
   $201 = $390;
   $391 = $201;
   $392 = $391 + 4 | 0;
   $393 = HEAP32[$392 >> 2] | 0;
   $400 = $393;
  } else {
   $206 = $381;
   $394 = $206;
   $205 = $394;
   $395 = $205;
   $204 = $395;
   $396 = $204;
   $397 = HEAP8[$396 >> 0] | 0;
   $398 = $397 & 255;
   $399 = $398 >> 1;
   $400 = $399;
  }
  HEAP32[$__lhs_sz$i$i$i$i1 >> 2] = $400;
  $401 = $213;
  $200 = $401;
  $402 = $200;
  $199 = $402;
  $403 = $199;
  $198 = $403;
  $404 = $198;
  $197 = $404;
  $405 = $197;
  $406 = HEAP8[$405 >> 0] | 0;
  $407 = $406 & 255;
  $408 = $407 & 1;
  $409 = ($408 | 0) != 0;
  if ($409) {
   $193 = $402;
   $410 = $193;
   $192 = $410;
   $411 = $192;
   $191 = $411;
   $412 = $191;
   $413 = $412 + 4 | 0;
   $414 = HEAP32[$413 >> 2] | 0;
   $421 = $414;
  } else {
   $196 = $402;
   $415 = $196;
   $195 = $415;
   $416 = $195;
   $194 = $416;
   $417 = $194;
   $418 = HEAP8[$417 >> 0] | 0;
   $419 = $418 & 255;
   $420 = $419 >> 1;
   $421 = $420;
  }
  HEAP32[$__rhs_sz$i$i$i$i2 >> 2] = $421;
  $190 = $380;
  $422 = $190;
  $189 = $422;
  $423 = $189;
  $188 = $423;
  $424 = $188;
  $187 = $424;
  $425 = $187;
  $186 = $425;
  $426 = $186;
  $427 = HEAP8[$426 >> 0] | 0;
  $428 = $427 & 255;
  $429 = $428 & 1;
  $430 = ($429 | 0) != 0;
  if ($430) {
   $180 = $423;
   $431 = $180;
   $179 = $431;
   $432 = $179;
   $178 = $432;
   $433 = $178;
   $434 = $433 + 8 | 0;
   $435 = HEAP32[$434 >> 2] | 0;
   $442 = $435;
  } else {
   $185 = $423;
   $436 = $185;
   $184 = $436;
   $437 = $184;
   $183 = $437;
   $438 = $183;
   $439 = $438 + 1 | 0;
   $182 = $439;
   $440 = $182;
   $181 = $440;
   $441 = $181;
   $442 = $441;
  }
  $177 = $442;
  $443 = $177;
  $444 = $213;
  $167 = $444;
  $445 = $167;
  $166 = $445;
  $446 = $166;
  $165 = $446;
  $447 = $165;
  $164 = $447;
  $448 = $164;
  $163 = $448;
  $449 = $163;
  $450 = HEAP8[$449 >> 0] | 0;
  $451 = $450 & 255;
  $452 = $451 & 1;
  $453 = ($452 | 0) != 0;
  if ($453) {
   $157 = $446;
   $454 = $157;
   $156 = $454;
   $455 = $156;
   $155 = $455;
   $456 = $155;
   $457 = $456 + 8 | 0;
   $458 = HEAP32[$457 >> 2] | 0;
   $465 = $458;
  } else {
   $162 = $446;
   $459 = $162;
   $161 = $459;
   $460 = $161;
   $160 = $460;
   $461 = $160;
   $462 = $461 + 1 | 0;
   $159 = $462;
   $463 = $159;
   $158 = $463;
   $464 = $158;
   $465 = $464;
  }
  $154 = $465;
  $466 = $154;
  $174 = $__lhs_sz$i$i$i$i1;
  $175 = $__rhs_sz$i$i$i$i2;
  $467 = $174;
  $468 = $175;
  HEAP8[$173 >> 0] = HEAP8[$176 >> 0] | 0;
  $171 = $467;
  $172 = $468;
  $469 = $172;
  $470 = $171;
  $168 = $173;
  $169 = $469;
  $170 = $470;
  $471 = $169;
  $472 = HEAP32[$471 >> 2] | 0;
  $473 = $170;
  $474 = HEAP32[$473 >> 2] | 0;
  $475 = $472 >>> 0 < $474 >>> 0;
  $476 = $172;
  $477 = $171;
  $478 = $475 ? $476 : $477;
  $479 = HEAP32[$478 >> 2] | 0;
  __THREW__ = 0;
  $480 = (tempInt = invoke_iiii(382, $443 | 0, $466 | 0, $479 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $481 = __THREW__;
  __THREW__ = 0;
  $482 = $481 & 1;
  if ($482) {
   $492 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $493 = tempRet0;
   ___clang_call_terminate($492), asyncState ? abort(-12) | 0 : 0;
  }
  $__result$i$i$i$i3 = $480;
  $483 = $__result$i$i$i$i3;
  $484 = ($483 | 0) != 0;
  do {
   if ($484) {
    $485 = $__result$i$i$i$i3;
    $211 = $485;
   } else {
    $486 = HEAP32[$__lhs_sz$i$i$i$i1 >> 2] | 0;
    $487 = HEAP32[$__rhs_sz$i$i$i$i2 >> 2] | 0;
    $488 = $486 >>> 0 < $487 >>> 0;
    if ($488) {
     $211 = -1;
     break;
    }
    $489 = HEAP32[$__lhs_sz$i$i$i$i1 >> 2] | 0;
    $490 = HEAP32[$__rhs_sz$i$i$i$i2 >> 2] | 0;
    $491 = $489 >>> 0 > $490 >>> 0;
    if ($491) {
     $211 = 1;
     break;
    } else {
     $211 = 0;
     break;
    }
   }
  } while (0);
  $494 = $211;
  $495 = ($494 | 0) < 0;
  if (!$495) {
   $72 = $347;
   $658 = $72;
   $659 = $658 + 8 | 0;
   $71 = $659;
   $660 = $71;
   $70 = $660;
   $661 = $70;
   $73 = $__hint;
   $662 = $73;
   $663 = HEAP32[$662 >> 2] | 0;
   $664 = $663 + 16 | 0;
   $665 = $339;
   $144 = $661;
   $145 = $664;
   $146 = $665;
   $666 = $144;
   $667 = $145;
   $668 = $146;
   $141 = $666;
   $142 = $667;
   $143 = $668;
   $669 = $142;
   $670 = $143;
   $139 = $669;
   $140 = $670;
   $671 = $139;
   $672 = $140;
   $137 = $671;
   $138 = $672;
   $673 = $137;
   $135 = $673;
   $674 = $135;
   $134 = $674;
   $675 = $134;
   $133 = $675;
   $676 = $133;
   $132 = $676;
   $677 = $132;
   $678 = HEAP8[$677 >> 0] | 0;
   $679 = $678 & 255;
   $680 = $679 & 1;
   $681 = ($680 | 0) != 0;
   if ($681) {
    $128 = $674;
    $682 = $128;
    $127 = $682;
    $683 = $127;
    $126 = $683;
    $684 = $126;
    $685 = $684 + 4 | 0;
    $686 = HEAP32[$685 >> 2] | 0;
    $693 = $686;
   } else {
    $131 = $674;
    $687 = $131;
    $130 = $687;
    $688 = $130;
    $129 = $688;
    $689 = $129;
    $690 = HEAP8[$689 >> 0] | 0;
    $691 = $690 & 255;
    $692 = $691 >> 1;
    $693 = $692;
   }
   HEAP32[$__lhs_sz$i$i$i$i10 >> 2] = $693;
   $694 = $138;
   $125 = $694;
   $695 = $125;
   $124 = $695;
   $696 = $124;
   $123 = $696;
   $697 = $123;
   $122 = $697;
   $698 = $122;
   $699 = HEAP8[$698 >> 0] | 0;
   $700 = $699 & 255;
   $701 = $700 & 1;
   $702 = ($701 | 0) != 0;
   if ($702) {
    $118 = $695;
    $703 = $118;
    $117 = $703;
    $704 = $117;
    $116 = $704;
    $705 = $116;
    $706 = $705 + 4 | 0;
    $707 = HEAP32[$706 >> 2] | 0;
    $714 = $707;
   } else {
    $121 = $695;
    $708 = $121;
    $120 = $708;
    $709 = $120;
    $119 = $709;
    $710 = $119;
    $711 = HEAP8[$710 >> 0] | 0;
    $712 = $711 & 255;
    $713 = $712 >> 1;
    $714 = $713;
   }
   HEAP32[$__rhs_sz$i$i$i$i11 >> 2] = $714;
   $115 = $673;
   $715 = $115;
   $114 = $715;
   $716 = $114;
   $113 = $716;
   $717 = $113;
   $112 = $717;
   $718 = $112;
   $111 = $718;
   $719 = $111;
   $720 = HEAP8[$719 >> 0] | 0;
   $721 = $720 & 255;
   $722 = $721 & 1;
   $723 = ($722 | 0) != 0;
   if ($723) {
    $105 = $716;
    $724 = $105;
    $104 = $724;
    $725 = $104;
    $103 = $725;
    $726 = $103;
    $727 = $726 + 8 | 0;
    $728 = HEAP32[$727 >> 2] | 0;
    $735 = $728;
   } else {
    $110 = $716;
    $729 = $110;
    $109 = $729;
    $730 = $109;
    $108 = $730;
    $731 = $108;
    $732 = $731 + 1 | 0;
    $107 = $732;
    $733 = $107;
    $106 = $733;
    $734 = $106;
    $735 = $734;
   }
   $102 = $735;
   $736 = $102;
   $737 = $138;
   $92 = $737;
   $738 = $92;
   $91 = $738;
   $739 = $91;
   $90 = $739;
   $740 = $90;
   $89 = $740;
   $741 = $89;
   $88 = $741;
   $742 = $88;
   $743 = HEAP8[$742 >> 0] | 0;
   $744 = $743 & 255;
   $745 = $744 & 1;
   $746 = ($745 | 0) != 0;
   if ($746) {
    $82 = $739;
    $747 = $82;
    $81 = $747;
    $748 = $81;
    $80 = $748;
    $749 = $80;
    $750 = $749 + 8 | 0;
    $751 = HEAP32[$750 >> 2] | 0;
    $758 = $751;
   } else {
    $87 = $739;
    $752 = $87;
    $86 = $752;
    $753 = $86;
    $85 = $753;
    $754 = $85;
    $755 = $754 + 1 | 0;
    $84 = $755;
    $756 = $84;
    $83 = $756;
    $757 = $83;
    $758 = $757;
   }
   $79 = $758;
   $759 = $79;
   $99 = $__lhs_sz$i$i$i$i10;
   $100 = $__rhs_sz$i$i$i$i11;
   $760 = $99;
   $761 = $100;
   HEAP8[$98 >> 0] = HEAP8[$101 >> 0] | 0;
   $96 = $760;
   $97 = $761;
   $762 = $97;
   $763 = $96;
   $93 = $98;
   $94 = $762;
   $95 = $763;
   $764 = $94;
   $765 = HEAP32[$764 >> 2] | 0;
   $766 = $95;
   $767 = HEAP32[$766 >> 2] | 0;
   $768 = $765 >>> 0 < $767 >>> 0;
   $769 = $97;
   $770 = $96;
   $771 = $768 ? $769 : $770;
   $772 = HEAP32[$771 >> 2] | 0;
   __THREW__ = 0;
   $773 = (tempInt = invoke_iiii(382, $736 | 0, $759 | 0, $772 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $774 = __THREW__;
   __THREW__ = 0;
   $775 = $774 & 1;
   if ($775) {
    $785 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $786 = tempRet0;
    ___clang_call_terminate($785), asyncState ? abort(-12) | 0 : 0;
   }
   $__result$i$i$i$i12 = $773;
   $776 = $__result$i$i$i$i12;
   $777 = ($776 | 0) != 0;
   do {
    if ($777) {
     $778 = $__result$i$i$i$i12;
     $136 = $778;
    } else {
     $779 = HEAP32[$__lhs_sz$i$i$i$i10 >> 2] | 0;
     $780 = HEAP32[$__rhs_sz$i$i$i$i11 >> 2] | 0;
     $781 = $779 >>> 0 < $780 >>> 0;
     if ($781) {
      $136 = -1;
      break;
     }
     $782 = HEAP32[$__lhs_sz$i$i$i$i10 >> 2] | 0;
     $783 = HEAP32[$__rhs_sz$i$i$i$i11 >> 2] | 0;
     $784 = $782 >>> 0 > $783 >>> 0;
     if ($784) {
      $136 = 1;
      break;
     } else {
      $136 = 0;
      break;
     }
    }
   } while (0);
   $787 = $136;
   $788 = ($787 | 0) < 0;
   if (!$788) {
    $975 = HEAP32[$__hint >> 2] | 0;
    $976 = $338;
    HEAP32[$976 >> 2] = $975;
    $977 = $338;
    $336 = $977;
    $978 = $336;
    STACKTOP = sp;
    return $978 | 0;
   }
   HEAP32[$344 >> 2] = HEAP32[$__hint >> 2] | 0;
   HEAP8[$234 >> 0] = HEAP8[$344 >> 0] | 0;
   HEAP8[$234 + 1 >> 0] = HEAP8[$344 + 1 >> 0] | 0;
   HEAP8[$234 + 2 >> 0] = HEAP8[$344 + 2 >> 0] | 0;
   HEAP8[$234 + 3 >> 0] = HEAP8[$344 + 3 >> 0] | 0;
   $232 = 1;
   $233 = 0;
   $789 = $232;
   $228 = $234;
   $229 = $789;
   $790 = $228;
   $791 = $229;
   HEAP8[$227 >> 0] = HEAP8[$230 >> 0] | 0;
   $225 = $790;
   $226 = $791;
   $792 = $226;
   $793 = ($792 | 0) >= 0;
   L66 : do {
    if ($793) {
     while (1) {
      $794 = $226;
      $795 = ($794 | 0) > 0;
      if (!$795) {
       break L66;
      }
      $796 = $225;
      $224 = $796;
      $797 = $224;
      $798 = HEAP32[$797 >> 2] | 0;
      $799 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($798) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[$797 >> 2] = $799;
      $800 = $226;
      $801 = $800 + -1 | 0;
      $226 = $801;
     }
    } else {
     while (1) {
      $802 = $226;
      $803 = ($802 | 0) < 0;
      if (!$803) {
       break L66;
      }
      $804 = $225;
      $223 = $804;
      $805 = $223;
      $806 = HEAP32[$805 >> 2] | 0;
      $807 = (tempInt = __ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($806) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[$805 >> 2] = $807;
      $808 = $226;
      $809 = $808 + 1 | 0;
      $226 = $809;
     }
    }
   } while (0);
   HEAP32[$231 >> 2] = HEAP32[$234 >> 2] | 0;
   $810 = HEAP32[$231 >> 2] | 0;
   HEAP32[$__next >> 2] = $810;
   $243 = $347;
   $811 = $243;
   $241 = $811;
   $812 = $241;
   $813 = $812 + 4 | 0;
   $240 = $813;
   $814 = $240;
   $239 = $814;
   $815 = $239;
   $238 = $815;
   $816 = $238;
   $237 = $816;
   $817 = $237;
   $235 = $242;
   $236 = $817;
   $818 = $235;
   $819 = $236;
   HEAP32[$818 >> 2] = $819;
   $820 = HEAP32[$242 >> 2] | 0;
   HEAP32[$346 >> 2] = $820;
   HEAP8[$245 >> 0] = HEAP8[$346 >> 0] | 0;
   HEAP8[$245 + 1 >> 0] = HEAP8[$346 + 1 >> 0] | 0;
   HEAP8[$245 + 2 >> 0] = HEAP8[$346 + 2 >> 0] | 0;
   HEAP8[$245 + 3 >> 0] = HEAP8[$346 + 3 >> 0] | 0;
   $244 = $345;
   $821 = $244;
   $822 = HEAP32[$245 >> 2] | 0;
   HEAP32[$821 >> 2] = $822;
   $246 = $__next;
   $247 = $345;
   $823 = $246;
   $824 = HEAP32[$823 >> 2] | 0;
   $825 = $247;
   $826 = HEAP32[$825 >> 2] | 0;
   $827 = ($824 | 0) == ($826 | 0);
   do {
    if (!$827) {
     $250 = $347;
     $828 = $250;
     $829 = $828 + 8 | 0;
     $249 = $829;
     $830 = $249;
     $248 = $830;
     $831 = $248;
     $832 = $339;
     $251 = $__next;
     $833 = $251;
     $834 = HEAP32[$833 >> 2] | 0;
     $835 = $834 + 16 | 0;
     $322 = $831;
     $323 = $832;
     $324 = $835;
     $836 = $322;
     $837 = $323;
     $838 = $324;
     $319 = $836;
     $320 = $837;
     $321 = $838;
     $839 = $320;
     $840 = $321;
     $317 = $839;
     $318 = $840;
     $841 = $317;
     $842 = $318;
     $315 = $841;
     $316 = $842;
     $843 = $315;
     $313 = $843;
     $844 = $313;
     $312 = $844;
     $845 = $312;
     $311 = $845;
     $846 = $311;
     $310 = $846;
     $847 = $310;
     $848 = HEAP8[$847 >> 0] | 0;
     $849 = $848 & 255;
     $850 = $849 & 1;
     $851 = ($850 | 0) != 0;
     if ($851) {
      $306 = $844;
      $852 = $306;
      $305 = $852;
      $853 = $305;
      $304 = $853;
      $854 = $304;
      $855 = $854 + 4 | 0;
      $856 = HEAP32[$855 >> 2] | 0;
      $863 = $856;
     } else {
      $309 = $844;
      $857 = $309;
      $308 = $857;
      $858 = $308;
      $307 = $858;
      $859 = $307;
      $860 = HEAP8[$859 >> 0] | 0;
      $861 = $860 & 255;
      $862 = $861 >> 1;
      $863 = $862;
     }
     HEAP32[$__lhs_sz$i$i$i$i >> 2] = $863;
     $864 = $316;
     $303 = $864;
     $865 = $303;
     $302 = $865;
     $866 = $302;
     $301 = $866;
     $867 = $301;
     $300 = $867;
     $868 = $300;
     $869 = HEAP8[$868 >> 0] | 0;
     $870 = $869 & 255;
     $871 = $870 & 1;
     $872 = ($871 | 0) != 0;
     if ($872) {
      $296 = $865;
      $873 = $296;
      $295 = $873;
      $874 = $295;
      $294 = $874;
      $875 = $294;
      $876 = $875 + 4 | 0;
      $877 = HEAP32[$876 >> 2] | 0;
      $884 = $877;
     } else {
      $299 = $865;
      $878 = $299;
      $298 = $878;
      $879 = $298;
      $297 = $879;
      $880 = $297;
      $881 = HEAP8[$880 >> 0] | 0;
      $882 = $881 & 255;
      $883 = $882 >> 1;
      $884 = $883;
     }
     HEAP32[$__rhs_sz$i$i$i$i >> 2] = $884;
     $293 = $843;
     $885 = $293;
     $292 = $885;
     $886 = $292;
     $291 = $886;
     $887 = $291;
     $290 = $887;
     $888 = $290;
     $289 = $888;
     $889 = $289;
     $890 = HEAP8[$889 >> 0] | 0;
     $891 = $890 & 255;
     $892 = $891 & 1;
     $893 = ($892 | 0) != 0;
     if ($893) {
      $283 = $886;
      $894 = $283;
      $282 = $894;
      $895 = $282;
      $281 = $895;
      $896 = $281;
      $897 = $896 + 8 | 0;
      $898 = HEAP32[$897 >> 2] | 0;
      $905 = $898;
     } else {
      $288 = $886;
      $899 = $288;
      $287 = $899;
      $900 = $287;
      $286 = $900;
      $901 = $286;
      $902 = $901 + 1 | 0;
      $285 = $902;
      $903 = $285;
      $284 = $903;
      $904 = $284;
      $905 = $904;
     }
     $280 = $905;
     $906 = $280;
     $907 = $316;
     $270 = $907;
     $908 = $270;
     $269 = $908;
     $909 = $269;
     $268 = $909;
     $910 = $268;
     $267 = $910;
     $911 = $267;
     $266 = $911;
     $912 = $266;
     $913 = HEAP8[$912 >> 0] | 0;
     $914 = $913 & 255;
     $915 = $914 & 1;
     $916 = ($915 | 0) != 0;
     if ($916) {
      $260 = $909;
      $917 = $260;
      $259 = $917;
      $918 = $259;
      $258 = $918;
      $919 = $258;
      $920 = $919 + 8 | 0;
      $921 = HEAP32[$920 >> 2] | 0;
      $928 = $921;
     } else {
      $265 = $909;
      $922 = $265;
      $264 = $922;
      $923 = $264;
      $263 = $923;
      $924 = $263;
      $925 = $924 + 1 | 0;
      $262 = $925;
      $926 = $262;
      $261 = $926;
      $927 = $261;
      $928 = $927;
     }
     $257 = $928;
     $929 = $257;
     $277 = $__lhs_sz$i$i$i$i;
     $278 = $__rhs_sz$i$i$i$i;
     $930 = $277;
     $931 = $278;
     HEAP8[$276 >> 0] = HEAP8[$279 >> 0] | 0;
     $274 = $930;
     $275 = $931;
     $932 = $275;
     $933 = $274;
     $271 = $276;
     $272 = $932;
     $273 = $933;
     $934 = $272;
     $935 = HEAP32[$934 >> 2] | 0;
     $936 = $273;
     $937 = HEAP32[$936 >> 2] | 0;
     $938 = $935 >>> 0 < $937 >>> 0;
     $939 = $275;
     $940 = $274;
     $941 = $938 ? $939 : $940;
     $942 = HEAP32[$941 >> 2] | 0;
     __THREW__ = 0;
     $943 = (tempInt = invoke_iiii(382, $906 | 0, $929 | 0, $942 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $944 = __THREW__;
     __THREW__ = 0;
     $945 = $944 & 1;
     if ($945) {
      $955 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $956 = tempRet0;
      ___clang_call_terminate($955), asyncState ? abort(-12) | 0 : 0;
     }
     $__result$i$i$i$i = $943;
     $946 = $__result$i$i$i$i;
     $947 = ($946 | 0) != 0;
     do {
      if ($947) {
       $948 = $__result$i$i$i$i;
       $314 = $948;
      } else {
       $949 = HEAP32[$__lhs_sz$i$i$i$i >> 2] | 0;
       $950 = HEAP32[$__rhs_sz$i$i$i$i >> 2] | 0;
       $951 = $949 >>> 0 < $950 >>> 0;
       if ($951) {
        $314 = -1;
        break;
       }
       $952 = HEAP32[$__lhs_sz$i$i$i$i >> 2] | 0;
       $953 = HEAP32[$__rhs_sz$i$i$i$i >> 2] | 0;
       $954 = $952 >>> 0 > $953 >>> 0;
       if ($954) {
        $314 = 1;
        break;
       } else {
        $314 = 0;
        break;
       }
      }
     } while (0);
     $957 = $314;
     $958 = ($957 | 0) < 0;
     if ($958) {
      break;
     }
     $972 = $338;
     $973 = $339;
     $974 = (tempInt = __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE12__find_equalISD_EERPNS_16__tree_node_baseIPvEESP_RKT_($347, $972, $973) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $336 = $974;
     $978 = $336;
     STACKTOP = sp;
     return $978 | 0;
    }
   } while (0);
   $959 = HEAP32[$__hint >> 2] | 0;
   $960 = $959 + 4 | 0;
   $961 = HEAP32[$960 >> 2] | 0;
   $962 = ($961 | 0) == (0 | 0);
   if ($962) {
    $963 = HEAP32[$__hint >> 2] | 0;
    $964 = $338;
    HEAP32[$964 >> 2] = $963;
    $965 = $338;
    $966 = HEAP32[$965 >> 2] | 0;
    $967 = $966 + 4 | 0;
    $336 = $967;
    $978 = $336;
    STACKTOP = sp;
    return $978 | 0;
   } else {
    $968 = HEAP32[$__next >> 2] | 0;
    $969 = $338;
    HEAP32[$969 >> 2] = $968;
    $970 = $338;
    $971 = HEAP32[$970 >> 2] | 0;
    $336 = $971;
    $978 = $336;
    STACKTOP = sp;
    return $978 | 0;
   }
  }
 }
 HEAP32[$__prior >> 2] = HEAP32[$__hint >> 2] | 0;
 $153 = $347;
 $496 = $153;
 $151 = $496;
 $497 = $151;
 $498 = HEAP32[$497 >> 2] | 0;
 $149 = $152;
 $150 = $498;
 $499 = $149;
 $500 = $150;
 HEAP32[$499 >> 2] = $500;
 $501 = HEAP32[$152 >> 2] | 0;
 HEAP32[$343 >> 2] = $501;
 HEAP8[$148 >> 0] = HEAP8[$343 >> 0] | 0;
 HEAP8[$148 + 1 >> 0] = HEAP8[$343 + 1 >> 0] | 0;
 HEAP8[$148 + 2 >> 0] = HEAP8[$343 + 2 >> 0] | 0;
 HEAP8[$148 + 3 >> 0] = HEAP8[$343 + 3 >> 0] | 0;
 $147 = $342;
 $502 = $147;
 $503 = HEAP32[$148 >> 2] | 0;
 HEAP32[$502 >> 2] = $503;
 $77 = $__prior;
 $78 = $342;
 $504 = $77;
 $505 = HEAP32[$504 >> 2] | 0;
 $506 = $78;
 $507 = HEAP32[$506 >> 2] | 0;
 $508 = ($505 | 0) == ($507 | 0);
 if (!$508) {
  $76 = $347;
  $509 = $76;
  $510 = $509 + 8 | 0;
  $75 = $510;
  $511 = $75;
  $74 = $511;
  $512 = $74;
  $69 = $__prior;
  $513 = $69;
  $514 = HEAP32[$513 >> 2] | 0;
  $515 = (tempInt = __ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($514) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$513 >> 2] = $515;
  $68 = $513;
  $516 = $68;
  $517 = HEAP32[$516 >> 2] | 0;
  $518 = $517 + 16 | 0;
  $519 = $339;
  $65 = $512;
  $66 = $518;
  $67 = $519;
  $520 = $65;
  $521 = $66;
  $522 = $67;
  $62 = $520;
  $63 = $521;
  $64 = $522;
  $523 = $63;
  $524 = $64;
  $60 = $523;
  $61 = $524;
  $525 = $60;
  $526 = $61;
  $58 = $525;
  $59 = $526;
  $527 = $58;
  $56 = $527;
  $528 = $56;
  $55 = $528;
  $529 = $55;
  $54 = $529;
  $530 = $54;
  $53 = $530;
  $531 = $53;
  $532 = HEAP8[$531 >> 0] | 0;
  $533 = $532 & 255;
  $534 = $533 & 1;
  $535 = ($534 | 0) != 0;
  if ($535) {
   $49 = $528;
   $536 = $49;
   $48 = $536;
   $537 = $48;
   $47 = $537;
   $538 = $47;
   $539 = $538 + 4 | 0;
   $540 = HEAP32[$539 >> 2] | 0;
   $547 = $540;
  } else {
   $52 = $528;
   $541 = $52;
   $51 = $541;
   $542 = $51;
   $50 = $542;
   $543 = $50;
   $544 = HEAP8[$543 >> 0] | 0;
   $545 = $544 & 255;
   $546 = $545 >> 1;
   $547 = $546;
  }
  HEAP32[$__lhs_sz$i$i$i$i19 >> 2] = $547;
  $548 = $59;
  $46 = $548;
  $549 = $46;
  $45 = $549;
  $550 = $45;
  $44 = $550;
  $551 = $44;
  $43 = $551;
  $552 = $43;
  $553 = HEAP8[$552 >> 0] | 0;
  $554 = $553 & 255;
  $555 = $554 & 1;
  $556 = ($555 | 0) != 0;
  if ($556) {
   $39 = $549;
   $557 = $39;
   $38 = $557;
   $558 = $38;
   $37 = $558;
   $559 = $37;
   $560 = $559 + 4 | 0;
   $561 = HEAP32[$560 >> 2] | 0;
   $568 = $561;
  } else {
   $42 = $549;
   $562 = $42;
   $41 = $562;
   $563 = $41;
   $40 = $563;
   $564 = $40;
   $565 = HEAP8[$564 >> 0] | 0;
   $566 = $565 & 255;
   $567 = $566 >> 1;
   $568 = $567;
  }
  HEAP32[$__rhs_sz$i$i$i$i20 >> 2] = $568;
  $36 = $527;
  $569 = $36;
  $35 = $569;
  $570 = $35;
  $34 = $570;
  $571 = $34;
  $33 = $571;
  $572 = $33;
  $32 = $572;
  $573 = $32;
  $574 = HEAP8[$573 >> 0] | 0;
  $575 = $574 & 255;
  $576 = $575 & 1;
  $577 = ($576 | 0) != 0;
  if ($577) {
   $26 = $570;
   $578 = $26;
   $25 = $578;
   $579 = $25;
   $24 = $579;
   $580 = $24;
   $581 = $580 + 8 | 0;
   $582 = HEAP32[$581 >> 2] | 0;
   $589 = $582;
  } else {
   $31 = $570;
   $583 = $31;
   $30 = $583;
   $584 = $30;
   $29 = $584;
   $585 = $29;
   $586 = $585 + 1 | 0;
   $28 = $586;
   $587 = $28;
   $27 = $587;
   $588 = $27;
   $589 = $588;
  }
  $23 = $589;
  $590 = $23;
  $591 = $59;
  $13 = $591;
  $592 = $13;
  $12 = $592;
  $593 = $12;
  $11 = $593;
  $594 = $11;
  $10 = $594;
  $595 = $10;
  $9 = $595;
  $596 = $9;
  $597 = HEAP8[$596 >> 0] | 0;
  $598 = $597 & 255;
  $599 = $598 & 1;
  $600 = ($599 | 0) != 0;
  if ($600) {
   $3 = $593;
   $601 = $3;
   $2 = $601;
   $602 = $2;
   $1 = $602;
   $603 = $1;
   $604 = $603 + 8 | 0;
   $605 = HEAP32[$604 >> 2] | 0;
   $612 = $605;
  } else {
   $8 = $593;
   $606 = $8;
   $7 = $606;
   $607 = $7;
   $6 = $607;
   $608 = $6;
   $609 = $608 + 1 | 0;
   $5 = $609;
   $610 = $5;
   $4 = $610;
   $611 = $4;
   $612 = $611;
  }
  $0 = $612;
  $613 = $0;
  $20 = $__lhs_sz$i$i$i$i19;
  $21 = $__rhs_sz$i$i$i$i20;
  $614 = $20;
  $615 = $21;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  $17 = $614;
  $18 = $615;
  $616 = $18;
  $617 = $17;
  $14 = $19;
  $15 = $616;
  $16 = $617;
  $618 = $15;
  $619 = HEAP32[$618 >> 2] | 0;
  $620 = $16;
  $621 = HEAP32[$620 >> 2] | 0;
  $622 = $619 >>> 0 < $621 >>> 0;
  $623 = $18;
  $624 = $17;
  $625 = $622 ? $623 : $624;
  $626 = HEAP32[$625 >> 2] | 0;
  __THREW__ = 0;
  $627 = (tempInt = invoke_iiii(382, $590 | 0, $613 | 0, $626 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $628 = __THREW__;
  __THREW__ = 0;
  $629 = $628 & 1;
  if ($629) {
   $639 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $640 = tempRet0;
   ___clang_call_terminate($639), asyncState ? abort(-12) | 0 : 0;
  }
  $__result$i$i$i$i21 = $627;
  $630 = $__result$i$i$i$i21;
  $631 = ($630 | 0) != 0;
  do {
   if ($631) {
    $632 = $__result$i$i$i$i21;
    $57 = $632;
   } else {
    $633 = HEAP32[$__lhs_sz$i$i$i$i19 >> 2] | 0;
    $634 = HEAP32[$__rhs_sz$i$i$i$i20 >> 2] | 0;
    $635 = $633 >>> 0 < $634 >>> 0;
    if ($635) {
     $57 = -1;
     break;
    }
    $636 = HEAP32[$__lhs_sz$i$i$i$i19 >> 2] | 0;
    $637 = HEAP32[$__rhs_sz$i$i$i$i20 >> 2] | 0;
    $638 = $636 >>> 0 > $637 >>> 0;
    if ($638) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while (0);
  $641 = $57;
  $642 = ($641 | 0) < 0;
  if (!$642) {
   $655 = $338;
   $656 = $339;
   $657 = (tempInt = __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE12__find_equalISD_EERPNS_16__tree_node_baseIPvEESP_RKT_($347, $655, $656) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $336 = $657;
   $978 = $336;
   STACKTOP = sp;
   return $978 | 0;
  }
 }
 $643 = HEAP32[$__hint >> 2] | 0;
 $644 = HEAP32[$643 >> 2] | 0;
 $645 = ($644 | 0) == (0 | 0);
 if ($645) {
  $646 = HEAP32[$__hint >> 2] | 0;
  $647 = $338;
  HEAP32[$647 >> 2] = $646;
  $648 = $338;
  $649 = HEAP32[$648 >> 2] | 0;
  $336 = $649;
  $978 = $336;
  STACKTOP = sp;
  return $978 | 0;
 } else {
  $650 = HEAP32[$__prior >> 2] | 0;
  $651 = $338;
  HEAP32[$651 >> 2] = $650;
  $652 = $338;
  $653 = HEAP32[$652 >> 2] | 0;
  $654 = $653 + 4 | 0;
  $336 = $654;
  $978 = $336;
  STACKTOP = sp;
  return $978 | 0;
 }
 return 0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer4scanEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $yyaccept = 0, $yych = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $this;
 $2 = $1;
 $3 = $2 + 24 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $2 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $2 + 20 | 0;
 HEAP32[$6 >> 2] = $5;
 $yyaccept = 0;
 $7 = $2 + 32 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $2 + 28 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $8;
 $12 = $10;
 $13 = $11 - $12 | 0;
 $14 = ($13 | 0) < 5;
 if ($14) {
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
 }
 $15 = $2 + 28 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = HEAP8[$16 >> 0] | 0;
 $yych = $17;
 $18 = $yych;
 $19 = $18 & 255;
 $20 = ($19 | 0) <= 57;
 $21 = $yych;
 $22 = $21 & 255;
 L4 : do {
  if ($20) {
   $23 = ($22 | 0) <= 32;
   $24 = $yych;
   $25 = $24 & 255;
   if ($23) {
    $26 = ($25 | 0) <= 10;
    $27 = $yych;
    $28 = $27 & 255;
    do {
     if ($26) {
      $29 = ($28 | 0) <= 0;
      if ($29) {
       $183 = $2 + 28 | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = $184 + 1 | 0;
       HEAP32[$183 >> 2] = $185;
       $0 = 13;
       $559 = $0;
       STACKTOP = sp;
       return $559 | 0;
      } else {
       $30 = $yych;
       $31 = $30 & 255;
       $32 = ($31 | 0) <= 8;
       if ($32) {
        label = 54;
        break L4;
       }
       $33 = $yych;
       $34 = $33 & 255;
       $35 = ($34 | 0) >= 10;
       if ($35) {
        break;
       } else {
        label = 28;
        break;
       }
      }
     } else {
      $36 = ($28 | 0) == 13;
      if ($36) {
       label = 28;
      } else {
       $37 = $yych;
       $38 = $37 & 255;
       $39 = ($38 | 0) <= 31;
       if ($39) {
        label = 54;
        break L4;
       } else {
        label = 28;
       }
      }
     }
    } while (0);
    if ((label | 0) == 28) {
     $84 = $2 + 28 | 0;
     $85 = HEAP32[$84 >> 2] | 0;
     $86 = $85 + 1 | 0;
     HEAP32[$84 >> 2] = $86;
     $87 = $2 + 28 | 0;
     $88 = HEAP32[$87 >> 2] | 0;
     $89 = HEAP8[$88 >> 0] | 0;
     $yych = $89;
     label = 32;
    }
    while (1) {
     if ((label | 0) == 32) {
      label = 0;
      $101 = $yych;
      $102 = $101 & 255;
      $103 = 0 + $102 | 0;
      $104 = 14219 + $103 | 0;
      $105 = HEAP8[$104 >> 0] | 0;
      $106 = $105 & 255;
      $107 = $106 & 32;
      $108 = ($107 | 0) != 0;
      if (!$108) {
       break;
      }
     }
     $90 = $2 + 28 | 0;
     $91 = HEAP32[$90 >> 2] | 0;
     $92 = $91 + 1 | 0;
     HEAP32[$90 >> 2] = $92;
     $93 = $2 + 32 | 0;
     $94 = HEAP32[$93 >> 2] | 0;
     $95 = $2 + 28 | 0;
     $96 = HEAP32[$95 >> 2] | 0;
     $97 = $94 >>> 0 <= $96 >>> 0;
     if ($97) {
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
     }
     $98 = $2 + 28 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     $100 = HEAP8[$99 >> 0] | 0;
     $yych = $100;
     label = 32;
    }
    $109 = (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer4scanEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $0 = $109;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
   $40 = ($25 | 0) <= 44;
   $41 = $yych;
   $42 = $41 & 255;
   if (!$40) {
    $47 = ($42 | 0) <= 45;
    do {
     if ($47) {
      $152 = $2 + 28 | 0;
      $153 = HEAP32[$152 >> 2] | 0;
      $154 = $153 + 1 | 0;
      HEAP32[$152 >> 2] = $154;
      $155 = HEAP8[$154 >> 0] | 0;
      $yych = $155;
      $156 = $yych;
      $157 = $156 & 255;
      $158 = ($157 | 0) <= 47;
      if ($158) {
       label = 41;
       break L4;
      }
      $159 = $yych;
      $160 = $159 & 255;
      $161 = ($160 | 0) <= 48;
      if (!$161) {
       $162 = $yych;
       $163 = $162 & 255;
       $164 = ($163 | 0) <= 57;
       if ($164) {
        label = 111;
        break;
       } else {
        label = 41;
        break L4;
       }
      }
      $yyaccept = 1;
      $486 = $2 + 28 | 0;
      $487 = HEAP32[$486 >> 2] | 0;
      $488 = $487 + 1 | 0;
      HEAP32[$486 >> 2] = $488;
      $489 = $2 + 24 | 0;
      HEAP32[$489 >> 2] = $488;
      $490 = HEAP8[$488 >> 0] | 0;
      $yych = $490;
      $491 = $yych;
      $492 = $491 & 255;
      $493 = ($492 | 0) <= 68;
      $494 = $yych;
      $495 = $494 & 255;
      if ($493) {
       $496 = ($495 | 0) == 46;
       if ($496) {
        label = 119;
        break;
       } else {
        label = 51;
        break L4;
       }
      }
      $497 = ($495 | 0) <= 69;
      if ($497) {
       label = 121;
      } else {
       $498 = $yych;
       $499 = $498 & 255;
       $500 = ($499 | 0) == 101;
       if ($500) {
        label = 121;
       } else {
        label = 51;
        break L4;
       }
      }
     } else {
      $48 = $yych;
      $49 = $48 & 255;
      $50 = ($49 | 0) <= 47;
      if ($50) {
       label = 54;
       break L4;
      }
      $51 = $yych;
      $52 = $51 & 255;
      $53 = ($52 | 0) <= 48;
      $yyaccept = 1;
      $54 = $2 + 28 | 0;
      $55 = HEAP32[$54 >> 2] | 0;
      $56 = $55 + 1 | 0;
      HEAP32[$54 >> 2] = $56;
      $57 = $2 + 24 | 0;
      HEAP32[$57 >> 2] = $56;
      $58 = HEAP8[$56 >> 0] | 0;
      $yych = $58;
      if ($53) {
       $165 = $yych;
       $166 = $165 & 255;
       $167 = ($166 | 0) <= 68;
       $168 = $yych;
       $169 = $168 & 255;
       if ($167) {
        $170 = ($169 | 0) == 46;
        if ($170) {
         label = 119;
         break;
        } else {
         label = 51;
         break L4;
        }
       }
       $171 = ($169 | 0) <= 69;
       if ($171) {
        label = 121;
       } else {
        $172 = $yych;
        $173 = $172 & 255;
        $174 = ($173 | 0) == 101;
        if ($174) {
         label = 121;
        } else {
         label = 51;
         break L4;
        }
       }
      } else {
       label = 114;
      }
     }
    } while (0);
    while (1) {
     if ((label | 0) == 111) {
      label = 0;
      $yyaccept = 1;
      $371 = $2 + 28 | 0;
      $372 = HEAP32[$371 >> 2] | 0;
      $373 = $372 + 1 | 0;
      HEAP32[$371 >> 2] = $373;
      $374 = $2 + 24 | 0;
      HEAP32[$374 >> 2] = $373;
      $375 = $2 + 32 | 0;
      $376 = HEAP32[$375 >> 2] | 0;
      $377 = $2 + 28 | 0;
      $378 = HEAP32[$377 >> 2] | 0;
      $379 = $376;
      $380 = $378;
      $381 = $379 - $380 | 0;
      $382 = ($381 | 0) < 3;
      if ($382) {
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
      }
      $383 = $2 + 28 | 0;
      $384 = HEAP32[$383 >> 2] | 0;
      $385 = HEAP8[$384 >> 0] | 0;
      $yych = $385;
      label = 114;
      continue;
     } else if ((label | 0) == 114) {
      label = 0;
      $386 = $yych;
      $387 = $386 & 255;
      $388 = 0 + $387 | 0;
      $389 = 14219 + $388 | 0;
      $390 = HEAP8[$389 >> 0] | 0;
      $391 = $390 & 255;
      $392 = $391 & 128;
      $393 = ($392 | 0) != 0;
      if ($393) {
       label = 111;
       continue;
      }
      $394 = $yych;
      $395 = $394 & 255;
      $396 = ($395 | 0) <= 68;
      $397 = $yych;
      $398 = $397 & 255;
      if ($396) {
       $399 = ($398 | 0) != 46;
       if ($399) {
        label = 51;
        break L4;
       } else {
        label = 119;
        continue;
       }
      }
      $400 = ($398 | 0) <= 69;
      if ($400) {
       label = 121;
       continue;
      }
      $401 = $yych;
      $402 = $401 & 255;
      $403 = ($402 | 0) == 101;
      if ($403) {
       label = 121;
       continue;
      } else {
       label = 51;
       break L4;
      }
     } else if ((label | 0) == 119) {
      label = 0;
      $404 = $2 + 28 | 0;
      $405 = HEAP32[$404 >> 2] | 0;
      $406 = $405 + 1 | 0;
      HEAP32[$404 >> 2] = $406;
      $407 = HEAP8[$406 >> 0] | 0;
      $yych = $407;
      $408 = $yych;
      $409 = $408 & 255;
      $410 = ($409 | 0) <= 47;
      if ($410) {
       label = 61;
       break L4;
      }
      $411 = $yych;
      $412 = $411 & 255;
      $413 = ($412 | 0) <= 57;
      if (!$413) {
       label = 61;
       break L4;
      }
      while (1) {
       $yyaccept = 1;
       $458 = $2 + 28 | 0;
       $459 = HEAP32[$458 >> 2] | 0;
       $460 = $459 + 1 | 0;
       HEAP32[$458 >> 2] = $460;
       $461 = $2 + 24 | 0;
       HEAP32[$461 >> 2] = $460;
       $462 = $2 + 32 | 0;
       $463 = HEAP32[$462 >> 2] | 0;
       $464 = $2 + 28 | 0;
       $465 = HEAP32[$464 >> 2] | 0;
       $466 = $463;
       $467 = $465;
       $468 = $466 - $467 | 0;
       $469 = ($468 | 0) < 3;
       if ($469) {
        __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
       }
       $470 = $2 + 28 | 0;
       $471 = HEAP32[$470 >> 2] | 0;
       $472 = HEAP8[$471 >> 0] | 0;
       $yych = $472;
       $473 = $yych;
       $474 = $473 & 255;
       $475 = ($474 | 0) <= 68;
       $476 = $yych;
       $477 = $476 & 255;
       if (!$475) {
        break;
       }
       $478 = ($477 | 0) <= 47;
       if ($478) {
        label = 51;
        break L4;
       }
       $479 = $yych;
       $480 = $479 & 255;
       $481 = ($480 | 0) <= 57;
       if (!$481) {
        label = 51;
        break L4;
       }
      }
      $482 = ($477 | 0) <= 69;
      if ($482) {
       label = 121;
       continue;
      }
      $483 = $yych;
      $484 = $483 & 255;
      $485 = ($484 | 0) == 101;
      if ($485) {
       label = 121;
       continue;
      } else {
       label = 51;
       break L4;
      }
     } else if ((label | 0) == 121) {
      label = 0;
      $414 = $2 + 28 | 0;
      $415 = HEAP32[$414 >> 2] | 0;
      $416 = $415 + 1 | 0;
      HEAP32[$414 >> 2] = $416;
      $417 = HEAP8[$416 >> 0] | 0;
      $yych = $417;
      $418 = $yych;
      $419 = $418 & 255;
      $420 = ($419 | 0) <= 44;
      $421 = $yych;
      $422 = $421 & 255;
      if ($420) {
       label = 122;
       break;
      } else {
       label = 123;
       break;
      }
     }
    }
    if ((label | 0) == 122) {
     $423 = ($422 | 0) != 43;
     if ($423) {
      label = 61;
      break;
     } else {
      label = 126;
     }
    } else if ((label | 0) == 123) {
     $424 = ($422 | 0) <= 45;
     if ($424) {
      label = 126;
     } else {
      $425 = $yych;
      $426 = $425 & 255;
      $427 = ($426 | 0) <= 47;
      if ($427) {
       label = 61;
       break;
      }
      $428 = $yych;
      $429 = $428 & 255;
      $430 = ($429 | 0) <= 57;
      if (!$430) {
       label = 61;
       break;
      }
     }
    }
    if ((label | 0) == 126) {
     $431 = $2 + 28 | 0;
     $432 = HEAP32[$431 >> 2] | 0;
     $433 = $432 + 1 | 0;
     HEAP32[$431 >> 2] = $433;
     $434 = HEAP8[$433 >> 0] | 0;
     $yych = $434;
     $435 = $yych;
     $436 = $435 & 255;
     $437 = ($436 | 0) <= 47;
     if ($437) {
      label = 61;
      break;
     }
     $438 = $yych;
     $439 = $438 & 255;
     $440 = ($439 | 0) >= 58;
     if ($440) {
      label = 61;
      break;
     }
    }
    while (1) {
     $441 = $2 + 28 | 0;
     $442 = HEAP32[$441 >> 2] | 0;
     $443 = $442 + 1 | 0;
     HEAP32[$441 >> 2] = $443;
     $444 = $2 + 32 | 0;
     $445 = HEAP32[$444 >> 2] | 0;
     $446 = $2 + 28 | 0;
     $447 = HEAP32[$446 >> 2] | 0;
     $448 = $445 >>> 0 <= $447 >>> 0;
     if ($448) {
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
     }
     $449 = $2 + 28 | 0;
     $450 = HEAP32[$449 >> 2] | 0;
     $451 = HEAP8[$450 >> 0] | 0;
     $yych = $451;
     $452 = $yych;
     $453 = $452 & 255;
     $454 = ($453 | 0) <= 47;
     if ($454) {
      label = 51;
      break L4;
     }
     $455 = $yych;
     $456 = $455 & 255;
     $457 = ($456 | 0) <= 57;
     if (!$457) {
      label = 51;
      break L4;
     }
    }
   }
   $43 = ($42 | 0) == 34;
   if (!$43) {
    $44 = $yych;
    $45 = $44 & 255;
    $46 = ($45 | 0) <= 43;
    if ($46) {
     label = 54;
     break;
    }
    $122 = $2 + 28 | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = $123 + 1 | 0;
    HEAP32[$122 >> 2] = $124;
    $0 = 11;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
   $yyaccept = 0;
   $175 = $2 + 28 | 0;
   $176 = HEAP32[$175 >> 2] | 0;
   $177 = $176 + 1 | 0;
   HEAP32[$175 >> 2] = $177;
   $178 = $2 + 24 | 0;
   HEAP32[$178 >> 2] = $177;
   $179 = HEAP8[$177 >> 0] | 0;
   $yych = $179;
   $180 = $yych;
   $181 = $180 & 255;
   $182 = ($181 | 0) <= 15;
   if ($182) {
    label = 41;
   } else {
    L92 : while (1) {
     $201 = $yych;
     $202 = $201 & 255;
     $203 = 0 + $202 | 0;
     $204 = 14219 + $203 | 0;
     $205 = HEAP8[$204 >> 0] | 0;
     $206 = $205 & 255;
     $207 = $206 & 64;
     $208 = ($207 | 0) != 0;
     do {
      if (!$208) {
       $209 = $yych;
       $210 = $209 & 255;
       $211 = ($210 | 0) <= 15;
       if ($211) {
        label = 61;
        break L4;
       }
       $212 = $yych;
       $213 = $212 & 255;
       $214 = ($213 | 0) <= 34;
       $215 = $2 + 28 | 0;
       $216 = HEAP32[$215 >> 2] | 0;
       $217 = $216 + 1 | 0;
       HEAP32[$215 >> 2] = $217;
       if ($214) {
        break L92;
       }
       $223 = $2 + 32 | 0;
       $224 = HEAP32[$223 >> 2] | 0;
       $225 = $2 + 28 | 0;
       $226 = HEAP32[$225 >> 2] | 0;
       $227 = $224 >>> 0 <= $226 >>> 0;
       if ($227) {
        __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
       }
       $228 = $2 + 28 | 0;
       $229 = HEAP32[$228 >> 2] | 0;
       $230 = HEAP8[$229 >> 0] | 0;
       $yych = $230;
       $231 = $yych;
       $232 = $231 & 255;
       $233 = ($232 | 0) <= 101;
       $234 = $yych;
       $235 = $234 & 255;
       if ($233) {
        $236 = ($235 | 0) <= 47;
        $237 = $yych;
        $238 = $237 & 255;
        if ($236) {
         $239 = ($238 | 0) == 34;
         if ($239) {
          break;
         }
         $240 = $yych;
         $241 = $240 & 255;
         $242 = ($241 | 0) <= 46;
         if ($242) {
          label = 61;
          break L4;
         } else {
          break;
         }
        }
        $243 = ($238 | 0) <= 92;
        $244 = $yych;
        $245 = $244 & 255;
        if ($243) {
         $246 = ($245 | 0) <= 91;
         if ($246) {
          label = 61;
          break L4;
         } else {
          break;
         }
        } else {
         $247 = ($245 | 0) == 98;
         if ($247) {
          break;
         } else {
          label = 61;
          break L4;
         }
        }
       }
       $248 = ($235 | 0) <= 113;
       $249 = $yych;
       $250 = $249 & 255;
       if ($248) {
        $251 = ($250 | 0) <= 102;
        if ($251) {
         break;
        }
        $252 = $yych;
        $253 = $252 & 255;
        $254 = ($253 | 0) == 110;
        if ($254) {
         break;
        } else {
         label = 61;
         break L4;
        }
       }
       $255 = ($250 | 0) <= 115;
       $256 = $yych;
       $257 = $256 & 255;
       if ($255) {
        $258 = ($257 | 0) <= 114;
        if ($258) {
         break;
        } else {
         label = 61;
         break L4;
        }
       }
       $259 = ($257 | 0) <= 116;
       if (!$259) {
        $260 = $yych;
        $261 = $260 & 255;
        $262 = ($261 | 0) <= 117;
        if (!$262) {
         label = 61;
         break L4;
        }
        $263 = $2 + 28 | 0;
        $264 = HEAP32[$263 >> 2] | 0;
        $265 = $264 + 1 | 0;
        HEAP32[$263 >> 2] = $265;
        $266 = $2 + 32 | 0;
        $267 = HEAP32[$266 >> 2] | 0;
        $268 = $2 + 28 | 0;
        $269 = HEAP32[$268 >> 2] | 0;
        $270 = $267 >>> 0 <= $269 >>> 0;
        if ($270) {
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
        }
        $271 = $2 + 28 | 0;
        $272 = HEAP32[$271 >> 2] | 0;
        $273 = HEAP8[$272 >> 0] | 0;
        $yych = $273;
        $274 = $yych;
        $275 = $274 & 255;
        $276 = ($275 | 0) <= 64;
        $277 = $yych;
        $278 = $277 & 255;
        do {
         if ($276) {
          $279 = ($278 | 0) <= 47;
          if ($279) {
           label = 61;
           break L4;
          }
          $280 = $yych;
          $281 = $280 & 255;
          $282 = ($281 | 0) >= 58;
          if ($282) {
           label = 61;
           break L4;
          }
         } else {
          $283 = ($278 | 0) <= 70;
          if ($283) {
           break;
          }
          $284 = $yych;
          $285 = $284 & 255;
          $286 = ($285 | 0) <= 96;
          if ($286) {
           label = 61;
           break L4;
          }
          $287 = $yych;
          $288 = $287 & 255;
          $289 = ($288 | 0) >= 103;
          if ($289) {
           label = 61;
           break L4;
          }
         }
        } while (0);
        $290 = $2 + 28 | 0;
        $291 = HEAP32[$290 >> 2] | 0;
        $292 = $291 + 1 | 0;
        HEAP32[$290 >> 2] = $292;
        $293 = $2 + 32 | 0;
        $294 = HEAP32[$293 >> 2] | 0;
        $295 = $2 + 28 | 0;
        $296 = HEAP32[$295 >> 2] | 0;
        $297 = $294 >>> 0 <= $296 >>> 0;
        if ($297) {
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
        }
        $298 = $2 + 28 | 0;
        $299 = HEAP32[$298 >> 2] | 0;
        $300 = HEAP8[$299 >> 0] | 0;
        $yych = $300;
        $301 = $yych;
        $302 = $301 & 255;
        $303 = ($302 | 0) <= 64;
        $304 = $yych;
        $305 = $304 & 255;
        do {
         if ($303) {
          $306 = ($305 | 0) <= 47;
          if ($306) {
           label = 61;
           break L4;
          }
          $307 = $yych;
          $308 = $307 & 255;
          $309 = ($308 | 0) >= 58;
          if ($309) {
           label = 61;
           break L4;
          }
         } else {
          $310 = ($305 | 0) <= 70;
          if ($310) {
           break;
          }
          $311 = $yych;
          $312 = $311 & 255;
          $313 = ($312 | 0) <= 96;
          if ($313) {
           label = 61;
           break L4;
          }
          $314 = $yych;
          $315 = $314 & 255;
          $316 = ($315 | 0) >= 103;
          if ($316) {
           label = 61;
           break L4;
          }
         }
        } while (0);
        $317 = $2 + 28 | 0;
        $318 = HEAP32[$317 >> 2] | 0;
        $319 = $318 + 1 | 0;
        HEAP32[$317 >> 2] = $319;
        $320 = $2 + 32 | 0;
        $321 = HEAP32[$320 >> 2] | 0;
        $322 = $2 + 28 | 0;
        $323 = HEAP32[$322 >> 2] | 0;
        $324 = $321 >>> 0 <= $323 >>> 0;
        if ($324) {
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
        }
        $325 = $2 + 28 | 0;
        $326 = HEAP32[$325 >> 2] | 0;
        $327 = HEAP8[$326 >> 0] | 0;
        $yych = $327;
        $328 = $yych;
        $329 = $328 & 255;
        $330 = ($329 | 0) <= 64;
        $331 = $yych;
        $332 = $331 & 255;
        do {
         if ($330) {
          $333 = ($332 | 0) <= 47;
          if ($333) {
           label = 61;
           break L4;
          }
          $334 = $yych;
          $335 = $334 & 255;
          $336 = ($335 | 0) >= 58;
          if ($336) {
           label = 61;
           break L4;
          }
         } else {
          $337 = ($332 | 0) <= 70;
          if ($337) {
           break;
          }
          $338 = $yych;
          $339 = $338 & 255;
          $340 = ($339 | 0) <= 96;
          if ($340) {
           label = 61;
           break L4;
          }
          $341 = $yych;
          $342 = $341 & 255;
          $343 = ($342 | 0) >= 103;
          if ($343) {
           label = 61;
           break L4;
          }
         }
        } while (0);
        $344 = $2 + 28 | 0;
        $345 = HEAP32[$344 >> 2] | 0;
        $346 = $345 + 1 | 0;
        HEAP32[$344 >> 2] = $346;
        $347 = $2 + 32 | 0;
        $348 = HEAP32[$347 >> 2] | 0;
        $349 = $2 + 28 | 0;
        $350 = HEAP32[$349 >> 2] | 0;
        $351 = $348 >>> 0 <= $350 >>> 0;
        if ($351) {
         __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
        }
        $352 = $2 + 28 | 0;
        $353 = HEAP32[$352 >> 2] | 0;
        $354 = HEAP8[$353 >> 0] | 0;
        $yych = $354;
        $355 = $yych;
        $356 = $355 & 255;
        $357 = ($356 | 0) <= 64;
        $358 = $yych;
        $359 = $358 & 255;
        if ($357) {
         $360 = ($359 | 0) <= 47;
         if ($360) {
          label = 61;
          break L4;
         }
         $361 = $yych;
         $362 = $361 & 255;
         $363 = ($362 | 0) <= 57;
         if ($363) {
          break;
         } else {
          label = 61;
          break L4;
         }
        }
        $364 = ($359 | 0) <= 70;
        if ($364) {
         break;
        }
        $365 = $yych;
        $366 = $365 & 255;
        $367 = ($366 | 0) <= 96;
        if ($367) {
         label = 61;
         break L4;
        }
        $368 = $yych;
        $369 = $368 & 255;
        $370 = ($369 | 0) <= 102;
        if (!$370) {
         label = 61;
         break L4;
        }
       }
      }
     } while (0);
     $190 = $2 + 28 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     $192 = $191 + 1 | 0;
     HEAP32[$190 >> 2] = $192;
     $193 = $2 + 32 | 0;
     $194 = HEAP32[$193 >> 2] | 0;
     $195 = $2 + 28 | 0;
     $196 = HEAP32[$195 >> 2] | 0;
     $197 = $194 >>> 0 <= $196 >>> 0;
     if ($197) {
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($2), asyncState ? abort(-12) | 0 : 0;
     }
     $198 = $2 + 28 | 0;
     $199 = HEAP32[$198 >> 2] | 0;
     $200 = HEAP8[$199 >> 0] | 0;
     $yych = $200;
    }
    $0 = 4;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
  } else {
   $59 = ($22 | 0) <= 109;
   $60 = $yych;
   $61 = $60 & 255;
   if ($59) {
    $62 = ($61 | 0) <= 92;
    $63 = $yych;
    $64 = $63 & 255;
    if ($62) {
     $65 = ($64 | 0) <= 58;
     if ($65) {
      $125 = $2 + 28 | 0;
      $126 = HEAP32[$125 >> 2] | 0;
      $127 = $126 + 1 | 0;
      HEAP32[$125 >> 2] = $127;
      $0 = 10;
      $559 = $0;
      STACKTOP = sp;
      return $559 | 0;
     }
     $66 = $yych;
     $67 = $66 & 255;
     $68 = ($67 | 0) == 91;
     if (!$68) {
      label = 54;
      break;
     }
     $110 = $2 + 28 | 0;
     $111 = HEAP32[$110 >> 2] | 0;
     $112 = $111 + 1 | 0;
     HEAP32[$110 >> 2] = $112;
     $0 = 6;
     $559 = $0;
     STACKTOP = sp;
     return $559 | 0;
    }
    $69 = ($64 | 0) <= 93;
    if ($69) {
     $113 = $2 + 28 | 0;
     $114 = HEAP32[$113 >> 2] | 0;
     $115 = $114 + 1 | 0;
     HEAP32[$113 >> 2] = $115;
     $0 = 8;
     $559 = $0;
     STACKTOP = sp;
     return $559 | 0;
    }
    $70 = $yych;
    $71 = $70 & 255;
    $72 = ($71 | 0) == 102;
    if (!$72) {
     label = 54;
     break;
    }
    $yyaccept = 0;
    $144 = $2 + 28 | 0;
    $145 = HEAP32[$144 >> 2] | 0;
    $146 = $145 + 1 | 0;
    HEAP32[$144 >> 2] = $146;
    $147 = $2 + 24 | 0;
    HEAP32[$147 >> 2] = $146;
    $148 = HEAP8[$146 >> 0] | 0;
    $yych = $148;
    $149 = $yych;
    $150 = $149 & 255;
    $151 = ($150 | 0) == 97;
    if (!$151) {
     label = 41;
     break;
    }
    $501 = $2 + 28 | 0;
    $502 = HEAP32[$501 >> 2] | 0;
    $503 = $502 + 1 | 0;
    HEAP32[$501 >> 2] = $503;
    $504 = HEAP8[$503 >> 0] | 0;
    $yych = $504;
    $505 = $yych;
    $506 = $505 & 255;
    $507 = ($506 | 0) != 108;
    if ($507) {
     label = 61;
     break;
    }
    $508 = $2 + 28 | 0;
    $509 = HEAP32[$508 >> 2] | 0;
    $510 = $509 + 1 | 0;
    HEAP32[$508 >> 2] = $510;
    $511 = HEAP8[$510 >> 0] | 0;
    $yych = $511;
    $512 = $yych;
    $513 = $512 & 255;
    $514 = ($513 | 0) != 115;
    if ($514) {
     label = 61;
     break;
    }
    $515 = $2 + 28 | 0;
    $516 = HEAP32[$515 >> 2] | 0;
    $517 = $516 + 1 | 0;
    HEAP32[$515 >> 2] = $517;
    $518 = HEAP8[$517 >> 0] | 0;
    $yych = $518;
    $519 = $yych;
    $520 = $519 & 255;
    $521 = ($520 | 0) != 101;
    if ($521) {
     label = 61;
     break;
    }
    $522 = $2 + 28 | 0;
    $523 = HEAP32[$522 >> 2] | 0;
    $524 = $523 + 1 | 0;
    HEAP32[$522 >> 2] = $524;
    $0 = 2;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
   $73 = ($61 | 0) <= 122;
   $74 = $yych;
   $75 = $74 & 255;
   if (!$73) {
    $80 = ($75 | 0) <= 123;
    if ($80) {
     $116 = $2 + 28 | 0;
     $117 = HEAP32[$116 >> 2] | 0;
     $118 = $117 + 1 | 0;
     HEAP32[$116 >> 2] = $118;
     $0 = 7;
     $559 = $0;
     STACKTOP = sp;
     return $559 | 0;
    }
    $81 = $yych;
    $82 = $81 & 255;
    $83 = ($82 | 0) == 125;
    if (!$83) {
     label = 54;
     break;
    }
    $119 = $2 + 28 | 0;
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = $120 + 1 | 0;
    HEAP32[$119 >> 2] = $121;
    $0 = 9;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
   $76 = ($75 | 0) <= 110;
   if ($76) {
    $yyaccept = 0;
    $128 = $2 + 28 | 0;
    $129 = HEAP32[$128 >> 2] | 0;
    $130 = $129 + 1 | 0;
    HEAP32[$128 >> 2] = $130;
    $131 = $2 + 24 | 0;
    HEAP32[$131 >> 2] = $130;
    $132 = HEAP8[$130 >> 0] | 0;
    $yych = $132;
    $133 = $yych;
    $134 = $133 & 255;
    $135 = ($134 | 0) == 117;
    if (!$135) {
     label = 41;
     break;
    }
    $542 = $2 + 28 | 0;
    $543 = HEAP32[$542 >> 2] | 0;
    $544 = $543 + 1 | 0;
    HEAP32[$542 >> 2] = $544;
    $545 = HEAP8[$544 >> 0] | 0;
    $yych = $545;
    $546 = $yych;
    $547 = $546 & 255;
    $548 = ($547 | 0) != 108;
    if ($548) {
     label = 61;
     break;
    }
    $549 = $2 + 28 | 0;
    $550 = HEAP32[$549 >> 2] | 0;
    $551 = $550 + 1 | 0;
    HEAP32[$549 >> 2] = $551;
    $552 = HEAP8[$551 >> 0] | 0;
    $yych = $552;
    $553 = $yych;
    $554 = $553 & 255;
    $555 = ($554 | 0) != 108;
    if ($555) {
     label = 61;
     break;
    }
    $556 = $2 + 28 | 0;
    $557 = HEAP32[$556 >> 2] | 0;
    $558 = $557 + 1 | 0;
    HEAP32[$556 >> 2] = $558;
    $0 = 3;
    $559 = $0;
    STACKTOP = sp;
    return $559 | 0;
   }
   $77 = $yych;
   $78 = $77 & 255;
   $79 = ($78 | 0) == 116;
   if ($79) {
    $yyaccept = 0;
    $136 = $2 + 28 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = $137 + 1 | 0;
    HEAP32[$136 >> 2] = $138;
    $139 = $2 + 24 | 0;
    HEAP32[$139 >> 2] = $138;
    $140 = HEAP8[$138 >> 0] | 0;
    $yych = $140;
    $141 = $yych;
    $142 = $141 & 255;
    $143 = ($142 | 0) == 114;
    if ($143) {
     $525 = $2 + 28 | 0;
     $526 = HEAP32[$525 >> 2] | 0;
     $527 = $526 + 1 | 0;
     HEAP32[$525 >> 2] = $527;
     $528 = HEAP8[$527 >> 0] | 0;
     $yych = $528;
     $529 = $yych;
     $530 = $529 & 255;
     $531 = ($530 | 0) != 117;
     if ($531) {
      label = 61;
     } else {
      $532 = $2 + 28 | 0;
      $533 = HEAP32[$532 >> 2] | 0;
      $534 = $533 + 1 | 0;
      HEAP32[$532 >> 2] = $534;
      $535 = HEAP8[$534 >> 0] | 0;
      $yych = $535;
      $536 = $yych;
      $537 = $536 & 255;
      $538 = ($537 | 0) != 101;
      if ($538) {
       label = 61;
      } else {
       $539 = $2 + 28 | 0;
       $540 = HEAP32[$539 >> 2] | 0;
       $541 = $540 + 1 | 0;
       HEAP32[$539 >> 2] = $541;
       $0 = 1;
       $559 = $0;
       STACKTOP = sp;
       return $559 | 0;
      }
     }
    } else {
     label = 41;
    }
   } else {
    label = 54;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  $186 = $2 + 28 | 0;
  $187 = HEAP32[$186 >> 2] | 0;
  $188 = $187 + 1 | 0;
  HEAP32[$186 >> 2] = $188;
  $189 = HEAP8[$188 >> 0] | 0;
  $yych = $189;
  label = 41;
 } else if ((label | 0) == 61) {
  $218 = $2 + 24 | 0;
  $219 = HEAP32[$218 >> 2] | 0;
  $220 = $2 + 28 | 0;
  HEAP32[$220 >> 2] = $219;
  $221 = $yyaccept;
  $222 = ($221 | 0) == 0;
  if ($222) {
   label = 41;
  } else {
   label = 51;
  }
 }
 if ((label | 0) == 41) {
  $0 = 12;
  $559 = $0;
  STACKTOP = sp;
  return $559 | 0;
 } else if ((label | 0) == 51) {
  $0 = 5;
  $559 = $0;
  STACKTOP = sp;
  return $559 | 0;
 }
 return 0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpERNS1_13basic_ostreamIcS6_EEbjj($this, $o, $pretty_print, $indent_step, $current_indent) {
 $this = $this | 0;
 $o = $o | 0;
 $pretty_print = $pretty_print | 0;
 $indent_step = $indent_step | 0;
 $current_indent = $current_indent | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $__r$i$i = 0, $i = 0, $i1 = 0, $new_indent = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $16 = sp + 724 | 0;
 $19 = sp + 712 | 0;
 $21 = sp + 704 | 0;
 $37 = sp + 644 | 0;
 $40 = sp + 632 | 0;
 $42 = sp + 624 | 0;
 $46 = sp + 608 | 0;
 $49 = sp + 596 | 0;
 $51 = sp + 588 | 0;
 $101 = sp + 16 | 0;
 $105 = sp + 376 | 0;
 $107 = sp + 368 | 0;
 $109 = sp + 360 | 0;
 $110 = sp + 356 | 0;
 $120 = sp + 316 | 0;
 $127 = sp + 8 | 0;
 $135 = sp + 256 | 0;
 $137 = sp + 248 | 0;
 $139 = sp + 240 | 0;
 $140 = sp + 236 | 0;
 $143 = sp;
 $147 = sp + 212 | 0;
 $149 = sp + 204 | 0;
 $151 = sp + 196 | 0;
 $152 = sp + 192 | 0;
 $i = sp + 148 | 0;
 $163 = sp + 144 | 0;
 $164 = sp + 140 | 0;
 $165 = sp + 128 | 0;
 $168 = sp + 108 | 0;
 $169 = sp + 96 | 0;
 $170 = sp + 84 | 0;
 $i1 = sp + 80 | 0;
 $171 = sp + 76 | 0;
 $172 = sp + 72 | 0;
 $173 = sp + 60 | 0;
 $174 = sp + 48 | 0;
 $175 = sp + 36 | 0;
 $176 = sp + 24 | 0;
 $177 = sp + 20 | 0;
 $158 = $this;
 $159 = $o;
 $178 = $pretty_print & 1;
 $160 = $178;
 $161 = $indent_step;
 $162 = $current_indent;
 $179 = $158;
 $180 = $162;
 $new_indent = $180;
 $181 = HEAP8[$179 >> 0] | 0;
 switch ($181 << 24 >> 24) {
 case 1:
  {
   $182 = $179 + 8 | 0;
   $183 = HEAP32[$182 >> 2] | 0;
   $157 = $183;
   $184 = $157;
   $156 = $184;
   $185 = $156;
   $186 = $185 + 8 | 0;
   $155 = $186;
   $187 = $155;
   $154 = $187;
   $188 = $154;
   $189 = HEAP32[$188 >> 2] | 0;
   $190 = ($189 | 0) == 0;
   $191 = $159;
   if ($190) {
    (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($191, 14168) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    STACKTOP = sp;
    return;
   }
   (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($191, 14171) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $192 = $160;
   $193 = $192 & 1;
   if ($193) {
    $194 = $161;
    $195 = $new_indent;
    $196 = $195 + $194 | 0;
    $new_indent = $196;
    $197 = $159;
    (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($197, 14173) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
   $198 = $179 + 8 | 0;
   $199 = HEAP32[$198 >> 2] | 0;
   $153 = $199;
   $200 = $153;
   $150 = $200;
   $201 = $150;
   $148 = $201;
   $202 = $148;
   $146 = $202;
   $203 = $146;
   $204 = HEAP32[$203 >> 2] | 0;
   $144 = $147;
   $145 = $204;
   $205 = $144;
   $206 = $145;
   HEAP32[$205 >> 2] = $206;
   $207 = HEAP32[$147 >> 2] | 0;
   HEAP32[$151 >> 2] = $207;
   HEAP8[$143 >> 0] = HEAP8[$151 >> 0] | 0;
   HEAP8[$143 + 1 >> 0] = HEAP8[$151 + 1 >> 0] | 0;
   HEAP8[$143 + 2 >> 0] = HEAP8[$151 + 2 >> 0] | 0;
   HEAP8[$143 + 3 >> 0] = HEAP8[$151 + 3 >> 0] | 0;
   $142 = $149;
   $208 = $142;
   HEAP32[$208 >> 2] = HEAP32[$143 >> 2] | 0;
   $209 = HEAP32[$149 >> 2] | 0;
   HEAP32[$152 >> 2] = $209;
   $210 = HEAP32[$152 >> 2] | 0;
   HEAP32[$i >> 2] = $210;
   while (1) {
    $211 = $179 + 8 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    $141 = $212;
    $213 = $141;
    $138 = $213;
    $214 = $138;
    $136 = $214;
    $215 = $136;
    $134 = $215;
    $216 = $134;
    $217 = $216 + 4 | 0;
    $133 = $217;
    $218 = $133;
    $132 = $218;
    $219 = $132;
    $131 = $219;
    $220 = $131;
    $130 = $220;
    $221 = $130;
    $128 = $135;
    $129 = $221;
    $222 = $128;
    $223 = $129;
    HEAP32[$222 >> 2] = $223;
    $224 = HEAP32[$135 >> 2] | 0;
    HEAP32[$139 >> 2] = $224;
    HEAP8[$127 >> 0] = HEAP8[$139 >> 0] | 0;
    HEAP8[$127 + 1 >> 0] = HEAP8[$139 + 1 >> 0] | 0;
    HEAP8[$127 + 2 >> 0] = HEAP8[$139 + 2 >> 0] | 0;
    HEAP8[$127 + 3 >> 0] = HEAP8[$139 + 3 >> 0] | 0;
    $126 = $137;
    $225 = $126;
    HEAP32[$225 >> 2] = HEAP32[$127 >> 2] | 0;
    $226 = HEAP32[$137 >> 2] | 0;
    HEAP32[$140 >> 2] = $226;
    $227 = HEAP32[$140 >> 2] | 0;
    HEAP32[$163 >> 2] = $227;
    $116 = $i;
    $117 = $163;
    $228 = $116;
    $229 = $117;
    $114 = $228;
    $115 = $229;
    $230 = $114;
    $231 = $115;
    $112 = $230;
    $113 = $231;
    $232 = $112;
    $233 = HEAP32[$232 >> 2] | 0;
    $234 = $113;
    $235 = HEAP32[$234 >> 2] | 0;
    $236 = ($233 | 0) == ($235 | 0);
    $237 = $236 ^ 1;
    if (!$237) {
     label = 19;
     break;
    }
    $238 = $179 + 8 | 0;
    $239 = HEAP32[$238 >> 2] | 0;
    $111 = $239;
    $240 = $111;
    $108 = $240;
    $241 = $108;
    $106 = $241;
    $242 = $106;
    $104 = $242;
    $243 = $104;
    $244 = HEAP32[$243 >> 2] | 0;
    $102 = $105;
    $103 = $244;
    $245 = $102;
    $246 = $103;
    HEAP32[$245 >> 2] = $246;
    $247 = HEAP32[$105 >> 2] | 0;
    HEAP32[$109 >> 2] = $247;
    HEAP8[$101 >> 0] = HEAP8[$109 >> 0] | 0;
    HEAP8[$101 + 1 >> 0] = HEAP8[$109 + 1 >> 0] | 0;
    HEAP8[$101 + 2 >> 0] = HEAP8[$109 + 2 >> 0] | 0;
    HEAP8[$101 + 3 >> 0] = HEAP8[$109 + 3 >> 0] | 0;
    $100 = $107;
    $248 = $100;
    HEAP32[$248 >> 2] = HEAP32[$101 >> 2] | 0;
    $249 = HEAP32[$107 >> 2] | 0;
    HEAP32[$110 >> 2] = $249;
    $250 = HEAP32[$110 >> 2] | 0;
    HEAP32[$164 >> 2] = $250;
    $98 = $i;
    $99 = $164;
    $251 = $98;
    $252 = $99;
    $96 = $251;
    $97 = $252;
    $253 = $96;
    $254 = $97;
    $94 = $253;
    $95 = $254;
    $255 = $94;
    $256 = HEAP32[$255 >> 2] | 0;
    $257 = $95;
    $258 = HEAP32[$257 >> 2] | 0;
    $259 = ($256 | 0) == ($258 | 0);
    $260 = $259 ^ 1;
    if ($260) {
     $261 = $159;
     $262 = $160;
     $263 = $262 & 1;
     $264 = $263 ? 14175 : 14178;
     (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($261, $264) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    }
    $265 = $159;
    $266 = $new_indent;
    $91 = $165;
    $92 = $266;
    $93 = 32;
    $267 = $91;
    $90 = $267;
    $268 = $90;
    $89 = $268;
    $269 = $89;
    $88 = $269;
    $270 = $92;
    $271 = $93;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($267, $270, $271), asyncState ? abort(-12) | 0 : 0;
    __THREW__ = 0;
    $272 = (tempInt = invoke_iii(403, $265 | 0, $165 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $273 = __THREW__;
    __THREW__ = 0;
    $274 = $273 & 1;
    if ($274) {
     label = 16;
     break;
    }
    __THREW__ = 0;
    $275 = (tempInt = invoke_iii(404, $272 | 0, 14180 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $276 = __THREW__;
    __THREW__ = 0;
    $277 = $276 & 1;
    if ($277) {
     label = 16;
     break;
    }
    $87 = $i;
    $278 = $87;
    $86 = $278;
    $279 = $86;
    $280 = HEAP32[$279 >> 2] | 0;
    $281 = $280 + 16 | 0;
    $85 = $281;
    $282 = $85;
    $84 = $282;
    $283 = $84;
    $83 = $283;
    $284 = $83;
    $82 = $284;
    $285 = $82;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E13escape_stringERKS9_($168, $285), asyncState ? abort(-12) | 0 : 0;
    __THREW__ = 0;
    $286 = (tempInt = invoke_iii(403, $275 | 0, $168 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $287 = __THREW__;
    __THREW__ = 0;
    $288 = $287 & 1;
    if ($288) {
     label = 17;
     break;
    }
    __THREW__ = 0;
    $289 = (tempInt = invoke_iii(404, $286 | 0, 14182 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $290 = __THREW__;
    __THREW__ = 0;
    $291 = $290 & 1;
    if ($291) {
     label = 17;
     break;
    }
    $292 = $160;
    $293 = $292 & 1;
    $294 = $293 ? 14185 : 21619;
    __THREW__ = 0;
    (tempInt = invoke_iii(404, $289 | 0, $294 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $295 = __THREW__;
    __THREW__ = 0;
    $296 = $295 & 1;
    if ($296) {
     label = 17;
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($168), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($165), asyncState ? abort(-12) | 0 : 0;
    $81 = $i;
    $297 = $81;
    $80 = $297;
    $298 = $80;
    $299 = HEAP32[$298 >> 2] | 0;
    $300 = $299 + 16 | 0;
    $79 = $300;
    $301 = $79;
    $78 = $301;
    $302 = $78;
    $77 = $302;
    $303 = $77;
    $76 = $303;
    $304 = $76;
    $305 = $304 + 16 | 0;
    $306 = $159;
    $307 = $160;
    $308 = $307 & 1;
    $309 = $161;
    $310 = $new_indent;
    __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpERNS1_13basic_ostreamIcS6_EEbjj($305, $306, $308, $309, $310), asyncState ? abort(-12) | 0 : 0;
    $70 = $i;
    $311 = $70;
    $69 = $311;
    $312 = $69;
    $313 = HEAP32[$312 >> 2] | 0;
    $314 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($313) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$312 >> 2] = $314;
   }
   if ((label | 0) == 16) {
    $315 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $316 = tempRet0;
    $166 = $315;
    $167 = $316;
   } else if ((label | 0) == 17) {
    $317 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $318 = tempRet0;
    $166 = $317;
    $167 = $318;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($168), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 19) {
    $319 = $160;
    $320 = $319 & 1;
    if ($320) {
     $321 = $161;
     $322 = $new_indent;
     $323 = $322 - $321 | 0;
     $new_indent = $323;
     $324 = $159;
     (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($324, 14173) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    }
    $325 = $159;
    $326 = $new_indent;
    $66 = $170;
    $67 = $326;
    $68 = 32;
    $327 = $66;
    $65 = $327;
    $328 = $65;
    $64 = $328;
    $329 = $64;
    $63 = $329;
    $330 = $67;
    $331 = $68;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($327, $330, $331), asyncState ? abort(-12) | 0 : 0;
    $61 = $170;
    $62 = 14187;
    $332 = $61;
    $333 = $62;
    __THREW__ = 0;
    $334 = (tempInt = invoke_iii(402, $332 | 0, $333 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $335 = __THREW__;
    __THREW__ = 0;
    $336 = $335 & 1;
    do {
     if ($336) {
      $354 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $355 = tempRet0;
      $166 = $354;
      $167 = $355;
     } else {
      $60 = $334;
      $337 = $60;
      $58 = $169;
      $59 = $337;
      $338 = $58;
      $339 = $59;
      $57 = $339;
      $340 = $57;
      HEAP32[$338 >> 2] = HEAP32[$340 >> 2] | 0;
      HEAP32[$338 + 4 >> 2] = HEAP32[$340 + 4 >> 2] | 0;
      HEAP32[$338 + 8 >> 2] = HEAP32[$340 + 8 >> 2] | 0;
      $341 = $59;
      $56 = $341;
      $342 = $56;
      $55 = $342;
      $343 = $55;
      $54 = $343;
      $344 = $54;
      $__a$i$i$i = $344;
      $__i$i$i$i = 0;
      while (1) {
       $345 = $__i$i$i$i;
       $346 = $345 >>> 0 < 3;
       if (!$346) {
        break;
       }
       $347 = $__i$i$i$i;
       $348 = $__a$i$i$i;
       $349 = $348 + ($347 << 2) | 0;
       HEAP32[$349 >> 2] = 0;
       $350 = $__i$i$i$i;
       $351 = $350 + 1 | 0;
       $__i$i$i$i = $351;
      }
      __THREW__ = 0;
      (tempInt = invoke_iii(403, $325 | 0, $169 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $352 = __THREW__;
      __THREW__ = 0;
      $353 = $352 & 1;
      if ($353) {
       $356 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $357 = tempRet0;
       $166 = $356;
       $167 = $357;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($169), asyncState ? abort(-12) | 0 : 0;
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($169), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($170), asyncState ? abort(-12) | 0 : 0;
      STACKTOP = sp;
      return;
     }
    } while (0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($170), asyncState ? abort(-12) | 0 : 0;
    $527 = $166;
    $528 = $167;
    ___resumeException($527 | 0), asyncState ? abort(-12) | 0 : 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($165), asyncState ? abort(-12) | 0 : 0;
   $527 = $166;
   $528 = $167;
   ___resumeException($527 | 0), asyncState ? abort(-12) | 0 : 0;
   break;
  }
 case 2:
  {
   $358 = $179 + 8 | 0;
   $359 = HEAP32[$358 >> 2] | 0;
   $53 = $359;
   $360 = $53;
   $361 = HEAP32[$360 >> 2] | 0;
   $362 = $360 + 4 | 0;
   $363 = HEAP32[$362 >> 2] | 0;
   $364 = ($361 | 0) == ($363 | 0);
   $365 = $159;
   if ($364) {
    (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($365, 14189) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    STACKTOP = sp;
    return;
   }
   (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($365, 14192) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $366 = $160;
   $367 = $366 & 1;
   if ($367) {
    $368 = $161;
    $369 = $new_indent;
    $370 = $369 + $368 | 0;
    $new_indent = $370;
    $371 = $159;
    (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($371, 14173) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
   $372 = $179 + 8 | 0;
   $373 = HEAP32[$372 >> 2] | 0;
   $52 = $373;
   $374 = $52;
   $50 = $374;
   $375 = $50;
   $376 = HEAP32[$375 >> 2] | 0;
   $47 = $375;
   $48 = $376;
   $377 = $48;
   $44 = $46;
   $45 = $377;
   $378 = $44;
   $379 = $45;
   HEAP32[$378 >> 2] = $379;
   $380 = HEAP32[$46 >> 2] | 0;
   HEAP32[$49 >> 2] = $380;
   $381 = HEAP32[$49 >> 2] | 0;
   HEAP32[$51 >> 2] = $381;
   $382 = HEAP32[$51 >> 2] | 0;
   HEAP32[$i1 >> 2] = $382;
   while (1) {
    $383 = $179 + 8 | 0;
    $384 = HEAP32[$383 >> 2] | 0;
    $43 = $384;
    $385 = $43;
    $41 = $385;
    $386 = $41;
    $387 = $386 + 4 | 0;
    $388 = HEAP32[$387 >> 2] | 0;
    $38 = $386;
    $39 = $388;
    $389 = $39;
    $35 = $37;
    $36 = $389;
    $390 = $35;
    $391 = $36;
    HEAP32[$390 >> 2] = $391;
    $392 = HEAP32[$37 >> 2] | 0;
    HEAP32[$40 >> 2] = $392;
    $393 = HEAP32[$40 >> 2] | 0;
    HEAP32[$42 >> 2] = $393;
    $394 = HEAP32[$42 >> 2] | 0;
    HEAP32[$171 >> 2] = $394;
    $33 = $i1;
    $34 = $171;
    $395 = $33;
    $396 = $34;
    $31 = $395;
    $32 = $396;
    $397 = $31;
    $30 = $397;
    $398 = $30;
    $399 = HEAP32[$398 >> 2] | 0;
    $400 = $32;
    $29 = $400;
    $401 = $29;
    $402 = HEAP32[$401 >> 2] | 0;
    $403 = ($399 | 0) == ($402 | 0);
    $404 = $403 ^ 1;
    if (!$404) {
     break;
    }
    $405 = $179 + 8 | 0;
    $406 = HEAP32[$405 >> 2] | 0;
    $22 = $406;
    $407 = $22;
    $20 = $407;
    $408 = $20;
    $409 = HEAP32[$408 >> 2] | 0;
    $17 = $408;
    $18 = $409;
    $410 = $18;
    $14 = $16;
    $15 = $410;
    $411 = $14;
    $412 = $15;
    HEAP32[$411 >> 2] = $412;
    $413 = HEAP32[$16 >> 2] | 0;
    HEAP32[$19 >> 2] = $413;
    $414 = HEAP32[$19 >> 2] | 0;
    HEAP32[$21 >> 2] = $414;
    $415 = HEAP32[$21 >> 2] | 0;
    HEAP32[$172 >> 2] = $415;
    $12 = $i1;
    $13 = $172;
    $416 = $12;
    $417 = $13;
    $10 = $416;
    $11 = $417;
    $418 = $10;
    $9 = $418;
    $419 = $9;
    $420 = HEAP32[$419 >> 2] | 0;
    $421 = $11;
    $8 = $421;
    $422 = $8;
    $423 = HEAP32[$422 >> 2] | 0;
    $424 = ($420 | 0) == ($423 | 0);
    $425 = $424 ^ 1;
    if ($425) {
     $426 = $159;
     $427 = $160;
     $428 = $427 & 1;
     $429 = $428 ? 14175 : 14178;
     (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($426, $429) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    }
    $430 = $159;
    $431 = $new_indent;
    $4 = $173;
    $5 = $431;
    $6 = 32;
    $432 = $4;
    $3 = $432;
    $433 = $3;
    $2 = $433;
    $434 = $2;
    $1 = $434;
    $435 = $5;
    $436 = $6;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($432, $435, $436), asyncState ? abort(-12) | 0 : 0;
    __THREW__ = 0;
    (tempInt = invoke_iii(403, $430 | 0, $173 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $437 = __THREW__;
    __THREW__ = 0;
    $438 = $437 & 1;
    if ($438) {
     label = 40;
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($173), asyncState ? abort(-12) | 0 : 0;
    $0 = $i1;
    $439 = $0;
    $440 = HEAP32[$439 >> 2] | 0;
    $441 = $159;
    $442 = $160;
    $443 = $442 & 1;
    $444 = $161;
    $445 = $new_indent;
    __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpERNS1_13basic_ostreamIcS6_EEbjj($440, $441, $443, $444, $445), asyncState ? abort(-12) | 0 : 0;
    $7 = $i1;
    $446 = $7;
    $447 = HEAP32[$446 >> 2] | 0;
    $448 = $447 + 16 | 0;
    HEAP32[$446 >> 2] = $448;
   }
   if ((label | 0) == 40) {
    $449 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $450 = tempRet0;
    $166 = $449;
    $167 = $450;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($173), asyncState ? abort(-12) | 0 : 0;
    $527 = $166;
    $528 = $167;
    ___resumeException($527 | 0), asyncState ? abort(-12) | 0 : 0;
   }
   $451 = $160;
   $452 = $451 & 1;
   if ($452) {
    $453 = $161;
    $454 = $new_indent;
    $455 = $454 - $453 | 0;
    $new_indent = $455;
    $456 = $159;
    (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($456, 14173) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
   $457 = $159;
   $458 = $new_indent;
   $26 = $174;
   $27 = $458;
   $28 = 32;
   $459 = $26;
   $25 = $459;
   $460 = $25;
   $24 = $460;
   $461 = $24;
   $23 = $461;
   $462 = $27;
   $463 = $28;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($459, $462, $463), asyncState ? abort(-12) | 0 : 0;
   __THREW__ = 0;
   $464 = (tempInt = invoke_iii(403, $457 | 0, $174 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $465 = __THREW__;
   __THREW__ = 0;
   $466 = $465 & 1;
   if (!$466) {
    __THREW__ = 0;
    (tempInt = invoke_iii(404, $464 | 0, 14194 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $467 = __THREW__;
    __THREW__ = 0;
    $468 = $467 & 1;
    if (!$468) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($174), asyncState ? abort(-12) | 0 : 0;
     STACKTOP = sp;
     return;
    }
   }
   $469 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $470 = tempRet0;
   $166 = $469;
   $167 = $470;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($174), asyncState ? abort(-12) | 0 : 0;
   $527 = $166;
   $528 = $167;
   ___resumeException($527 | 0), asyncState ? abort(-12) | 0 : 0;
   break;
  }
 case 3:
  {
   $471 = $159;
   $74 = $175;
   $75 = 14180;
   $472 = $74;
   $73 = $472;
   $473 = $73;
   $72 = $473;
   $474 = $72;
   $71 = $474;
   $475 = $75;
   $476 = $75;
   $477 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($476) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($472, $475, $477), asyncState ? abort(-12) | 0 : 0;
   __THREW__ = 0;
   $478 = (tempInt = invoke_iii(403, $471 | 0, $175 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $479 = __THREW__;
   __THREW__ = 0;
   $480 = $479 & 1;
   if ($480) {
    $488 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $489 = tempRet0;
    $166 = $488;
    $167 = $489;
   } else {
    $481 = $179 + 8 | 0;
    $482 = HEAP32[$481 >> 2] | 0;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E13escape_stringERKS9_($176, $482), asyncState ? abort(-12) | 0 : 0;
    __THREW__ = 0;
    $483 = (tempInt = invoke_iii(403, $478 | 0, $176 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $484 = __THREW__;
    __THREW__ = 0;
    $485 = $484 & 1;
    if (!$485) {
     __THREW__ = 0;
     (tempInt = invoke_iii(404, $483 | 0, 14180 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $486 = __THREW__;
     __THREW__ = 0;
     $487 = $486 & 1;
     if (!$487) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($176), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($175), asyncState ? abort(-12) | 0 : 0;
      STACKTOP = sp;
      return;
     }
    }
    $490 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $491 = tempRet0;
    $166 = $490;
    $167 = $491;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($176), asyncState ? abort(-12) | 0 : 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($175), asyncState ? abort(-12) | 0 : 0;
   $527 = $166;
   $528 = $167;
   ___resumeException($527 | 0), asyncState ? abort(-12) | 0 : 0;
   break;
  }
 case 4:
  {
   $492 = $159;
   $493 = $179 + 8 | 0;
   $494 = HEAP8[$493 >> 0] | 0;
   $495 = $494 & 1;
   $496 = $495 ? 21745 : 21750;
   (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($492, $496) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 5:
  {
   $497 = $159;
   $498 = $179 + 8 | 0;
   $499 = $498;
   $500 = $499;
   $501 = HEAP32[$500 >> 2] | 0;
   $502 = $499 + 4 | 0;
   $503 = $502;
   $504 = HEAP32[$503 >> 2] | 0;
   (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEx($497, $501, $504) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 6:
  {
   $505 = $159;
   $121 = 15;
   $506 = $121;
   $118 = $120;
   $119 = $506;
   $507 = $118;
   $508 = $119;
   HEAP32[$507 >> 2] = $508;
   $509 = HEAP32[$120 >> 2] | 0;
   HEAP32[$177 >> 2] = $509;
   $124 = $505;
   $125 = $177;
   $510 = $124;
   $511 = HEAP32[$510 >> 2] | 0;
   $512 = $511 + -12 | 0;
   $513 = HEAP32[$512 >> 2] | 0;
   $514 = $510 + $513 | 0;
   $515 = $125;
   $516 = HEAP32[$515 >> 2] | 0;
   $122 = $514;
   $123 = $516;
   $517 = $122;
   $518 = $517 + 8 | 0;
   $519 = HEAP32[$518 >> 2] | 0;
   $__r$i$i = $519;
   $520 = $123;
   $521 = $517 + 8 | 0;
   HEAP32[$521 >> 2] = $520;
   $522 = $124;
   $523 = $179 + 8 | 0;
   $524 = +HEAPF64[$523 >> 3];
   (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($522, $524) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 7:
  {
   $525 = $159;
   (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($525, 14196) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $526 = $159;
   (tempInt = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($526, 14208) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10get_stringEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $codepoint = 0, $codepoint2 = 0, $i = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $124 = sp + 576 | 0;
 $127 = sp + 44 | 0;
 $128 = sp + 28 | 0;
 $129 = sp + 16 | 0;
 $130 = sp + 4 | 0;
 $123 = $this;
 $132 = $123;
 $$expand_i1_val = 0;
 HEAP8[$124 >> 0] = $$expand_i1_val;
 $122 = $agg$result;
 $133 = $122;
 $121 = $133;
 $134 = $121;
 $120 = $134;
 $135 = $120;
 $119 = $135;
 $118 = $133;
 $136 = $118;
 $117 = $136;
 $137 = $117;
 $116 = $137;
 $138 = $116;
 $__a$i$i = $138;
 $__i$i$i = 0;
 while (1) {
  $139 = $__i$i$i;
  $140 = $139 >>> 0 < 3;
  if (!$140) {
   break;
  }
  $141 = $__i$i$i;
  $142 = $__a$i$i;
  $143 = $142 + ($141 << 2) | 0;
  HEAP32[$143 >> 2] = 0;
  $144 = $__i$i$i;
  $145 = $144 + 1 | 0;
  $__i$i$i = $145;
 }
 $146 = $132 + 28 | 0;
 $147 = HEAP32[$146 >> 2] | 0;
 $148 = $132 + 20 | 0;
 $149 = HEAP32[$148 >> 2] | 0;
 $150 = $147;
 $151 = $149;
 $152 = $150 - $151 | 0;
 $153 = $152 - 2 | 0;
 __THREW__ = 0;
 invoke_vii(433, $agg$result | 0, $153 | 0), asyncState ? abort(-12) | 0 : 0;
 $154 = __THREW__;
 __THREW__ = 0;
 $155 = $154 & 1;
 L5 : do {
  if (!$155) {
   $156 = $132 + 20 | 0;
   $157 = HEAP32[$156 >> 2] | 0;
   $158 = $157 + 1 | 0;
   $i = $158;
   L7 : while (1) {
    $159 = $i;
    $160 = $132 + 28 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = $161 + -1 | 0;
    $163 = $159 >>> 0 < $162 >>> 0;
    if (!$163) {
     label = 59;
     break;
    }
    $164 = $i;
    $165 = HEAP8[$164 >> 0] | 0;
    $166 = $165 & 255;
    $167 = ($166 | 0) == 92;
    $168 = $i;
    L10 : do {
     if ($167) {
      $169 = $168 + 1 | 0;
      $i = $169;
      $170 = $i;
      $171 = HEAP8[$170 >> 0] | 0;
      $172 = $171 & 255;
      switch ($172 | 0) {
      case 116:
       {
        $86 = $agg$result;
        $87 = 14683;
        $175 = $86;
        $176 = $87;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $175 | 0, $176 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $177 = __THREW__;
        __THREW__ = 0;
        $178 = $177 & 1;
        if ($178) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 98:
       {
        $84 = $agg$result;
        $85 = 14685;
        $179 = $84;
        $180 = $85;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $179 | 0, $180 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $181 = __THREW__;
        __THREW__ = 0;
        $182 = $181 & 1;
        if ($182) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 102:
       {
        $82 = $agg$result;
        $83 = 14687;
        $183 = $82;
        $184 = $83;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $183 | 0, $184 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $185 = __THREW__;
        __THREW__ = 0;
        $186 = $185 & 1;
        if ($186) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 110:
       {
        $80 = $agg$result;
        $81 = 14173;
        $187 = $80;
        $188 = $81;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $187 | 0, $188 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $189 = __THREW__;
        __THREW__ = 0;
        $190 = $189 & 1;
        if ($190) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 114:
       {
        $78 = $agg$result;
        $79 = 14689;
        $191 = $78;
        $192 = $79;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $191 | 0, $192 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $193 = __THREW__;
        __THREW__ = 0;
        $194 = $193 & 1;
        if ($194) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 92:
       {
        $76 = $agg$result;
        $77 = 14691;
        $195 = $76;
        $196 = $77;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $195 | 0, $196 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $197 = __THREW__;
        __THREW__ = 0;
        $198 = $197 & 1;
        if ($198) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 47:
       {
        $74 = $agg$result;
        $75 = 14693;
        $199 = $74;
        $200 = $75;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $199 | 0, $200 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $201 = __THREW__;
        __THREW__ = 0;
        $202 = $201 & 1;
        if ($202) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 34:
       {
        $72 = $agg$result;
        $73 = 14180;
        $203 = $72;
        $204 = $73;
        __THREW__ = 0;
        (tempInt = invoke_iii(402, $203 | 0, $204 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $205 = __THREW__;
        __THREW__ = 0;
        $206 = $205 & 1;
        if ($206) {
         break L5;
        } else {
         break L10;
        }
        break;
       }
      case 117:
       {
        $207 = $i;
        $208 = $207 + 1 | 0;
        $69 = $127;
        $70 = $208;
        $71 = 4;
        $209 = $69;
        $68 = $209;
        $210 = $68;
        $67 = $210;
        $211 = $67;
        $66 = $211;
        $212 = $70;
        $213 = $71;
        __THREW__ = 0;
        invoke_viii(393, $209 | 0, $212 | 0, $213 | 0), asyncState ? abort(-12) | 0 : 0;
        $214 = __THREW__;
        __THREW__ = 0;
        $215 = $214 & 1;
        if ($215) {
         break L5;
        }
        $65 = $127;
        $216 = $65;
        $64 = $216;
        $217 = $64;
        $63 = $217;
        $218 = $63;
        $62 = $218;
        $219 = $62;
        $61 = $219;
        $220 = $61;
        $60 = $220;
        $221 = $60;
        $222 = HEAP8[$221 >> 0] | 0;
        $223 = $222 & 255;
        $224 = $223 & 1;
        $225 = ($224 | 0) != 0;
        if ($225) {
         $54 = $218;
         $226 = $54;
         $53 = $226;
         $227 = $53;
         $52 = $227;
         $228 = $52;
         $229 = $228 + 8 | 0;
         $230 = HEAP32[$229 >> 2] | 0;
         $237 = $230;
        } else {
         $59 = $218;
         $231 = $59;
         $58 = $231;
         $232 = $58;
         $57 = $232;
         $233 = $57;
         $234 = $233 + 1 | 0;
         $56 = $234;
         $235 = $56;
         $55 = $235;
         $236 = $55;
         $237 = $236;
        }
        $51 = $237;
        $238 = $51;
        __THREW__ = 0;
        $239 = (tempInt = invoke_iiii(434, $238 | 0, 0 | 0, 16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $240 = __THREW__;
        __THREW__ = 0;
        $241 = $240 & 1;
        if ($241) {
         label = 29;
         break L7;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($127), asyncState ? abort(-12) | 0 : 0;
        $codepoint = $239;
        $242 = $codepoint;
        $243 = $242 >>> 0 >= 55296;
        $244 = $codepoint;
        $245 = $244 >>> 0 <= 56319;
        $or$cond = $243 & $245;
        if (!$or$cond) {
         $366 = $codepoint;
         __THREW__ = 0;
         invoke_viii(436, $130 | 0, $366 | 0, 0), asyncState ? abort(-12) | 0 : 0;
         $367 = __THREW__;
         __THREW__ = 0;
         $368 = $367 & 1;
         if ($368) {
          break L5;
         }
         $114 = $agg$result;
         $115 = $130;
         $369 = $114;
         $370 = $115;
         $112 = $369;
         $113 = $370;
         $371 = $112;
         $372 = $113;
         $111 = $372;
         $373 = $111;
         $110 = $373;
         $374 = $110;
         $109 = $374;
         $375 = $109;
         $108 = $375;
         $376 = $108;
         $107 = $376;
         $377 = $107;
         $378 = HEAP8[$377 >> 0] | 0;
         $379 = $378 & 255;
         $380 = $379 & 1;
         $381 = ($380 | 0) != 0;
         if ($381) {
          $101 = $374;
          $382 = $101;
          $100 = $382;
          $383 = $100;
          $99 = $383;
          $384 = $99;
          $385 = $384 + 8 | 0;
          $386 = HEAP32[$385 >> 2] | 0;
          $393 = $386;
         } else {
          $106 = $374;
          $387 = $106;
          $105 = $387;
          $388 = $105;
          $104 = $388;
          $389 = $104;
          $390 = $389 + 1 | 0;
          $103 = $390;
          $391 = $103;
          $102 = $391;
          $392 = $102;
          $393 = $392;
         }
         $98 = $393;
         $394 = $98;
         $395 = $113;
         $97 = $395;
         $396 = $97;
         $96 = $396;
         $397 = $96;
         $95 = $397;
         $398 = $95;
         $94 = $398;
         $399 = $94;
         $400 = HEAP8[$399 >> 0] | 0;
         $401 = $400 & 255;
         $402 = $401 & 1;
         $403 = ($402 | 0) != 0;
         if ($403) {
          $90 = $396;
          $404 = $90;
          $89 = $404;
          $405 = $89;
          $88 = $405;
          $406 = $88;
          $407 = $406 + 4 | 0;
          $408 = HEAP32[$407 >> 2] | 0;
          $415 = $408;
         } else {
          $93 = $396;
          $409 = $93;
          $92 = $409;
          $410 = $92;
          $91 = $410;
          $411 = $91;
          $412 = HEAP8[$411 >> 0] | 0;
          $413 = $412 & 255;
          $414 = $413 >> 1;
          $415 = $414;
         }
         __THREW__ = 0;
         (tempInt = invoke_iiii(365, $371 | 0, $394 | 0, $415 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $416 = __THREW__;
         __THREW__ = 0;
         $417 = $416 & 1;
         if ($417) {
          label = 56;
          break L7;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($130), asyncState ? abort(-12) | 0 : 0;
         $418 = $i;
         $419 = $418 + 4 | 0;
         $i = $419;
         break L10;
        }
        $246 = $i;
        $247 = $246 + 6 | 0;
        $248 = $132 + 32 | 0;
        $249 = HEAP32[$248 >> 2] | 0;
        $250 = $247 >>> 0 >= $249 >>> 0;
        if ($250) {
         label = 27;
         break L7;
        }
        $251 = $i;
        $252 = $251 + 5 | 0;
        $253 = HEAP8[$252 >> 0] | 0;
        $254 = $253 & 255;
        $255 = ($254 | 0) != 92;
        if ($255) {
         label = 27;
         break L7;
        }
        $256 = $i;
        $257 = $256 + 6 | 0;
        $258 = HEAP8[$257 >> 0] | 0;
        $259 = $258 & 255;
        $260 = ($259 | 0) != 117;
        if ($260) {
         label = 27;
         break L7;
        }
        $272 = $i;
        $273 = $272 + 7 | 0;
        $46 = $128;
        $47 = $273;
        $48 = 4;
        $274 = $46;
        $45 = $274;
        $275 = $45;
        $44 = $275;
        $276 = $44;
        $43 = $276;
        $277 = $47;
        $278 = $48;
        __THREW__ = 0;
        invoke_viii(393, $274 | 0, $277 | 0, $278 | 0), asyncState ? abort(-12) | 0 : 0;
        $279 = __THREW__;
        __THREW__ = 0;
        $280 = $279 & 1;
        if ($280) {
         break L5;
        }
        $42 = $128;
        $281 = $42;
        $41 = $281;
        $282 = $41;
        $40 = $282;
        $283 = $40;
        $39 = $283;
        $284 = $39;
        $38 = $284;
        $285 = $38;
        $37 = $285;
        $286 = $37;
        $287 = HEAP8[$286 >> 0] | 0;
        $288 = $287 & 255;
        $289 = $288 & 1;
        $290 = ($289 | 0) != 0;
        if ($290) {
         $31 = $283;
         $291 = $31;
         $30 = $291;
         $292 = $30;
         $29 = $292;
         $293 = $29;
         $294 = $293 + 8 | 0;
         $295 = HEAP32[$294 >> 2] | 0;
         $302 = $295;
        } else {
         $36 = $283;
         $296 = $36;
         $35 = $296;
         $297 = $35;
         $34 = $297;
         $298 = $34;
         $299 = $298 + 1 | 0;
         $33 = $299;
         $300 = $33;
         $32 = $300;
         $301 = $32;
         $302 = $301;
        }
        $28 = $302;
        $303 = $28;
        __THREW__ = 0;
        $304 = (tempInt = invoke_iiii(434, $303 | 0, 0 | 0, 16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $305 = __THREW__;
        __THREW__ = 0;
        $306 = $305 & 1;
        if ($306) {
         label = 45;
         break L7;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($128), asyncState ? abort(-12) | 0 : 0;
        $codepoint2 = $304;
        $307 = $codepoint;
        $308 = $codepoint2;
        __THREW__ = 0;
        invoke_viii(436, $129 | 0, $307 | 0, $308 | 0), asyncState ? abort(-12) | 0 : 0;
        $309 = __THREW__;
        __THREW__ = 0;
        $310 = $309 & 1;
        if ($310) {
         break L5;
        }
        $26 = $agg$result;
        $27 = $129;
        $311 = $26;
        $312 = $27;
        $24 = $311;
        $25 = $312;
        $313 = $24;
        $314 = $25;
        $23 = $314;
        $315 = $23;
        $22 = $315;
        $316 = $22;
        $21 = $316;
        $317 = $21;
        $20 = $317;
        $318 = $20;
        $19 = $318;
        $319 = $19;
        $320 = HEAP8[$319 >> 0] | 0;
        $321 = $320 & 255;
        $322 = $321 & 1;
        $323 = ($322 | 0) != 0;
        if ($323) {
         $13 = $316;
         $324 = $13;
         $12 = $324;
         $325 = $12;
         $11 = $325;
         $326 = $11;
         $327 = $326 + 8 | 0;
         $328 = HEAP32[$327 >> 2] | 0;
         $335 = $328;
        } else {
         $18 = $316;
         $329 = $18;
         $17 = $329;
         $330 = $17;
         $16 = $330;
         $331 = $16;
         $332 = $331 + 1 | 0;
         $15 = $332;
         $333 = $15;
         $14 = $333;
         $334 = $14;
         $335 = $334;
        }
        $10 = $335;
        $336 = $10;
        $337 = $25;
        $9 = $337;
        $338 = $9;
        $8 = $338;
        $339 = $8;
        $7 = $339;
        $340 = $7;
        $6 = $340;
        $341 = $6;
        $342 = HEAP8[$341 >> 0] | 0;
        $343 = $342 & 255;
        $344 = $343 & 1;
        $345 = ($344 | 0) != 0;
        if ($345) {
         $2 = $338;
         $346 = $2;
         $1 = $346;
         $347 = $1;
         $0 = $347;
         $348 = $0;
         $349 = $348 + 4 | 0;
         $350 = HEAP32[$349 >> 2] | 0;
         $357 = $350;
        } else {
         $5 = $338;
         $351 = $5;
         $4 = $351;
         $352 = $4;
         $3 = $352;
         $353 = $3;
         $354 = HEAP8[$353 >> 0] | 0;
         $355 = $354 & 255;
         $356 = $355 >> 1;
         $357 = $356;
        }
        __THREW__ = 0;
        (tempInt = invoke_iiii(365, $313 | 0, $336 | 0, $357 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $358 = __THREW__;
        __THREW__ = 0;
        $359 = $358 & 1;
        if ($359) {
         label = 46;
         break L7;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($129), asyncState ? abort(-12) | 0 : 0;
        $360 = $i;
        $361 = $360 + 11 | 0;
        $i = $361;
        break L10;
        break;
       }
      default:
       {
        break L10;
       }
      }
     } else {
      $422 = HEAP8[$168 >> 0] | 0;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $422 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $423 = __THREW__;
      __THREW__ = 0;
      $424 = $423 & 1;
      if ($424) {
       break L5;
      }
     }
    } while (0);
    $425 = $i;
    $426 = $425 + 1 | 0;
    $i = $426;
   }
   if ((label | 0) == 27) {
    $261 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $49 = $261;
    $50 = 14695;
    $262 = $49;
    $263 = $50;
    __THREW__ = 0;
    invoke_vii(435, $262 | 0, $263 | 0), asyncState ? abort(-12) | 0 : 0;
    $264 = __THREW__;
    __THREW__ = 0;
    $265 = $264 & 1;
    if (!$265) {
     $266 = 3256;
     HEAP32[$262 >> 2] = $266;
     __THREW__ = 0;
     invoke_viii(387, $261 | 0, 176 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
     $267 = __THREW__;
     __THREW__ = 0;
     break;
    }
    $270 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $271 = tempRet0;
    $125 = $270;
    $126 = $271;
    ___cxa_free_exception($261 | 0), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $428 = $125;
    $429 = $126;
    ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 29) {
    $268 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $269 = tempRet0;
    $125 = $268;
    $126 = $269;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($127), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $428 = $125;
    $429 = $126;
    ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 45) {
    $362 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $363 = tempRet0;
    $125 = $362;
    $126 = $363;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($128), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $428 = $125;
    $429 = $126;
    ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 46) {
    $364 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $365 = tempRet0;
    $125 = $364;
    $126 = $365;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($129), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $428 = $125;
    $429 = $126;
    ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 56) {
    $420 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $421 = tempRet0;
    $125 = $420;
    $126 = $421;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($130), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $428 = $125;
    $429 = $126;
    ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 59) {
    $$expand_i1_val3 = 1;
    HEAP8[$124 >> 0] = $$expand_i1_val3;
    $131 = 1;
    $$pre_trunc = HEAP8[$124 >> 0] | 0;
    $427 = $$pre_trunc & 1;
    if ($427) {
     STACKTOP = sp;
     return;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $173 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $174 = tempRet0;
 $125 = $173;
 $126 = $174;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
 $428 = $125;
 $429 = $126;
 ___resumeException($428 | 0), asyncState ? abort(-12) | 0 : 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[7176 >> 2] | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $4 = $mem + -4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $8 = $5 & -8;
 $$sum = $8 + -8 | 0;
 $9 = $mem + $$sum | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = HEAP32[$1 >> 2] | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   $16 = $14 >>> 0 < $2 >>> 0;
   if ($16) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
   $17 = HEAP32[7180 >> 2] | 0;
   $18 = ($14 | 0) == ($17 | 0);
   if ($18) {
    $$sum3 = $8 + -4 | 0;
    $103 = $mem + $$sum3 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 & 3;
    $106 = ($105 | 0) == 3;
    if (!$106) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    HEAP32[7168 >> 2] = $15;
    $107 = $104 & -2;
    HEAP32[$103 >> 2] = $107;
    $108 = $15 | 1;
    $$sum20 = $$sum2 + 4 | 0;
    $109 = $mem + $$sum20 | 0;
    HEAP32[$109 >> 2] = $108;
    HEAP32[$9 >> 2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = $12 >>> 0 < 256;
   if ($20) {
    $$sum30 = $$sum2 + 8 | 0;
    $21 = $mem + $$sum30 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $$sum31 = $$sum2 + 12 | 0;
    $23 = $mem + $$sum31 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $19 << 1;
    $26 = 7200 + ($25 << 2) | 0;
    $27 = ($22 | 0) == ($26 | 0);
    if (!$27) {
     $28 = $22 >>> 0 < $2 >>> 0;
     if ($28) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $29 = $22 + 12 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $31 = ($30 | 0) == ($14 | 0);
     if (!$31) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $32 = ($24 | 0) == ($22 | 0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[7160 >> 2] | 0;
     $36 = $35 & $34;
     HEAP32[7160 >> 2] = $36;
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    $37 = ($24 | 0) == ($26 | 0);
    if ($37) {
     $$pre60 = $24 + 8 | 0;
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = $24 >>> 0 < $2 >>> 0;
     if ($38) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $39 = $24 + 8 | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     $41 = ($40 | 0) == ($14 | 0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $42 = $22 + 12 | 0;
    HEAP32[$42 >> 2] = $24;
    HEAP32[$$pre$phi61Z2D >> 2] = $22;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $$sum22 = $$sum2 + 24 | 0;
   $43 = $mem + $$sum22 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $$sum23 = $$sum2 + 12 | 0;
   $45 = $mem + $$sum23 | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   $47 = ($46 | 0) == ($14 | 0);
   do {
    if ($47) {
     $$sum25 = $$sum2 + 20 | 0;
     $57 = $mem + $$sum25 | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     $59 = ($58 | 0) == (0 | 0);
     if ($59) {
      $$sum24 = $$sum2 + 16 | 0;
      $60 = $mem + $$sum24 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      $62 = ($61 | 0) == (0 | 0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = HEAP32[$63 >> 2] | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = HEAP32[$66 >> 2] | 0;
      $68 = ($67 | 0) == (0 | 0);
      if ($68) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     $69 = $RP$0$lcssa >>> 0 < $2 >>> 0;
     if ($69) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = $$sum2 + 8 | 0;
     $48 = $mem + $$sum29 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     $50 = $49 >>> 0 < $2 >>> 0;
     if ($50) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $51 = $49 + 12 | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = ($52 | 0) == ($14 | 0);
     if (!$53) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $54 = $46 + 8 | 0;
     $55 = HEAP32[$54 >> 2] | 0;
     $56 = ($55 | 0) == ($14 | 0);
     if ($56) {
      HEAP32[$51 >> 2] = $46;
      HEAP32[$54 >> 2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   } while (0);
   $70 = ($44 | 0) == (0 | 0);
   if ($70) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $$sum26 = $$sum2 + 28 | 0;
    $71 = $mem + $$sum26 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = 7464 + ($72 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = ($14 | 0) == ($74 | 0);
    if ($75) {
     HEAP32[$73 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[7164 >> 2] | 0;
      $79 = $78 & $77;
      HEAP32[7164 >> 2] = $79;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[7176 >> 2] | 0;
     $81 = $44 >>> 0 < $80 >>> 0;
     if ($81) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $82 = $44 + 16 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     $84 = ($83 | 0) == ($14 | 0);
     if ($84) {
      HEAP32[$82 >> 2] = $R$1;
     } else {
      $85 = $44 + 20 | 0;
      HEAP32[$85 >> 2] = $R$1;
     }
     $86 = ($R$1 | 0) == (0 | 0);
     if ($86) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[7176 >> 2] | 0;
    $88 = $R$1 >>> 0 < $87 >>> 0;
    if ($88) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $89 = $R$1 + 24 | 0;
    HEAP32[$89 >> 2] = $44;
    $$sum27 = $$sum2 + 16 | 0;
    $90 = $mem + $$sum27 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = ($91 | 0) == (0 | 0);
    do {
     if (!$92) {
      $93 = $91 >>> 0 < $87 >>> 0;
      if ($93) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $94 = $R$1 + 16 | 0;
       HEAP32[$94 >> 2] = $91;
       $95 = $91 + 24 | 0;
       HEAP32[$95 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum28 = $$sum2 + 20 | 0;
    $96 = $mem + $$sum28 | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($97 | 0) == (0 | 0);
    if ($98) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     $99 = HEAP32[7176 >> 2] | 0;
     $100 = $97 >>> 0 < $99 >>> 0;
     if ($100) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      $101 = $R$1 + 20 | 0;
      HEAP32[$101 >> 2] = $97;
      $102 = $97 + 24 | 0;
      HEAP32[$102 >> 2] = $R$1;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 $110 = $p$0 >>> 0 < $9 >>> 0;
 if (!$110) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $$sum19 = $8 + -4 | 0;
 $111 = $mem + $$sum19 | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 $113 = $112 & 1;
 $114 = ($113 | 0) == 0;
 if ($114) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $115 = $112 & 2;
 $116 = ($115 | 0) == 0;
 if ($116) {
  $117 = HEAP32[7184 >> 2] | 0;
  $118 = ($9 | 0) == ($117 | 0);
  if ($118) {
   $119 = HEAP32[7172 >> 2] | 0;
   $120 = $119 + $psize$0 | 0;
   HEAP32[7172 >> 2] = $120;
   HEAP32[7184 >> 2] = $p$0;
   $121 = $120 | 1;
   $122 = $p$0 + 4 | 0;
   HEAP32[$122 >> 2] = $121;
   $123 = HEAP32[7180 >> 2] | 0;
   $124 = ($p$0 | 0) == ($123 | 0);
   if (!$124) {
    return;
   }
   HEAP32[7180 >> 2] = 0;
   HEAP32[7168 >> 2] = 0;
   return;
  }
  $125 = HEAP32[7180 >> 2] | 0;
  $126 = ($9 | 0) == ($125 | 0);
  if ($126) {
   $127 = HEAP32[7168 >> 2] | 0;
   $128 = $127 + $psize$0 | 0;
   HEAP32[7168 >> 2] = $128;
   HEAP32[7180 >> 2] = $p$0;
   $129 = $128 | 1;
   $130 = $p$0 + 4 | 0;
   HEAP32[$130 >> 2] = $129;
   $131 = $p$0 + $128 | 0;
   HEAP32[$131 >> 2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = $132 + $psize$0 | 0;
  $134 = $112 >>> 3;
  $135 = $112 >>> 0 < 256;
  do {
   if ($135) {
    $136 = $mem + $8 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $$sum1718 = $8 | 4;
    $138 = $mem + $$sum1718 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $134 << 1;
    $141 = 7200 + ($140 << 2) | 0;
    $142 = ($137 | 0) == ($141 | 0);
    if (!$142) {
     $143 = HEAP32[7176 >> 2] | 0;
     $144 = $137 >>> 0 < $143 >>> 0;
     if ($144) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $145 = $137 + 12 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     $147 = ($146 | 0) == ($9 | 0);
     if (!$147) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $148 = ($139 | 0) == ($137 | 0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[7160 >> 2] | 0;
     $152 = $151 & $150;
     HEAP32[7160 >> 2] = $152;
     break;
    }
    $153 = ($139 | 0) == ($141 | 0);
    if ($153) {
     $$pre58 = $139 + 8 | 0;
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[7176 >> 2] | 0;
     $155 = $139 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $156 = $139 + 8 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     $158 = ($157 | 0) == ($9 | 0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $159 = $137 + 12 | 0;
    HEAP32[$159 >> 2] = $139;
    HEAP32[$$pre$phi59Z2D >> 2] = $137;
   } else {
    $$sum5 = $8 + 16 | 0;
    $160 = $mem + $$sum5 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $$sum67 = $8 | 4;
    $162 = $mem + $$sum67 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = ($163 | 0) == ($9 | 0);
    do {
     if ($164) {
      $$sum9 = $8 + 12 | 0;
      $175 = $mem + $$sum9 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      $177 = ($176 | 0) == (0 | 0);
      if ($177) {
       $$sum8 = $8 + 8 | 0;
       $178 = $mem + $$sum8 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       $180 = ($179 | 0) == (0 | 0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;
       $RP9$0 = $175;
      }
      while (1) {
       $181 = $R7$0 + 20 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = ($182 | 0) == (0 | 0);
       if (!$183) {
        $R7$0 = $182;
        $RP9$0 = $181;
        continue;
       }
       $184 = $R7$0 + 16 | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = ($185 | 0) == (0 | 0);
       if ($186) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;
        $RP9$0 = $184;
       }
      }
      $187 = HEAP32[7176 >> 2] | 0;
      $188 = $RP9$0$lcssa >>> 0 < $187 >>> 0;
      if ($188) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = $mem + $8 | 0;
      $166 = HEAP32[$165 >> 2] | 0;
      $167 = HEAP32[7176 >> 2] | 0;
      $168 = $166 >>> 0 < $167 >>> 0;
      if ($168) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $169 = $166 + 12 | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      $171 = ($170 | 0) == ($9 | 0);
      if (!$171) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $172 = $163 + 8 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      $174 = ($173 | 0) == ($9 | 0);
      if ($174) {
       HEAP32[$169 >> 2] = $163;
       HEAP32[$172 >> 2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $189 = ($161 | 0) == (0 | 0);
    if (!$189) {
     $$sum12 = $8 + 20 | 0;
     $190 = $mem + $$sum12 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     $192 = 7464 + ($191 << 2) | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $194 = ($9 | 0) == ($193 | 0);
     if ($194) {
      HEAP32[$192 >> 2] = $R7$1;
      $cond47 = ($R7$1 | 0) == (0 | 0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[7164 >> 2] | 0;
       $198 = $197 & $196;
       HEAP32[7164 >> 2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[7176 >> 2] | 0;
      $200 = $161 >>> 0 < $199 >>> 0;
      if ($200) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $201 = $161 + 16 | 0;
      $202 = HEAP32[$201 >> 2] | 0;
      $203 = ($202 | 0) == ($9 | 0);
      if ($203) {
       HEAP32[$201 >> 2] = $R7$1;
      } else {
       $204 = $161 + 20 | 0;
       HEAP32[$204 >> 2] = $R7$1;
      }
      $205 = ($R7$1 | 0) == (0 | 0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[7176 >> 2] | 0;
     $207 = $R7$1 >>> 0 < $206 >>> 0;
     if ($207) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $208 = $R7$1 + 24 | 0;
     HEAP32[$208 >> 2] = $161;
     $$sum13 = $8 + 8 | 0;
     $209 = $mem + $$sum13 | 0;
     $210 = HEAP32[$209 >> 2] | 0;
     $211 = ($210 | 0) == (0 | 0);
     do {
      if (!$211) {
       $212 = $210 >>> 0 < $206 >>> 0;
       if ($212) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $213 = $R7$1 + 16 | 0;
        HEAP32[$213 >> 2] = $210;
        $214 = $210 + 24 | 0;
        HEAP32[$214 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $$sum14 = $8 + 12 | 0;
     $215 = $mem + $$sum14 | 0;
     $216 = HEAP32[$215 >> 2] | 0;
     $217 = ($216 | 0) == (0 | 0);
     if (!$217) {
      $218 = HEAP32[7176 >> 2] | 0;
      $219 = $216 >>> 0 < $218 >>> 0;
      if ($219) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $220 = $R7$1 + 20 | 0;
       HEAP32[$220 >> 2] = $216;
       $221 = $216 + 24 | 0;
       HEAP32[$221 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  $222 = $133 | 1;
  $223 = $p$0 + 4 | 0;
  HEAP32[$223 >> 2] = $222;
  $224 = $p$0 + $133 | 0;
  HEAP32[$224 >> 2] = $133;
  $225 = HEAP32[7180 >> 2] | 0;
  $226 = ($p$0 | 0) == ($225 | 0);
  if ($226) {
   HEAP32[7168 >> 2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111 >> 2] = $227;
  $228 = $psize$0 | 1;
  $229 = $p$0 + 4 | 0;
  HEAP32[$229 >> 2] = $228;
  $230 = $p$0 + $psize$0 | 0;
  HEAP32[$230 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = $psize$1 >>> 0 < 256;
 if ($232) {
  $233 = $231 << 1;
  $234 = 7200 + ($233 << 2) | 0;
  $235 = HEAP32[7160 >> 2] | 0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237 | 0) == 0;
  if ($238) {
   $239 = $235 | $236;
   HEAP32[7160 >> 2] = $239;
   $$pre = $233 + 2 | 0;
   $$pre57 = 7200 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre57;
   $F16$0 = $234;
  } else {
   $$sum11 = $233 + 2 | 0;
   $240 = 7200 + ($$sum11 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   $242 = HEAP32[7176 >> 2] | 0;
   $243 = $241 >>> 0 < $242 >>> 0;
   if ($243) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   } else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  $244 = $F16$0 + 12 | 0;
  HEAP32[$244 >> 2] = $p$0;
  $245 = $p$0 + 8 | 0;
  HEAP32[$245 >> 2] = $F16$0;
  $246 = $p$0 + 12 | 0;
  HEAP32[$246 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247 | 0) == 0;
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = $psize$1 >>> 0 > 16777215;
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = $247 + 1048320 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = $253 + 520192 | 0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = $258 + 245760 | 0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = 14 - $262 | 0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = $263 + $265 | 0;
   $267 = $266 << 1;
   $268 = $266 + 7 | 0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = 7464 + ($I18$0 << 2) | 0;
 $273 = $p$0 + 28 | 0;
 HEAP32[$273 >> 2] = $I18$0;
 $274 = $p$0 + 16 | 0;
 $275 = $p$0 + 20 | 0;
 HEAP32[$275 >> 2] = 0;
 HEAP32[$274 >> 2] = 0;
 $276 = HEAP32[7164 >> 2] | 0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278 | 0) == 0;
 L199 : do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[7164 >> 2] = $280;
   HEAP32[$272 >> 2] = $p$0;
   $281 = $p$0 + 24 | 0;
   HEAP32[$281 >> 2] = $272;
   $282 = $p$0 + 12 | 0;
   HEAP32[$282 >> 2] = $p$0;
   $283 = $p$0 + 8 | 0;
   HEAP32[$283 >> 2] = $p$0;
  } else {
   $284 = HEAP32[$272 >> 2] | 0;
   $285 = $284 + 4 | 0;
   $286 = HEAP32[$285 >> 2] | 0;
   $287 = $286 & -8;
   $288 = ($287 | 0) == ($psize$1 | 0);
   L202 : do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0 | 0) == 31;
     $290 = $I18$0 >>> 1;
     $291 = 25 - $290 | 0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;
     $T$051 = $284;
     while (1) {
      $300 = $K19$052 >>> 31;
      $301 = ($T$051 + 16 | 0) + ($300 << 2) | 0;
      $296 = HEAP32[$301 >> 2] | 0;
      $302 = ($296 | 0) == (0 | 0);
      if ($302) {
       $$lcssa = $301;
       $T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = $296 + 4 | 0;
      $297 = HEAP32[$295 >> 2] | 0;
      $298 = $297 & -8;
      $299 = ($298 | 0) == ($psize$1 | 0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;
       $T$051 = $296;
      }
     }
     $303 = HEAP32[7176 >> 2] | 0;
     $304 = $$lcssa >>> 0 < $303 >>> 0;
     if ($304) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$$lcssa >> 2] = $p$0;
      $305 = $p$0 + 24 | 0;
      HEAP32[$305 >> 2] = $T$051$lcssa;
      $306 = $p$0 + 12 | 0;
      HEAP32[$306 >> 2] = $p$0;
      $307 = $p$0 + 8 | 0;
      HEAP32[$307 >> 2] = $p$0;
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0;
   $309 = HEAP32[$308 >> 2] | 0;
   $310 = HEAP32[7176 >> 2] | 0;
   $311 = $309 >>> 0 >= $310 >>> 0;
   $not$ = $T$0$lcssa >>> 0 >= $310 >>> 0;
   $312 = $311 & $not$;
   if ($312) {
    $313 = $309 + 12 | 0;
    HEAP32[$313 >> 2] = $p$0;
    HEAP32[$308 >> 2] = $p$0;
    $314 = $p$0 + 8 | 0;
    HEAP32[$314 >> 2] = $309;
    $315 = $p$0 + 12 | 0;
    HEAP32[$315 >> 2] = $T$0$lcssa;
    $316 = $p$0 + 24 | 0;
    HEAP32[$316 >> 2] = 0;
    break;
   } else {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $317 = HEAP32[7192 >> 2] | 0;
 $318 = $317 + -1 | 0;
 HEAP32[7192 >> 2] = $318;
 $319 = ($318 | 0) == 0;
 if ($319) {
  $sp$0$in$i = 7616;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  $320 = ($sp$0$i | 0) == (0 | 0);
  $321 = $sp$0$i + 8 | 0;
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[7192 >> 2] = -1;
 return;
}

function __Z8ReadFileRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($path) {
 $path = $path | 0;
 var $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i2$i$i = 0, $eh$lpad$body$i$index7Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $fin = 0, $oss = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $30 = sp + 596 | 0;
 $83 = sp + 744 | 0;
 $fin = sp + 188 | 0;
 $87 = sp + 168 | 0;
 $88 = sp + 156 | 0;
 $oss = sp + 16 | 0;
 $90 = sp;
 $84 = $path;
 $91 = $84;
 $82 = $91;
 $92 = $82;
 $81 = $92;
 $93 = $81;
 $80 = $93;
 $94 = $80;
 $79 = $94;
 $95 = $79;
 $78 = $95;
 $96 = $78;
 $77 = $96;
 $97 = $77;
 $98 = HEAP8[$97 >> 0] | 0;
 $99 = $98 & 255;
 $100 = $99 & 1;
 $101 = ($100 | 0) != 0;
 if ($101) {
  $71 = $94;
  $102 = $71;
  $70 = $102;
  $103 = $70;
  $69 = $103;
  $104 = $69;
  $105 = $104 + 8 | 0;
  $106 = HEAP32[$105 >> 2] | 0;
  $113 = $106;
 } else {
  $76 = $94;
  $107 = $76;
  $75 = $107;
  $108 = $75;
  $74 = $108;
  $109 = $74;
  $110 = $109 + 1 | 0;
  $73 = $110;
  $111 = $73;
  $72 = $111;
  $112 = $72;
  $113 = $112;
 }
 $68 = $113;
 $114 = $68;
 $63 = $fin;
 $64 = $114;
 $65 = 8;
 $115 = $63;
 $116 = $115 + 108 | 0;
 $62 = $116;
 $117 = $62;
 $61 = $117;
 $118 = $61;
 $119 = 7764;
 HEAP32[$118 >> 2] = $119;
 $120 = 7664;
 HEAP32[$117 >> 2] = $120;
 $121 = 2796;
 HEAP32[$115 >> 2] = $121;
 $122 = $115 + 108 | 0;
 $123 = 2816;
 HEAP32[$122 >> 2] = $123;
 $124 = $115 + 8 | 0;
 $58 = $115;
 $125 = 2828;
 $59 = $125;
 $60 = $124;
 $126 = $58;
 $127 = $59;
 $128 = HEAP32[$127 >> 2] | 0;
 HEAP32[$126 >> 2] = $128;
 $129 = $127 + 4 | 0;
 $130 = HEAP32[$129 >> 2] | 0;
 $131 = HEAP32[$126 >> 2] | 0;
 $132 = $131 + -12 | 0;
 $133 = HEAP32[$132 >> 2] | 0;
 $134 = $126 + $133 | 0;
 HEAP32[$134 >> 2] = $130;
 $135 = $126 + 4 | 0;
 HEAP32[$135 >> 2] = 0;
 $136 = HEAP32[$126 >> 2] | 0;
 $137 = $136 + -12 | 0;
 $138 = HEAP32[$137 >> 2] | 0;
 $139 = $126 + $138 | 0;
 $140 = $60;
 $56 = $139;
 $57 = $140;
 $141 = $56;
 $142 = $57;
 __THREW__ = 0;
 invoke_vii(366, $141 | 0, $142 | 0), asyncState ? abort(-12) | 0 : 0;
 $143 = __THREW__;
 __THREW__ = 0;
 $144 = $143 & 1;
 if ($144) {
  $175 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $176 = tempRet0;
  $66 = $175;
  $67 = $176;
  $181 = $115 + 108 | 0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($181), asyncState ? abort(-12) | 0 : 0;
  $182 = $66;
  $183 = $67;
  ___resumeException($182 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $145 = $141 + 72 | 0;
 HEAP32[$145 >> 2] = 0;
 $146 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $147 = $141 + 76 | 0;
 HEAP32[$147 >> 2] = $146;
 $148 = 2796;
 HEAP32[$115 >> 2] = $148;
 $149 = $115 + 108 | 0;
 $150 = 2816;
 HEAP32[$149 >> 2] = $150;
 $151 = $115 + 8 | 0;
 __THREW__ = 0;
 invoke_vi(399, $151 | 0), asyncState ? abort(-12) | 0 : 0;
 $152 = __THREW__;
 __THREW__ = 0;
 $153 = $152 & 1;
 if ($153) {
  $177 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $178 = tempRet0;
  $66 = $177;
  $67 = $178;
 } else {
  $154 = $115 + 8 | 0;
  $155 = $64;
  $156 = $65;
  $157 = $156 | 8;
  __THREW__ = 0;
  $158 = (tempInt = invoke_iiii(400, $154 | 0, $155 | 0, $157 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $159 = __THREW__;
  __THREW__ = 0;
  $160 = $159 & 1;
  do {
   if (!$160) {
    $161 = ($158 | 0) == (0 | 0);
    if ($161) {
     $162 = HEAP32[$115 >> 2] | 0;
     $163 = $162 + -12 | 0;
     $164 = HEAP32[$163 >> 2] | 0;
     $165 = $115 + $164 | 0;
     $54 = $165;
     $55 = 4;
     $166 = $54;
     $167 = $55;
     $52 = $166;
     $53 = $167;
     $168 = $52;
     $169 = $168 + 16 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     $171 = $53;
     $172 = $170 | $171;
     __THREW__ = 0;
     invoke_vii(394, $168 | 0, $172 | 0), asyncState ? abort(-12) | 0 : 0;
     $173 = __THREW__;
     __THREW__ = 0;
     $174 = $173 & 1;
     if ($174) {
      break;
     }
    }
    $51 = $fin;
    $184 = $51;
    $185 = $184 + 8 | 0;
    $50 = $185;
    $186 = $50;
    $187 = $186 + 64 | 0;
    $188 = HEAP32[$187 >> 2] | 0;
    $189 = ($188 | 0) != (0 | 0);
    do {
     if ($189) {
      $35 = $oss;
      $36 = 16;
      $226 = $35;
      $227 = $226 + 56 | 0;
      $34 = $227;
      $228 = $34;
      $33 = $228;
      $229 = $33;
      $230 = 7764;
      HEAP32[$229 >> 2] = $230;
      $231 = 7664;
      HEAP32[$228 >> 2] = $231;
      $232 = 2516;
      HEAP32[$226 >> 2] = $232;
      $233 = $226 + 56 | 0;
      $234 = 2536;
      HEAP32[$233 >> 2] = $234;
      $235 = $226 + 4 | 0;
      $11 = $226;
      $236 = 2548;
      $12 = $236;
      $13 = $235;
      $237 = $11;
      $238 = $12;
      $239 = HEAP32[$238 >> 2] | 0;
      HEAP32[$237 >> 2] = $239;
      $240 = $238 + 4 | 0;
      $241 = HEAP32[$240 >> 2] | 0;
      $242 = HEAP32[$237 >> 2] | 0;
      $243 = $242 + -12 | 0;
      $244 = HEAP32[$243 >> 2] | 0;
      $245 = $237 + $244 | 0;
      HEAP32[$245 >> 2] = $241;
      $246 = HEAP32[$237 >> 2] | 0;
      $247 = $246 + -12 | 0;
      $248 = HEAP32[$247 >> 2] | 0;
      $249 = $237 + $248 | 0;
      $250 = $13;
      $9 = $249;
      $10 = $250;
      $251 = $9;
      $252 = $10;
      __THREW__ = 0;
      invoke_vii(366, $251 | 0, $252 | 0), asyncState ? abort(-12) | 0 : 0;
      $253 = __THREW__;
      __THREW__ = 0;
      $254 = $253 & 1;
      if ($254) {
       $304 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $305 = tempRet0;
       $37 = $304;
       $38 = $305;
      } else {
       $255 = $251 + 72 | 0;
       HEAP32[$255 >> 2] = 0;
       $256 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $257 = $251 + 76 | 0;
       HEAP32[$257 >> 2] = $256;
       $258 = 2516;
       HEAP32[$226 >> 2] = $258;
       $259 = $226 + 56 | 0;
       $260 = 2536;
       HEAP32[$259 >> 2] = $260;
       $261 = $226 + 4 | 0;
       $262 = $36;
       $263 = $262 | 16;
       $28 = $261;
       $29 = $263;
       $264 = $28;
       __THREW__ = 0;
       invoke_vi(367, $264 | 0), asyncState ? abort(-12) | 0 : 0;
       $265 = __THREW__;
       __THREW__ = 0;
       $266 = $265 & 1;
       do {
        if ($266) {
         $306 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $307 = tempRet0;
         $eh$lpad$body$i$index7Z2D = $307;
         $eh$lpad$body$i$indexZ2D = $306;
        } else {
         $267 = 2568;
         HEAP32[$264 >> 2] = $267;
         $268 = $264 + 32 | 0;
         $27 = $268;
         $269 = $27;
         $26 = $269;
         $270 = $26;
         $25 = $270;
         $271 = $25;
         $24 = $271;
         $23 = $269;
         $272 = $23;
         $22 = $272;
         $273 = $22;
         $21 = $273;
         $274 = $21;
         $__a$i$i$i$i = $274;
         $__i$i$i$i$i = 0;
         while (1) {
          $275 = $__i$i$i$i$i;
          $276 = $275 >>> 0 < 3;
          if (!$276) {
           break;
          }
          $277 = $__i$i$i$i$i;
          $278 = $__a$i$i$i$i;
          $279 = $278 + ($277 << 2) | 0;
          HEAP32[$279 >> 2] = 0;
          $280 = $__i$i$i$i$i;
          $281 = $280 + 1 | 0;
          $__i$i$i$i$i = $281;
         }
         $282 = $264 + 44 | 0;
         HEAP32[$282 >> 2] = 0;
         $283 = $264 + 48 | 0;
         $284 = $29;
         HEAP32[$283 >> 2] = $284;
         $20 = $30;
         $285 = $20;
         $19 = $285;
         $286 = $19;
         $18 = $286;
         $287 = $18;
         $17 = $287;
         $16 = $285;
         $288 = $16;
         $15 = $288;
         $289 = $15;
         $14 = $289;
         $290 = $14;
         $__a$i$i1$i$i = $290;
         $__i$i$i2$i$i = 0;
         while (1) {
          $291 = $__i$i$i2$i$i;
          $292 = $291 >>> 0 < 3;
          if (!$292) {
           break;
          }
          $293 = $__i$i$i2$i$i;
          $294 = $__a$i$i1$i$i;
          $295 = $294 + ($293 << 2) | 0;
          HEAP32[$295 >> 2] = 0;
          $296 = $__i$i$i2$i$i;
          $297 = $296 + 1 | 0;
          $__i$i$i2$i$i = $297;
         }
         __THREW__ = 0;
         invoke_vii(368, $264 | 0, $30 | 0), asyncState ? abort(-12) | 0 : 0;
         $298 = __THREW__;
         __THREW__ = 0;
         $299 = $298 & 1;
         if ($299) {
          $300 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $301 = tempRet0;
          $31 = $300;
          $32 = $301;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30), asyncState ? abort(-12) | 0 : 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($268), asyncState ? abort(-12) | 0 : 0;
          __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($264), asyncState ? abort(-12) | 0 : 0;
          $302 = $31;
          $303 = $32;
          $eh$lpad$body$i$index7Z2D = $303;
          $eh$lpad$body$i$indexZ2D = $302;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30), asyncState ? abort(-12) | 0 : 0;
         $8 = $fin;
         $311 = $8;
         $312 = $311 + 8 | 0;
         __THREW__ = 0;
         (tempInt = invoke_iii(406, $oss | 0, $312 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $313 = __THREW__;
         __THREW__ = 0;
         $314 = $313 & 1;
         do {
          if ($314) {
           label = 53;
          } else {
           $7 = $fin;
           $315 = $7;
           $316 = $315 + 8 | 0;
           __THREW__ = 0;
           $317 = (tempInt = invoke_ii(405, $316 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $318 = __THREW__;
           __THREW__ = 0;
           $319 = $318 & 1;
           if ($319) {
            label = 53;
           } else {
            $320 = ($317 | 0) == (0 | 0);
            if ($320) {
             $321 = HEAP32[$315 >> 2] | 0;
             $322 = $321 + -12 | 0;
             $323 = HEAP32[$322 >> 2] | 0;
             $324 = $315 + $323 | 0;
             $5 = $324;
             $6 = 4;
             $325 = $5;
             $326 = $6;
             $3 = $325;
             $4 = $326;
             $327 = $3;
             $328 = $327 + 16 | 0;
             $329 = HEAP32[$328 >> 2] | 0;
             $330 = $4;
             $331 = $329 | $330;
             __THREW__ = 0;
             invoke_vii(394, $327 | 0, $331 | 0), asyncState ? abort(-12) | 0 : 0;
             $332 = __THREW__;
             __THREW__ = 0;
             $333 = $332 & 1;
             if ($333) {
              label = 53;
              break;
             }
            }
            __THREW__ = 0;
            $334 = (tempInt = invoke_iii(404, 2368 | 0, 13744 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $335 = __THREW__;
            __THREW__ = 0;
            $336 = $335 & 1;
            if ($336) {
             label = 53;
            } else {
             $337 = $84;
             __THREW__ = 0;
             $338 = (tempInt = invoke_iii(403, $334 | 0, $337 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $339 = __THREW__;
             __THREW__ = 0;
             $340 = $339 & 1;
             if ($340) {
              label = 53;
             } else {
              __THREW__ = 0;
              $341 = (tempInt = invoke_iii(404, $338 | 0, 13769 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $342 = __THREW__;
              __THREW__ = 0;
              $343 = $342 & 1;
              if ($343) {
               label = 53;
               break;
              }
              $2 = $oss;
              $344 = $2;
              $345 = $344 + 4 | 0;
              __THREW__ = 0;
              invoke_vii(390, $90 | 0, $345 | 0), asyncState ? abort(-12) | 0 : 0;
              $346 = __THREW__;
              __THREW__ = 0;
              $347 = $346 & 1;
              if ($347) {
               label = 53;
               break;
              }
              __THREW__ = 0;
              $348 = (tempInt = invoke_iii(403, $341 | 0, $90 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $349 = __THREW__;
              __THREW__ = 0;
              $350 = $349 & 1;
              do {
               if (!$350) {
                $0 = $348;
                $1 = 397;
                $351 = $0;
                $352 = $1;
                __THREW__ = 0;
                (tempInt = invoke_ii($352 | 0, $351 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $353 = __THREW__;
                __THREW__ = 0;
                $354 = $353 & 1;
                if ($354) {
                 break;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($90), asyncState ? abort(-12) | 0 : 0;
                $$expand_i1_val12 = 1;
                HEAP8[$83 >> 0] = $$expand_i1_val12;
                $89 = 1;
                __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($oss), asyncState ? abort(-12) | 0 : 0;
                __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($fin), asyncState ? abort(-12) | 0 : 0;
                $$pre_trunc = HEAP8[$83 >> 0] | 0;
                $359 = $$pre_trunc & 1;
                STACKTOP = sp;
                return $359 | 0;
               }
              } while (0);
              $357 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $358 = tempRet0;
              $85 = $357;
              $86 = $358;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($90), asyncState ? abort(-12) | 0 : 0;
             }
            }
           }
          }
         } while (0);
         if ((label | 0) == 53) {
          $355 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $356 = tempRet0;
          $85 = $355;
          $86 = $356;
         }
         __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($oss), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($fin), asyncState ? abort(-12) | 0 : 0;
         $360 = $85;
         $361 = $86;
         ___resumeException($360 | 0), asyncState ? abort(-12) | 0 : 0;
        }
       } while (0);
       $37 = $eh$lpad$body$i$indexZ2D;
       $38 = $eh$lpad$body$i$index7Z2D;
      }
      $308 = $226 + 56 | 0;
      __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($308), asyncState ? abort(-12) | 0 : 0;
      $309 = $37;
      $310 = $38;
      $eh$lpad$body$index2Z2D = $310;
      $eh$lpad$body$indexZ2D = $309;
     } else {
      $190 = $84;
      __THREW__ = 0;
      invoke_viii(401, $88 | 0, 13663 | 0, $190 | 0), asyncState ? abort(-12) | 0 : 0;
      $191 = __THREW__;
      __THREW__ = 0;
      $192 = $191 & 1;
      if ($192) {
       $220 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $221 = tempRet0;
       $eh$lpad$body$index2Z2D = $221;
       $eh$lpad$body$indexZ2D = $220;
       break;
      }
      $48 = $88;
      $49 = 13730;
      $193 = $48;
      $194 = $49;
      __THREW__ = 0;
      $195 = (tempInt = invoke_iii(402, $193 | 0, $194 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $196 = __THREW__;
      __THREW__ = 0;
      $197 = $196 & 1;
      if ($197) {
       $222 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $223 = tempRet0;
       $85 = $222;
       $86 = $223;
      } else {
       $47 = $195;
       $198 = $47;
       $45 = $87;
       $46 = $198;
       $199 = $45;
       $200 = $46;
       $44 = $200;
       $201 = $44;
       HEAP32[$199 >> 2] = HEAP32[$201 >> 2] | 0;
       HEAP32[$199 + 4 >> 2] = HEAP32[$201 + 4 >> 2] | 0;
       HEAP32[$199 + 8 >> 2] = HEAP32[$201 + 8 >> 2] | 0;
       $202 = $46;
       $43 = $202;
       $203 = $43;
       $42 = $203;
       $204 = $42;
       $41 = $204;
       $205 = $41;
       $__a$i$i$i = $205;
       $__i$i$i$i = 0;
       while (1) {
        $206 = $__i$i$i$i;
        $207 = $206 >>> 0 < 3;
        if (!$207) {
         break;
        }
        $208 = $__i$i$i$i;
        $209 = $__a$i$i$i;
        $210 = $209 + ($208 << 2) | 0;
        HEAP32[$210 >> 2] = 0;
        $211 = $__i$i$i$i;
        $212 = $211 + 1 | 0;
        $__i$i$i$i = $212;
       }
       __THREW__ = 0;
       $213 = (tempInt = invoke_iii(403, 2368 | 0, $87 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $214 = __THREW__;
       __THREW__ = 0;
       $215 = $214 & 1;
       if (!$215) {
        $39 = $213;
        $40 = 397;
        $216 = $39;
        $217 = $40;
        __THREW__ = 0;
        (tempInt = invoke_ii($217 | 0, $216 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $218 = __THREW__;
        __THREW__ = 0;
        $219 = $218 & 1;
        if (!$219) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($87), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($88), asyncState ? abort(-12) | 0 : 0;
         $$expand_i1_val = 0;
         HEAP8[$83 >> 0] = $$expand_i1_val;
         $89 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($fin), asyncState ? abort(-12) | 0 : 0;
         $$pre_trunc = HEAP8[$83 >> 0] | 0;
         $359 = $$pre_trunc & 1;
         STACKTOP = sp;
         return $359 | 0;
        }
       }
       $224 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $225 = tempRet0;
       $85 = $224;
       $86 = $225;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($87), asyncState ? abort(-12) | 0 : 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($88), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($fin), asyncState ? abort(-12) | 0 : 0;
      $360 = $85;
      $361 = $86;
      ___resumeException($360 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    } while (0);
    $85 = $eh$lpad$body$indexZ2D;
    $86 = $eh$lpad$body$index2Z2D;
    __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($fin), asyncState ? abort(-12) | 0 : 0;
    $360 = $85;
    $361 = $86;
    ___resumeException($360 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  } while (0);
  $179 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $180 = tempRet0;
  $66 = $179;
  $67 = $180;
  __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($151), asyncState ? abort(-12) | 0 : 0;
 }
 $181 = $115 + 108 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($181), asyncState ? abort(-12) | 0 : 0;
 $182 = $66;
 $183 = $67;
 ___resumeException($182 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0, $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + $psize | 0;
 $1 = $p + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 & 1;
 $4 = ($3 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($4) {
   $5 = HEAP32[$p >> 2] | 0;
   $6 = $2 & 3;
   $7 = ($6 | 0) == 0;
   if ($7) {
    return;
   }
   $8 = 0 - $5 | 0;
   $9 = $p + $8 | 0;
   $10 = $5 + $psize | 0;
   $11 = HEAP32[7176 >> 2] | 0;
   $12 = $9 >>> 0 < $11 >>> 0;
   if ($12) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
   $13 = HEAP32[7180 >> 2] | 0;
   $14 = ($9 | 0) == ($13 | 0);
   if ($14) {
    $$sum = $psize + 4 | 0;
    $99 = $p + $$sum | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = $100 & 3;
    $102 = ($101 | 0) == 3;
    if (!$102) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
    HEAP32[7168 >> 2] = $10;
    $103 = $100 & -2;
    HEAP32[$99 >> 2] = $103;
    $104 = $10 | 1;
    $$sum14 = 4 - $5 | 0;
    $105 = $p + $$sum14 | 0;
    HEAP32[$105 >> 2] = $104;
    HEAP32[$0 >> 2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = $5 >>> 0 < 256;
   if ($16) {
    $$sum24 = 8 - $5 | 0;
    $17 = $p + $$sum24 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $$sum25 = 12 - $5 | 0;
    $19 = $p + $$sum25 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $15 << 1;
    $22 = 7200 + ($21 << 2) | 0;
    $23 = ($18 | 0) == ($22 | 0);
    if (!$23) {
     $24 = $18 >>> 0 < $11 >>> 0;
     if ($24) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $25 = $18 + 12 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $27 = ($26 | 0) == ($9 | 0);
     if (!$27) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $28 = ($20 | 0) == ($18 | 0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[7160 >> 2] | 0;
     $32 = $31 & $30;
     HEAP32[7160 >> 2] = $32;
     $$0 = $9;
     $$02 = $10;
     break;
    }
    $33 = ($20 | 0) == ($22 | 0);
    if ($33) {
     $$pre51 = $20 + 8 | 0;
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = $20 >>> 0 < $11 >>> 0;
     if ($34) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $35 = $20 + 8 | 0;
     $36 = HEAP32[$35 >> 2] | 0;
     $37 = ($36 | 0) == ($9 | 0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $38 = $18 + 12 | 0;
    HEAP32[$38 >> 2] = $20;
    HEAP32[$$pre$phi52Z2D >> 2] = $18;
    $$0 = $9;
    $$02 = $10;
    break;
   }
   $$sum16 = 24 - $5 | 0;
   $39 = $p + $$sum16 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   $$sum17 = 12 - $5 | 0;
   $41 = $p + $$sum17 | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   $43 = ($42 | 0) == ($9 | 0);
   do {
    if ($43) {
     $$sum18 = 16 - $5 | 0;
     $$sum19 = $$sum18 + 4 | 0;
     $53 = $p + $$sum19 | 0;
     $54 = HEAP32[$53 >> 2] | 0;
     $55 = ($54 | 0) == (0 | 0);
     if ($55) {
      $56 = $p + $$sum18 | 0;
      $57 = HEAP32[$56 >> 2] | 0;
      $58 = ($57 | 0) == (0 | 0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;
       $RP$0 = $56;
      }
     } else {
      $R$0 = $54;
      $RP$0 = $53;
     }
     while (1) {
      $59 = $R$0 + 20 | 0;
      $60 = HEAP32[$59 >> 2] | 0;
      $61 = ($60 | 0) == (0 | 0);
      if (!$61) {
       $R$0 = $60;
       $RP$0 = $59;
       continue;
      }
      $62 = $R$0 + 16 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      $64 = ($63 | 0) == (0 | 0);
      if ($64) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;
       $RP$0 = $62;
      }
     }
     $65 = $RP$0$lcssa >>> 0 < $11 >>> 0;
     if ($65) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = 8 - $5 | 0;
     $44 = $p + $$sum23 | 0;
     $45 = HEAP32[$44 >> 2] | 0;
     $46 = $45 >>> 0 < $11 >>> 0;
     if ($46) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $47 = $45 + 12 | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     $49 = ($48 | 0) == ($9 | 0);
     if (!$49) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $50 = $42 + 8 | 0;
     $51 = HEAP32[$50 >> 2] | 0;
     $52 = ($51 | 0) == ($9 | 0);
     if ($52) {
      HEAP32[$47 >> 2] = $42;
      HEAP32[$50 >> 2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   } while (0);
   $66 = ($40 | 0) == (0 | 0);
   if ($66) {
    $$0 = $9;
    $$02 = $10;
   } else {
    $$sum20 = 28 - $5 | 0;
    $67 = $p + $$sum20 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = 7464 + ($68 << 2) | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = ($9 | 0) == ($70 | 0);
    if ($71) {
     HEAP32[$69 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[7164 >> 2] | 0;
      $75 = $74 & $73;
      HEAP32[7164 >> 2] = $75;
      $$0 = $9;
      $$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[7176 >> 2] | 0;
     $77 = $40 >>> 0 < $76 >>> 0;
     if ($77) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $78 = $40 + 16 | 0;
     $79 = HEAP32[$78 >> 2] | 0;
     $80 = ($79 | 0) == ($9 | 0);
     if ($80) {
      HEAP32[$78 >> 2] = $R$1;
     } else {
      $81 = $40 + 20 | 0;
      HEAP32[$81 >> 2] = $R$1;
     }
     $82 = ($R$1 | 0) == (0 | 0);
     if ($82) {
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
    $83 = HEAP32[7176 >> 2] | 0;
    $84 = $R$1 >>> 0 < $83 >>> 0;
    if ($84) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $85 = $R$1 + 24 | 0;
    HEAP32[$85 >> 2] = $40;
    $$sum21 = 16 - $5 | 0;
    $86 = $p + $$sum21 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = ($87 | 0) == (0 | 0);
    do {
     if (!$88) {
      $89 = $87 >>> 0 < $83 >>> 0;
      if ($89) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $90 = $R$1 + 16 | 0;
       HEAP32[$90 >> 2] = $87;
       $91 = $87 + 24 | 0;
       HEAP32[$91 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum22 = $$sum21 + 4 | 0;
    $92 = $p + $$sum22 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = ($93 | 0) == (0 | 0);
    if ($94) {
     $$0 = $9;
     $$02 = $10;
    } else {
     $95 = HEAP32[7176 >> 2] | 0;
     $96 = $93 >>> 0 < $95 >>> 0;
     if ($96) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      $97 = $R$1 + 20 | 0;
      HEAP32[$97 >> 2] = $93;
      $98 = $93 + 24 | 0;
      HEAP32[$98 >> 2] = $R$1;
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;
   $$02 = $psize;
  }
 } while (0);
 $106 = HEAP32[7176 >> 2] | 0;
 $107 = $0 >>> 0 < $106 >>> 0;
 if ($107) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $$sum1 = $psize + 4 | 0;
 $108 = $p + $$sum1 | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 $110 = $109 & 2;
 $111 = ($110 | 0) == 0;
 if ($111) {
  $112 = HEAP32[7184 >> 2] | 0;
  $113 = ($0 | 0) == ($112 | 0);
  if ($113) {
   $114 = HEAP32[7172 >> 2] | 0;
   $115 = $114 + $$02 | 0;
   HEAP32[7172 >> 2] = $115;
   HEAP32[7184 >> 2] = $$0;
   $116 = $115 | 1;
   $117 = $$0 + 4 | 0;
   HEAP32[$117 >> 2] = $116;
   $118 = HEAP32[7180 >> 2] | 0;
   $119 = ($$0 | 0) == ($118 | 0);
   if (!$119) {
    return;
   }
   HEAP32[7180 >> 2] = 0;
   HEAP32[7168 >> 2] = 0;
   return;
  }
  $120 = HEAP32[7180 >> 2] | 0;
  $121 = ($0 | 0) == ($120 | 0);
  if ($121) {
   $122 = HEAP32[7168 >> 2] | 0;
   $123 = $122 + $$02 | 0;
   HEAP32[7168 >> 2] = $123;
   HEAP32[7180 >> 2] = $$0;
   $124 = $123 | 1;
   $125 = $$0 + 4 | 0;
   HEAP32[$125 >> 2] = $124;
   $126 = $$0 + $123 | 0;
   HEAP32[$126 >> 2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = $127 + $$02 | 0;
  $129 = $109 >>> 3;
  $130 = $109 >>> 0 < 256;
  do {
   if ($130) {
    $$sum12 = $psize + 8 | 0;
    $131 = $p + $$sum12 | 0;
    $132 = HEAP32[$131 >> 2] | 0;
    $$sum13 = $psize + 12 | 0;
    $133 = $p + $$sum13 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $129 << 1;
    $136 = 7200 + ($135 << 2) | 0;
    $137 = ($132 | 0) == ($136 | 0);
    if (!$137) {
     $138 = $132 >>> 0 < $106 >>> 0;
     if ($138) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $139 = $132 + 12 | 0;
     $140 = HEAP32[$139 >> 2] | 0;
     $141 = ($140 | 0) == ($0 | 0);
     if (!$141) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $142 = ($134 | 0) == ($132 | 0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[7160 >> 2] | 0;
     $146 = $145 & $144;
     HEAP32[7160 >> 2] = $146;
     break;
    }
    $147 = ($134 | 0) == ($136 | 0);
    if ($147) {
     $$pre49 = $134 + 8 | 0;
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = $134 >>> 0 < $106 >>> 0;
     if ($148) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $149 = $134 + 8 | 0;
     $150 = HEAP32[$149 >> 2] | 0;
     $151 = ($150 | 0) == ($0 | 0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $152 = $132 + 12 | 0;
    HEAP32[$152 >> 2] = $134;
    HEAP32[$$pre$phi50Z2D >> 2] = $132;
   } else {
    $$sum2 = $psize + 24 | 0;
    $153 = $p + $$sum2 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $$sum3 = $psize + 12 | 0;
    $155 = $p + $$sum3 | 0;
    $156 = HEAP32[$155 >> 2] | 0;
    $157 = ($156 | 0) == ($0 | 0);
    do {
     if ($157) {
      $$sum5 = $psize + 20 | 0;
      $167 = $p + $$sum5 | 0;
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = ($168 | 0) == (0 | 0);
      if ($169) {
       $$sum4 = $psize + 16 | 0;
       $170 = $p + $$sum4 | 0;
       $171 = HEAP32[$170 >> 2] | 0;
       $172 = ($171 | 0) == (0 | 0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;
        $RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;
       $RP9$0 = $167;
      }
      while (1) {
       $173 = $R7$0 + 20 | 0;
       $174 = HEAP32[$173 >> 2] | 0;
       $175 = ($174 | 0) == (0 | 0);
       if (!$175) {
        $R7$0 = $174;
        $RP9$0 = $173;
        continue;
       }
       $176 = $R7$0 + 16 | 0;
       $177 = HEAP32[$176 >> 2] | 0;
       $178 = ($177 | 0) == (0 | 0);
       if ($178) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;
        $RP9$0 = $176;
       }
      }
      $179 = $RP9$0$lcssa >>> 0 < $106 >>> 0;
      if ($179) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = $psize + 8 | 0;
      $158 = $p + $$sum11 | 0;
      $159 = HEAP32[$158 >> 2] | 0;
      $160 = $159 >>> 0 < $106 >>> 0;
      if ($160) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $161 = $159 + 12 | 0;
      $162 = HEAP32[$161 >> 2] | 0;
      $163 = ($162 | 0) == ($0 | 0);
      if (!$163) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $164 = $156 + 8 | 0;
      $165 = HEAP32[$164 >> 2] | 0;
      $166 = ($165 | 0) == ($0 | 0);
      if ($166) {
       HEAP32[$161 >> 2] = $156;
       HEAP32[$164 >> 2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $180 = ($154 | 0) == (0 | 0);
    if (!$180) {
     $$sum8 = $psize + 28 | 0;
     $181 = $p + $$sum8 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     $183 = 7464 + ($182 << 2) | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     $185 = ($0 | 0) == ($184 | 0);
     if ($185) {
      HEAP32[$183 >> 2] = $R7$1;
      $cond39 = ($R7$1 | 0) == (0 | 0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[7164 >> 2] | 0;
       $189 = $188 & $187;
       HEAP32[7164 >> 2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[7176 >> 2] | 0;
      $191 = $154 >>> 0 < $190 >>> 0;
      if ($191) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $192 = $154 + 16 | 0;
      $193 = HEAP32[$192 >> 2] | 0;
      $194 = ($193 | 0) == ($0 | 0);
      if ($194) {
       HEAP32[$192 >> 2] = $R7$1;
      } else {
       $195 = $154 + 20 | 0;
       HEAP32[$195 >> 2] = $R7$1;
      }
      $196 = ($R7$1 | 0) == (0 | 0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[7176 >> 2] | 0;
     $198 = $R7$1 >>> 0 < $197 >>> 0;
     if ($198) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $199 = $R7$1 + 24 | 0;
     HEAP32[$199 >> 2] = $154;
     $$sum9 = $psize + 16 | 0;
     $200 = $p + $$sum9 | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     $202 = ($201 | 0) == (0 | 0);
     do {
      if (!$202) {
       $203 = $201 >>> 0 < $197 >>> 0;
       if ($203) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $204 = $R7$1 + 16 | 0;
        HEAP32[$204 >> 2] = $201;
        $205 = $201 + 24 | 0;
        HEAP32[$205 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $$sum10 = $psize + 20 | 0;
     $206 = $p + $$sum10 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     $208 = ($207 | 0) == (0 | 0);
     if (!$208) {
      $209 = HEAP32[7176 >> 2] | 0;
      $210 = $207 >>> 0 < $209 >>> 0;
      if ($210) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $211 = $R7$1 + 20 | 0;
       HEAP32[$211 >> 2] = $207;
       $212 = $207 + 24 | 0;
       HEAP32[$212 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  $213 = $128 | 1;
  $214 = $$0 + 4 | 0;
  HEAP32[$214 >> 2] = $213;
  $215 = $$0 + $128 | 0;
  HEAP32[$215 >> 2] = $128;
  $216 = HEAP32[7180 >> 2] | 0;
  $217 = ($$0 | 0) == ($216 | 0);
  if ($217) {
   HEAP32[7168 >> 2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108 >> 2] = $218;
  $219 = $$02 | 1;
  $220 = $$0 + 4 | 0;
  HEAP32[$220 >> 2] = $219;
  $221 = $$0 + $$02 | 0;
  HEAP32[$221 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = $$1 >>> 0 < 256;
 if ($223) {
  $224 = $222 << 1;
  $225 = 7200 + ($224 << 2) | 0;
  $226 = HEAP32[7160 >> 2] | 0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228 | 0) == 0;
  if ($229) {
   $230 = $226 | $227;
   HEAP32[7160 >> 2] = $230;
   $$pre = $224 + 2 | 0;
   $$pre48 = 7200 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre48;
   $F16$0 = $225;
  } else {
   $$sum7 = $224 + 2 | 0;
   $231 = 7200 + ($$sum7 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   $233 = HEAP32[7176 >> 2] | 0;
   $234 = $232 >>> 0 < $233 >>> 0;
   if ($234) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   } else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  $235 = $F16$0 + 12 | 0;
  HEAP32[$235 >> 2] = $$0;
  $236 = $$0 + 8 | 0;
  HEAP32[$236 >> 2] = $F16$0;
  $237 = $$0 + 12 | 0;
  HEAP32[$237 >> 2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238 | 0) == 0;
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = $$1 >>> 0 > 16777215;
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = $238 + 1048320 | 0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = $244 + 520192 | 0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = $249 + 245760 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = 14 - $253 | 0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = $254 + $256 | 0;
   $258 = $257 << 1;
   $259 = $257 + 7 | 0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = 7464 + ($I19$0 << 2) | 0;
 $264 = $$0 + 28 | 0;
 HEAP32[$264 >> 2] = $I19$0;
 $265 = $$0 + 16 | 0;
 $266 = $$0 + 20 | 0;
 HEAP32[$266 >> 2] = 0;
 HEAP32[$265 >> 2] = 0;
 $267 = HEAP32[7164 >> 2] | 0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269 | 0) == 0;
 if ($270) {
  $271 = $267 | $268;
  HEAP32[7164 >> 2] = $271;
  HEAP32[$263 >> 2] = $$0;
  $272 = $$0 + 24 | 0;
  HEAP32[$272 >> 2] = $263;
  $273 = $$0 + 12 | 0;
  HEAP32[$273 >> 2] = $$0;
  $274 = $$0 + 8 | 0;
  HEAP32[$274 >> 2] = $$0;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 $276 = $275 + 4 | 0;
 $277 = HEAP32[$276 >> 2] | 0;
 $278 = $277 & -8;
 $279 = ($278 | 0) == ($$1 | 0);
 L191 : do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0 | 0) == 31;
   $281 = $I19$0 >>> 1;
   $282 = 25 - $281 | 0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;
   $T$042 = $275;
   while (1) {
    $291 = $K20$043 >>> 31;
    $292 = ($T$042 + 16 | 0) + ($291 << 2) | 0;
    $287 = HEAP32[$292 >> 2] | 0;
    $293 = ($287 | 0) == (0 | 0);
    if ($293) {
     $$lcssa = $292;
     $T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = $287 + 4 | 0;
    $288 = HEAP32[$286 >> 2] | 0;
    $289 = $288 & -8;
    $290 = ($289 | 0) == ($$1 | 0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;
     $T$042 = $287;
    }
   }
   $294 = HEAP32[7176 >> 2] | 0;
   $295 = $$lcssa >>> 0 < $294 >>> 0;
   if ($295) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$$lcssa >> 2] = $$0;
   $296 = $$0 + 24 | 0;
   HEAP32[$296 >> 2] = $T$042$lcssa;
   $297 = $$0 + 12 | 0;
   HEAP32[$297 >> 2] = $$0;
   $298 = $$0 + 8 | 0;
   HEAP32[$298 >> 2] = $$0;
   return;
  }
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[7176 >> 2] | 0;
 $302 = $300 >>> 0 >= $301 >>> 0;
 $not$ = $T$0$lcssa >>> 0 >= $301 >>> 0;
 $303 = $302 & $not$;
 if (!$303) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $304 = $300 + 12 | 0;
 HEAP32[$304 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 $305 = $$0 + 8 | 0;
 HEAP32[$305 >> 2] = $300;
 $306 = $$0 + 12 | 0;
 HEAP32[$306 >> 2] = $T$0$lcssa;
 $307 = $$0 + 24 | 0;
 HEAP32[$307 >> 2] = 0;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $base >>> 0 > 36;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   $5 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$5 >> 2] = 22;
   $286 = 0;
   $287 = 0;
  } else {
   $3 = $f + 4 | 0;
   $4 = $f + 100 | 0;
   while (1) {
    $6 = HEAP32[$3 >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    $8 = $6 >>> 0 < $7 >>> 0;
    if ($8) {
     $9 = $6 + 1 | 0;
     HEAP32[$3 >> 2] = $9;
     $10 = HEAP8[$6 >> 0] | 0;
     $11 = $10 & 255;
     $13 = $11;
    } else {
     $12 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $13 = $12;
    }
    $14 = (tempInt = _isspace($13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135 | 0) == 45;
   L11 : do {
    switch ($$lcssa135 | 0) {
    case 43:
    case 45:
     {
      $17 = $16 << 31 >> 31;
      $18 = HEAP32[$3 >> 2] | 0;
      $19 = HEAP32[$4 >> 2] | 0;
      $20 = $18 >>> 0 < $19 >>> 0;
      if ($20) {
       $21 = $18 + 1 | 0;
       HEAP32[$3 >> 2] = $21;
       $22 = HEAP8[$18 >> 0] | 0;
       $23 = $22 & 255;
       $c$0 = $23;
       $neg$0 = $17;
       break L11;
      } else {
       $24 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $c$0 = $24;
       $neg$0 = $17;
       break L11;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa135;
      $neg$0 = 0;
     }
    }
   } while (0);
   $25 = ($base | 0) == 0;
   $26 = $base & -17;
   $27 = ($26 | 0) == 0;
   $28 = ($c$0 | 0) == 48;
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3 >> 2] | 0;
     $30 = HEAP32[$4 >> 2] | 0;
     $31 = $29 >>> 0 < $30 >>> 0;
     if ($31) {
      $32 = $29 + 1 | 0;
      HEAP32[$3 >> 2] = $32;
      $33 = HEAP8[$29 >> 0] | 0;
      $34 = $33 & 255;
      $37 = $34;
     } else {
      $35 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36 | 0) == 120;
     if (!$38) {
      if ($25) {
       $$123 = 8;
       $c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;
       $c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3 >> 2] | 0;
     $40 = HEAP32[$4 >> 2] | 0;
     $41 = $39 >>> 0 < $40 >>> 0;
     if ($41) {
      $42 = $39 + 1 | 0;
      HEAP32[$3 >> 2] = $42;
      $43 = HEAP8[$39 >> 0] | 0;
      $44 = $43 & 255;
      $46 = $44;
     } else {
      $45 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $46 = $45;
     }
     $$sum20 = $46 + 1 | 0;
     $47 = 18001 + $$sum20 | 0;
     $48 = HEAP8[$47 >> 0] | 0;
     $49 = ($48 & 255) > 15;
     if ($49) {
      $50 = HEAP32[$4 >> 2] | 0;
      $51 = ($50 | 0) == (0 | 0);
      if (!$51) {
       $52 = HEAP32[$3 >> 2] | 0;
       $53 = $52 + -1 | 0;
       HEAP32[$3 >> 2] = $53;
      }
      $54 = ($pok | 0) == 0;
      if ($54) {
       ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
       $286 = 0;
       $287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;
       $287 = 0;
       break L1;
      }
      $55 = HEAP32[$3 >> 2] | 0;
      $56 = $55 + -1 | 0;
      HEAP32[$3 >> 2] = $56;
      $286 = 0;
      $287 = 0;
      break L1;
     } else {
      $$123 = 16;
      $c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = $c$0 + 1 | 0;
     $57 = 18001 + $$sum | 0;
     $58 = HEAP8[$57 >> 0] | 0;
     $59 = $58 & 255;
     $60 = $59 >>> 0 < $$base21 >>> 0;
     if ($60) {
      $$1 = $$base21;
      $c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4 >> 2] | 0;
      $62 = ($61 | 0) == (0 | 0);
      if (!$62) {
       $63 = HEAP32[$3 >> 2] | 0;
       $64 = $63 + -1 | 0;
       HEAP32[$3 >> 2] = $64;
      }
      ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
      $65 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[$65 >> 2] = 22;
      $286 = 0;
      $287 = 0;
      break L1;
     }
    }
   } while (0);
   if ((label | 0) == 32) {
    $66 = ($$1 | 0) == 10;
    if ($66) {
     $67 = $c$1 + -48 | 0;
     $68 = $67 >>> 0 < 10;
     if ($68) {
      $71 = $67;
      $x$082 = 0;
      while (1) {
       $69 = $x$082 * 10 | 0;
       $70 = $69 + $71 | 0;
       $72 = HEAP32[$3 >> 2] | 0;
       $73 = HEAP32[$4 >> 2] | 0;
       $74 = $72 >>> 0 < $73 >>> 0;
       if ($74) {
        $75 = $72 + 1 | 0;
        HEAP32[$3 >> 2] = $75;
        $76 = HEAP8[$72 >> 0] | 0;
        $77 = $76 & 255;
        $c$2$be = $77;
       } else {
        $78 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $c$2$be = $78;
       }
       $79 = $c$2$be + -48 | 0;
       $80 = $79 >>> 0 < 10;
       $81 = $70 >>> 0 < 429496729;
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;
        $x$082 = $70;
       } else {
        $$lcssa134 = $70;
        $c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;
      $289 = 0;
      $c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;
      $289 = 0;
      $c$2$lcssa = $c$1;
     }
     $83 = $c$2$lcssa + -48 | 0;
     $84 = $83 >>> 0 < 10;
     if ($84) {
      $85 = $288;
      $86 = $289;
      $90 = $83;
      $c$371 = $c$2$lcssa;
      while (1) {
       $87 = (tempInt = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $88 = tempRet0;
       $89 = ($90 | 0) < 0;
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = $88 >>> 0 > $93 >>> 0;
       $95 = $87 >>> 0 > $92 >>> 0;
       $96 = ($88 | 0) == ($93 | 0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;
        $290 = $85;
        $291 = $86;
        $c$3$lcssa = $c$371;
        break;
       }
       $99 = (tempInt = _i64Add($87 | 0, $88 | 0, $90 | 0, $91 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $100 = tempRet0;
       $101 = HEAP32[$3 >> 2] | 0;
       $102 = HEAP32[$4 >> 2] | 0;
       $103 = $101 >>> 0 < $102 >>> 0;
       if ($103) {
        $104 = $101 + 1 | 0;
        HEAP32[$3 >> 2] = $104;
        $105 = HEAP8[$101 >> 0] | 0;
        $106 = $105 & 255;
        $c$3$be = $106;
       } else {
        $107 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $c$3$be = $107;
       }
       $108 = $c$3$be + -48 | 0;
       $109 = $108 >>> 0 < 10;
       $110 = $100 >>> 0 < 429496729;
       $111 = $99 >>> 0 < 2576980378;
       $112 = ($100 | 0) == 429496729;
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;
        $86 = $100;
        $90 = $108;
        $c$371 = $c$3$be;
       } else {
        $$lcssa = $108;
        $290 = $99;
        $291 = $100;
        $c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = $$lcssa >>> 0 > 9;
      if ($115) {
       $260 = $291;
       $262 = $290;
       $neg$1 = $neg$0;
      } else {
       $$122 = 10;
       $292 = $290;
       $293 = $291;
       $c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;
      $262 = $288;
      $neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;
     $c$124 = $c$1;
     label = 46;
    }
   }
   L63 : do {
    if ((label | 0) == 46) {
     $116 = $$123 + -1 | 0;
     $117 = $116 & $$123;
     $118 = ($117 | 0) == 0;
     if ($118) {
      $123 = $$123 * 23 | 0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = 18258 + $125 | 0;
      $127 = HEAP8[$126 >> 0] | 0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = $c$124 + 1 | 0;
      $129 = 18001 + $$sum1445 | 0;
      $130 = HEAP8[$129 >> 0] | 0;
      $131 = $130 & 255;
      $132 = $131 >>> 0 < $$123 >>> 0;
      if ($132) {
       $135 = $131;
       $x$146 = 0;
       while (1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3 >> 2] | 0;
        $137 = HEAP32[$4 >> 2] | 0;
        $138 = $136 >>> 0 < $137 >>> 0;
        if ($138) {
         $139 = $136 + 1 | 0;
         HEAP32[$3 >> 2] = $139;
         $140 = HEAP8[$136 >> 0] | 0;
         $141 = $140 & 255;
         $c$4$be = $141;
        } else {
         $142 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $c$4$be = $142;
        }
        $$sum14 = $c$4$be + 1 | 0;
        $143 = 18001 + $$sum14 | 0;
        $144 = HEAP8[$143 >> 0] | 0;
        $145 = $144 & 255;
        $146 = $145 >>> 0 < $$123 >>> 0;
        $147 = $134 >>> 0 < 134217728;
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;
         $x$146 = $134;
        } else {
         $$lcssa130 = $134;
         $$lcssa131 = $144;
         $c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;
       $155 = 0;
       $157 = $$lcssa130;
       $c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;
       $155 = 0;
       $157 = 0;
       $c$4$lcssa = $c$124;
      }
      $149 = (tempInt = _bitshift64Lshr(-1, -1, $128 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $150 = tempRet0;
      $151 = $152 & 255;
      $153 = $151 >>> 0 >= $$123 >>> 0;
      $154 = $155 >>> 0 > $150 >>> 0;
      $156 = $157 >>> 0 > $149 >>> 0;
      $158 = ($155 | 0) == ($150 | 0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;
       $292 = $157;
       $293 = $155;
       $c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;
       $162 = $155;
       $166 = $152;
      }
      while (1) {
       $163 = (tempInt = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $164 = tempRet0;
       $165 = $166 & 255;
       $167 = $165 | $163;
       $168 = HEAP32[$3 >> 2] | 0;
       $169 = HEAP32[$4 >> 2] | 0;
       $170 = $168 >>> 0 < $169 >>> 0;
       if ($170) {
        $171 = $168 + 1 | 0;
        HEAP32[$3 >> 2] = $171;
        $172 = HEAP8[$168 >> 0] | 0;
        $173 = $172 & 255;
        $c$5$be = $173;
       } else {
        $174 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $c$5$be = $174;
       }
       $$sum15 = $c$5$be + 1 | 0;
       $175 = 18001 + $$sum15 | 0;
       $176 = HEAP8[$175 >> 0] | 0;
       $177 = $176 & 255;
       $178 = $177 >>> 0 >= $$123 >>> 0;
       $179 = $164 >>> 0 > $150 >>> 0;
       $180 = $167 >>> 0 > $149 >>> 0;
       $181 = ($164 | 0) == ($150 | 0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;
        $292 = $167;
        $293 = $164;
        $c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;
        $162 = $164;
        $166 = $176;
       }
      }
     }
     $$sum1865 = $c$124 + 1 | 0;
     $119 = 18001 + $$sum1865 | 0;
     $120 = HEAP8[$119 >> 0] | 0;
     $121 = $120 & 255;
     $122 = $121 >>> 0 < $$123 >>> 0;
     if ($122) {
      $186 = $121;
      $x$266 = 0;
      while (1) {
       $184 = Math_imul($x$266, $$123) | 0;
       $185 = $186 + $184 | 0;
       $187 = HEAP32[$3 >> 2] | 0;
       $188 = HEAP32[$4 >> 2] | 0;
       $189 = $187 >>> 0 < $188 >>> 0;
       if ($189) {
        $190 = $187 + 1 | 0;
        HEAP32[$3 >> 2] = $190;
        $191 = HEAP8[$187 >> 0] | 0;
        $192 = $191 & 255;
        $c$6$be = $192;
       } else {
        $193 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $c$6$be = $193;
       }
       $$sum18 = $c$6$be + 1 | 0;
       $194 = 18001 + $$sum18 | 0;
       $195 = HEAP8[$194 >> 0] | 0;
       $196 = $195 & 255;
       $197 = $196 >>> 0 < $$123 >>> 0;
       $198 = $185 >>> 0 < 119304647;
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;
        $x$266 = $185;
       } else {
        $$lcssa132 = $185;
        $$lcssa133 = $195;
        $c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;
      $294 = $$lcssa132;
      $295 = 0;
      $c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;
      $294 = 0;
      $295 = 0;
      $c$6$lcssa = $c$124;
     }
     $200 = $201 & 255;
     $202 = $200 >>> 0 < $$123 >>> 0;
     if ($202) {
      $203 = (tempInt = ___udivdi3(-1, -1, $$123 | 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $204 = tempRet0;
      $206 = $295;
      $208 = $294;
      $215 = $201;
      $c$753 = $c$6$lcssa;
      while (1) {
       $205 = $206 >>> 0 > $204 >>> 0;
       $207 = $208 >>> 0 > $203 >>> 0;
       $209 = ($206 | 0) == ($204 | 0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$122 = $$123;
        $292 = $208;
        $293 = $206;
        $c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (tempInt = ___muldi3($208 | 0, $206 | 0, $$123 | 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $213 = tempRet0;
       $214 = $215 & 255;
       $216 = $214 ^ -1;
       $217 = $213 >>> 0 > 4294967295;
       $218 = $212 >>> 0 > $216 >>> 0;
       $219 = ($213 | 0) == -1;
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;
        $292 = $208;
        $293 = $206;
        $c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (tempInt = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $223 = tempRet0;
       $224 = HEAP32[$3 >> 2] | 0;
       $225 = HEAP32[$4 >> 2] | 0;
       $226 = $224 >>> 0 < $225 >>> 0;
       if ($226) {
        $227 = $224 + 1 | 0;
        HEAP32[$3 >> 2] = $227;
        $228 = HEAP8[$224 >> 0] | 0;
        $229 = $228 & 255;
        $c$7$be = $229;
       } else {
        $230 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $c$7$be = $230;
       }
       $$sum19 = $c$7$be + 1 | 0;
       $231 = 18001 + $$sum19 | 0;
       $232 = HEAP8[$231 >> 0] | 0;
       $233 = $232 & 255;
       $234 = $233 >>> 0 < $$123 >>> 0;
       if ($234) {
        $206 = $223;
        $208 = $222;
        $215 = $232;
        $c$753 = $c$7$be;
       } else {
        $$122 = $$123;
        $292 = $222;
        $293 = $223;
        $c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;
      $292 = $294;
      $293 = $295;
      $c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    $$sum16 = $c$8 + 1 | 0;
    $235 = 18001 + $$sum16 | 0;
    $236 = HEAP8[$235 >> 0] | 0;
    $237 = $236 & 255;
    $238 = $237 >>> 0 < $$122 >>> 0;
    if ($238) {
     while (1) {
      $239 = HEAP32[$3 >> 2] | 0;
      $240 = HEAP32[$4 >> 2] | 0;
      $241 = $239 >>> 0 < $240 >>> 0;
      if ($241) {
       $242 = $239 + 1 | 0;
       HEAP32[$3 >> 2] = $242;
       $243 = HEAP8[$239 >> 0] | 0;
       $244 = $243 & 255;
       $c$9$be = $244;
      } else {
       $245 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $c$9$be = $245;
      }
      $$sum17 = $c$9$be + 1 | 0;
      $246 = 18001 + $$sum17 | 0;
      $247 = HEAP8[$246 >> 0] | 0;
      $248 = $247 & 255;
      $249 = $248 >>> 0 < $$122 >>> 0;
      if (!$249) {
       break;
      }
     }
     $250 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$250 >> 2] = 34;
     $251 = $0 & 1;
     $252 = ($251 | 0) == 0;
     $253 = 0 == 0;
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;
     $262 = $0;
     $neg$1 = $neg$0$;
    } else {
     $260 = $293;
     $262 = $292;
     $neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4 >> 2] | 0;
   $256 = ($255 | 0) == (0 | 0);
   if (!$256) {
    $257 = HEAP32[$3 >> 2] | 0;
    $258 = $257 + -1 | 0;
    HEAP32[$3 >> 2] = $258;
   }
   $259 = $260 >>> 0 < $1 >>> 0;
   $261 = $262 >>> 0 < $0 >>> 0;
   $263 = ($260 | 0) == ($1 | 0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!$265) {
    $266 = $0 & 1;
    $267 = ($266 | 0) != 0;
    $268 = 0 != 0;
    $269 = $267 | $268;
    $270 = ($neg$1 | 0) != 0;
    $or$cond12 = $269 | $270;
    if (!$or$cond12) {
     $271 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$271 >> 2] = 34;
     $272 = (tempInt = _i64Add($0 | 0, $1 | 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $273 = tempRet0;
     $286 = $273;
     $287 = $272;
     break;
    }
    $274 = $260 >>> 0 > $1 >>> 0;
    $275 = $262 >>> 0 > $0 >>> 0;
    $276 = ($260 | 0) == ($1 | 0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$279 >> 2] = 34;
     $286 = $1;
     $287 = $0;
     break;
    }
   }
   $280 = ($neg$1 | 0) < 0;
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = (tempInt = _i64Subtract($282 | 0, $283 | 0, $neg$1 | 0, $281 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $285 = tempRet0;
   $286 = $285;
   $287 = $284;
  }
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E13escape_stringERKS9_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__begin = 0, $__end = 0, $__i$i$i = 0, $__range = 0, $c = 0, $pos = 0, $result = 0, $space = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $150 = sp + 184 | 0;
 $166 = sp + 120 | 0;
 $result = sp + 36 | 0;
 $__begin = sp + 24 | 0;
 $__end = sp + 20 | 0;
 $184 = $s;
 $188 = $184;
 $189 = (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E11extra_spaceERKS9_($188) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $space = $189;
 $190 = $space;
 $191 = ($190 | 0) == 0;
 $192 = $184;
 if ($191) {
  __THREW__ = 0;
  invoke_vii(411, $agg$result | 0, $192 | 0), asyncState ? abort(-12) | 0 : 0;
  $193 = __THREW__;
  __THREW__ = 0;
  $194 = $193 & 1;
  if ($194) {
   $562 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $563 = tempRet0;
   ___clang_call_terminate($562), asyncState ? abort(-12) | 0 : 0;
  } else {
   STACKTOP = sp;
   return;
  }
 }
 $183 = $192;
 $195 = $183;
 $182 = $195;
 $196 = $182;
 $181 = $196;
 $197 = $181;
 $180 = $197;
 $198 = $180;
 $199 = HEAP8[$198 >> 0] | 0;
 $200 = $199 & 255;
 $201 = $200 & 1;
 $202 = ($201 | 0) != 0;
 if ($202) {
  $176 = $195;
  $203 = $176;
  $175 = $203;
  $204 = $175;
  $174 = $204;
  $205 = $174;
  $206 = $205 + 4 | 0;
  $207 = HEAP32[$206 >> 2] | 0;
  $216 = $207;
 } else {
  $179 = $195;
  $208 = $179;
  $178 = $208;
  $209 = $178;
  $177 = $209;
  $210 = $177;
  $211 = HEAP8[$210 >> 0] | 0;
  $212 = $211 & 255;
  $213 = $212 >> 1;
  $216 = $213;
 }
 $214 = $space;
 $215 = $216 + $214 | 0;
 $171 = $result;
 $172 = $215;
 $173 = 92;
 $217 = $171;
 $170 = $217;
 $218 = $170;
 $169 = $218;
 $219 = $169;
 $168 = $219;
 $220 = $172;
 $221 = $173;
 __THREW__ = 0;
 invoke_viii(412, $217 | 0, $220 | 0, $221 | 0), asyncState ? abort(-12) | 0 : 0;
 $222 = __THREW__;
 __THREW__ = 0;
 $223 = $222 & 1;
 if ($223) {
  $562 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $563 = tempRet0;
  ___clang_call_terminate($562), asyncState ? abort(-12) | 0 : 0;
 }
 $pos = 0;
 $224 = $184;
 $__range = $224;
 $225 = $__range;
 $167 = $225;
 $226 = $167;
 $165 = $226;
 $227 = $165;
 $164 = $227;
 $228 = $164;
 $163 = $228;
 $229 = $163;
 $162 = $229;
 $230 = $162;
 $231 = HEAP8[$230 >> 0] | 0;
 $232 = $231 & 255;
 $233 = $232 & 1;
 $234 = ($233 | 0) != 0;
 if ($234) {
  $156 = $227;
  $235 = $156;
  $155 = $235;
  $236 = $155;
  $154 = $236;
  $237 = $154;
  $238 = $237 + 8 | 0;
  $239 = HEAP32[$238 >> 2] | 0;
  $246 = $239;
 } else {
  $161 = $227;
  $240 = $161;
  $160 = $240;
  $241 = $160;
  $159 = $241;
  $242 = $159;
  $243 = $242 + 1 | 0;
  $158 = $243;
  $244 = $158;
  $157 = $244;
  $245 = $157;
  $246 = $245;
 }
 $152 = $166;
 $153 = $246;
 $247 = $152;
 $248 = $153;
 HEAP32[$247 >> 2] = $248;
 $249 = HEAP32[$166 >> 2] | 0;
 HEAP32[$__begin >> 2] = $249;
 $250 = $__range;
 $151 = $250;
 $251 = $151;
 $149 = $251;
 $252 = $149;
 $148 = $252;
 $253 = $148;
 $147 = $253;
 $254 = $147;
 $146 = $254;
 $255 = $146;
 $256 = HEAP8[$255 >> 0] | 0;
 $257 = $256 & 255;
 $258 = $257 & 1;
 $259 = ($258 | 0) != 0;
 if ($259) {
  $140 = $252;
  $260 = $140;
  $139 = $260;
  $261 = $139;
  $138 = $261;
  $262 = $138;
  $263 = $262 + 8 | 0;
  $264 = HEAP32[$263 >> 2] | 0;
  $291 = $264;
 } else {
  $145 = $252;
  $265 = $145;
  $144 = $265;
  $266 = $144;
  $143 = $266;
  $267 = $143;
  $268 = $267 + 1 | 0;
  $142 = $268;
  $269 = $142;
  $141 = $269;
  $270 = $141;
  $291 = $270;
 }
 $135 = $251;
 $271 = $135;
 $134 = $271;
 $272 = $134;
 $133 = $272;
 $273 = $133;
 $132 = $273;
 $274 = $132;
 $275 = HEAP8[$274 >> 0] | 0;
 $276 = $275 & 255;
 $277 = $276 & 1;
 $278 = ($277 | 0) != 0;
 if ($278) {
  $128 = $271;
  $279 = $128;
  $127 = $279;
  $280 = $127;
  $126 = $280;
  $281 = $126;
  $282 = $281 + 4 | 0;
  $283 = HEAP32[$282 >> 2] | 0;
  $292 = $283;
 } else {
  $131 = $271;
  $284 = $131;
  $130 = $284;
  $285 = $130;
  $129 = $285;
  $286 = $129;
  $287 = HEAP8[$286 >> 0] | 0;
  $288 = $287 & 255;
  $289 = $288 >> 1;
  $292 = $289;
 }
 $290 = $291 + $292 | 0;
 $136 = $150;
 $137 = $290;
 $293 = $136;
 $294 = $137;
 HEAP32[$293 >> 2] = $294;
 $295 = HEAP32[$150 >> 2] | 0;
 HEAP32[$__end >> 2] = $295;
 L26 : while (1) {
  $4 = $__begin;
  $5 = $__end;
  $296 = $4;
  $297 = $5;
  $2 = $296;
  $3 = $297;
  $298 = $2;
  $1 = $298;
  $299 = $1;
  $300 = HEAP32[$299 >> 2] | 0;
  $301 = $3;
  $0 = $301;
  $302 = $0;
  $303 = HEAP32[$302 >> 2] | 0;
  $304 = ($300 | 0) == ($303 | 0);
  $305 = $304 ^ 1;
  if (!$305) {
   break;
  }
  $6 = $__begin;
  $306 = $6;
  $307 = HEAP32[$306 >> 2] | 0;
  $c = $307;
  $308 = $c;
  $309 = HEAP8[$308 >> 0] | 0;
  $310 = $309 << 24 >> 24;
  L29 : do {
   switch ($310 | 0) {
   case 34:
    {
     $311 = $pos;
     $312 = $311 + 1 | 0;
     $19 = $result;
     $20 = $312;
     $313 = $19;
     $18 = $313;
     $314 = $18;
     $17 = $314;
     $315 = $17;
     $16 = $315;
     $316 = $16;
     $15 = $316;
     $317 = $15;
     $318 = HEAP8[$317 >> 0] | 0;
     $319 = $318 & 255;
     $320 = $319 & 1;
     $321 = ($320 | 0) != 0;
     if ($321) {
      $9 = $314;
      $322 = $9;
      $8 = $322;
      $323 = $8;
      $7 = $323;
      $324 = $7;
      $325 = $324 + 8 | 0;
      $326 = HEAP32[$325 >> 2] | 0;
      $335 = $326;
     } else {
      $14 = $314;
      $327 = $14;
      $13 = $327;
      $328 = $13;
      $12 = $328;
      $329 = $12;
      $330 = $329 + 1 | 0;
      $11 = $330;
      $331 = $11;
      $10 = $331;
      $332 = $10;
      $335 = $332;
     }
     $333 = $20;
     $334 = $335 + $333 | 0;
     HEAP8[$334 >> 0] = 34;
     $336 = $pos;
     $337 = $336 + 2 | 0;
     $pos = $337;
     break;
    }
   case 92:
    {
     $341 = $pos;
     $342 = $341 + 2 | 0;
     $pos = $342;
     break;
    }
   case 8:
    {
     $343 = $pos;
     $344 = $343 + 1 | 0;
     $33 = $result;
     $34 = $344;
     $345 = $33;
     $32 = $345;
     $346 = $32;
     $31 = $346;
     $347 = $31;
     $30 = $347;
     $348 = $30;
     $29 = $348;
     $349 = $29;
     $350 = HEAP8[$349 >> 0] | 0;
     $351 = $350 & 255;
     $352 = $351 & 1;
     $353 = ($352 | 0) != 0;
     if ($353) {
      $23 = $346;
      $354 = $23;
      $22 = $354;
      $355 = $22;
      $21 = $355;
      $356 = $21;
      $357 = $356 + 8 | 0;
      $358 = HEAP32[$357 >> 2] | 0;
      $367 = $358;
     } else {
      $28 = $346;
      $359 = $28;
      $27 = $359;
      $360 = $27;
      $26 = $360;
      $361 = $26;
      $362 = $361 + 1 | 0;
      $25 = $362;
      $363 = $25;
      $24 = $363;
      $364 = $24;
      $367 = $364;
     }
     $365 = $34;
     $366 = $367 + $365 | 0;
     HEAP8[$366 >> 0] = 98;
     $368 = $pos;
     $369 = $368 + 2 | 0;
     $pos = $369;
     break;
    }
   case 12:
    {
     $370 = $pos;
     $371 = $370 + 1 | 0;
     $47 = $result;
     $48 = $371;
     $372 = $47;
     $46 = $372;
     $373 = $46;
     $45 = $373;
     $374 = $45;
     $44 = $374;
     $375 = $44;
     $43 = $375;
     $376 = $43;
     $377 = HEAP8[$376 >> 0] | 0;
     $378 = $377 & 255;
     $379 = $378 & 1;
     $380 = ($379 | 0) != 0;
     if ($380) {
      $37 = $373;
      $381 = $37;
      $36 = $381;
      $382 = $36;
      $35 = $382;
      $383 = $35;
      $384 = $383 + 8 | 0;
      $385 = HEAP32[$384 >> 2] | 0;
      $394 = $385;
     } else {
      $42 = $373;
      $386 = $42;
      $41 = $386;
      $387 = $41;
      $40 = $387;
      $388 = $40;
      $389 = $388 + 1 | 0;
      $39 = $389;
      $390 = $39;
      $38 = $390;
      $391 = $38;
      $394 = $391;
     }
     $392 = $48;
     $393 = $394 + $392 | 0;
     HEAP8[$393 >> 0] = 102;
     $395 = $pos;
     $396 = $395 + 2 | 0;
     $pos = $396;
     break;
    }
   case 10:
    {
     $397 = $pos;
     $398 = $397 + 1 | 0;
     $61 = $result;
     $62 = $398;
     $399 = $61;
     $60 = $399;
     $400 = $60;
     $59 = $400;
     $401 = $59;
     $58 = $401;
     $402 = $58;
     $57 = $402;
     $403 = $57;
     $404 = HEAP8[$403 >> 0] | 0;
     $405 = $404 & 255;
     $406 = $405 & 1;
     $407 = ($406 | 0) != 0;
     if ($407) {
      $51 = $400;
      $408 = $51;
      $50 = $408;
      $409 = $50;
      $49 = $409;
      $410 = $49;
      $411 = $410 + 8 | 0;
      $412 = HEAP32[$411 >> 2] | 0;
      $421 = $412;
     } else {
      $56 = $400;
      $413 = $56;
      $55 = $413;
      $414 = $55;
      $54 = $414;
      $415 = $54;
      $416 = $415 + 1 | 0;
      $53 = $416;
      $417 = $53;
      $52 = $417;
      $418 = $52;
      $421 = $418;
     }
     $419 = $62;
     $420 = $421 + $419 | 0;
     HEAP8[$420 >> 0] = 110;
     $422 = $pos;
     $423 = $422 + 2 | 0;
     $pos = $423;
     break;
    }
   case 13:
    {
     $424 = $pos;
     $425 = $424 + 1 | 0;
     $75 = $result;
     $76 = $425;
     $426 = $75;
     $74 = $426;
     $427 = $74;
     $73 = $427;
     $428 = $73;
     $72 = $428;
     $429 = $72;
     $71 = $429;
     $430 = $71;
     $431 = HEAP8[$430 >> 0] | 0;
     $432 = $431 & 255;
     $433 = $432 & 1;
     $434 = ($433 | 0) != 0;
     if ($434) {
      $65 = $427;
      $435 = $65;
      $64 = $435;
      $436 = $64;
      $63 = $436;
      $437 = $63;
      $438 = $437 + 8 | 0;
      $439 = HEAP32[$438 >> 2] | 0;
      $448 = $439;
     } else {
      $70 = $427;
      $440 = $70;
      $69 = $440;
      $441 = $69;
      $68 = $441;
      $442 = $68;
      $443 = $442 + 1 | 0;
      $67 = $443;
      $444 = $67;
      $66 = $444;
      $445 = $66;
      $448 = $445;
     }
     $446 = $76;
     $447 = $448 + $446 | 0;
     HEAP8[$447 >> 0] = 114;
     $449 = $pos;
     $450 = $449 + 2 | 0;
     $pos = $450;
     break;
    }
   case 9:
    {
     $451 = $pos;
     $452 = $451 + 1 | 0;
     $89 = $result;
     $90 = $452;
     $453 = $89;
     $88 = $453;
     $454 = $88;
     $87 = $454;
     $455 = $87;
     $86 = $455;
     $456 = $86;
     $85 = $456;
     $457 = $85;
     $458 = HEAP8[$457 >> 0] | 0;
     $459 = $458 & 255;
     $460 = $459 & 1;
     $461 = ($460 | 0) != 0;
     if ($461) {
      $79 = $454;
      $462 = $79;
      $78 = $462;
      $463 = $78;
      $77 = $463;
      $464 = $77;
      $465 = $464 + 8 | 0;
      $466 = HEAP32[$465 >> 2] | 0;
      $475 = $466;
     } else {
      $84 = $454;
      $467 = $84;
      $83 = $467;
      $468 = $83;
      $82 = $468;
      $469 = $82;
      $470 = $469 + 1 | 0;
      $81 = $470;
      $471 = $81;
      $80 = $471;
      $472 = $80;
      $475 = $472;
     }
     $473 = $90;
     $474 = $475 + $473 | 0;
     HEAP8[$474 >> 0] = 116;
     $476 = $pos;
     $477 = $476 + 2 | 0;
     $pos = $477;
     break;
    }
   default:
    {
     $478 = $c;
     $479 = HEAP8[$478 >> 0] | 0;
     $480 = $479 << 24 >> 24;
     $481 = ($480 | 0) >= 0;
     if ($481) {
      $482 = $c;
      $483 = HEAP8[$482 >> 0] | 0;
      $484 = $483 << 24 >> 24;
      $485 = ($484 | 0) <= 31;
      if ($485) {
       $486 = $pos;
       $487 = $486 + 1 | 0;
       $103 = $result;
       $104 = $487;
       $488 = $103;
       $102 = $488;
       $489 = $102;
       $101 = $489;
       $490 = $101;
       $100 = $490;
       $491 = $100;
       $99 = $491;
       $492 = $99;
       $493 = HEAP8[$492 >> 0] | 0;
       $494 = $493 & 255;
       $495 = $494 & 1;
       $496 = ($495 | 0) != 0;
       if ($496) {
        $93 = $489;
        $497 = $93;
        $92 = $497;
        $498 = $92;
        $91 = $498;
        $499 = $91;
        $500 = $499 + 8 | 0;
        $501 = HEAP32[$500 >> 2] | 0;
        $510 = $501;
       } else {
        $98 = $489;
        $502 = $98;
        $97 = $502;
        $503 = $97;
        $96 = $503;
        $504 = $96;
        $505 = $504 + 1 | 0;
        $95 = $505;
        $506 = $95;
        $94 = $506;
        $507 = $94;
        $510 = $507;
       }
       $508 = $104;
       $509 = $510 + $508 | 0;
       $511 = $c;
       $512 = HEAP8[$511 >> 0] | 0;
       $513 = $512 << 24 >> 24;
       __THREW__ = 0;
       HEAP32[$vararg_buffer >> 2] = $513;
       (tempInt = invoke_iiii(413, $509 | 0, 14213 | 0, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $514 = __THREW__;
       __THREW__ = 0;
       $515 = $514 & 1;
       if ($515) {
        label = 23;
        break L26;
       }
       $516 = $pos;
       $517 = $516 + 6 | 0;
       $pos = $517;
       break L29;
      }
     }
     $518 = $c;
     $519 = HEAP8[$518 >> 0] | 0;
     $520 = $pos;
     $521 = $520 + 1 | 0;
     $pos = $521;
     $117 = $result;
     $118 = $520;
     $522 = $117;
     $116 = $522;
     $523 = $116;
     $115 = $523;
     $524 = $115;
     $114 = $524;
     $525 = $114;
     $113 = $525;
     $526 = $113;
     $527 = HEAP8[$526 >> 0] | 0;
     $528 = $527 & 255;
     $529 = $528 & 1;
     $530 = ($529 | 0) != 0;
     if ($530) {
      $107 = $523;
      $531 = $107;
      $106 = $531;
      $532 = $106;
      $105 = $532;
      $533 = $105;
      $534 = $533 + 8 | 0;
      $535 = HEAP32[$534 >> 2] | 0;
      $544 = $535;
     } else {
      $112 = $523;
      $536 = $112;
      $111 = $536;
      $537 = $111;
      $110 = $537;
      $538 = $110;
      $539 = $538 + 1 | 0;
      $109 = $539;
      $540 = $109;
      $108 = $540;
      $541 = $108;
      $544 = $541;
     }
     $542 = $118;
     $543 = $544 + $542 | 0;
     HEAP8[$543 >> 0] = $519;
    }
   }
  } while (0);
  $119 = $__begin;
  $545 = $119;
  $546 = HEAP32[$545 >> 2] | 0;
  $547 = $546 + 1 | 0;
  HEAP32[$545 >> 2] = $547;
 }
 if ((label | 0) == 23) {
  $338 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $339 = tempRet0;
  $185 = $338;
  $186 = $339;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($result), asyncState ? abort(-12) | 0 : 0;
  $340 = $185;
  ___clang_call_terminate($340), asyncState ? abort(-12) | 0 : 0;
 }
 $124 = $agg$result;
 $125 = $result;
 $548 = $124;
 $549 = $125;
 $123 = $549;
 $550 = $123;
 HEAP32[$548 >> 2] = HEAP32[$550 >> 2] | 0;
 HEAP32[$548 + 4 >> 2] = HEAP32[$550 + 4 >> 2] | 0;
 HEAP32[$548 + 8 >> 2] = HEAP32[$550 + 8 >> 2] | 0;
 $551 = $125;
 $122 = $551;
 $552 = $122;
 $121 = $552;
 $553 = $121;
 $120 = $553;
 $554 = $120;
 $__a$i$i = $554;
 $__i$i$i = 0;
 while (1) {
  $555 = $__i$i$i;
  $556 = $555 >>> 0 < 3;
  if (!$556) {
   break;
  }
  $557 = $__i$i$i;
  $558 = $__a$i$i;
  $559 = $558 + ($557 << 2) | 0;
  HEAP32[$559 >> 2] = 0;
  $560 = $__i$i$i;
  $561 = $560 + 1 | 0;
  $__i$i$i = $561;
 }
 $187 = 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$044 = 0, $$081 = 0, $$lcssa = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off086 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0100 = 0, $__ky1$087 = 0, $__ky2$094 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$098 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$383 = 0, $__n_does_match$4 = 0, $__n_does_match$592 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$097 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$382 = 0, $__n_might_match$4 = 0, $__st$099 = 0, $__st$184 = 0, $__st$293 = 0, $__st$380 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = $0 - $1 | 0;
 $3 = ($2 | 0) / 12 & -1;
 $4 = $3 >>> 0 > 100;
 do {
  if ($4) {
   $5 = (tempInt = _malloc($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = ($5 | 0) == (0 | 0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(468), asyncState ? abort(-12) | 0 : 0;
    $7 = __THREW__;
    __THREW__ = 0;
    $8 = $7 & 1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $191 = $18;
   $__status$0 = $5;
   label = 11;
  } else {
   $191 = 0;
   $__status$0 = $__statbuf;
   label = 11;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 11) {
   $19 = ($__kb | 0) == ($__ke | 0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;
    $__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0100 = $__kb;
    $__n_does_match$098 = 0;
    $__n_might_match$097 = $3;
    $__st$099 = $__status$0;
    while (1) {
     $22 = HEAP8[$__ky$0100 >> 0] | 0;
     $23 = $22 & 1;
     $24 = $23 << 24 >> 24 == 0;
     if ($24) {
      $27 = $22 & 255;
      $28 = $27 >>> 1;
      $30 = $28;
     } else {
      $25 = $__ky$0100 + 4 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $30 = $26;
     }
     $29 = ($30 | 0) == 0;
     if ($29) {
      HEAP8[$__st$099 >> 0] = 2;
      $31 = $__n_might_match$097 + -1 | 0;
      $32 = $__n_does_match$098 + 1 | 0;
      $__n_does_match$1 = $32;
      $__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$099 >> 0] = 1;
      $__n_does_match$1 = $__n_does_match$098;
      $__n_might_match$1 = $__n_might_match$097;
     }
     $33 = $__ky$0100 + 12 | 0;
     $34 = $__st$099 + 1 | 0;
     $35 = ($33 | 0) == ($__ke | 0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;
      $__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0100 = $33;
      $__n_does_match$098 = $__n_does_match$1;
      $__n_might_match$097 = $__n_might_match$1;
      $__st$099 = $34;
     }
    }
   }
   $20 = ($__kb | 0) == ($__ke | 0);
   $21 = ($__kb | 0) == ($__ke | 0);
   $__indx$0 = 0;
   $__n_does_match$2 = $__n_does_match$0$lcssa;
   $__n_might_match$2 = $__n_might_match$0$lcssa;
   L20 : while (1) {
    $36 = HEAP32[$__b >> 2] | 0;
    $37 = ($36 | 0) == (0 | 0);
    do {
     if ($37) {
      $66 = 1;
     } else {
      $38 = $36 + 12 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = $36 + 16 | 0;
      $41 = HEAP32[$40 >> 2] | 0;
      $42 = ($39 | 0) == ($41 | 0);
      if ($42) {
       $43 = HEAP32[$36 >> 2] | 0;
       $44 = $43 + 36 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       __THREW__ = 0;
       $46 = (tempInt = invoke_ii($45 | 0, $36 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $47 = __THREW__;
       __THREW__ = 0;
       $48 = $47 & 1;
       if ($48) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39 >> 2] | 0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i | 0) == -1;
      if ($50) {
       HEAP32[$__b >> 2] = 0;
       $66 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
       $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
       $66 = $phitmp$i$i$i;
       break;
      }
     }
    } while (0);
    $51 = HEAP32[$__e >> 2] | 0;
    $52 = ($51 | 0) == (0 | 0);
    if ($52) {
     $$pre$i3$i$i19 = 0;
     $67 = 1;
    } else {
     $53 = $51 + 12 | 0;
     $54 = HEAP32[$53 >> 2] | 0;
     $55 = $51 + 16 | 0;
     $56 = HEAP32[$55 >> 2] | 0;
     $57 = ($54 | 0) == ($56 | 0);
     if ($57) {
      $58 = HEAP32[$51 >> 2] | 0;
      $59 = $58 + 36 | 0;
      $60 = HEAP32[$59 >> 2] | 0;
      __THREW__ = 0;
      $61 = (tempInt = invoke_ii($60 | 0, $51 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $62 = __THREW__;
      __THREW__ = 0;
      $63 = $62 & 1;
      if ($63) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54 >> 2] | 0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i | 0) == -1;
     if ($65) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i3$i$i19 = 0;
      $67 = 1;
     } else {
      $$pre$i3$i$i19 = $51;
      $67 = 0;
     }
    }
    $tmp$i$i = $66 ^ $67;
    $68 = ($__n_might_match$2 | 0) != 0;
    $69 = $68 & $tmp$i$i;
    $70 = HEAP32[$__b >> 2] | 0;
    if (!$69) {
     $$lcssa = $70;
     $$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 66;
     break;
    }
    $71 = $70 + 12 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = $70 + 16 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = ($72 | 0) == ($74 | 0);
    if ($75) {
     $76 = HEAP32[$70 >> 2] | 0;
     $77 = $76 + 36 | 0;
     $78 = HEAP32[$77 >> 2] | 0;
     __THREW__ = 0;
     $79 = (tempInt = invoke_ii($78 | 0, $70 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $80 = __THREW__;
     __THREW__ = 0;
     $81 = $80 & 1;
     if ($81) {
      label = 5;
      break;
     } else {
      $$0$i$i = $79;
     }
    } else {
     $82 = HEAP32[$72 >> 2] | 0;
     $$0$i$i = $82;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $83 = HEAP32[$__ct >> 2] | 0;
     $84 = $83 + 28 | 0;
     $85 = HEAP32[$84 >> 2] | 0;
     __THREW__ = 0;
     $86 = (tempInt = invoke_iii($85 | 0, $__ct | 0, $$0$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $87 = __THREW__;
     __THREW__ = 0;
     $88 = $87 & 1;
     if ($88) {
      label = 5;
      break;
     } else {
      $__c$0 = $86;
     }
    }
    $89 = $__indx$0 + 1 | 0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;
     $__n_does_match$3$lcssa = $__n_does_match$2;
     $__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off086 = 0;
     $__ky1$087 = $__kb;
     $__n_does_match$383 = $__n_does_match$2;
     $__n_might_match$382 = $__n_might_match$2;
     $__st$184 = $__status$0;
     while (1) {
      $90 = HEAP8[$__st$184 >> 0] | 0;
      $91 = $90 << 24 >> 24 == 1;
      do {
       if ($91) {
        $92 = HEAP8[$__ky1$087 >> 0] | 0;
        $93 = $92 & 1;
        $94 = $93 << 24 >> 24 == 0;
        if ($94) {
         $97 = $__ky1$087 + 4 | 0;
         $99 = $97;
        } else {
         $95 = $__ky1$087 + 8 | 0;
         $96 = HEAP32[$95 >> 2] | 0;
         $99 = $96;
        }
        $98 = $99 + ($__indx$0 << 2) | 0;
        $100 = HEAP32[$98 >> 2] | 0;
        if ($__case_sensitive) {
         $__kc$0 = $100;
        } else {
         $101 = HEAP32[$__ct >> 2] | 0;
         $102 = $101 + 28 | 0;
         $103 = HEAP32[$102 >> 2] | 0;
         __THREW__ = 0;
         $104 = (tempInt = invoke_iii($103 | 0, $__ct | 0, $100 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $105 = __THREW__;
         __THREW__ = 0;
         $106 = $105 & 1;
         if ($106) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $104;
         }
        }
        $107 = ($__c$0 | 0) == ($__kc$0 | 0);
        if (!$107) {
         HEAP8[$__st$184 >> 0] = 0;
         $119 = $__n_might_match$382 + -1 | 0;
         $__consume$1$off0 = $__consume$0$off086;
         $__n_does_match$4 = $__n_does_match$383;
         $__n_might_match$4 = $119;
         break;
        }
        $108 = HEAP8[$__ky1$087 >> 0] | 0;
        $109 = $108 & 1;
        $110 = $109 << 24 >> 24 == 0;
        if ($110) {
         $113 = $108 & 255;
         $114 = $113 >>> 1;
         $116 = $114;
        } else {
         $111 = $__ky1$087 + 4 | 0;
         $112 = HEAP32[$111 >> 2] | 0;
         $116 = $112;
        }
        $115 = ($116 | 0) == ($89 | 0);
        if ($115) {
         HEAP8[$__st$184 >> 0] = 2;
         $117 = $__n_might_match$382 + -1 | 0;
         $118 = $__n_does_match$383 + 1 | 0;
         $__consume$1$off0 = 1;
         $__n_does_match$4 = $118;
         $__n_might_match$4 = $117;
        } else {
         $__consume$1$off0 = 1;
         $__n_does_match$4 = $__n_does_match$383;
         $__n_might_match$4 = $__n_might_match$382;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off086;
        $__n_does_match$4 = $__n_does_match$383;
        $__n_might_match$4 = $__n_might_match$382;
       }
      } while (0);
      $120 = $__ky1$087 + 12 | 0;
      $121 = $__st$184 + 1 | 0;
      $122 = ($120 | 0) == ($__ke | 0);
      if ($122) {
       $__consume$0$off0$lcssa = $__consume$1$off0;
       $__n_does_match$3$lcssa = $__n_does_match$4;
       $__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off086 = $__consume$1$off0;
       $__ky1$087 = $120;
       $__n_does_match$383 = $__n_does_match$4;
       $__n_might_match$382 = $__n_might_match$4;
       $__st$184 = $121;
      }
     }
    }
    if (!$__consume$0$off0$lcssa) {
     $__indx$0 = $89;
     $__n_does_match$2 = $__n_does_match$3$lcssa;
     $__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $123 = HEAP32[$__b >> 2] | 0;
    $124 = $123 + 12 | 0;
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = $123 + 16 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = ($125 | 0) == ($127 | 0);
    if ($128) {
     $129 = HEAP32[$123 >> 2] | 0;
     $130 = $129 + 40 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($131 | 0, $123 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $132 = __THREW__;
     __THREW__ = 0;
     $133 = $132 & 1;
     if ($133) {
      label = 5;
      break;
     }
    } else {
     $134 = $125 + 4 | 0;
     HEAP32[$124 >> 2] = $134;
    }
    $135 = $__n_does_match$3$lcssa + $__n_might_match$3$lcssa | 0;
    $136 = $135 >>> 0 < 2;
    $or$cond = $136 | $21;
    if ($or$cond) {
     $__indx$0 = $89;
     $__n_does_match$2 = $__n_does_match$3$lcssa;
     $__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$094 = $__kb;
     $__n_does_match$592 = $__n_does_match$3$lcssa;
     $__st$293 = $__status$0;
    }
    while (1) {
     $137 = HEAP8[$__st$293 >> 0] | 0;
     $138 = $137 << 24 >> 24 == 2;
     if ($138) {
      $139 = HEAP8[$__ky2$094 >> 0] | 0;
      $140 = $139 & 1;
      $141 = $140 << 24 >> 24 == 0;
      if ($141) {
       $144 = $139 & 255;
       $145 = $144 >>> 1;
       $147 = $145;
      } else {
       $142 = $__ky2$094 + 4 | 0;
       $143 = HEAP32[$142 >> 2] | 0;
       $147 = $143;
      }
      $146 = ($147 | 0) == ($89 | 0);
      if ($146) {
       $__n_does_match$6 = $__n_does_match$592;
      } else {
       HEAP8[$__st$293 >> 0] = 0;
       $148 = $__n_does_match$592 + -1 | 0;
       $__n_does_match$6 = $148;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$592;
     }
     $149 = $__ky2$094 + 12 | 0;
     $150 = $__st$293 + 1 | 0;
     $151 = ($149 | 0) == ($__ke | 0);
     if ($151) {
      $__indx$0 = $89;
      $__n_does_match$2 = $__n_does_match$6;
      $__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$094 = $149;
      $__n_does_match$592 = $__n_does_match$6;
      $__st$293 = $150;
     }
    }
   }
   if ((label | 0) == 4) {
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    $16 = $191;
    $lpad$phi$index = $9;
    $lpad$phi$index3 = $10;
    break;
   } else if ((label | 0) == 5) {
    $11 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $12 = tempRet0;
    $16 = $191;
    $lpad$phi$index = $11;
    $lpad$phi$index3 = $12;
    break;
   } else if ((label | 0) == 66) {
    $152 = ($$lcssa | 0) == (0 | 0);
    do {
     if ($152) {
      $193 = 1;
     } else {
      $153 = $$lcssa + 12 | 0;
      $154 = HEAP32[$153 >> 2] | 0;
      $155 = $$lcssa + 16 | 0;
      $156 = HEAP32[$155 >> 2] | 0;
      $157 = ($154 | 0) == ($156 | 0);
      if ($157) {
       $158 = HEAP32[$$lcssa >> 2] | 0;
       $159 = $158 + 36 | 0;
       $160 = HEAP32[$159 >> 2] | 0;
       __THREW__ = 0;
       $161 = (tempInt = invoke_ii($160 | 0, $$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $162 = __THREW__;
       __THREW__ = 0;
       $163 = $162 & 1;
       if ($163) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i11 = $161;
       }
      } else {
       $164 = HEAP32[$154 >> 2] | 0;
       $$0$i$i$i$i11 = $164;
      }
      $165 = ($$0$i$i$i$i11 | 0) == -1;
      if ($165) {
       HEAP32[$__b >> 2] = 0;
       $193 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b >> 2] | 0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13 | 0) == (0 | 0);
       $193 = $phitmp$i$i$i14;
       break;
      }
     }
    } while (0);
    $166 = ($$pre$i3$i$i19$lcssa | 0) == (0 | 0);
    do {
     if ($166) {
      label = 79;
     } else {
      $167 = $$pre$i3$i$i19$lcssa + 12 | 0;
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = $$pre$i3$i$i19$lcssa + 16 | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      $171 = ($168 | 0) == ($170 | 0);
      if ($171) {
       $172 = HEAP32[$$pre$i3$i$i19$lcssa >> 2] | 0;
       $173 = $172 + 36 | 0;
       $174 = HEAP32[$173 >> 2] | 0;
       __THREW__ = 0;
       $175 = (tempInt = invoke_ii($174 | 0, $$pre$i3$i$i19$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $176 = __THREW__;
       __THREW__ = 0;
       $177 = $176 & 1;
       if ($177) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i17 = $175;
       }
      } else {
       $178 = HEAP32[$168 >> 2] | 0;
       $$0$i$i1$i$i17 = $178;
      }
      $179 = ($$0$i$i1$i$i17 | 0) == -1;
      if ($179) {
       HEAP32[$__e >> 2] = 0;
       label = 79;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 81;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 79) {
     if ($193) {
      label = 81;
     }
    }
    if ((label | 0) == 81) {
     $180 = HEAP32[$__err >> 2] | 0;
     $181 = $180 | 2;
     HEAP32[$__err >> 2] = $181;
    }
    $182 = ($__kb | 0) == ($__ke | 0);
    L113 : do {
     if ($182) {
      label = 85;
     } else {
      $$081 = $__kb;
      $__st$380 = $__status$0;
      while (1) {
       $183 = HEAP8[$__st$380 >> 0] | 0;
       $184 = $183 << 24 >> 24 == 2;
       if ($184) {
        $$044 = $$081;
        break L113;
       }
       $185 = $$081 + 12 | 0;
       $186 = $__st$380 + 1 | 0;
       $187 = ($185 | 0) == ($__ke | 0);
       if ($187) {
        label = 85;
        break;
       } else {
        $$081 = $185;
        $__st$380 = $186;
       }
      }
     }
    } while (0);
    if ((label | 0) == 85) {
     $188 = HEAP32[$__err >> 2] | 0;
     $189 = $188 | 4;
     HEAP32[$__err >> 2] = $189;
     $$044 = $__ke;
    }
    $190 = ($191 | 0) == 0;
    if (!$190) {
     $192 = $191;
     _free($192), asyncState ? abort(-12) | 0 : 0;
    }
    STACKTOP = sp;
    return $$044 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $13 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $14 = tempRet0;
  $16 = $$ph$ph;
  $lpad$phi$index = $13;
  $lpad$phi$index3 = $14;
 }
 $15 = ($16 | 0) == 0;
 if (!$15) {
  $17 = $16;
  _free($17), asyncState ? abort(-12) | 0 : 0;
 }
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$040 = 0, $$085 = 0, $$lcssa = 0, $$lcssa117 = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off090 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0104 = 0, $__ky1$091 = 0, $__ky2$098 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0102 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$387 = 0, $__n_does_match$4 = 0, $__n_does_match$596 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0101 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$386 = 0, $__n_might_match$4 = 0, $__st$0103 = 0, $__st$188 = 0, $__st$297 = 0, $__st$384 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = $0 - $1 | 0;
 $3 = ($2 | 0) / 12 & -1;
 $4 = $3 >>> 0 > 100;
 do {
  if ($4) {
   $5 = (tempInt = _malloc($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = ($5 | 0) == (0 | 0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(468), asyncState ? abort(-12) | 0 : 0;
    $7 = __THREW__;
    __THREW__ = 0;
    $8 = $7 & 1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $191 = $18;
   $__status$0 = $5;
   label = 11;
  } else {
   $191 = 0;
   $__status$0 = $__statbuf;
   label = 11;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 11) {
   $19 = ($__kb | 0) == ($__ke | 0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;
    $__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0104 = $__kb;
    $__n_does_match$0102 = 0;
    $__n_might_match$0101 = $3;
    $__st$0103 = $__status$0;
    while (1) {
     $22 = HEAP8[$__ky$0104 >> 0] | 0;
     $23 = $22 & 1;
     $24 = $23 << 24 >> 24 == 0;
     if ($24) {
      $27 = $22 & 255;
      $28 = $27 >>> 1;
      $30 = $28;
     } else {
      $25 = $__ky$0104 + 4 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $30 = $26;
     }
     $29 = ($30 | 0) == 0;
     if ($29) {
      HEAP8[$__st$0103 >> 0] = 2;
      $31 = $__n_might_match$0101 + -1 | 0;
      $32 = $__n_does_match$0102 + 1 | 0;
      $__n_does_match$1 = $32;
      $__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$0103 >> 0] = 1;
      $__n_does_match$1 = $__n_does_match$0102;
      $__n_might_match$1 = $__n_might_match$0101;
     }
     $33 = $__ky$0104 + 12 | 0;
     $34 = $__st$0103 + 1 | 0;
     $35 = ($33 | 0) == ($__ke | 0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;
      $__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0104 = $33;
      $__n_does_match$0102 = $__n_does_match$1;
      $__n_might_match$0101 = $__n_might_match$1;
      $__st$0103 = $34;
     }
    }
   }
   $20 = ($__kb | 0) == ($__ke | 0);
   $21 = ($__kb | 0) == ($__ke | 0);
   $__indx$0 = 0;
   $__n_does_match$2 = $__n_does_match$0$lcssa;
   $__n_might_match$2 = $__n_might_match$0$lcssa;
   L20 : while (1) {
    $36 = HEAP32[$__b >> 2] | 0;
    $37 = ($36 | 0) == (0 | 0);
    do {
     if ($37) {
      $51 = 0;
     } else {
      $38 = $36 + 12 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = $36 + 16 | 0;
      $41 = HEAP32[$40 >> 2] | 0;
      $42 = ($39 | 0) == ($41 | 0);
      if ($42) {
       $43 = HEAP32[$36 >> 2] | 0;
       $44 = $43 + 36 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       __THREW__ = 0;
       $46 = (tempInt = invoke_ii($45 | 0, $36 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $47 = __THREW__;
       __THREW__ = 0;
       $48 = $47 & 1;
       if ($48) {
        label = 5;
        break L20;
       }
       $49 = ($46 | 0) == -1;
       if ($49) {
        HEAP32[$__b >> 2] = 0;
        $51 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
        $51 = $$pre$i$i$i;
        break;
       }
      } else {
       $51 = $36;
      }
     }
    } while (0);
    $50 = ($51 | 0) == (0 | 0);
    $52 = HEAP32[$__e >> 2] | 0;
    $53 = ($52 | 0) == (0 | 0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = $52 + 12 | 0;
     $55 = HEAP32[$54 >> 2] | 0;
     $56 = $52 + 16 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     $58 = ($55 | 0) == ($57 | 0);
     if ($58) {
      $59 = HEAP32[$52 >> 2] | 0;
      $60 = $59 + 36 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      __THREW__ = 0;
      $62 = (tempInt = invoke_ii($61 | 0, $52 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $63 = __THREW__;
      __THREW__ = 0;
      $64 = $63 & 1;
      if ($64) {
       label = 5;
       break;
      }
      $65 = ($62 | 0) == -1;
      if ($65) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16 | 0) == (0 | 0);
    $tmp$i$i = $50 ^ $66;
    $67 = ($__n_might_match$2 | 0) != 0;
    $68 = $67 & $tmp$i$i;
    $69 = HEAP32[$__b >> 2] | 0;
    if (!$68) {
     $$lcssa = $66;
     $$lcssa117 = $69;
     $$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 64;
     break;
    }
    $70 = $69 + 12 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $69 + 16 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = ($71 | 0) == ($73 | 0);
    if ($74) {
     $75 = HEAP32[$69 >> 2] | 0;
     $76 = $75 + 36 | 0;
     $77 = HEAP32[$76 >> 2] | 0;
     __THREW__ = 0;
     $78 = (tempInt = invoke_ii($77 | 0, $69 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $79 = __THREW__;
     __THREW__ = 0;
     $80 = $79 & 1;
     if ($80) {
      label = 5;
      break;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP8[$71 >> 0] | 0;
     $82 = $81 & 255;
     $$0$i$i = $82;
    }
    $83 = $$0$i$i & 255;
    if ($__case_sensitive) {
     $__c$0 = $83;
    } else {
     $84 = HEAP32[$__ct >> 2] | 0;
     $85 = $84 + 12 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_iii($86 | 0, $__ct | 0, $83 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 5;
      break;
     } else {
      $__c$0 = $87;
     }
    }
    $90 = $__indx$0 + 1 | 0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;
     $__n_does_match$3$lcssa = $__n_does_match$2;
     $__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off090 = 0;
     $__ky1$091 = $__kb;
     $__n_does_match$387 = $__n_does_match$2;
     $__n_might_match$386 = $__n_might_match$2;
     $__st$188 = $__status$0;
     while (1) {
      $91 = HEAP8[$__st$188 >> 0] | 0;
      $92 = $91 << 24 >> 24 == 1;
      do {
       if ($92) {
        $93 = HEAP8[$__ky1$091 >> 0] | 0;
        $94 = $93 & 1;
        $95 = $94 << 24 >> 24 == 0;
        if ($95) {
         $98 = $__ky1$091 + 1 | 0;
         $100 = $98;
        } else {
         $96 = $__ky1$091 + 8 | 0;
         $97 = HEAP32[$96 >> 2] | 0;
         $100 = $97;
        }
        $99 = $100 + $__indx$0 | 0;
        $101 = HEAP8[$99 >> 0] | 0;
        if ($__case_sensitive) {
         $__kc$0 = $101;
        } else {
         $102 = HEAP32[$__ct >> 2] | 0;
         $103 = $102 + 12 | 0;
         $104 = HEAP32[$103 >> 2] | 0;
         __THREW__ = 0;
         $105 = (tempInt = invoke_iii($104 | 0, $__ct | 0, $101 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $106 = __THREW__;
         __THREW__ = 0;
         $107 = $106 & 1;
         if ($107) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $105;
         }
        }
        $108 = $__c$0 << 24 >> 24 == $__kc$0 << 24 >> 24;
        if (!$108) {
         HEAP8[$__st$188 >> 0] = 0;
         $120 = $__n_might_match$386 + -1 | 0;
         $__consume$1$off0 = $__consume$0$off090;
         $__n_does_match$4 = $__n_does_match$387;
         $__n_might_match$4 = $120;
         break;
        }
        $109 = HEAP8[$__ky1$091 >> 0] | 0;
        $110 = $109 & 1;
        $111 = $110 << 24 >> 24 == 0;
        if ($111) {
         $114 = $109 & 255;
         $115 = $114 >>> 1;
         $117 = $115;
        } else {
         $112 = $__ky1$091 + 4 | 0;
         $113 = HEAP32[$112 >> 2] | 0;
         $117 = $113;
        }
        $116 = ($117 | 0) == ($90 | 0);
        if ($116) {
         HEAP8[$__st$188 >> 0] = 2;
         $118 = $__n_might_match$386 + -1 | 0;
         $119 = $__n_does_match$387 + 1 | 0;
         $__consume$1$off0 = 1;
         $__n_does_match$4 = $119;
         $__n_might_match$4 = $118;
        } else {
         $__consume$1$off0 = 1;
         $__n_does_match$4 = $__n_does_match$387;
         $__n_might_match$4 = $__n_might_match$386;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off090;
        $__n_does_match$4 = $__n_does_match$387;
        $__n_might_match$4 = $__n_might_match$386;
       }
      } while (0);
      $121 = $__ky1$091 + 12 | 0;
      $122 = $__st$188 + 1 | 0;
      $123 = ($121 | 0) == ($__ke | 0);
      if ($123) {
       $__consume$0$off0$lcssa = $__consume$1$off0;
       $__n_does_match$3$lcssa = $__n_does_match$4;
       $__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off090 = $__consume$1$off0;
       $__ky1$091 = $121;
       $__n_does_match$387 = $__n_does_match$4;
       $__n_might_match$386 = $__n_might_match$4;
       $__st$188 = $122;
      }
     }
    }
    if (!$__consume$0$off0$lcssa) {
     $__indx$0 = $90;
     $__n_does_match$2 = $__n_does_match$3$lcssa;
     $__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $124 = HEAP32[$__b >> 2] | 0;
    $125 = $124 + 12 | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = $124 + 16 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = ($126 | 0) == ($128 | 0);
    if ($129) {
     $130 = HEAP32[$124 >> 2] | 0;
     $131 = $130 + 40 | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($132 | 0, $124 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $133 = __THREW__;
     __THREW__ = 0;
     $134 = $133 & 1;
     if ($134) {
      label = 5;
      break;
     }
    } else {
     $135 = $126 + 1 | 0;
     HEAP32[$125 >> 2] = $135;
    }
    $136 = $__n_does_match$3$lcssa + $__n_might_match$3$lcssa | 0;
    $137 = $136 >>> 0 < 2;
    $or$cond = $137 | $21;
    if ($or$cond) {
     $__indx$0 = $90;
     $__n_does_match$2 = $__n_does_match$3$lcssa;
     $__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$098 = $__kb;
     $__n_does_match$596 = $__n_does_match$3$lcssa;
     $__st$297 = $__status$0;
    }
    while (1) {
     $138 = HEAP8[$__st$297 >> 0] | 0;
     $139 = $138 << 24 >> 24 == 2;
     if ($139) {
      $140 = HEAP8[$__ky2$098 >> 0] | 0;
      $141 = $140 & 1;
      $142 = $141 << 24 >> 24 == 0;
      if ($142) {
       $145 = $140 & 255;
       $146 = $145 >>> 1;
       $148 = $146;
      } else {
       $143 = $__ky2$098 + 4 | 0;
       $144 = HEAP32[$143 >> 2] | 0;
       $148 = $144;
      }
      $147 = ($148 | 0) == ($90 | 0);
      if ($147) {
       $__n_does_match$6 = $__n_does_match$596;
      } else {
       HEAP8[$__st$297 >> 0] = 0;
       $149 = $__n_does_match$596 + -1 | 0;
       $__n_does_match$6 = $149;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$596;
     }
     $150 = $__ky2$098 + 12 | 0;
     $151 = $__st$297 + 1 | 0;
     $152 = ($150 | 0) == ($__ke | 0);
     if ($152) {
      $__indx$0 = $90;
      $__n_does_match$2 = $__n_does_match$6;
      $__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$098 = $150;
      $__n_does_match$596 = $__n_does_match$6;
      $__st$297 = $151;
     }
    }
   }
   if ((label | 0) == 4) {
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    $16 = $191;
    $lpad$phi$index = $9;
    $lpad$phi$index3 = $10;
    break;
   } else if ((label | 0) == 5) {
    $11 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $12 = tempRet0;
    $16 = $191;
    $lpad$phi$index = $11;
    $lpad$phi$index3 = $12;
    break;
   } else if ((label | 0) == 64) {
    $153 = ($$lcssa117 | 0) == (0 | 0);
    do {
     if ($153) {
      $167 = 0;
     } else {
      $154 = $$lcssa117 + 12 | 0;
      $155 = HEAP32[$154 >> 2] | 0;
      $156 = $$lcssa117 + 16 | 0;
      $157 = HEAP32[$156 >> 2] | 0;
      $158 = ($155 | 0) == ($157 | 0);
      if ($158) {
       $159 = HEAP32[$$lcssa117 >> 2] | 0;
       $160 = $159 + 36 | 0;
       $161 = HEAP32[$160 >> 2] | 0;
       __THREW__ = 0;
       $162 = (tempInt = invoke_ii($161 | 0, $$lcssa117 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $163 = __THREW__;
       __THREW__ = 0;
       $164 = $163 & 1;
       if ($164) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       }
       $165 = ($162 | 0) == -1;
       if ($165) {
        HEAP32[$__b >> 2] = 0;
        $167 = 0;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b >> 2] | 0;
        $167 = $$pre$i$i$i12;
        break;
       }
      } else {
       $167 = $$lcssa117;
      }
     }
    } while (0);
    $166 = ($167 | 0) == (0 | 0);
    do {
     if ($$lcssa) {
      label = 76;
     } else {
      $168 = $$pre$i2$i$i16$lcssa + 12 | 0;
      $169 = HEAP32[$168 >> 2] | 0;
      $170 = $$pre$i2$i$i16$lcssa + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      $172 = ($169 | 0) == ($171 | 0);
      if ($172) {
       $173 = HEAP32[$$pre$i2$i$i16$lcssa >> 2] | 0;
       $174 = $173 + 36 | 0;
       $175 = HEAP32[$174 >> 2] | 0;
       __THREW__ = 0;
       $176 = (tempInt = invoke_ii($175 | 0, $$pre$i2$i$i16$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $177 = __THREW__;
       __THREW__ = 0;
       $178 = $177 & 1;
       if ($178) {
        $$ph$ph = $191;
        label = 6;
        break L6;
       }
       $179 = ($176 | 0) == -1;
       if ($179) {
        HEAP32[$__e >> 2] = 0;
        label = 76;
        break;
       }
      }
      if (!$166) {
       label = 77;
      }
     }
    } while (0);
    if ((label | 0) == 76) {
     if ($166) {
      label = 77;
     }
    }
    if ((label | 0) == 77) {
     $180 = HEAP32[$__err >> 2] | 0;
     $181 = $180 | 2;
     HEAP32[$__err >> 2] = $181;
    }
    $182 = ($__kb | 0) == ($__ke | 0);
    L105 : do {
     if ($182) {
      label = 81;
     } else {
      $$085 = $__kb;
      $__st$384 = $__status$0;
      while (1) {
       $183 = HEAP8[$__st$384 >> 0] | 0;
       $184 = $183 << 24 >> 24 == 2;
       if ($184) {
        $$040 = $$085;
        break L105;
       }
       $185 = $$085 + 12 | 0;
       $186 = $__st$384 + 1 | 0;
       $187 = ($185 | 0) == ($__ke | 0);
       if ($187) {
        label = 81;
        break;
       } else {
        $$085 = $185;
        $__st$384 = $186;
       }
      }
     }
    } while (0);
    if ((label | 0) == 81) {
     $188 = HEAP32[$__err >> 2] | 0;
     $189 = $188 | 4;
     HEAP32[$__err >> 2] = $189;
     $$040 = $__ke;
    }
    $190 = ($191 | 0) == 0;
    if (!$190) {
     $192 = $191;
     _free($192), asyncState ? abort(-12) | 0 : 0;
    }
    STACKTOP = sp;
    return $$040 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $13 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $14 = tempRet0;
  $16 = $$ph$ph;
  $lpad$phi$index = $13;
  $lpad$phi$index3 = $14;
 }
 $15 = ($16 | 0) == 0;
 if (!$15) {
  $17 = $16;
  _free($17), asyncState ? abort(-12) | 0 : 0;
 }
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser6expectENSA_5lexer10token_typeE($this, $t) {
 $this = $this | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i5 = 0, $__i$i$i$i = 0, $__i$i$i$i6 = 0, $error_msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $error_msg = sp + 68 | 0;
 $111 = sp + 56 | 0;
 $114 = sp + 36 | 0;
 $115 = sp + 24 | 0;
 $116 = sp + 12 | 0;
 $117 = sp;
 $109 = $this;
 $110 = $t;
 $118 = $109;
 $119 = $110;
 $120 = $118 + 32 | 0;
 $121 = HEAP32[$120 >> 2] | 0;
 $122 = ($119 | 0) != ($121 | 0);
 if (!$122) {
  STACKTOP = sp;
  return;
 }
 $107 = $error_msg;
 $108 = 14535;
 $123 = $107;
 $106 = $123;
 $124 = $106;
 $105 = $124;
 $125 = $105;
 $104 = $125;
 $126 = $108;
 $127 = $108;
 $128 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($127) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($123, $126, $128), asyncState ? abort(-12) | 0 : 0;
 $129 = $118 + 36 | 0;
 __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer9get_tokenEv($111, $129), asyncState ? abort(-12) | 0 : 0;
 $102 = $error_msg;
 $103 = $111;
 $130 = $102;
 $131 = $103;
 $100 = $130;
 $101 = $131;
 $132 = $100;
 $133 = $101;
 $99 = $133;
 $134 = $99;
 $98 = $134;
 $135 = $98;
 $97 = $135;
 $136 = $97;
 $96 = $136;
 $137 = $96;
 $95 = $137;
 $138 = $95;
 $139 = HEAP8[$138 >> 0] | 0;
 $140 = $139 & 255;
 $141 = $140 & 1;
 $142 = ($141 | 0) != 0;
 if ($142) {
  $89 = $135;
  $143 = $89;
  $88 = $143;
  $144 = $88;
  $87 = $144;
  $145 = $87;
  $146 = $145 + 8 | 0;
  $147 = HEAP32[$146 >> 2] | 0;
  $154 = $147;
 } else {
  $94 = $135;
  $148 = $94;
  $93 = $148;
  $149 = $93;
  $92 = $149;
  $150 = $92;
  $151 = $150 + 1 | 0;
  $91 = $151;
  $152 = $91;
  $90 = $152;
  $153 = $90;
  $154 = $153;
 }
 $86 = $154;
 $155 = $86;
 $156 = $101;
 $85 = $156;
 $157 = $85;
 $84 = $157;
 $158 = $84;
 $83 = $158;
 $159 = $83;
 $82 = $159;
 $160 = $82;
 $161 = HEAP8[$160 >> 0] | 0;
 $162 = $161 & 255;
 $163 = $162 & 1;
 $164 = ($163 | 0) != 0;
 if ($164) {
  $78 = $157;
  $165 = $78;
  $77 = $165;
  $166 = $77;
  $76 = $166;
  $167 = $76;
  $168 = $167 + 4 | 0;
  $169 = HEAP32[$168 >> 2] | 0;
  $176 = $169;
 } else {
  $81 = $157;
  $170 = $81;
  $80 = $170;
  $171 = $80;
  $79 = $171;
  $172 = $79;
  $173 = HEAP8[$172 >> 0] | 0;
  $174 = $173 & 255;
  $175 = $174 >> 1;
  $176 = $175;
 }
 __THREW__ = 0;
 (tempInt = invoke_iiii(365, $132 | 0, $155 | 0, $176 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $177 = __THREW__;
 __THREW__ = 0;
 $178 = $177 & 1;
 if ($178) {
  $331 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $332 = tempRet0;
  $112 = $331;
  $113 = $332;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($111), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
  $345 = $112;
  $346 = $113;
  ___resumeException($345 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($111), asyncState ? abort(-12) | 0 : 0;
 $179 = $118 + 32 | 0;
 $180 = HEAP32[$179 >> 2] | 0;
 __THREW__ = 0;
 invoke_vii(432, $115 | 0, $180 | 0), asyncState ? abort(-12) | 0 : 0;
 $181 = __THREW__;
 __THREW__ = 0;
 $182 = $181 & 1;
 L16 : do {
  if (!$182) {
   $74 = 14562;
   $75 = $115;
   $183 = $75;
   $184 = $74;
   __THREW__ = 0;
   $185 = (tempInt = invoke_iiii(385, $183 | 0, 0, $184 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $186 = __THREW__;
   __THREW__ = 0;
   $187 = $186 & 1;
   do {
    if ($187) {
     $335 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $336 = tempRet0;
     $112 = $335;
     $113 = $336;
    } else {
     $73 = $185;
     $188 = $73;
     $71 = $114;
     $72 = $188;
     $189 = $71;
     $190 = $72;
     $70 = $190;
     $191 = $70;
     HEAP32[$189 >> 2] = HEAP32[$191 >> 2] | 0;
     HEAP32[$189 + 4 >> 2] = HEAP32[$191 + 4 >> 2] | 0;
     HEAP32[$189 + 8 >> 2] = HEAP32[$191 + 8 >> 2] | 0;
     $192 = $72;
     $69 = $192;
     $193 = $69;
     $68 = $193;
     $194 = $68;
     $67 = $194;
     $195 = $67;
     $__a$i$i$i = $195;
     $__i$i$i$i = 0;
     while (1) {
      $196 = $__i$i$i$i;
      $197 = $196 >>> 0 < 3;
      if (!$197) {
       break;
      }
      $198 = $__i$i$i$i;
      $199 = $__a$i$i$i;
      $200 = $199 + ($198 << 2) | 0;
      HEAP32[$200 >> 2] = 0;
      $201 = $__i$i$i$i;
      $202 = $201 + 1 | 0;
      $__i$i$i$i = $202;
     }
     $65 = $error_msg;
     $66 = $114;
     $203 = $65;
     $204 = $66;
     $63 = $203;
     $64 = $204;
     $205 = $63;
     $206 = $64;
     $62 = $206;
     $207 = $62;
     $61 = $207;
     $208 = $61;
     $60 = $208;
     $209 = $60;
     $59 = $209;
     $210 = $59;
     $58 = $210;
     $211 = $58;
     $212 = HEAP8[$211 >> 0] | 0;
     $213 = $212 & 255;
     $214 = $213 & 1;
     $215 = ($214 | 0) != 0;
     if ($215) {
      $52 = $208;
      $216 = $52;
      $51 = $216;
      $217 = $51;
      $50 = $217;
      $218 = $50;
      $219 = $218 + 8 | 0;
      $220 = HEAP32[$219 >> 2] | 0;
      $227 = $220;
     } else {
      $57 = $208;
      $221 = $57;
      $56 = $221;
      $222 = $56;
      $55 = $222;
      $223 = $55;
      $224 = $223 + 1 | 0;
      $54 = $224;
      $225 = $54;
      $53 = $225;
      $226 = $53;
      $227 = $226;
     }
     $49 = $227;
     $228 = $49;
     $229 = $64;
     $48 = $229;
     $230 = $48;
     $47 = $230;
     $231 = $47;
     $46 = $231;
     $232 = $46;
     $45 = $232;
     $233 = $45;
     $234 = HEAP8[$233 >> 0] | 0;
     $235 = $234 & 255;
     $236 = $235 & 1;
     $237 = ($236 | 0) != 0;
     if ($237) {
      $41 = $230;
      $238 = $41;
      $40 = $238;
      $239 = $40;
      $39 = $239;
      $240 = $39;
      $241 = $240 + 4 | 0;
      $242 = HEAP32[$241 >> 2] | 0;
      $249 = $242;
     } else {
      $44 = $230;
      $243 = $44;
      $43 = $243;
      $244 = $43;
      $42 = $244;
      $245 = $42;
      $246 = HEAP8[$245 >> 0] | 0;
      $247 = $246 & 255;
      $248 = $247 >> 1;
      $249 = $248;
     }
     __THREW__ = 0;
     (tempInt = invoke_iiii(365, $205 | 0, $228 | 0, $249 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $250 = __THREW__;
     __THREW__ = 0;
     $251 = $250 & 1;
     if ($251) {
      $337 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $338 = tempRet0;
      $112 = $337;
      $113 = $338;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($114), asyncState ? abort(-12) | 0 : 0;
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($114), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($115), asyncState ? abort(-12) | 0 : 0;
     $252 = $110;
     __THREW__ = 0;
     invoke_vii(432, $117 | 0, $252 | 0), asyncState ? abort(-12) | 0 : 0;
     $253 = __THREW__;
     __THREW__ = 0;
     $254 = $253 & 1;
     if ($254) {
      break L16;
     }
     $37 = 14889;
     $38 = $117;
     $255 = $38;
     $256 = $37;
     __THREW__ = 0;
     $257 = (tempInt = invoke_iiii(385, $255 | 0, 0, $256 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $258 = __THREW__;
     __THREW__ = 0;
     $259 = $258 & 1;
     do {
      if ($259) {
       $339 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $340 = tempRet0;
       $112 = $339;
       $113 = $340;
      } else {
       $36 = $257;
       $260 = $36;
       $34 = $116;
       $35 = $260;
       $261 = $34;
       $262 = $35;
       $33 = $262;
       $263 = $33;
       HEAP32[$261 >> 2] = HEAP32[$263 >> 2] | 0;
       HEAP32[$261 + 4 >> 2] = HEAP32[$263 + 4 >> 2] | 0;
       HEAP32[$261 + 8 >> 2] = HEAP32[$263 + 8 >> 2] | 0;
       $264 = $35;
       $32 = $264;
       $265 = $32;
       $31 = $265;
       $266 = $31;
       $30 = $266;
       $267 = $30;
       $__a$i$i$i5 = $267;
       $__i$i$i$i6 = 0;
       while (1) {
        $268 = $__i$i$i$i6;
        $269 = $268 >>> 0 < 3;
        if (!$269) {
         break;
        }
        $270 = $__i$i$i$i6;
        $271 = $__a$i$i$i5;
        $272 = $271 + ($270 << 2) | 0;
        HEAP32[$272 >> 2] = 0;
        $273 = $__i$i$i$i6;
        $274 = $273 + 1 | 0;
        $__i$i$i$i6 = $274;
       }
       $28 = $error_msg;
       $29 = $116;
       $275 = $28;
       $276 = $29;
       $26 = $275;
       $27 = $276;
       $277 = $26;
       $278 = $27;
       $25 = $278;
       $279 = $25;
       $24 = $279;
       $280 = $24;
       $23 = $280;
       $281 = $23;
       $22 = $281;
       $282 = $22;
       $21 = $282;
       $283 = $21;
       $284 = HEAP8[$283 >> 0] | 0;
       $285 = $284 & 255;
       $286 = $285 & 1;
       $287 = ($286 | 0) != 0;
       if ($287) {
        $15 = $280;
        $288 = $15;
        $14 = $288;
        $289 = $14;
        $13 = $289;
        $290 = $13;
        $291 = $290 + 8 | 0;
        $292 = HEAP32[$291 >> 2] | 0;
        $299 = $292;
       } else {
        $20 = $280;
        $293 = $20;
        $19 = $293;
        $294 = $19;
        $18 = $294;
        $295 = $18;
        $296 = $295 + 1 | 0;
        $17 = $296;
        $297 = $17;
        $16 = $297;
        $298 = $16;
        $299 = $298;
       }
       $12 = $299;
       $300 = $12;
       $301 = $27;
       $11 = $301;
       $302 = $11;
       $10 = $302;
       $303 = $10;
       $9 = $303;
       $304 = $9;
       $8 = $304;
       $305 = $8;
       $306 = HEAP8[$305 >> 0] | 0;
       $307 = $306 & 255;
       $308 = $307 & 1;
       $309 = ($308 | 0) != 0;
       if ($309) {
        $4 = $302;
        $310 = $4;
        $3 = $310;
        $311 = $3;
        $2 = $311;
        $312 = $2;
        $313 = $312 + 4 | 0;
        $314 = HEAP32[$313 >> 2] | 0;
        $321 = $314;
       } else {
        $7 = $302;
        $315 = $7;
        $6 = $315;
        $316 = $6;
        $5 = $316;
        $317 = $5;
        $318 = HEAP8[$317 >> 0] | 0;
        $319 = $318 & 255;
        $320 = $319 >> 1;
        $321 = $320;
       }
       __THREW__ = 0;
       (tempInt = invoke_iiii(365, $277 | 0, $300 | 0, $321 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $322 = __THREW__;
       __THREW__ = 0;
       $323 = $322 & 1;
       if ($323) {
        $341 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $342 = tempRet0;
        $112 = $341;
        $113 = $342;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($116), asyncState ? abort(-12) | 0 : 0;
        break;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($116), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($117), asyncState ? abort(-12) | 0 : 0;
       $324 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $0 = $324;
       $1 = $error_msg;
       $325 = $0;
       $326 = $1;
       __THREW__ = 0;
       invoke_vii(386, $325 | 0, $326 | 0), asyncState ? abort(-12) | 0 : 0;
       $327 = __THREW__;
       __THREW__ = 0;
       $328 = $327 & 1;
       if (!$328) {
        $329 = 3256;
        HEAP32[$325 >> 2] = $329;
        __THREW__ = 0;
        invoke_viii(387, $324 | 0, 176 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
        $330 = __THREW__;
        __THREW__ = 0;
        break L16;
       }
       $343 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $344 = tempRet0;
       $112 = $343;
       $113 = $344;
       ___cxa_free_exception($324 | 0), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
       $345 = $112;
       $346 = $113;
       ___resumeException($345 | 0), asyncState ? abort(-12) | 0 : 0;
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($117), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
     $345 = $112;
     $346 = $113;
     ___resumeException($345 | 0), asyncState ? abort(-12) | 0 : 0;
    }
   } while (0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($115), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
   $345 = $112;
   $346 = $113;
   ___resumeException($345 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 $333 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $334 = tempRet0;
 $112 = $333;
 $113 = $334;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
 $345 = $112;
 $346 = $113;
 ___resumeException($345 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i26 = 0, $$0$ph$be = 0, $$0$ph86 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa94 = 0, $$lcssa95 = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i2139 = 0, $$pre$i2$i$i2140 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i24 = 0, $isascii1$i5 = 0, $or$cond84 = 0, $sext = 0, $tmp$i$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $3;
 __THREW__ = 0;
 $4 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $38 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $39 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($38 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__err >> 2] = 0;
 $7 = $4 + 8 | 0;
 $8 = ($__fmtb | 0) == ($__fmte | 0);
 $9 = HEAP32[$__b >> 2] | 0;
 L4 : do {
  if ($8) {
   $$pre$i$i$i8 = $9;
  } else {
   $$0$ph86 = $__fmtb;
   $11 = $9;
   L5 : while (1) {
    $10 = ($11 | 0) == (0 | 0);
    $12 = $11;
    if ($10) {
     $24 = 0;
     $63 = $12;
    } else {
     $13 = $11 + 12 | 0;
     $14 = HEAP32[$13 >> 2] | 0;
     $15 = $11 + 16 | 0;
     $16 = HEAP32[$15 >> 2] | 0;
     $17 = ($14 | 0) == ($16 | 0);
     if ($17) {
      $18 = HEAP32[$11 >> 2] | 0;
      $19 = $18 + 36 | 0;
      $20 = HEAP32[$19 >> 2] | 0;
      $21 = (tempInt = FUNCTION_TABLE_ii[$20 & 1023]($11) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $22 = ($21 | 0) == -1;
      if ($22) {
       HEAP32[$__b >> 2] = 0;
       $24 = 0;
       $63 = 0;
      } else {
       $24 = $11;
       $63 = $12;
      }
     } else {
      $24 = $11;
      $63 = $12;
     }
    }
    $23 = ($24 | 0) == (0 | 0);
    $25 = HEAP32[$__e >> 2] | 0;
    $26 = ($25 | 0) == (0 | 0);
    $27 = $25;
    do {
     if ($26) {
      $194 = $27;
      label = 12;
     } else {
      $28 = $25 + 12 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      $30 = $25 + 16 | 0;
      $31 = HEAP32[$30 >> 2] | 0;
      $32 = ($29 | 0) == ($31 | 0);
      if ($32) {
       $33 = HEAP32[$25 >> 2] | 0;
       $34 = $33 + 36 | 0;
       $35 = HEAP32[$34 >> 2] | 0;
       $36 = (tempInt = FUNCTION_TABLE_ii[$35 & 1023]($25) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $37 = ($36 | 0) == -1;
       if ($37) {
        HEAP32[$__e >> 2] = 0;
        $194 = 0;
        label = 12;
        break;
       }
      }
      if ($23) {
       $195 = $25;
       $64 = $27;
      } else {
       $$lcssa = $24;
       label = 13;
       break L5;
      }
     }
    } while (0);
    if ((label | 0) == 12) {
     label = 0;
     if ($23) {
      $$lcssa = $24;
      label = 13;
      break;
     } else {
      $195 = 0;
      $64 = $194;
     }
    }
    $40 = HEAP8[$$0$ph86 >> 0] | 0;
    $41 = HEAP32[$4 >> 2] | 0;
    $42 = $41 + 36 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = (tempInt = FUNCTION_TABLE_iiii[$43 & 1023]($4, $40, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $45 = $44 << 24 >> 24 == 37;
    L21 : do {
     if ($45) {
      $46 = $$0$ph86 + 1 | 0;
      $47 = ($46 | 0) == ($__fmte | 0);
      if ($47) {
       $$lcssa94 = $24;
       label = 17;
       break L5;
      }
      $48 = HEAP8[$46 >> 0] | 0;
      $49 = HEAP32[$4 >> 2] | 0;
      $50 = $49 + 36 | 0;
      $51 = HEAP32[$50 >> 2] | 0;
      $52 = (tempInt = FUNCTION_TABLE_iiii[$51 & 1023]($4, $48, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      switch ($52 << 24 >> 24) {
      case 48:
      case 69:
       {
        $53 = $$0$ph86 + 2 | 0;
        $54 = ($53 | 0) == ($__fmte | 0);
        if ($54) {
         $$lcssa95 = $24;
         label = 20;
         break L5;
        }
        $55 = HEAP8[$53 >> 0] | 0;
        $56 = HEAP32[$4 >> 2] | 0;
        $57 = $56 + 36 | 0;
        $58 = HEAP32[$57 >> 2] | 0;
        $59 = (tempInt = FUNCTION_TABLE_iiii[$58 & 1023]($4, $55, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $67 = $46;
        $__cmd$0 = $59;
        $__opt$0 = $52;
        break;
       }
      default:
       {
        $67 = $$0$ph86;
        $__cmd$0 = $52;
        $__opt$0 = 0;
       }
      }
      $60 = HEAP32[$this >> 2] | 0;
      $61 = $60 + 36 | 0;
      $62 = HEAP32[$61 >> 2] | 0;
      HEAP32[$1 >> 2] = $63;
      HEAP32[$2 >> 2] = $64;
      HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2] | 0;
      $65 = (tempInt = FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[$__b >> 2] = $65;
      $66 = $67 + 2 | 0;
      $$0$ph$be = $66;
     } else {
      $71 = HEAP8[$$0$ph86 >> 0] | 0;
      $isascii1$i = $71 << 24 >> 24 > -1;
      if ($isascii1$i) {
       $72 = $71 << 24 >> 24;
       $73 = HEAP32[$7 >> 2] | 0;
       $74 = $73 + ($72 << 1) | 0;
       $75 = HEAP16[$74 >> 1] | 0;
       $76 = $75 & 8192;
       $77 = $76 << 16 >> 16 == 0;
       if (!$77) {
        $$0$pn = $$0$ph86;
        while (1) {
         $$2 = $$0$pn + 1 | 0;
         $78 = ($$2 | 0) == ($__fmte | 0);
         if ($78) {
          $$2$lcssa = $__fmte;
          break;
         }
         $79 = HEAP8[$$2 >> 0] | 0;
         $isascii1$i5 = $79 << 24 >> 24 > -1;
         if (!$isascii1$i5) {
          $$2$lcssa = $$2;
          break;
         }
         $80 = $79 << 24 >> 24;
         $81 = $73 + ($80 << 1) | 0;
         $82 = HEAP16[$81 >> 1] | 0;
         $83 = $82 & 8192;
         $84 = $83 << 16 >> 16 == 0;
         if ($84) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i17 = $24;
        $$pre$i2$i$i21 = $195;
        $99 = $195;
        while (1) {
         $85 = ($$pre$i$i$i17 | 0) == (0 | 0);
         if ($85) {
          $97 = 0;
         } else {
          $86 = $$pre$i$i$i17 + 12 | 0;
          $87 = HEAP32[$86 >> 2] | 0;
          $88 = $$pre$i$i$i17 + 16 | 0;
          $89 = HEAP32[$88 >> 2] | 0;
          $90 = ($87 | 0) == ($89 | 0);
          if ($90) {
           $91 = HEAP32[$$pre$i$i$i17 >> 2] | 0;
           $92 = $91 + 36 | 0;
           $93 = HEAP32[$92 >> 2] | 0;
           $94 = (tempInt = FUNCTION_TABLE_ii[$93 & 1023]($$pre$i$i$i17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $95 = ($94 | 0) == -1;
           if ($95) {
            HEAP32[$__b >> 2] = 0;
            $97 = 0;
           } else {
            $97 = $$pre$i$i$i17;
           }
          } else {
           $97 = $$pre$i$i$i17;
          }
         }
         $96 = ($97 | 0) == (0 | 0);
         $98 = ($99 | 0) == (0 | 0);
         do {
          if ($98) {
           $$pre$i2$i$i2140 = $$pre$i2$i$i21;
           label = 39;
          } else {
           $100 = $99 + 12 | 0;
           $101 = HEAP32[$100 >> 2] | 0;
           $102 = $99 + 16 | 0;
           $103 = HEAP32[$102 >> 2] | 0;
           $104 = ($101 | 0) == ($103 | 0);
           if (!$104) {
            if ($96) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;
             $196 = $99;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
           $105 = HEAP32[$99 >> 2] | 0;
           $106 = $105 + 36 | 0;
           $107 = HEAP32[$106 >> 2] | 0;
           $108 = (tempInt = FUNCTION_TABLE_ii[$107 & 1023]($99) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $109 = ($108 | 0) == -1;
           if ($109) {
            HEAP32[$__e >> 2] = 0;
            $$pre$i2$i$i2140 = 0;
            label = 39;
            break;
           } else {
            $110 = ($$pre$i2$i$i21 | 0) == (0 | 0);
            $tmp$i$i23 = $96 ^ $110;
            if ($tmp$i$i23) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;
             $196 = $$pre$i2$i$i21;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
          }
         } while (0);
         if ((label | 0) == 39) {
          label = 0;
          if ($96) {
           $$0$ph$be = $$2$lcssa;
           break L21;
          } else {
           $$pre$i2$i$i2139 = $$pre$i2$i$i2140;
           $196 = 0;
          }
         }
         $111 = $97 + 12 | 0;
         $112 = HEAP32[$111 >> 2] | 0;
         $113 = $97 + 16 | 0;
         $114 = HEAP32[$113 >> 2] | 0;
         $115 = ($112 | 0) == ($114 | 0);
         if ($115) {
          $116 = HEAP32[$97 >> 2] | 0;
          $117 = $116 + 36 | 0;
          $118 = HEAP32[$117 >> 2] | 0;
          $119 = (tempInt = FUNCTION_TABLE_ii[$118 & 1023]($97) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $$0$i$i = $119;
         } else {
          $120 = HEAP8[$112 >> 0] | 0;
          $121 = $120 & 255;
          $$0$i$i = $121;
         }
         $122 = $$0$i$i & 255;
         $isascii1$i24 = $122 << 24 >> 24 > -1;
         if (!$isascii1$i24) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $sext = $$0$i$i << 24;
         $123 = $sext >> 24;
         $124 = HEAP32[$7 >> 2] | 0;
         $125 = $124 + ($123 << 1) | 0;
         $126 = HEAP16[$125 >> 1] | 0;
         $127 = $126 & 8192;
         $128 = $127 << 16 >> 16 == 0;
         if ($128) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $129 = HEAP32[$111 >> 2] | 0;
         $130 = HEAP32[$113 >> 2] | 0;
         $131 = ($129 | 0) == ($130 | 0);
         if ($131) {
          $132 = HEAP32[$97 >> 2] | 0;
          $133 = $132 + 40 | 0;
          $134 = HEAP32[$133 >> 2] | 0;
          (tempInt = FUNCTION_TABLE_ii[$134 & 1023]($97) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $$pre$i$i$i17 = $97;
          $$pre$i2$i$i21 = $$pre$i2$i$i2139;
          $99 = $196;
          continue;
         } else {
          $135 = $129 + 1 | 0;
          HEAP32[$111 >> 2] = $135;
          $$pre$i$i$i17 = $97;
          $$pre$i2$i$i21 = $$pre$i2$i$i2139;
          $99 = $196;
          continue;
         }
        }
       }
      }
      $136 = $24 + 12 | 0;
      $137 = HEAP32[$136 >> 2] | 0;
      $138 = $24 + 16 | 0;
      $139 = HEAP32[$138 >> 2] | 0;
      $140 = ($137 | 0) == ($139 | 0);
      if ($140) {
       $141 = HEAP32[$24 >> 2] | 0;
       $142 = $141 + 36 | 0;
       $143 = HEAP32[$142 >> 2] | 0;
       $144 = (tempInt = FUNCTION_TABLE_ii[$143 & 1023]($24) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$i$i26 = $144;
      } else {
       $145 = HEAP8[$137 >> 0] | 0;
       $146 = $145 & 255;
       $$0$i$i26 = $146;
      }
      $147 = $$0$i$i26 & 255;
      $148 = HEAP32[$4 >> 2] | 0;
      $149 = $148 + 12 | 0;
      $150 = HEAP32[$149 >> 2] | 0;
      $151 = (tempInt = FUNCTION_TABLE_iii[$150 & 1023]($4, $147) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $152 = HEAP8[$$0$ph86 >> 0] | 0;
      $153 = HEAP32[$4 >> 2] | 0;
      $154 = $153 + 12 | 0;
      $155 = HEAP32[$154 >> 2] | 0;
      $156 = (tempInt = FUNCTION_TABLE_iii[$155 & 1023]($4, $152) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $157 = $151 << 24 >> 24 == $156 << 24 >> 24;
      if (!$157) {
       label = 57;
       break L5;
      }
      $158 = HEAP32[$136 >> 2] | 0;
      $159 = HEAP32[$138 >> 2] | 0;
      $160 = ($158 | 0) == ($159 | 0);
      if ($160) {
       $161 = HEAP32[$24 >> 2] | 0;
       $162 = $161 + 40 | 0;
       $163 = HEAP32[$162 >> 2] | 0;
       (tempInt = FUNCTION_TABLE_ii[$163 & 1023]($24) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      } else {
       $164 = $158 + 1 | 0;
       HEAP32[$136 >> 2] = $164;
      }
      $165 = $$0$ph86 + 1 | 0;
      $$0$ph$be = $165;
     }
    } while (0);
    $$pre$pre = HEAP32[$__err >> 2] | 0;
    $68 = ($$0$ph$be | 0) != ($__fmte | 0);
    $69 = ($$pre$pre | 0) == 0;
    $or$cond84 = $68 & $69;
    $70 = HEAP32[$__b >> 2] | 0;
    if ($or$cond84) {
     $$0$ph86 = $$0$ph$be;
     $11 = $70;
    } else {
     $$pre$i$i$i8 = $70;
     break L4;
    }
   }
   if ((label | 0) == 13) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i8 = $$lcssa;
    break;
   } else if ((label | 0) == 17) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i8 = $$lcssa94;
    break;
   } else if ((label | 0) == 20) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i8 = $$lcssa95;
    break;
   } else if ((label | 0) == 57) {
    HEAP32[$__err >> 2] = 4;
    $166 = HEAP32[$__b >> 2] | 0;
    $$pre$i$i$i8 = $166;
    break;
   }
  }
 } while (0);
 $167 = ($$pre$i$i$i8 | 0) == (0 | 0);
 if ($167) {
  $179 = 0;
 } else {
  $168 = $$pre$i$i$i8 + 12 | 0;
  $169 = HEAP32[$168 >> 2] | 0;
  $170 = $$pre$i$i$i8 + 16 | 0;
  $171 = HEAP32[$170 >> 2] | 0;
  $172 = ($169 | 0) == ($171 | 0);
  if ($172) {
   $173 = HEAP32[$$pre$i$i$i8 >> 2] | 0;
   $174 = $173 + 36 | 0;
   $175 = HEAP32[$174 >> 2] | 0;
   $176 = (tempInt = FUNCTION_TABLE_ii[$175 & 1023]($$pre$i$i$i8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $177 = ($176 | 0) == -1;
   if ($177) {
    HEAP32[$__b >> 2] = 0;
    $179 = 0;
   } else {
    $179 = $$pre$i$i$i8;
   }
  } else {
   $179 = $$pre$i$i$i8;
  }
 }
 $178 = ($179 | 0) == (0 | 0);
 $180 = HEAP32[$__e >> 2] | 0;
 $181 = ($180 | 0) == (0 | 0);
 do {
  if ($181) {
   label = 67;
  } else {
   $182 = $180 + 12 | 0;
   $183 = HEAP32[$182 >> 2] | 0;
   $184 = $180 + 16 | 0;
   $185 = HEAP32[$184 >> 2] | 0;
   $186 = ($183 | 0) == ($185 | 0);
   if ($186) {
    $187 = HEAP32[$180 >> 2] | 0;
    $188 = $187 + 36 | 0;
    $189 = HEAP32[$188 >> 2] | 0;
    $190 = (tempInt = FUNCTION_TABLE_ii[$189 & 1023]($180) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $191 = ($190 | 0) == -1;
    if ($191) {
     HEAP32[$__e >> 2] = 0;
     label = 67;
     break;
    }
   }
   if (!$178) {
    label = 68;
   }
  }
 } while (0);
 if ((label | 0) == 67) {
  if ($178) {
   label = 68;
  }
 }
 if ((label | 0) == 68) {
  $192 = HEAP32[$__err >> 2] | 0;
  $193 = $192 | 2;
  HEAP32[$__err >> 2] = $193;
 }
 STACKTOP = sp;
 return $179 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$0$i$i1$i$i26 = 0, $$0$i$i17 = 0, $$0$ph$be = 0, $$0$ph89 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$ph = 0, $$pre$i$i$i22 = 0, $$pre$i$i$i7 = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i1344 = 0, $$pre$i3$i$i1345 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond87 = 0, $phitmp$i4$i$i14 = 0, $tmp$i$i16 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $3;
 __THREW__ = 0;
 $4 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $37 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $38 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($37 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__err >> 2] = 0;
 $7 = ($__fmtb | 0) == ($__fmte | 0);
 $8 = HEAP32[$__b >> 2] | 0;
 L4 : do {
  if ($7) {
   $$pre$i$i$i22 = $8;
  } else {
   $$0$ph89 = $__fmtb;
   $10 = $8;
   L5 : while (1) {
    $9 = ($10 | 0) == (0 | 0);
    $11 = $10;
    if ($9) {
     $130 = 0;
     $187 = 1;
     $62 = $11;
    } else {
     $12 = $10 + 12 | 0;
     $13 = HEAP32[$12 >> 2] | 0;
     $14 = $10 + 16 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     $16 = ($13 | 0) == ($15 | 0);
     if ($16) {
      $17 = HEAP32[$10 >> 2] | 0;
      $18 = $17 + 36 | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = (tempInt = FUNCTION_TABLE_ii[$19 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$i$i$i$i = $20;
     } else {
      $21 = HEAP32[$13 >> 2] | 0;
      $$0$i$i$i$i = $21;
     }
     $22 = ($$0$i$i$i$i | 0) == -1;
     if ($22) {
      HEAP32[$__b >> 2] = 0;
      $130 = 0;
      $187 = 1;
      $62 = 0;
     } else {
      $130 = $10;
      $187 = 0;
      $62 = $11;
     }
    }
    $23 = HEAP32[$__e >> 2] | 0;
    $24 = ($23 | 0) == (0 | 0);
    $25 = $23;
    do {
     if ($24) {
      $$ph = $25;
      label = 15;
     } else {
      $26 = $23 + 12 | 0;
      $27 = HEAP32[$26 >> 2] | 0;
      $28 = $23 + 16 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      $30 = ($27 | 0) == ($29 | 0);
      if ($30) {
       $31 = HEAP32[$23 >> 2] | 0;
       $32 = $31 + 36 | 0;
       $33 = HEAP32[$32 >> 2] | 0;
       $34 = (tempInt = FUNCTION_TABLE_ii[$33 & 1023]($23) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$i$i1$i$i = $34;
      } else {
       $35 = HEAP32[$27 >> 2] | 0;
       $$0$i$i1$i$i = $35;
      }
      $36 = ($$0$i$i1$i$i | 0) == -1;
      if ($36) {
       HEAP32[$__e >> 2] = 0;
       $$ph = 0;
       label = 15;
       break;
      } else {
       if ($187) {
        $188 = $23;
        $63 = $25;
        break;
       } else {
        $$lcssa = $130;
        label = 17;
        break L5;
       }
      }
     }
    } while (0);
    if ((label | 0) == 15) {
     label = 0;
     if ($187) {
      $$lcssa = $130;
      label = 17;
      break;
     } else {
      $188 = 0;
      $63 = $$ph;
     }
    }
    $39 = HEAP32[$$0$ph89 >> 2] | 0;
    $40 = HEAP32[$4 >> 2] | 0;
    $41 = $40 + 52 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = (tempInt = FUNCTION_TABLE_iiii[$42 & 1023]($4, $39, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $44 = $43 << 24 >> 24 == 37;
    L27 : do {
     if ($44) {
      $45 = $$0$ph89 + 4 | 0;
      $46 = ($45 | 0) == ($__fmte | 0);
      if ($46) {
       $$lcssa97 = $130;
       label = 21;
       break L5;
      }
      $47 = HEAP32[$45 >> 2] | 0;
      $48 = HEAP32[$4 >> 2] | 0;
      $49 = $48 + 52 | 0;
      $50 = HEAP32[$49 >> 2] | 0;
      $51 = (tempInt = FUNCTION_TABLE_iiii[$50 & 1023]($4, $47, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      switch ($51 << 24 >> 24) {
      case 48:
      case 69:
       {
        $52 = $$0$ph89 + 8 | 0;
        $53 = ($52 | 0) == ($__fmte | 0);
        if ($53) {
         $$lcssa98 = $130;
         label = 24;
         break L5;
        }
        $54 = HEAP32[$52 >> 2] | 0;
        $55 = HEAP32[$4 >> 2] | 0;
        $56 = $55 + 52 | 0;
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = (tempInt = FUNCTION_TABLE_iiii[$57 & 1023]($4, $54, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $66 = $45;
        $__cmd$0 = $58;
        $__opt$0 = $51;
        break;
       }
      default:
       {
        $66 = $$0$ph89;
        $__cmd$0 = $51;
        $__opt$0 = 0;
       }
      }
      $59 = HEAP32[$this >> 2] | 0;
      $60 = $59 + 36 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      HEAP32[$1 >> 2] = $62;
      HEAP32[$2 >> 2] = $63;
      HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2] | 0;
      $64 = (tempInt = FUNCTION_TABLE_iiiiiiiii[$61 & 511]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[$__b >> 2] = $64;
      $65 = $66 + 8 | 0;
      $$0$ph$be = $65;
     } else {
      $70 = HEAP32[$$0$ph89 >> 2] | 0;
      $71 = HEAP32[$4 >> 2] | 0;
      $72 = $71 + 12 | 0;
      $73 = HEAP32[$72 >> 2] | 0;
      $74 = (tempInt = FUNCTION_TABLE_iiii[$73 & 1023]($4, 8192, $70) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      if ($74) {
       $$0$pn = $$0$ph89;
      } else {
       $129 = $130 + 12 | 0;
       $131 = HEAP32[$129 >> 2] | 0;
       $132 = $130 + 16 | 0;
       $133 = HEAP32[$132 >> 2] | 0;
       $134 = ($131 | 0) == ($133 | 0);
       if ($134) {
        $135 = HEAP32[$130 >> 2] | 0;
        $136 = $135 + 36 | 0;
        $137 = HEAP32[$136 >> 2] | 0;
        $138 = (tempInt = FUNCTION_TABLE_ii[$137 & 1023]($130) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $$0$i$i17 = $138;
       } else {
        $139 = HEAP32[$131 >> 2] | 0;
        $$0$i$i17 = $139;
       }
       $140 = HEAP32[$4 >> 2] | 0;
       $141 = $140 + 28 | 0;
       $142 = HEAP32[$141 >> 2] | 0;
       $143 = (tempInt = FUNCTION_TABLE_iii[$142 & 1023]($4, $$0$i$i17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $144 = HEAP32[$$0$ph89 >> 2] | 0;
       $145 = HEAP32[$4 >> 2] | 0;
       $146 = $145 + 28 | 0;
       $147 = HEAP32[$146 >> 2] | 0;
       $148 = (tempInt = FUNCTION_TABLE_iii[$147 & 1023]($4, $144) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $149 = ($143 | 0) == ($148 | 0);
       if (!$149) {
        label = 61;
        break L5;
       }
       $150 = HEAP32[$129 >> 2] | 0;
       $151 = HEAP32[$132 >> 2] | 0;
       $152 = ($150 | 0) == ($151 | 0);
       if ($152) {
        $153 = HEAP32[$130 >> 2] | 0;
        $154 = $153 + 40 | 0;
        $155 = HEAP32[$154 >> 2] | 0;
        (tempInt = FUNCTION_TABLE_ii[$155 & 1023]($130) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       } else {
        $156 = $150 + 4 | 0;
        HEAP32[$129 >> 2] = $156;
       }
       $157 = $$0$ph89 + 4 | 0;
       $$0$ph$be = $157;
       break;
      }
      while (1) {
       $$2 = $$0$pn + 4 | 0;
       $75 = ($$2 | 0) == ($__fmte | 0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP32[$$2 >> 2] | 0;
       $77 = HEAP32[$4 >> 2] | 0;
       $78 = $77 + 12 | 0;
       $79 = HEAP32[$78 >> 2] | 0;
       $80 = (tempInt = FUNCTION_TABLE_iiii[$79 & 1023]($4, 8192, $76) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       if ($80) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i7 = $130;
      $$pre$i3$i$i13 = $188;
      $94 = $188;
      while (1) {
       $81 = ($$pre$i$i$i7 | 0) == (0 | 0);
       if ($81) {
        $106 = 1;
        $108 = 0;
       } else {
        $82 = $$pre$i$i$i7 + 12 | 0;
        $83 = HEAP32[$82 >> 2] | 0;
        $84 = $$pre$i$i$i7 + 16 | 0;
        $85 = HEAP32[$84 >> 2] | 0;
        $86 = ($83 | 0) == ($85 | 0);
        if ($86) {
         $87 = HEAP32[$$pre$i$i$i7 >> 2] | 0;
         $88 = $87 + 36 | 0;
         $89 = HEAP32[$88 >> 2] | 0;
         $90 = (tempInt = FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i7) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $$0$i$i$i$i5 = $90;
        } else {
         $91 = HEAP32[$83 >> 2] | 0;
         $$0$i$i$i$i5 = $91;
        }
        $92 = ($$0$i$i$i$i5 | 0) == -1;
        if ($92) {
         HEAP32[$__b >> 2] = 0;
         $106 = 1;
         $108 = 0;
        } else {
         $106 = 0;
         $108 = $$pre$i$i$i7;
        }
       }
       $93 = ($94 | 0) == (0 | 0);
       do {
        if ($93) {
         $$pre$i3$i$i1345 = $$pre$i3$i$i13;
         label = 44;
        } else {
         $95 = $94 + 12 | 0;
         $96 = HEAP32[$95 >> 2] | 0;
         $97 = $94 + 16 | 0;
         $98 = HEAP32[$97 >> 2] | 0;
         $99 = ($96 | 0) == ($98 | 0);
         if ($99) {
          $100 = HEAP32[$94 >> 2] | 0;
          $101 = $100 + 36 | 0;
          $102 = HEAP32[$101 >> 2] | 0;
          $103 = (tempInt = FUNCTION_TABLE_ii[$102 & 1023]($94) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $$0$i$i1$i$i11 = $103;
         } else {
          $104 = HEAP32[$96 >> 2] | 0;
          $$0$i$i1$i$i11 = $104;
         }
         $105 = ($$0$i$i1$i$i11 | 0) == -1;
         if ($105) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i3$i$i1345 = 0;
          label = 44;
          break;
         } else {
          $phitmp$i4$i$i14 = ($$pre$i3$i$i13 | 0) == (0 | 0);
          $tmp$i$i16 = $106 ^ $phitmp$i4$i$i14;
          if ($tmp$i$i16) {
           $$pre$i3$i$i1344 = $$pre$i3$i$i13;
           $189 = $$pre$i3$i$i13;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L27;
          }
         }
        }
       } while (0);
       if ((label | 0) == 44) {
        label = 0;
        if ($106) {
         $$0$ph$be = $$2$lcssa;
         break L27;
        } else {
         $$pre$i3$i$i1344 = $$pre$i3$i$i1345;
         $189 = 0;
        }
       }
       $107 = $108 + 12 | 0;
       $109 = HEAP32[$107 >> 2] | 0;
       $110 = $108 + 16 | 0;
       $111 = HEAP32[$110 >> 2] | 0;
       $112 = ($109 | 0) == ($111 | 0);
       if ($112) {
        $113 = HEAP32[$108 >> 2] | 0;
        $114 = $113 + 36 | 0;
        $115 = HEAP32[$114 >> 2] | 0;
        $116 = (tempInt = FUNCTION_TABLE_ii[$115 & 1023]($108) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $$0$i$i = $116;
       } else {
        $117 = HEAP32[$109 >> 2] | 0;
        $$0$i$i = $117;
       }
       $118 = HEAP32[$4 >> 2] | 0;
       $119 = $118 + 12 | 0;
       $120 = HEAP32[$119 >> 2] | 0;
       $121 = (tempInt = FUNCTION_TABLE_iiii[$120 & 1023]($4, 8192, $$0$i$i) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       if (!$121) {
        $$0$ph$be = $$2$lcssa;
        break L27;
       }
       $122 = HEAP32[$107 >> 2] | 0;
       $123 = HEAP32[$110 >> 2] | 0;
       $124 = ($122 | 0) == ($123 | 0);
       if ($124) {
        $125 = HEAP32[$108 >> 2] | 0;
        $126 = $125 + 40 | 0;
        $127 = HEAP32[$126 >> 2] | 0;
        (tempInt = FUNCTION_TABLE_ii[$127 & 1023]($108) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $$pre$i$i$i7 = $108;
        $$pre$i3$i$i13 = $$pre$i3$i$i1344;
        $94 = $189;
        continue;
       } else {
        $128 = $122 + 4 | 0;
        HEAP32[$107 >> 2] = $128;
        $$pre$i$i$i7 = $108;
        $$pre$i3$i$i13 = $$pre$i3$i$i1344;
        $94 = $189;
        continue;
       }
      }
     }
    } while (0);
    $$pre$pre = HEAP32[$__err >> 2] | 0;
    $67 = ($$0$ph$be | 0) != ($__fmte | 0);
    $68 = ($$pre$pre | 0) == 0;
    $or$cond87 = $67 & $68;
    $69 = HEAP32[$__b >> 2] | 0;
    if ($or$cond87) {
     $$0$ph89 = $$0$ph$be;
     $10 = $69;
    } else {
     $$pre$i$i$i22 = $69;
     break L4;
    }
   }
   if ((label | 0) == 17) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i22 = $$lcssa;
    break;
   } else if ((label | 0) == 21) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i22 = $$lcssa97;
    break;
   } else if ((label | 0) == 24) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i22 = $$lcssa98;
    break;
   } else if ((label | 0) == 61) {
    HEAP32[$__err >> 2] = 4;
    $158 = HEAP32[$__b >> 2] | 0;
    $$pre$i$i$i22 = $158;
    break;
   }
  }
 } while (0);
 $159 = ($$pre$i$i$i22 | 0) == (0 | 0);
 if ($159) {
  $186 = 0;
  $190 = 1;
 } else {
  $160 = $$pre$i$i$i22 + 12 | 0;
  $161 = HEAP32[$160 >> 2] | 0;
  $162 = $$pre$i$i$i22 + 16 | 0;
  $163 = HEAP32[$162 >> 2] | 0;
  $164 = ($161 | 0) == ($163 | 0);
  if ($164) {
   $165 = HEAP32[$$pre$i$i$i22 >> 2] | 0;
   $166 = $165 + 36 | 0;
   $167 = HEAP32[$166 >> 2] | 0;
   $168 = (tempInt = FUNCTION_TABLE_ii[$167 & 1023]($$pre$i$i$i22) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0$i$i$i$i20 = $168;
  } else {
   $169 = HEAP32[$161 >> 2] | 0;
   $$0$i$i$i$i20 = $169;
  }
  $170 = ($$0$i$i$i$i20 | 0) == -1;
  if ($170) {
   HEAP32[$__b >> 2] = 0;
   $186 = 0;
   $190 = 1;
  } else {
   $186 = $$pre$i$i$i22;
   $190 = 0;
  }
 }
 $171 = HEAP32[$__e >> 2] | 0;
 $172 = ($171 | 0) == (0 | 0);
 do {
  if ($172) {
   label = 74;
  } else {
   $173 = $171 + 12 | 0;
   $174 = HEAP32[$173 >> 2] | 0;
   $175 = $171 + 16 | 0;
   $176 = HEAP32[$175 >> 2] | 0;
   $177 = ($174 | 0) == ($176 | 0);
   if ($177) {
    $178 = HEAP32[$171 >> 2] | 0;
    $179 = $178 + 36 | 0;
    $180 = HEAP32[$179 >> 2] | 0;
    $181 = (tempInt = FUNCTION_TABLE_ii[$180 & 1023]($171) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i1$i$i26 = $181;
   } else {
    $182 = HEAP32[$174 >> 2] | 0;
    $$0$i$i1$i$i26 = $182;
   }
   $183 = ($$0$i$i1$i$i26 | 0) == -1;
   if ($183) {
    HEAP32[$__e >> 2] = 0;
    label = 74;
    break;
   } else {
    if ($190) {
     break;
    } else {
     label = 76;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 74) {
  if ($190) {
   label = 76;
  }
 }
 if ((label | 0) == 76) {
  $184 = HEAP32[$__err >> 2] | 0;
  $185 = $184 | 2;
  HEAP32[$__err >> 2] = $185;
 }
 STACKTOP = sp;
 return $186 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 192 | 0;
 $__buf = sp + 180 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 HEAP32[$__grouping >> 2] = 0;
 $1 = $__grouping + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__grouping + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 __THREW__ = 0;
 $3 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 do {
  if ($5) {
   $88 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $89 = tempRet0;
   $$0 = $88;
   $$01 = $89;
  } else {
   HEAP32[$0 >> 2] = $3;
   __THREW__ = 0;
   $6 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = __THREW__;
   __THREW__ = 0;
   $8 = $7 & 1;
   if (!$8) {
    $9 = HEAP32[$6 >> 2] | 0;
    $10 = $9 + 48 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($11 | 0, $6 | 0, 20219 | 0, 20245 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $12 = __THREW__;
    __THREW__ = 0;
    $13 = $12 & 1;
    if (!$13) {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$__buf >> 2] = 0;
     $14 = $__buf + 4 | 0;
     HEAP32[$14 >> 2] = 0;
     $15 = $__buf + 8 | 0;
     HEAP32[$15 >> 2] = 0;
     $16 = HEAP8[$__buf >> 0] | 0;
     $17 = $16 & 1;
     $18 = $17 << 24 >> 24 == 0;
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf >> 2] | 0;
      $20 = $19 & -2;
      $phitmp$i = $20 + -1 | 0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $21 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     L10 : do {
      if ($23) {
       label = 31;
      } else {
       $24 = HEAP8[$__buf >> 0] | 0;
       $25 = $24 & 1;
       $26 = $25 << 24 >> 24 == 0;
       $27 = $__buf + 8 | 0;
       $28 = HEAP32[$27 >> 2] | 0;
       $29 = $__buf + 1 | 0;
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end >> 2] = $30;
       HEAP32[$__g_end >> 2] = $__g;
       HEAP32[$__dc >> 2] = 0;
       $31 = $__buf + 4 | 0;
       $$pre = HEAP32[$__b >> 2] | 0;
       $$pre$i$i$i11 = $$pre;
       $__a$0 = $30;
       L12 : while (1) {
        $32 = ($$pre$i$i$i11 | 0) == (0 | 0);
        if ($32) {
         $$pre$i$i$i = 0;
         $168 = 1;
        } else {
         $33 = $$pre$i$i$i11 + 12 | 0;
         $34 = HEAP32[$33 >> 2] | 0;
         $35 = $$pre$i$i$i11 + 16 | 0;
         $36 = HEAP32[$35 >> 2] | 0;
         $37 = ($34 | 0) == ($36 | 0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11 >> 2] | 0;
          $39 = $38 + 36 | 0;
          $40 = HEAP32[$39 >> 2] | 0;
          __THREW__ = 0;
          $41 = (tempInt = invoke_ii($40 | 0, $$pre$i$i$i11 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $42 = __THREW__;
          __THREW__ = 0;
          $43 = $42 & 1;
          if ($43) {
           label = 30;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34 >> 2] | 0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9 | 0) == -1;
         if ($45) {
          HEAP32[$__b >> 2] = 0;
          $$pre$i$i$i = 0;
          $168 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;
          $168 = 0;
         }
        }
        $46 = HEAP32[$__e >> 2] | 0;
        $47 = ($46 | 0) == (0 | 0);
        do {
         if ($47) {
          label = 20;
         } else {
          $48 = $46 + 12 | 0;
          $49 = HEAP32[$48 >> 2] | 0;
          $50 = $46 + 16 | 0;
          $51 = HEAP32[$50 >> 2] | 0;
          $52 = ($49 | 0) == ($51 | 0);
          if ($52) {
           $53 = HEAP32[$46 >> 2] | 0;
           $54 = $53 + 36 | 0;
           $55 = HEAP32[$54 >> 2] | 0;
           __THREW__ = 0;
           $56 = (tempInt = invoke_ii($55 | 0, $46 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $57 = __THREW__;
           __THREW__ = 0;
           $58 = $57 & 1;
           if ($58) {
            label = 30;
            break L12;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49 >> 2] | 0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15 | 0) == -1;
          if ($60) {
           HEAP32[$__e >> 2] = 0;
           label = 20;
           break;
          } else {
           if ($168) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;
            $$pre$i3$i$i = $46;
            $__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while (0);
        if ((label | 0) == 20) {
         label = 0;
         if ($168) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;
          $$pre$i3$i$i = 0;
          $__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $61 = HEAP32[$__a_end >> 2] | 0;
        $62 = HEAP8[$__buf >> 0] | 0;
        $63 = $62 & 1;
        $64 = $63 << 24 >> 24 == 0;
        $65 = HEAP32[$31 >> 2] | 0;
        $66 = $62 & 255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = $__a$0 + $68 | 0;
        $70 = ($61 | 0) == ($69 | 0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(408, $__buf | 0, $71 | 0, 0), asyncState ? abort(-12) | 0 : 0;
         $72 = __THREW__;
         __THREW__ = 0;
         $73 = $72 & 1;
         if ($73) {
          label = 30;
          break;
         }
         $74 = HEAP8[$__buf >> 0] | 0;
         $75 = $74 & 1;
         $76 = $75 << 24 >> 24 == 0;
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf >> 2] | 0;
          $78 = $77 & -2;
          $phitmp$i30 = $78 + -1 | 0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(408, $__buf | 0, $79 | 0, 0), asyncState ? abort(-12) | 0 : 0;
         $80 = __THREW__;
         __THREW__ = 0;
         $81 = $80 & 1;
         if ($81) {
          label = 30;
          break;
         }
         $82 = HEAP8[$__buf >> 0] | 0;
         $83 = $82 & 1;
         $84 = $83 << 24 >> 24 == 0;
         $85 = HEAP32[$27 >> 2] | 0;
         $86 = $84 ? $29 : $85;
         $87 = $86 + $68 | 0;
         HEAP32[$__a_end >> 2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = $$pre$i$i$i + 12 | 0;
        $97 = HEAP32[$96 >> 2] | 0;
        $98 = $$pre$i$i$i + 16 | 0;
        $99 = HEAP32[$98 >> 2] | 0;
        $100 = ($97 | 0) == ($99 | 0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i >> 2] | 0;
         $102 = $101 + 36 | 0;
         $103 = HEAP32[$102 >> 2] | 0;
         __THREW__ = 0;
         $104 = (tempInt = invoke_ii($103 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $105 = __THREW__;
         __THREW__ = 0;
         $106 = $105 & 1;
         if ($106) {
          label = 30;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97 >> 2] | 0;
         $$0$i$i = $107;
        }
        $108 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $109 = ($108 | 0) == 0;
        if (!$109) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;
         $$pre$i3$i$i = $169;
         $__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96 >> 2] | 0;
        $111 = HEAP32[$98 >> 2] | 0;
        $112 = ($110 | 0) == ($111 | 0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i >> 2] | 0;
         $114 = $113 + 40 | 0;
         $115 = HEAP32[$114 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($115 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $116 = __THREW__;
         __THREW__ = 0;
         $117 = $116 & 1;
         if ($117) {
          label = 30;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;
          $__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = $110 + 4 | 0;
         HEAP32[$96 >> 2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;
         $__a$0 = $__a$1;
         continue;
        }
       }
       if ((label | 0) == 30) {
        $92 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $93 = tempRet0;
        $lpad$phi$index = $92;
        $lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end >> 2] | 0;
       $120 = $119;
       $121 = $__a$2;
       $122 = $120 - $121 | 0;
       __THREW__ = 0;
       invoke_viii(408, $__buf | 0, $122 | 0, 0), asyncState ? abort(-12) | 0 : 0;
       $123 = __THREW__;
       __THREW__ = 0;
       $124 = $123 & 1;
       if ($124) {
        label = 31;
       } else {
        $125 = HEAP8[$__buf >> 0] | 0;
        $126 = HEAP32[$27 >> 2] | 0;
        __THREW__ = 0;
        $127 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $128 = __THREW__;
        __THREW__ = 0;
        $129 = $128 & 1;
        if ($129) {
         label = 31;
        } else {
         $130 = $125 & 1;
         $131 = $130 << 24 >> 24 == 0;
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer >> 2] = $__v;
         $133 = (tempInt = invoke_iiiii(463, $132 | 0, $127 | 0, 21603 | 0, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $134 = __THREW__;
         __THREW__ = 0;
         $135 = $134 & 1;
         if ($135) {
          label = 31;
         } else {
          $136 = ($133 | 0) == 1;
          if (!$136) {
           HEAP32[$__err >> 2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
          if ($137) {
           $170 = 1;
          } else {
           $138 = $$pre$i$i$i$lcssa + 12 | 0;
           $139 = HEAP32[$138 >> 2] | 0;
           $140 = $$pre$i$i$i$lcssa + 16 | 0;
           $141 = HEAP32[$140 >> 2] | 0;
           $142 = ($139 | 0) == ($141 | 0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
            $144 = $143 + 36 | 0;
            $145 = HEAP32[$144 >> 2] | 0;
            __THREW__ = 0;
            $146 = (tempInt = invoke_ii($145 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $147 = __THREW__;
            __THREW__ = 0;
            $148 = $147 & 1;
            if ($148) {
             label = 31;
             break;
            } else {
             $$0$i$i$i$i = $146;
            }
           } else {
            $149 = HEAP32[$139 >> 2] | 0;
            $$0$i$i$i$i = $149;
           }
           $150 = ($$0$i$i$i$i | 0) == -1;
           if ($150) {
            HEAP32[$__b >> 2] = 0;
            $170 = 1;
           } else {
            $170 = 0;
           }
          }
          $151 = ($$pre$i3$i$i | 0) == (0 | 0);
          do {
           if ($151) {
            label = 57;
           } else {
            $152 = $$pre$i3$i$i + 12 | 0;
            $153 = HEAP32[$152 >> 2] | 0;
            $154 = $$pre$i3$i$i + 16 | 0;
            $155 = HEAP32[$154 >> 2] | 0;
            $156 = ($153 | 0) == ($155 | 0);
            if ($156) {
             $157 = HEAP32[$$pre$i3$i$i >> 2] | 0;
             $158 = $157 + 36 | 0;
             $159 = HEAP32[$158 >> 2] | 0;
             __THREW__ = 0;
             $160 = (tempInt = invoke_ii($159 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $161 = __THREW__;
             __THREW__ = 0;
             $162 = $161 & 1;
             if ($162) {
              label = 31;
              break L10;
             } else {
              $$0$i$i1$i$i = $160;
             }
            } else {
             $163 = HEAP32[$153 >> 2] | 0;
             $$0$i$i1$i$i = $163;
            }
            $164 = ($$0$i$i1$i$i | 0) == -1;
            if ($164) {
             HEAP32[$__e >> 2] = 0;
             label = 57;
             break;
            } else {
             if ($170) {
              break;
             } else {
              label = 59;
              break;
             }
            }
           }
          } while (0);
          if ((label | 0) == 57) {
           if ($170) {
            label = 59;
           }
          }
          if ((label | 0) == 59) {
           $165 = HEAP32[$__err >> 2] | 0;
           $166 = $165 | 2;
           HEAP32[$__err >> 2] = $166;
          }
          $167 = HEAP32[$__b >> 2] | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
          STACKTOP = sp;
          return $167 | 0;
         }
        }
       }
      }
     } while (0);
     if ((label | 0) == 31) {
      $94 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $95 = tempRet0;
      $lpad$phi$index = $94;
      $lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
     $$0 = $lpad$phi$index;
     $$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $91 = tempRet0;
   (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0 = $90;
   $$01 = $91;
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($$0 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy30 = sp + 248 | 0;
 $$byval_copy29 = sp + 244 | 0;
 $$byval_copy28 = sp + 240 | 0;
 $$byval_copy27 = sp + 236 | 0;
 $$byval_copy26 = sp + 232 | 0;
 $$byval_copy25 = sp + 228 | 0;
 $$byval_copy24 = sp + 224 | 0;
 $$byval_copy23 = sp + 220 | 0;
 $$byval_copy22 = sp + 216 | 0;
 $$byval_copy21 = sp + 212 | 0;
 $$byval_copy20 = sp + 208 | 0;
 $$byval_copy19 = sp + 204 | 0;
 $$byval_copy18 = sp + 200 | 0;
 $$byval_copy17 = sp + 196 | 0;
 $$byval_copy16 = sp + 192 | 0;
 $$byval_copy15 = sp + 188 | 0;
 $$byval_copy14 = sp + 184 | 0;
 $$byval_copy13 = sp + 180 | 0;
 $$byval_copy12 = sp + 176 | 0;
 $$byval_copy11 = sp + 172 | 0;
 $$byval_copy10 = sp + 168 | 0;
 $$byval_copy9 = sp + 164 | 0;
 $$byval_copy8 = sp + 160 | 0;
 $$byval_copy7 = sp + 156 | 0;
 $$byval_copy6 = sp + 152 | 0;
 $$byval_copy5 = sp + 148 | 0;
 $$byval_copy4 = sp + 144 | 0;
 $$byval_copy3 = sp + 140 | 0;
 $$byval_copy2 = sp + 136 | 0;
 $$byval_copy1 = sp + 132 | 0;
 $$byval_copy = sp + 128 | 0;
 $1 = sp + 124 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 116 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$1 >> 2] = $33;
 __THREW__ = 0;
 $34 = (tempInt = invoke_iii(398, $1 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $35 = __THREW__;
 __THREW__ = 0;
 $36 = $35 & 1;
 if ($36) {
  $38 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $39 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($33) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($38 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($33) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37 | 0) {
  case 65:
  case 97:
   {
    $40 = $__tm + 24 | 0;
    $41 = HEAP32[$__e >> 2] | 0;
    HEAP32[$2 >> 2] = $41;
    HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $40, $__b, $$byval_copy, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $42 = $__tm + 16 | 0;
    $43 = HEAP32[$__e >> 2] | 0;
    HEAP32[$3 >> 2] = $43;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $42, $__b, $$byval_copy1, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 99:
   {
    $44 = $this + 8 | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45 + 12 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = (tempInt = FUNCTION_TABLE_ii[$47 & 1023]($44) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $49 = HEAP32[$__b >> 2] | 0;
    HEAP32[$4 >> 2] = $49;
    $50 = HEAP32[$__e >> 2] | 0;
    HEAP32[$5 >> 2] = $50;
    $51 = HEAP8[$48 >> 0] | 0;
    $52 = $51 & 1;
    $53 = $52 << 24 >> 24 == 0;
    $54 = $48 + 8 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $48 + 1 | 0;
    $57 = $53 ? $56 : $55;
    $58 = $48 + 4 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = $51 & 255;
    $61 = $60 >>> 1;
    $62 = $53 ? $61 : $59;
    $63 = $57 + $62 | 0;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2] | 0;
    $64 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy2, $$byval_copy3, $__iob, $__err, $__tm, $57, $63) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $64;
    label = 28;
    break;
   }
  case 101:
  case 100:
   {
    $65 = $__tm + 12 | 0;
    $66 = HEAP32[$__e >> 2] | 0;
    HEAP32[$6 >> 2] = $66;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$6 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $65, $__b, $$byval_copy4, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 68:
   {
    $67 = HEAP32[$__b >> 2] | 0;
    HEAP32[$7 >> 2] = $67;
    $68 = HEAP32[$__e >> 2] | 0;
    HEAP32[$8 >> 2] = $68;
    HEAP32[$$byval_copy5 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$8 >> 2] | 0;
    $69 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy5, $$byval_copy6, $__iob, $__err, $__tm, 21636, 21644) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $69;
    label = 28;
    break;
   }
  case 70:
   {
    $70 = HEAP32[$__b >> 2] | 0;
    HEAP32[$9 >> 2] = $70;
    $71 = HEAP32[$__e >> 2] | 0;
    HEAP32[$10 >> 2] = $71;
    HEAP32[$$byval_copy7 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$$byval_copy8 >> 2] = HEAP32[$10 >> 2] | 0;
    $72 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy7, $$byval_copy8, $__iob, $__err, $__tm, 21644, 21652) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $72;
    label = 28;
    break;
   }
  case 72:
   {
    $73 = $__tm + 8 | 0;
    $74 = HEAP32[$__e >> 2] | 0;
    HEAP32[$11 >> 2] = $74;
    HEAP32[$$byval_copy9 >> 2] = HEAP32[$11 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $73, $__b, $$byval_copy9, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 73:
   {
    $75 = $__tm + 8 | 0;
    $76 = HEAP32[$__e >> 2] | 0;
    HEAP32[$12 >> 2] = $76;
    HEAP32[$$byval_copy10 >> 2] = HEAP32[$12 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $75, $__b, $$byval_copy10, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 106:
   {
    $77 = $__tm + 28 | 0;
    $78 = HEAP32[$__e >> 2] | 0;
    HEAP32[$13 >> 2] = $78;
    HEAP32[$$byval_copy11 >> 2] = HEAP32[$13 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $77, $__b, $$byval_copy11, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 109:
   {
    $79 = $__tm + 16 | 0;
    $80 = HEAP32[$__e >> 2] | 0;
    HEAP32[$14 >> 2] = $80;
    HEAP32[$$byval_copy12 >> 2] = HEAP32[$14 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $79, $__b, $$byval_copy12, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 77:
   {
    $81 = $__tm + 4 | 0;
    $82 = HEAP32[$__e >> 2] | 0;
    HEAP32[$15 >> 2] = $82;
    HEAP32[$$byval_copy13 >> 2] = HEAP32[$15 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $81, $__b, $$byval_copy13, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 116:
  case 110:
   {
    $83 = HEAP32[$__e >> 2] | 0;
    HEAP32[$16 >> 2] = $83;
    HEAP32[$$byval_copy14 >> 2] = HEAP32[$16 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy14, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 112:
   {
    $84 = $__tm + 8 | 0;
    $85 = HEAP32[$__e >> 2] | 0;
    HEAP32[$17 >> 2] = $85;
    HEAP32[$$byval_copy15 >> 2] = HEAP32[$17 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $84, $__b, $$byval_copy15, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 114:
   {
    $86 = HEAP32[$__b >> 2] | 0;
    HEAP32[$18 >> 2] = $86;
    $87 = HEAP32[$__e >> 2] | 0;
    HEAP32[$19 >> 2] = $87;
    HEAP32[$$byval_copy16 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$$byval_copy17 >> 2] = HEAP32[$19 >> 2] | 0;
    $88 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy16, $$byval_copy17, $__iob, $__err, $__tm, 21652, 21663) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $88;
    label = 28;
    break;
   }
  case 82:
   {
    $89 = HEAP32[$__b >> 2] | 0;
    HEAP32[$20 >> 2] = $89;
    $90 = HEAP32[$__e >> 2] | 0;
    HEAP32[$21 >> 2] = $90;
    HEAP32[$$byval_copy18 >> 2] = HEAP32[$20 >> 2] | 0;
    HEAP32[$$byval_copy19 >> 2] = HEAP32[$21 >> 2] | 0;
    $91 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy18, $$byval_copy19, $__iob, $__err, $__tm, 21663, 21668) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $91;
    label = 28;
    break;
   }
  case 83:
   {
    $92 = HEAP32[$__e >> 2] | 0;
    HEAP32[$22 >> 2] = $92;
    HEAP32[$$byval_copy20 >> 2] = HEAP32[$22 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $$byval_copy20, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 84:
   {
    $93 = HEAP32[$__b >> 2] | 0;
    HEAP32[$23 >> 2] = $93;
    $94 = HEAP32[$__e >> 2] | 0;
    HEAP32[$24 >> 2] = $94;
    HEAP32[$$byval_copy21 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$$byval_copy22 >> 2] = HEAP32[$24 >> 2] | 0;
    $95 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy21, $$byval_copy22, $__iob, $__err, $__tm, 21668, 21676) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $95;
    label = 28;
    break;
   }
  case 119:
   {
    $96 = $__tm + 24 | 0;
    $97 = HEAP32[$__e >> 2] | 0;
    HEAP32[$25 >> 2] = $97;
    HEAP32[$$byval_copy23 >> 2] = HEAP32[$25 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $96, $__b, $$byval_copy23, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 120:
   {
    $98 = HEAP32[$this >> 2] | 0;
    $99 = $98 + 20 | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = HEAP32[$__b >> 2] | 0;
    HEAP32[$26 >> 2] = $101;
    $102 = HEAP32[$__e >> 2] | 0;
    HEAP32[$27 >> 2] = $102;
    HEAP32[$$byval_copy24 >> 2] = HEAP32[$26 >> 2] | 0;
    HEAP32[$$byval_copy25 >> 2] = HEAP32[$27 >> 2] | 0;
    $103 = (tempInt = FUNCTION_TABLE_iiiiiii[$100 & 511]($this, $$byval_copy24, $$byval_copy25, $__iob, $__err, $__tm) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$sroa$07$0 = $103;
    break;
   }
  case 88:
   {
    $104 = $this + 8 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = $105 + 24 | 0;
    $107 = HEAP32[$106 >> 2] | 0;
    $108 = (tempInt = FUNCTION_TABLE_ii[$107 & 1023]($104) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $109 = HEAP32[$__b >> 2] | 0;
    HEAP32[$28 >> 2] = $109;
    $110 = HEAP32[$__e >> 2] | 0;
    HEAP32[$29 >> 2] = $110;
    $111 = HEAP8[$108 >> 0] | 0;
    $112 = $111 & 1;
    $113 = $112 << 24 >> 24 == 0;
    $114 = $108 + 8 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = $108 + 1 | 0;
    $117 = $113 ? $116 : $115;
    $118 = $108 + 4 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = $111 & 255;
    $121 = $120 >>> 1;
    $122 = $113 ? $121 : $119;
    $123 = $117 + $122 | 0;
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2] | 0;
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$29 >> 2] | 0;
    $124 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy27, $__iob, $__err, $__tm, $117, $123) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $124;
    label = 28;
    break;
   }
  case 121:
   {
    $125 = $__tm + 20 | 0;
    $126 = HEAP32[$__e >> 2] | 0;
    HEAP32[$30 >> 2] = $126;
    HEAP32[$$byval_copy28 >> 2] = HEAP32[$30 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $125, $__b, $$byval_copy28, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 89:
   {
    $127 = $__tm + 20 | 0;
    $128 = HEAP32[$__e >> 2] | 0;
    HEAP32[$31 >> 2] = $128;
    HEAP32[$$byval_copy29 >> 2] = HEAP32[$31 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $127, $__b, $$byval_copy29, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 37:
   {
    $129 = HEAP32[$__e >> 2] | 0;
    HEAP32[$32 >> 2] = $129;
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2] | 0;
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  default:
   {
    $130 = HEAP32[$__err >> 2] | 0;
    $131 = $130 | 4;
    HEAP32[$__err >> 2] = $131;
    label = 28;
   }
  }
 } while (0);
 if ((label | 0) == 28) {
  $132 = HEAP32[$__b >> 2] | 0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy30 = sp + 248 | 0;
 $$byval_copy29 = sp + 244 | 0;
 $$byval_copy28 = sp + 240 | 0;
 $$byval_copy27 = sp + 236 | 0;
 $$byval_copy26 = sp + 232 | 0;
 $$byval_copy25 = sp + 228 | 0;
 $$byval_copy24 = sp + 224 | 0;
 $$byval_copy23 = sp + 220 | 0;
 $$byval_copy22 = sp + 216 | 0;
 $$byval_copy21 = sp + 212 | 0;
 $$byval_copy20 = sp + 208 | 0;
 $$byval_copy19 = sp + 204 | 0;
 $$byval_copy18 = sp + 200 | 0;
 $$byval_copy17 = sp + 196 | 0;
 $$byval_copy16 = sp + 192 | 0;
 $$byval_copy15 = sp + 188 | 0;
 $$byval_copy14 = sp + 184 | 0;
 $$byval_copy13 = sp + 180 | 0;
 $$byval_copy12 = sp + 176 | 0;
 $$byval_copy11 = sp + 172 | 0;
 $$byval_copy10 = sp + 168 | 0;
 $$byval_copy9 = sp + 164 | 0;
 $$byval_copy8 = sp + 160 | 0;
 $$byval_copy7 = sp + 156 | 0;
 $$byval_copy6 = sp + 152 | 0;
 $$byval_copy5 = sp + 148 | 0;
 $$byval_copy4 = sp + 144 | 0;
 $$byval_copy3 = sp + 140 | 0;
 $$byval_copy2 = sp + 136 | 0;
 $$byval_copy1 = sp + 132 | 0;
 $$byval_copy = sp + 128 | 0;
 $1 = sp + 124 | 0;
 $2 = sp + 120 | 0;
 $3 = sp + 116 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$1 >> 2] = $33;
 __THREW__ = 0;
 $34 = (tempInt = invoke_iii(398, $1 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $35 = __THREW__;
 __THREW__ = 0;
 $36 = $35 & 1;
 if ($36) {
  $38 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $39 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($33) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($38 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($33) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37 | 0) {
  case 65:
  case 97:
   {
    $40 = $__tm + 24 | 0;
    $41 = HEAP32[$__e >> 2] | 0;
    HEAP32[$2 >> 2] = $41;
    HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $40, $__b, $$byval_copy, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $42 = $__tm + 16 | 0;
    $43 = HEAP32[$__e >> 2] | 0;
    HEAP32[$3 >> 2] = $43;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $42, $__b, $$byval_copy1, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 99:
   {
    $44 = $this + 8 | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45 + 12 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = (tempInt = FUNCTION_TABLE_ii[$47 & 1023]($44) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $49 = HEAP32[$__b >> 2] | 0;
    HEAP32[$4 >> 2] = $49;
    $50 = HEAP32[$__e >> 2] | 0;
    HEAP32[$5 >> 2] = $50;
    $51 = HEAP8[$48 >> 0] | 0;
    $52 = $51 & 1;
    $53 = $52 << 24 >> 24 == 0;
    $54 = $48 + 8 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $48 + 4 | 0;
    $57 = $53 ? $56 : $55;
    $58 = HEAP32[$56 >> 2] | 0;
    $59 = $51 & 255;
    $60 = $59 >>> 1;
    $61 = $53 ? $60 : $58;
    $62 = $57 + ($61 << 2) | 0;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2] | 0;
    $63 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy2, $$byval_copy3, $__iob, $__err, $__tm, $57, $62) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $63;
    label = 28;
    break;
   }
  case 101:
  case 100:
   {
    $64 = $__tm + 12 | 0;
    $65 = HEAP32[$__e >> 2] | 0;
    HEAP32[$6 >> 2] = $65;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$6 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $64, $__b, $$byval_copy4, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 68:
   {
    $66 = HEAP32[$__b >> 2] | 0;
    HEAP32[$7 >> 2] = $66;
    $67 = HEAP32[$__e >> 2] | 0;
    HEAP32[$8 >> 2] = $67;
    HEAP32[$$byval_copy5 >> 2] = HEAP32[$7 >> 2] | 0;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$8 >> 2] | 0;
    $68 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy5, $$byval_copy6, $__iob, $__err, $__tm, 9516, 9548) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $68;
    label = 28;
    break;
   }
  case 70:
   {
    $69 = HEAP32[$__b >> 2] | 0;
    HEAP32[$9 >> 2] = $69;
    $70 = HEAP32[$__e >> 2] | 0;
    HEAP32[$10 >> 2] = $70;
    HEAP32[$$byval_copy7 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$$byval_copy8 >> 2] = HEAP32[$10 >> 2] | 0;
    $71 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy7, $$byval_copy8, $__iob, $__err, $__tm, 9548, 9580) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $71;
    label = 28;
    break;
   }
  case 72:
   {
    $72 = $__tm + 8 | 0;
    $73 = HEAP32[$__e >> 2] | 0;
    HEAP32[$11 >> 2] = $73;
    HEAP32[$$byval_copy9 >> 2] = HEAP32[$11 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $72, $__b, $$byval_copy9, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 73:
   {
    $74 = $__tm + 8 | 0;
    $75 = HEAP32[$__e >> 2] | 0;
    HEAP32[$12 >> 2] = $75;
    HEAP32[$$byval_copy10 >> 2] = HEAP32[$12 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $74, $__b, $$byval_copy10, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 106:
   {
    $76 = $__tm + 28 | 0;
    $77 = HEAP32[$__e >> 2] | 0;
    HEAP32[$13 >> 2] = $77;
    HEAP32[$$byval_copy11 >> 2] = HEAP32[$13 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $76, $__b, $$byval_copy11, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 109:
   {
    $78 = $__tm + 16 | 0;
    $79 = HEAP32[$__e >> 2] | 0;
    HEAP32[$14 >> 2] = $79;
    HEAP32[$$byval_copy12 >> 2] = HEAP32[$14 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $78, $__b, $$byval_copy12, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 77:
   {
    $80 = $__tm + 4 | 0;
    $81 = HEAP32[$__e >> 2] | 0;
    HEAP32[$15 >> 2] = $81;
    HEAP32[$$byval_copy13 >> 2] = HEAP32[$15 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $80, $__b, $$byval_copy13, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 116:
  case 110:
   {
    $82 = HEAP32[$__e >> 2] | 0;
    HEAP32[$16 >> 2] = $82;
    HEAP32[$$byval_copy14 >> 2] = HEAP32[$16 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy14, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 112:
   {
    $83 = $__tm + 8 | 0;
    $84 = HEAP32[$__e >> 2] | 0;
    HEAP32[$17 >> 2] = $84;
    HEAP32[$$byval_copy15 >> 2] = HEAP32[$17 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $83, $__b, $$byval_copy15, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 114:
   {
    $85 = HEAP32[$__b >> 2] | 0;
    HEAP32[$18 >> 2] = $85;
    $86 = HEAP32[$__e >> 2] | 0;
    HEAP32[$19 >> 2] = $86;
    HEAP32[$$byval_copy16 >> 2] = HEAP32[$18 >> 2] | 0;
    HEAP32[$$byval_copy17 >> 2] = HEAP32[$19 >> 2] | 0;
    $87 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy16, $$byval_copy17, $__iob, $__err, $__tm, 9580, 9624) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $87;
    label = 28;
    break;
   }
  case 82:
   {
    $88 = HEAP32[$__b >> 2] | 0;
    HEAP32[$20 >> 2] = $88;
    $89 = HEAP32[$__e >> 2] | 0;
    HEAP32[$21 >> 2] = $89;
    HEAP32[$$byval_copy18 >> 2] = HEAP32[$20 >> 2] | 0;
    HEAP32[$$byval_copy19 >> 2] = HEAP32[$21 >> 2] | 0;
    $90 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy18, $$byval_copy19, $__iob, $__err, $__tm, 9624, 9644) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $90;
    label = 28;
    break;
   }
  case 83:
   {
    $91 = HEAP32[$__e >> 2] | 0;
    HEAP32[$22 >> 2] = $91;
    HEAP32[$$byval_copy20 >> 2] = HEAP32[$22 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $$byval_copy20, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 84:
   {
    $92 = HEAP32[$__b >> 2] | 0;
    HEAP32[$23 >> 2] = $92;
    $93 = HEAP32[$__e >> 2] | 0;
    HEAP32[$24 >> 2] = $93;
    HEAP32[$$byval_copy21 >> 2] = HEAP32[$23 >> 2] | 0;
    HEAP32[$$byval_copy22 >> 2] = HEAP32[$24 >> 2] | 0;
    $94 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy21, $$byval_copy22, $__iob, $__err, $__tm, 9644, 9676) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $94;
    label = 28;
    break;
   }
  case 119:
   {
    $95 = $__tm + 24 | 0;
    $96 = HEAP32[$__e >> 2] | 0;
    HEAP32[$25 >> 2] = $96;
    HEAP32[$$byval_copy23 >> 2] = HEAP32[$25 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $95, $__b, $$byval_copy23, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 120:
   {
    $97 = HEAP32[$this >> 2] | 0;
    $98 = $97 + 20 | 0;
    $99 = HEAP32[$98 >> 2] | 0;
    $100 = HEAP32[$__b >> 2] | 0;
    HEAP32[$26 >> 2] = $100;
    $101 = HEAP32[$__e >> 2] | 0;
    HEAP32[$27 >> 2] = $101;
    HEAP32[$$byval_copy24 >> 2] = HEAP32[$26 >> 2] | 0;
    HEAP32[$$byval_copy25 >> 2] = HEAP32[$27 >> 2] | 0;
    $102 = (tempInt = FUNCTION_TABLE_iiiiiii[$99 & 511]($this, $$byval_copy24, $$byval_copy25, $__iob, $__err, $__tm) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$sroa$07$0 = $102;
    break;
   }
  case 88:
   {
    $103 = $this + 8 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 + 24 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    $107 = (tempInt = FUNCTION_TABLE_ii[$106 & 1023]($103) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $108 = HEAP32[$__b >> 2] | 0;
    HEAP32[$28 >> 2] = $108;
    $109 = HEAP32[$__e >> 2] | 0;
    HEAP32[$29 >> 2] = $109;
    $110 = HEAP8[$107 >> 0] | 0;
    $111 = $110 & 1;
    $112 = $111 << 24 >> 24 == 0;
    $113 = $107 + 8 | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $107 + 4 | 0;
    $116 = $112 ? $115 : $114;
    $117 = HEAP32[$115 >> 2] | 0;
    $118 = $110 & 255;
    $119 = $118 >>> 1;
    $120 = $112 ? $119 : $117;
    $121 = $116 + ($120 << 2) | 0;
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2] | 0;
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$29 >> 2] | 0;
    $122 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy27, $__iob, $__err, $__tm, $116, $121) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$__b >> 2] = $122;
    label = 28;
    break;
   }
  case 121:
   {
    $123 = $__tm + 20 | 0;
    $124 = HEAP32[$__e >> 2] | 0;
    HEAP32[$30 >> 2] = $124;
    HEAP32[$$byval_copy28 >> 2] = HEAP32[$30 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $123, $__b, $$byval_copy28, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 89:
   {
    $125 = $__tm + 20 | 0;
    $126 = HEAP32[$__e >> 2] | 0;
    HEAP32[$31 >> 2] = $126;
    HEAP32[$$byval_copy29 >> 2] = HEAP32[$31 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $125, $__b, $$byval_copy29, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  case 37:
   {
    $127 = HEAP32[$__e >> 2] | 0;
    HEAP32[$32 >> 2] = $127;
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2] | 0;
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $34), asyncState ? abort(-12) | 0 : 0;
    label = 28;
    break;
   }
  default:
   {
    $128 = HEAP32[$__err >> 2] | 0;
    $129 = $128 | 4;
    HEAP32[$__err >> 2] = $129;
    label = 28;
   }
  }
 } while (0);
 if ((label | 0) == 28) {
  $130 = HEAP32[$__b >> 2] | 0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8524) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   do {
    if ($__neg) {
     $14 = $13 + 44 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     FUNCTION_TABLE_vii[$15 & 1023]($0, $12), asyncState ? abort(-12) | 0 : 0;
     $16 = HEAP32[$0 >> 2] | 0;
     HEAP8[$__pat >> 0] = $16 & 255;
     HEAP8[$__pat + 1 >> 0] = $16 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $16 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $16 >> 24;
     $17 = HEAP32[$12 >> 2] | 0;
     $18 = $17 + 32 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     FUNCTION_TABLE_vii[$19 & 1023]($1, $12), asyncState ? abort(-12) | 0 : 0;
     $20 = HEAP8[$__sn >> 0] | 0;
     $21 = $20 & 1;
     $22 = $21 << 24 >> 24 == 0;
     if ($22) {
      $26 = $__sn + 1 | 0;
      HEAP8[$26 >> 0] = 0;
      HEAP8[$__sn >> 0] = 0;
     } else {
      $23 = $__sn + 8 | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      HEAP8[$24 >> 0] = 0;
      $25 = $__sn + 4 | 0;
      HEAP32[$25 >> 2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(433, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if ($28) {
      $29 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = tempRet0;
      ___clang_call_terminate($29), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
      HEAP32[$1 >> 2] = 0;
      $31 = $1 + 4 | 0;
      HEAP32[$31 >> 2] = 0;
      $32 = $1 + 8 | 0;
      HEAP32[$32 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
      $$pre$phiZ2D = $12;
      break;
     }
    } else {
     $33 = $13 + 40 | 0;
     $34 = HEAP32[$33 >> 2] | 0;
     FUNCTION_TABLE_vii[$34 & 1023]($2, $12), asyncState ? abort(-12) | 0 : 0;
     $35 = HEAP32[$2 >> 2] | 0;
     HEAP8[$__pat >> 0] = $35 & 255;
     HEAP8[$__pat + 1 >> 0] = $35 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $35 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $35 >> 24;
     $36 = HEAP32[$12 >> 2] | 0;
     $37 = $36 + 28 | 0;
     $38 = HEAP32[$37 >> 2] | 0;
     FUNCTION_TABLE_vii[$38 & 1023]($3, $12), asyncState ? abort(-12) | 0 : 0;
     $39 = HEAP8[$__sn >> 0] | 0;
     $40 = $39 & 1;
     $41 = $40 << 24 >> 24 == 0;
     if ($41) {
      $45 = $__sn + 1 | 0;
      HEAP8[$45 >> 0] = 0;
      HEAP8[$__sn >> 0] = 0;
     } else {
      $42 = $__sn + 8 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      HEAP8[$43 >> 0] = 0;
      $44 = $__sn + 4 | 0;
      HEAP32[$44 >> 2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(433, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $46 = __THREW__;
     __THREW__ = 0;
     $47 = $46 & 1;
     if ($47) {
      $48 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $49 = tempRet0;
      ___clang_call_terminate($48), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$3 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
      HEAP32[$3 >> 2] = 0;
      $50 = $3 + 4 | 0;
      HEAP32[$50 >> 2] = 0;
      $51 = $3 + 8 | 0;
      HEAP32[$51 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
      $$pre$phiZ2D = $12;
      break;
     }
    }
   } while (0);
   $52 = HEAP32[$12 >> 2] | 0;
   $53 = $52 + 12 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   $55 = (tempInt = FUNCTION_TABLE_ii[$54 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__dp >> 0] = $55;
   $56 = HEAP32[$12 >> 2] | 0;
   $57 = $56 + 16 | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   $59 = (tempInt = FUNCTION_TABLE_ii[$58 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__ts >> 0] = $59;
   $60 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $61 = $60 + 20 | 0;
   $62 = HEAP32[$61 >> 2] | 0;
   FUNCTION_TABLE_vii[$62 & 1023]($4, $12), asyncState ? abort(-12) | 0 : 0;
   $63 = HEAP8[$__grp >> 0] | 0;
   $64 = $63 & 1;
   $65 = $64 << 24 >> 24 == 0;
   if ($65) {
    $69 = $__grp + 1 | 0;
    HEAP8[$69 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $66 = $__grp + 8 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    HEAP8[$67 >> 0] = 0;
    $68 = $__grp + 4 | 0;
    HEAP32[$68 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $70 = __THREW__;
   __THREW__ = 0;
   $71 = $70 & 1;
   if ($71) {
    $72 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $73 = tempRet0;
    ___clang_call_terminate($72), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$4 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
   HEAP32[$4 >> 2] = 0;
   $74 = $4 + 4 | 0;
   HEAP32[$74 >> 2] = 0;
   $75 = $4 + 8 | 0;
   HEAP32[$75 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4), asyncState ? abort(-12) | 0 : 0;
   $76 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $77 = $76 + 24 | 0;
   $78 = HEAP32[$77 >> 2] | 0;
   FUNCTION_TABLE_vii[$78 & 1023]($5, $12), asyncState ? abort(-12) | 0 : 0;
   $79 = HEAP8[$__sym >> 0] | 0;
   $80 = $79 & 1;
   $81 = $80 << 24 >> 24 == 0;
   if ($81) {
    $85 = $__sym + 1 | 0;
    HEAP8[$85 >> 0] = 0;
    HEAP8[$__sym >> 0] = 0;
   } else {
    $82 = $__sym + 8 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    HEAP8[$83 >> 0] = 0;
    $84 = $__sym + 4 | 0;
    HEAP32[$84 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $86 = __THREW__;
   __THREW__ = 0;
   $87 = $86 & 1;
   if ($87) {
    $88 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $89 = tempRet0;
    ___clang_call_terminate($88), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    HEAP32[$5 >> 2] = 0;
    $90 = $5 + 4 | 0;
    HEAP32[$90 >> 2] = 0;
    $91 = $5 + 8 | 0;
    HEAP32[$91 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5), asyncState ? abort(-12) | 0 : 0;
    $92 = HEAP32[$12 >> 2] | 0;
    $93 = $92 + 36 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = (tempInt = FUNCTION_TABLE_ii[$94 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $95;
    break;
   }
  } else {
   $96 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8460) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $97 = HEAP32[$96 >> 2] | 0;
   do {
    if ($__neg) {
     $98 = $97 + 44 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     FUNCTION_TABLE_vii[$99 & 1023]($6, $96), asyncState ? abort(-12) | 0 : 0;
     $100 = HEAP32[$6 >> 2] | 0;
     HEAP8[$__pat >> 0] = $100 & 255;
     HEAP8[$__pat + 1 >> 0] = $100 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $100 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $100 >> 24;
     $101 = HEAP32[$96 >> 2] | 0;
     $102 = $101 + 32 | 0;
     $103 = HEAP32[$102 >> 2] | 0;
     FUNCTION_TABLE_vii[$103 & 1023]($7, $96), asyncState ? abort(-12) | 0 : 0;
     $104 = HEAP8[$__sn >> 0] | 0;
     $105 = $104 & 1;
     $106 = $105 << 24 >> 24 == 0;
     if ($106) {
      $110 = $__sn + 1 | 0;
      HEAP8[$110 >> 0] = 0;
      HEAP8[$__sn >> 0] = 0;
     } else {
      $107 = $__sn + 8 | 0;
      $108 = HEAP32[$107 >> 2] | 0;
      HEAP8[$108 >> 0] = 0;
      $109 = $__sn + 4 | 0;
      HEAP32[$109 >> 2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(433, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $111 = __THREW__;
     __THREW__ = 0;
     $112 = $111 & 1;
     if ($112) {
      $113 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $114 = tempRet0;
      ___clang_call_terminate($113), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$7 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
      HEAP32[$7 >> 2] = 0;
      $115 = $7 + 4 | 0;
      HEAP32[$115 >> 2] = 0;
      $116 = $7 + 8 | 0;
      HEAP32[$116 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
      $$pre$phi39Z2D = $96;
      break;
     }
    } else {
     $117 = $97 + 40 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     FUNCTION_TABLE_vii[$118 & 1023]($8, $96), asyncState ? abort(-12) | 0 : 0;
     $119 = HEAP32[$8 >> 2] | 0;
     HEAP8[$__pat >> 0] = $119 & 255;
     HEAP8[$__pat + 1 >> 0] = $119 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $119 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $119 >> 24;
     $120 = HEAP32[$96 >> 2] | 0;
     $121 = $120 + 28 | 0;
     $122 = HEAP32[$121 >> 2] | 0;
     FUNCTION_TABLE_vii[$122 & 1023]($9, $96), asyncState ? abort(-12) | 0 : 0;
     $123 = HEAP8[$__sn >> 0] | 0;
     $124 = $123 & 1;
     $125 = $124 << 24 >> 24 == 0;
     if ($125) {
      $129 = $__sn + 1 | 0;
      HEAP8[$129 >> 0] = 0;
      HEAP8[$__sn >> 0] = 0;
     } else {
      $126 = $__sn + 8 | 0;
      $127 = HEAP32[$126 >> 2] | 0;
      HEAP8[$127 >> 0] = 0;
      $128 = $__sn + 4 | 0;
      HEAP32[$128 >> 2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(433, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $130 = __THREW__;
     __THREW__ = 0;
     $131 = $130 & 1;
     if ($131) {
      $132 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $133 = tempRet0;
      ___clang_call_terminate($132), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$9 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
      HEAP32[$9 >> 2] = 0;
      $134 = $9 + 4 | 0;
      HEAP32[$134 >> 2] = 0;
      $135 = $9 + 8 | 0;
      HEAP32[$135 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9), asyncState ? abort(-12) | 0 : 0;
      $$pre$phi39Z2D = $96;
      break;
     }
    }
   } while (0);
   $136 = HEAP32[$96 >> 2] | 0;
   $137 = $136 + 12 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   $139 = (tempInt = FUNCTION_TABLE_ii[$138 & 1023]($96) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__dp >> 0] = $139;
   $140 = HEAP32[$96 >> 2] | 0;
   $141 = $140 + 16 | 0;
   $142 = HEAP32[$141 >> 2] | 0;
   $143 = (tempInt = FUNCTION_TABLE_ii[$142 & 1023]($96) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__ts >> 0] = $143;
   $144 = HEAP32[$$pre$phi39Z2D >> 2] | 0;
   $145 = $144 + 20 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   FUNCTION_TABLE_vii[$146 & 1023]($10, $96), asyncState ? abort(-12) | 0 : 0;
   $147 = HEAP8[$__grp >> 0] | 0;
   $148 = $147 & 1;
   $149 = $148 << 24 >> 24 == 0;
   if ($149) {
    $153 = $__grp + 1 | 0;
    HEAP8[$153 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $150 = $__grp + 8 | 0;
    $151 = HEAP32[$150 >> 2] | 0;
    HEAP8[$151 >> 0] = 0;
    $152 = $__grp + 4 | 0;
    HEAP32[$152 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $154 = __THREW__;
   __THREW__ = 0;
   $155 = $154 & 1;
   if ($155) {
    $156 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $157 = tempRet0;
    ___clang_call_terminate($156), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$10 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   $158 = $10 + 4 | 0;
   HEAP32[$158 >> 2] = 0;
   $159 = $10 + 8 | 0;
   HEAP32[$159 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10), asyncState ? abort(-12) | 0 : 0;
   $160 = HEAP32[$$pre$phi39Z2D >> 2] | 0;
   $161 = $160 + 24 | 0;
   $162 = HEAP32[$161 >> 2] | 0;
   FUNCTION_TABLE_vii[$162 & 1023]($11, $96), asyncState ? abort(-12) | 0 : 0;
   $163 = HEAP8[$__sym >> 0] | 0;
   $164 = $163 & 1;
   $165 = $164 << 24 >> 24 == 0;
   if ($165) {
    $169 = $__sym + 1 | 0;
    HEAP8[$169 >> 0] = 0;
    HEAP8[$__sym >> 0] = 0;
   } else {
    $166 = $__sym + 8 | 0;
    $167 = HEAP32[$166 >> 2] | 0;
    HEAP8[$167 >> 0] = 0;
    $168 = $__sym + 4 | 0;
    HEAP32[$168 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $170 = __THREW__;
   __THREW__ = 0;
   $171 = $170 & 1;
   if ($171) {
    $172 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $173 = tempRet0;
    ___clang_call_terminate($172), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    HEAP32[$11 >> 2] = 0;
    $174 = $11 + 4 | 0;
    HEAP32[$174 >> 2] = 0;
    $175 = $11 + 8 | 0;
    HEAP32[$175 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11), asyncState ? abort(-12) | 0 : 0;
    $176 = HEAP32[$96 >> 2] | 0;
    $177 = $176 + 36 | 0;
    $178 = HEAP32[$177 >> 2] | 0;
    $179 = (tempInt = FUNCTION_TABLE_ii[$178 & 1023]($96) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $179;
    break;
   }
  }
 } while (0);
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 192 | 0;
 $__buf = sp + 180 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 HEAP32[$__grouping >> 2] = 0;
 $1 = $__grouping + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__grouping + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 __THREW__ = 0;
 $3 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 do {
  if ($5) {
   $87 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $88 = tempRet0;
   $$0 = $87;
   $$01 = $88;
  } else {
   HEAP32[$0 >> 2] = $3;
   __THREW__ = 0;
   $6 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = __THREW__;
   __THREW__ = 0;
   $8 = $7 & 1;
   if (!$8) {
    $9 = HEAP32[$6 >> 2] | 0;
    $10 = $9 + 32 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($11 | 0, $6 | 0, 20219 | 0, 20245 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $12 = __THREW__;
    __THREW__ = 0;
    $13 = $12 & 1;
    if (!$13) {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$__buf >> 2] = 0;
     $14 = $__buf + 4 | 0;
     HEAP32[$14 >> 2] = 0;
     $15 = $__buf + 8 | 0;
     HEAP32[$15 >> 2] = 0;
     $16 = HEAP8[$__buf >> 0] | 0;
     $17 = $16 & 1;
     $18 = $17 << 24 >> 24 == 0;
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf >> 2] | 0;
      $20 = $19 & -2;
      $phitmp$i = $20 + -1 | 0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $21 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     L10 : do {
      if ($23) {
       label = 30;
      } else {
       $24 = HEAP8[$__buf >> 0] | 0;
       $25 = $24 & 1;
       $26 = $25 << 24 >> 24 == 0;
       $27 = $__buf + 8 | 0;
       $28 = HEAP32[$27 >> 2] | 0;
       $29 = $__buf + 1 | 0;
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end >> 2] = $30;
       HEAP32[$__g_end >> 2] = $__g;
       HEAP32[$__dc >> 2] = 0;
       $31 = $__buf + 4 | 0;
       $$pre = HEAP32[$__b >> 2] | 0;
       $$pre$i$i$i10 = $$pre;
       $__a$0 = $30;
       L12 : while (1) {
        $32 = ($$pre$i$i$i10 | 0) == (0 | 0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = $$pre$i$i$i10 + 12 | 0;
         $34 = HEAP32[$33 >> 2] | 0;
         $35 = $$pre$i$i$i10 + 16 | 0;
         $36 = HEAP32[$35 >> 2] | 0;
         $37 = ($34 | 0) == ($36 | 0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10 >> 2] | 0;
          $39 = $38 + 36 | 0;
          $40 = HEAP32[$39 >> 2] | 0;
          __THREW__ = 0;
          $41 = (tempInt = invoke_ii($40 | 0, $$pre$i$i$i10 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $42 = __THREW__;
          __THREW__ = 0;
          $43 = $42 & 1;
          if ($43) {
           label = 29;
           break;
          }
          $44 = ($41 | 0) == -1;
          if ($44) {
           HEAP32[$__b >> 2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i | 0) == (0 | 0);
        $46 = HEAP32[$__e >> 2] | 0;
        $47 = ($46 | 0) == (0 | 0);
        do {
         if ($47) {
          label = 19;
         } else {
          $48 = $46 + 12 | 0;
          $49 = HEAP32[$48 >> 2] | 0;
          $50 = $46 + 16 | 0;
          $51 = HEAP32[$50 >> 2] | 0;
          $52 = ($49 | 0) == ($51 | 0);
          if (!$52) {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;
            $$pre$i2$i$i = $46;
            $__a$2 = $__a$0;
            break L12;
           }
          }
          $53 = HEAP32[$46 >> 2] | 0;
          $54 = $53 + 36 | 0;
          $55 = HEAP32[$54 >> 2] | 0;
          __THREW__ = 0;
          $56 = (tempInt = invoke_ii($55 | 0, $46 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $57 = __THREW__;
          __THREW__ = 0;
          $58 = $57 & 1;
          if ($58) {
           label = 29;
           break L12;
          }
          $59 = ($56 | 0) == -1;
          if ($59) {
           HEAP32[$__e >> 2] = 0;
           label = 19;
           break;
          } else {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;
            $$pre$i2$i$i = $46;
            $__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while (0);
        if ((label | 0) == 19) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;
          $$pre$i2$i$i = 0;
          $__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $60 = HEAP32[$__a_end >> 2] | 0;
        $61 = HEAP8[$__buf >> 0] | 0;
        $62 = $61 & 1;
        $63 = $62 << 24 >> 24 == 0;
        $64 = HEAP32[$31 >> 2] | 0;
        $65 = $61 & 255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = $__a$0 + $67 | 0;
        $69 = ($60 | 0) == ($68 | 0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(408, $__buf | 0, $70 | 0, 0), asyncState ? abort(-12) | 0 : 0;
         $71 = __THREW__;
         __THREW__ = 0;
         $72 = $71 & 1;
         if ($72) {
          label = 29;
          break;
         }
         $73 = HEAP8[$__buf >> 0] | 0;
         $74 = $73 & 1;
         $75 = $74 << 24 >> 24 == 0;
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf >> 2] | 0;
          $77 = $76 & -2;
          $phitmp$i26 = $77 + -1 | 0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(408, $__buf | 0, $78 | 0, 0), asyncState ? abort(-12) | 0 : 0;
         $79 = __THREW__;
         __THREW__ = 0;
         $80 = $79 & 1;
         if ($80) {
          label = 29;
          break;
         }
         $81 = HEAP8[$__buf >> 0] | 0;
         $82 = $81 & 1;
         $83 = $82 << 24 >> 24 == 0;
         $84 = HEAP32[$27 >> 2] | 0;
         $85 = $83 ? $29 : $84;
         $86 = $85 + $67 | 0;
         HEAP32[$__a_end >> 2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = $$pre$i$i$i + 12 | 0;
        $96 = HEAP32[$95 >> 2] | 0;
        $97 = $$pre$i$i$i + 16 | 0;
        $98 = HEAP32[$97 >> 2] | 0;
        $99 = ($96 | 0) == ($98 | 0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i >> 2] | 0;
         $101 = $100 + 36 | 0;
         $102 = HEAP32[$101 >> 2] | 0;
         __THREW__ = 0;
         $103 = (tempInt = invoke_ii($102 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $104 = __THREW__;
         __THREW__ = 0;
         $105 = $104 & 1;
         if ($105) {
          label = 29;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96 >> 0] | 0;
         $107 = $106 & 255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i & 255;
        $109 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $110 = ($109 | 0) == 0;
        if (!$110) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;
         $$pre$i2$i$i = $169;
         $__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95 >> 2] | 0;
        $112 = HEAP32[$97 >> 2] | 0;
        $113 = ($111 | 0) == ($112 | 0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i >> 2] | 0;
         $115 = $114 + 40 | 0;
         $116 = HEAP32[$115 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($116 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $117 = __THREW__;
         __THREW__ = 0;
         $118 = $117 & 1;
         if ($118) {
          label = 29;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;
          $__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = $111 + 1 | 0;
         HEAP32[$95 >> 2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;
         $__a$0 = $__a$1;
         continue;
        }
       }
       if ((label | 0) == 29) {
        $91 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $92 = tempRet0;
        $lpad$phi$index = $91;
        $lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end >> 2] | 0;
       $121 = $120;
       $122 = $__a$2;
       $123 = $121 - $122 | 0;
       __THREW__ = 0;
       invoke_viii(408, $__buf | 0, $123 | 0, 0), asyncState ? abort(-12) | 0 : 0;
       $124 = __THREW__;
       __THREW__ = 0;
       $125 = $124 & 1;
       if ($125) {
        label = 30;
       } else {
        $126 = HEAP8[$__buf >> 0] | 0;
        $127 = HEAP32[$27 >> 2] | 0;
        __THREW__ = 0;
        $128 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $129 = __THREW__;
        __THREW__ = 0;
        $130 = $129 & 1;
        if ($130) {
         label = 30;
        } else {
         $131 = $126 & 1;
         $132 = $131 << 24 >> 24 == 0;
         $133 = $132 ? $29 : $127;
         __THREW__ = 0;
         HEAP32[$vararg_buffer >> 2] = $__v;
         $134 = (tempInt = invoke_iiiii(463, $133 | 0, $128 | 0, 21603 | 0, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $135 = __THREW__;
         __THREW__ = 0;
         $136 = $135 & 1;
         if ($136) {
          label = 30;
         } else {
          $137 = ($134 | 0) == 1;
          if (!$137) {
           HEAP32[$__err >> 2] = 4;
          }
          $138 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
          if ($138) {
           $152 = 0;
          } else {
           $139 = $$pre$i$i$i$lcssa + 12 | 0;
           $140 = HEAP32[$139 >> 2] | 0;
           $141 = $$pre$i$i$i$lcssa + 16 | 0;
           $142 = HEAP32[$141 >> 2] | 0;
           $143 = ($140 | 0) == ($142 | 0);
           if ($143) {
            $144 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
            $145 = $144 + 36 | 0;
            $146 = HEAP32[$145 >> 2] | 0;
            __THREW__ = 0;
            $147 = (tempInt = invoke_ii($146 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $148 = __THREW__;
            __THREW__ = 0;
            $149 = $148 & 1;
            if ($149) {
             label = 30;
             break;
            }
            $150 = ($147 | 0) == -1;
            if ($150) {
             HEAP32[$__b >> 2] = 0;
             $152 = 0;
            } else {
             $152 = $$pre$i$i$i$lcssa;
            }
           } else {
            $152 = $$pre$i$i$i$lcssa;
           }
          }
          $151 = ($152 | 0) == (0 | 0);
          $153 = ($$pre$i2$i$i | 0) == (0 | 0);
          do {
           if ($153) {
            label = 55;
           } else {
            $154 = $$pre$i2$i$i + 12 | 0;
            $155 = HEAP32[$154 >> 2] | 0;
            $156 = $$pre$i2$i$i + 16 | 0;
            $157 = HEAP32[$156 >> 2] | 0;
            $158 = ($155 | 0) == ($157 | 0);
            if ($158) {
             $159 = HEAP32[$$pre$i2$i$i >> 2] | 0;
             $160 = $159 + 36 | 0;
             $161 = HEAP32[$160 >> 2] | 0;
             __THREW__ = 0;
             $162 = (tempInt = invoke_ii($161 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $163 = __THREW__;
             __THREW__ = 0;
             $164 = $163 & 1;
             if ($164) {
              label = 30;
              break L10;
             }
             $165 = ($162 | 0) == -1;
             if ($165) {
              HEAP32[$__e >> 2] = 0;
              label = 55;
              break;
             }
            }
            if (!$151) {
             label = 56;
            }
           }
          } while (0);
          if ((label | 0) == 55) {
           if ($151) {
            label = 56;
           }
          }
          if ((label | 0) == 56) {
           $166 = HEAP32[$__err >> 2] | 0;
           $167 = $166 | 2;
           HEAP32[$__err >> 2] = $167;
          }
          $168 = HEAP32[$__b >> 2] | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
          STACKTOP = sp;
          return $168 | 0;
         }
        }
       }
      }
     } while (0);
     if ((label | 0) == 30) {
      $93 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $94 = tempRet0;
      $lpad$phi$index = $93;
      $lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
     $$0 = $lpad$phi$index;
     $$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $90 = tempRet0;
   (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0 = $89;
   $$01 = $90;
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($$0 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE12__find_equalISD_EERPNS_16__tree_node_baseIPvEESP_RKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__lhs_sz$i$i$i$i1 = 0, $__nd = 0, $__result$i$i$i$i = 0, $__result$i$i$i$i3 = 0, $__rhs_sz$i$i$i$i = 0, $__rhs_sz$i$i$i$i2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $22 = sp + 8 | 0;
 $25 = sp + 653 | 0;
 $__lhs_sz$i$i$i$i1 = sp + 404 | 0;
 $__rhs_sz$i$i$i$i2 = sp + 400 | 0;
 $93 = sp;
 $96 = sp + 652 | 0;
 $__lhs_sz$i$i$i$i = sp + 116 | 0;
 $__rhs_sz$i$i$i$i = sp + 112 | 0;
 $154 = $this;
 $155 = $__parent;
 $156 = $__v;
 $157 = $154;
 $152 = $157;
 $158 = $152;
 $151 = $158;
 $159 = $151;
 $160 = $159 + 4 | 0;
 $150 = $160;
 $161 = $150;
 $149 = $161;
 $162 = $149;
 $148 = $162;
 $163 = $148;
 $147 = $163;
 $164 = $147;
 $165 = HEAP32[$164 >> 2] | 0;
 $__nd = $165;
 $166 = $__nd;
 $167 = ($166 | 0) != (0 | 0);
 if (!$167) {
  $146 = $157;
  $449 = $146;
  $450 = $449 + 4 | 0;
  $145 = $450;
  $451 = $145;
  $144 = $451;
  $452 = $144;
  $143 = $452;
  $453 = $143;
  $142 = $453;
  $454 = $142;
  $455 = $155;
  HEAP32[$455 >> 2] = $454;
  $456 = $155;
  $457 = HEAP32[$456 >> 2] | 0;
  $153 = $457;
  $458 = $153;
  STACKTOP = sp;
  return $458 | 0;
 }
 while (1) {
  $73 = $157;
  $168 = $73;
  $169 = $168 + 8 | 0;
  $72 = $169;
  $170 = $72;
  $71 = $170;
  $171 = $71;
  $172 = $156;
  $173 = $__nd;
  $174 = $173 + 16 | 0;
  $68 = $171;
  $69 = $172;
  $70 = $174;
  $175 = $68;
  $176 = $69;
  $177 = $70;
  $65 = $175;
  $66 = $176;
  $67 = $177;
  $178 = $66;
  $179 = $67;
  $63 = $178;
  $64 = $179;
  $180 = $63;
  $181 = $64;
  $61 = $180;
  $62 = $181;
  $182 = $61;
  $59 = $182;
  $183 = $59;
  $58 = $183;
  $184 = $58;
  $57 = $184;
  $185 = $57;
  $56 = $185;
  $186 = $56;
  $187 = HEAP8[$186 >> 0] | 0;
  $188 = $187 & 255;
  $189 = $188 & 1;
  $190 = ($189 | 0) != 0;
  if ($190) {
   $52 = $183;
   $191 = $52;
   $51 = $191;
   $192 = $51;
   $50 = $192;
   $193 = $50;
   $194 = $193 + 4 | 0;
   $195 = HEAP32[$194 >> 2] | 0;
   $202 = $195;
  } else {
   $55 = $183;
   $196 = $55;
   $54 = $196;
   $197 = $54;
   $53 = $197;
   $198 = $53;
   $199 = HEAP8[$198 >> 0] | 0;
   $200 = $199 & 255;
   $201 = $200 >> 1;
   $202 = $201;
  }
  HEAP32[$__lhs_sz$i$i$i$i1 >> 2] = $202;
  $203 = $62;
  $49 = $203;
  $204 = $49;
  $48 = $204;
  $205 = $48;
  $47 = $205;
  $206 = $47;
  $46 = $206;
  $207 = $46;
  $208 = HEAP8[$207 >> 0] | 0;
  $209 = $208 & 255;
  $210 = $209 & 1;
  $211 = ($210 | 0) != 0;
  if ($211) {
   $42 = $204;
   $212 = $42;
   $41 = $212;
   $213 = $41;
   $40 = $213;
   $214 = $40;
   $215 = $214 + 4 | 0;
   $216 = HEAP32[$215 >> 2] | 0;
   $223 = $216;
  } else {
   $45 = $204;
   $217 = $45;
   $44 = $217;
   $218 = $44;
   $43 = $218;
   $219 = $43;
   $220 = HEAP8[$219 >> 0] | 0;
   $221 = $220 & 255;
   $222 = $221 >> 1;
   $223 = $222;
  }
  HEAP32[$__rhs_sz$i$i$i$i2 >> 2] = $223;
  $39 = $182;
  $224 = $39;
  $38 = $224;
  $225 = $38;
  $37 = $225;
  $226 = $37;
  $36 = $226;
  $227 = $36;
  $35 = $227;
  $228 = $35;
  $229 = HEAP8[$228 >> 0] | 0;
  $230 = $229 & 255;
  $231 = $230 & 1;
  $232 = ($231 | 0) != 0;
  if ($232) {
   $29 = $225;
   $233 = $29;
   $28 = $233;
   $234 = $28;
   $27 = $234;
   $235 = $27;
   $236 = $235 + 8 | 0;
   $237 = HEAP32[$236 >> 2] | 0;
   $244 = $237;
  } else {
   $34 = $225;
   $238 = $34;
   $33 = $238;
   $239 = $33;
   $32 = $239;
   $240 = $32;
   $241 = $240 + 1 | 0;
   $31 = $241;
   $242 = $31;
   $30 = $242;
   $243 = $30;
   $244 = $243;
  }
  $26 = $244;
  $245 = $26;
  $246 = $62;
  $16 = $246;
  $247 = $16;
  $15 = $247;
  $248 = $15;
  $14 = $248;
  $249 = $14;
  $13 = $249;
  $250 = $13;
  $12 = $250;
  $251 = $12;
  $252 = HEAP8[$251 >> 0] | 0;
  $253 = $252 & 255;
  $254 = $253 & 1;
  $255 = ($254 | 0) != 0;
  if ($255) {
   $6 = $248;
   $256 = $6;
   $5 = $256;
   $257 = $5;
   $4 = $257;
   $258 = $4;
   $259 = $258 + 8 | 0;
   $260 = HEAP32[$259 >> 2] | 0;
   $267 = $260;
  } else {
   $11 = $248;
   $261 = $11;
   $10 = $261;
   $262 = $10;
   $9 = $262;
   $263 = $9;
   $264 = $263 + 1 | 0;
   $8 = $264;
   $265 = $8;
   $7 = $265;
   $266 = $7;
   $267 = $266;
  }
  $3 = $267;
  $268 = $3;
  $23 = $__lhs_sz$i$i$i$i1;
  $24 = $__rhs_sz$i$i$i$i2;
  $269 = $23;
  $270 = $24;
  HEAP8[$22 >> 0] = HEAP8[$25 >> 0] | 0;
  $20 = $269;
  $21 = $270;
  $271 = $21;
  $272 = $20;
  $17 = $22;
  $18 = $271;
  $19 = $272;
  $273 = $18;
  $274 = HEAP32[$273 >> 2] | 0;
  $275 = $19;
  $276 = HEAP32[$275 >> 2] | 0;
  $277 = $274 >>> 0 < $276 >>> 0;
  $278 = $21;
  $279 = $20;
  $280 = $277 ? $278 : $279;
  $281 = HEAP32[$280 >> 2] | 0;
  __THREW__ = 0;
  $282 = (tempInt = invoke_iiii(382, $245 | 0, $268 | 0, $281 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $283 = __THREW__;
  __THREW__ = 0;
  $284 = $283 & 1;
  if ($284) {
   label = 22;
   break;
  }
  $__result$i$i$i$i3 = $282;
  $285 = $__result$i$i$i$i3;
  $286 = ($285 | 0) != 0;
  do {
   if ($286) {
    $287 = $__result$i$i$i$i3;
    $60 = $287;
   } else {
    $288 = HEAP32[$__lhs_sz$i$i$i$i1 >> 2] | 0;
    $289 = HEAP32[$__rhs_sz$i$i$i$i2 >> 2] | 0;
    $290 = $288 >>> 0 < $289 >>> 0;
    if ($290) {
     $60 = -1;
     break;
    }
    $291 = HEAP32[$__lhs_sz$i$i$i$i1 >> 2] | 0;
    $292 = HEAP32[$__rhs_sz$i$i$i$i2 >> 2] | 0;
    $293 = $291 >>> 0 > $292 >>> 0;
    if ($293) {
     $60 = 1;
     break;
    } else {
     $60 = 0;
     break;
    }
   }
  } while (0);
  $296 = $60;
  $297 = ($296 | 0) < 0;
  if ($297) {
   $298 = $__nd;
   $299 = HEAP32[$298 >> 2] | 0;
   $300 = ($299 | 0) != (0 | 0);
   $301 = $__nd;
   if (!$300) {
    label = 26;
    break;
   }
   $302 = HEAP32[$301 >> 2] | 0;
   $__nd = $302;
   continue;
  }
  $2 = $157;
  $306 = $2;
  $307 = $306 + 8 | 0;
  $1 = $307;
  $308 = $1;
  $0 = $308;
  $309 = $0;
  $310 = $__nd;
  $311 = $310 + 16 | 0;
  $312 = $156;
  $139 = $309;
  $140 = $311;
  $141 = $312;
  $313 = $139;
  $314 = $140;
  $315 = $141;
  $136 = $313;
  $137 = $314;
  $138 = $315;
  $316 = $137;
  $317 = $138;
  $134 = $316;
  $135 = $317;
  $318 = $134;
  $319 = $135;
  $132 = $318;
  $133 = $319;
  $320 = $132;
  $130 = $320;
  $321 = $130;
  $129 = $321;
  $322 = $129;
  $128 = $322;
  $323 = $128;
  $127 = $323;
  $324 = $127;
  $325 = HEAP8[$324 >> 0] | 0;
  $326 = $325 & 255;
  $327 = $326 & 1;
  $328 = ($327 | 0) != 0;
  if ($328) {
   $123 = $321;
   $329 = $123;
   $122 = $329;
   $330 = $122;
   $121 = $330;
   $331 = $121;
   $332 = $331 + 4 | 0;
   $333 = HEAP32[$332 >> 2] | 0;
   $340 = $333;
  } else {
   $126 = $321;
   $334 = $126;
   $125 = $334;
   $335 = $125;
   $124 = $335;
   $336 = $124;
   $337 = HEAP8[$336 >> 0] | 0;
   $338 = $337 & 255;
   $339 = $338 >> 1;
   $340 = $339;
  }
  HEAP32[$__lhs_sz$i$i$i$i >> 2] = $340;
  $341 = $133;
  $120 = $341;
  $342 = $120;
  $119 = $342;
  $343 = $119;
  $118 = $343;
  $344 = $118;
  $117 = $344;
  $345 = $117;
  $346 = HEAP8[$345 >> 0] | 0;
  $347 = $346 & 255;
  $348 = $347 & 1;
  $349 = ($348 | 0) != 0;
  if ($349) {
   $113 = $342;
   $350 = $113;
   $112 = $350;
   $351 = $112;
   $111 = $351;
   $352 = $111;
   $353 = $352 + 4 | 0;
   $354 = HEAP32[$353 >> 2] | 0;
   $361 = $354;
  } else {
   $116 = $342;
   $355 = $116;
   $115 = $355;
   $356 = $115;
   $114 = $356;
   $357 = $114;
   $358 = HEAP8[$357 >> 0] | 0;
   $359 = $358 & 255;
   $360 = $359 >> 1;
   $361 = $360;
  }
  HEAP32[$__rhs_sz$i$i$i$i >> 2] = $361;
  $110 = $320;
  $362 = $110;
  $109 = $362;
  $363 = $109;
  $108 = $363;
  $364 = $108;
  $107 = $364;
  $365 = $107;
  $106 = $365;
  $366 = $106;
  $367 = HEAP8[$366 >> 0] | 0;
  $368 = $367 & 255;
  $369 = $368 & 1;
  $370 = ($369 | 0) != 0;
  if ($370) {
   $100 = $363;
   $371 = $100;
   $99 = $371;
   $372 = $99;
   $98 = $372;
   $373 = $98;
   $374 = $373 + 8 | 0;
   $375 = HEAP32[$374 >> 2] | 0;
   $382 = $375;
  } else {
   $105 = $363;
   $376 = $105;
   $104 = $376;
   $377 = $104;
   $103 = $377;
   $378 = $103;
   $379 = $378 + 1 | 0;
   $102 = $379;
   $380 = $102;
   $101 = $380;
   $381 = $101;
   $382 = $381;
  }
  $97 = $382;
  $383 = $97;
  $384 = $133;
  $87 = $384;
  $385 = $87;
  $86 = $385;
  $386 = $86;
  $85 = $386;
  $387 = $85;
  $84 = $387;
  $388 = $84;
  $83 = $388;
  $389 = $83;
  $390 = HEAP8[$389 >> 0] | 0;
  $391 = $390 & 255;
  $392 = $391 & 1;
  $393 = ($392 | 0) != 0;
  if ($393) {
   $77 = $386;
   $394 = $77;
   $76 = $394;
   $395 = $76;
   $75 = $395;
   $396 = $75;
   $397 = $396 + 8 | 0;
   $398 = HEAP32[$397 >> 2] | 0;
   $405 = $398;
  } else {
   $82 = $386;
   $399 = $82;
   $81 = $399;
   $400 = $81;
   $80 = $400;
   $401 = $80;
   $402 = $401 + 1 | 0;
   $79 = $402;
   $403 = $79;
   $78 = $403;
   $404 = $78;
   $405 = $404;
  }
  $74 = $405;
  $406 = $74;
  $94 = $__lhs_sz$i$i$i$i;
  $95 = $__rhs_sz$i$i$i$i;
  $407 = $94;
  $408 = $95;
  HEAP8[$93 >> 0] = HEAP8[$96 >> 0] | 0;
  $91 = $407;
  $92 = $408;
  $409 = $92;
  $410 = $91;
  $88 = $93;
  $89 = $409;
  $90 = $410;
  $411 = $89;
  $412 = HEAP32[$411 >> 2] | 0;
  $413 = $90;
  $414 = HEAP32[$413 >> 2] | 0;
  $415 = $412 >>> 0 < $414 >>> 0;
  $416 = $92;
  $417 = $91;
  $418 = $415 ? $416 : $417;
  $419 = HEAP32[$418 >> 2] | 0;
  __THREW__ = 0;
  $420 = (tempInt = invoke_iiii(382, $383 | 0, $406 | 0, $419 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $421 = __THREW__;
  __THREW__ = 0;
  $422 = $421 & 1;
  if ($422) {
   label = 47;
   break;
  }
  $__result$i$i$i$i = $420;
  $423 = $__result$i$i$i$i;
  $424 = ($423 | 0) != 0;
  do {
   if ($424) {
    $425 = $__result$i$i$i$i;
    $131 = $425;
   } else {
    $426 = HEAP32[$__lhs_sz$i$i$i$i >> 2] | 0;
    $427 = HEAP32[$__rhs_sz$i$i$i$i >> 2] | 0;
    $428 = $426 >>> 0 < $427 >>> 0;
    if ($428) {
     $131 = -1;
     break;
    }
    $429 = HEAP32[$__lhs_sz$i$i$i$i >> 2] | 0;
    $430 = HEAP32[$__rhs_sz$i$i$i$i >> 2] | 0;
    $431 = $429 >>> 0 > $430 >>> 0;
    if ($431) {
     $131 = 1;
     break;
    } else {
     $131 = 0;
     break;
    }
   }
  } while (0);
  $434 = $131;
  $435 = ($434 | 0) < 0;
  $436 = $__nd;
  if (!$435) {
   label = 52;
   break;
  }
  $437 = $436 + 4 | 0;
  $438 = HEAP32[$437 >> 2] | 0;
  $439 = ($438 | 0) != (0 | 0);
  $440 = $__nd;
  if (!$439) {
   label = 51;
   break;
  }
  $441 = $440 + 4 | 0;
  $442 = HEAP32[$441 >> 2] | 0;
  $__nd = $442;
 }
 if ((label | 0) == 22) {
  $294 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $295 = tempRet0;
  ___clang_call_terminate($294), asyncState ? abort(-12) | 0 : 0;
 } else if ((label | 0) == 26) {
  $303 = $155;
  HEAP32[$303 >> 2] = $301;
  $304 = $155;
  $305 = HEAP32[$304 >> 2] | 0;
  $153 = $305;
  $458 = $153;
  STACKTOP = sp;
  return $458 | 0;
 } else if ((label | 0) == 47) {
  $432 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $433 = tempRet0;
  ___clang_call_terminate($432), asyncState ? abort(-12) | 0 : 0;
 } else if ((label | 0) == 51) {
  $443 = $155;
  HEAP32[$443 >> 2] = $440;
  $444 = $155;
  $445 = HEAP32[$444 >> 2] | 0;
  $446 = $445 + 4 | 0;
  $153 = $446;
  $458 = $153;
  STACKTOP = sp;
  return $458 | 0;
 } else if ((label | 0) == 52) {
  $447 = $155;
  HEAP32[$447 >> 2] = $436;
  $448 = $155;
  $153 = $448;
  $458 = $153;
  STACKTOP = sp;
  return $458 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $__way, $__wch) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__way = $__way | 0;
 $__wch = $__wch | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__noff = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $4 = sp + 64 | 0;
 $6 = sp + 56 | 0;
 $26 = sp + 48 | 0;
 $42 = sp + 40 | 0;
 $45 = sp + 32 | 0;
 $48 = sp + 24 | 0;
 $63 = sp + 16 | 0;
 $66 = sp + 8 | 0;
 $__noff = sp;
 $65 = $this;
 $69 = $66;
 $70 = $69;
 HEAP32[$70 >> 2] = $0;
 $71 = $69 + 4 | 0;
 $72 = $71;
 HEAP32[$72 >> 2] = $1;
 $67 = $__way;
 $68 = $__wch;
 $73 = $65;
 $74 = $73 + 44 | 0;
 $75 = HEAP32[$74 >> 2] | 0;
 $64 = $73;
 $76 = $64;
 $77 = $76 + 24 | 0;
 $78 = HEAP32[$77 >> 2] | 0;
 $79 = $75 >>> 0 < $78 >>> 0;
 if ($79) {
  $2 = $73;
  $80 = $2;
  $81 = $80 + 24 | 0;
  $82 = HEAP32[$81 >> 2] | 0;
  $83 = $73 + 44 | 0;
  HEAP32[$83 >> 2] = $82;
 }
 $84 = $68;
 $85 = $84 & 24;
 $86 = ($85 | 0) == 0;
 if ($86) {
  $3 = $agg$result;
  $87 = $4;
  $88 = $87;
  HEAP32[$88 >> 2] = -1;
  $89 = $87 + 4 | 0;
  $90 = $89;
  HEAP32[$90 >> 2] = -1;
  $91 = $3;
  HEAP32[$91 >> 2] = 0 | 0;
  HEAP32[$91 + 4 >> 2] = 0 | 0;
  $92 = $91 + 8 | 0;
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94 >> 2] | 0;
  $96 = $93 + 4 | 0;
  $97 = $96;
  $98 = HEAP32[$97 >> 2] | 0;
  $99 = $92;
  $100 = $99;
  HEAP32[$100 >> 2] = $95;
  $101 = $99 + 4 | 0;
  $102 = $101;
  HEAP32[$102 >> 2] = $98;
  STACKTOP = sp;
  return;
 }
 $103 = $68;
 $104 = $103 & 24;
 $105 = ($104 | 0) == 24;
 $106 = $67;
 $107 = ($106 | 0) == 1;
 $or$cond = $105 & $107;
 if ($or$cond) {
  $5 = $agg$result;
  $108 = $6;
  $109 = $108;
  HEAP32[$109 >> 2] = -1;
  $110 = $108 + 4 | 0;
  $111 = $110;
  HEAP32[$111 >> 2] = -1;
  $112 = $5;
  HEAP32[$112 >> 2] = 0 | 0;
  HEAP32[$112 + 4 >> 2] = 0 | 0;
  $113 = $112 + 8 | 0;
  $114 = $6;
  $115 = $114;
  $116 = HEAP32[$115 >> 2] | 0;
  $117 = $114 + 4 | 0;
  $118 = $117;
  $119 = HEAP32[$118 >> 2] | 0;
  $120 = $113;
  $121 = $120;
  HEAP32[$121 >> 2] = $116;
  $122 = $120 + 4 | 0;
  $123 = $122;
  HEAP32[$123 >> 2] = $119;
  STACKTOP = sp;
  return;
 }
 $124 = $67;
 L12 : do {
  switch ($124 | 0) {
  case 0:
   {
    $125 = $__noff;
    $126 = $125;
    HEAP32[$126 >> 2] = 0;
    $127 = $125 + 4 | 0;
    $128 = $127;
    HEAP32[$128 >> 2] = 0;
    break;
   }
  case 1:
   {
    $129 = $68;
    $130 = $129 & 8;
    $131 = ($130 | 0) != 0;
    if ($131) {
     $7 = $73;
     $132 = $7;
     $133 = $132 + 12 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $8 = $73;
     $135 = $8;
     $136 = $135 + 8 | 0;
     $137 = HEAP32[$136 >> 2] | 0;
     $138 = $134;
     $139 = $137;
     $140 = $138 - $139 | 0;
     $141 = ($140 | 0) < 0;
     $142 = $141 << 31 >> 31;
     $143 = $__noff;
     $144 = $143;
     HEAP32[$144 >> 2] = $140;
     $145 = $143 + 4 | 0;
     $146 = $145;
     HEAP32[$146 >> 2] = $142;
     break L12;
    } else {
     $9 = $73;
     $147 = $9;
     $148 = $147 + 24 | 0;
     $149 = HEAP32[$148 >> 2] | 0;
     $10 = $73;
     $150 = $10;
     $151 = $150 + 20 | 0;
     $152 = HEAP32[$151 >> 2] | 0;
     $153 = $149;
     $154 = $152;
     $155 = $153 - $154 | 0;
     $156 = ($155 | 0) < 0;
     $157 = $156 << 31 >> 31;
     $158 = $__noff;
     $159 = $158;
     HEAP32[$159 >> 2] = $155;
     $160 = $158 + 4 | 0;
     $161 = $160;
     HEAP32[$161 >> 2] = $157;
     break L12;
    }
    break;
   }
  case 2:
   {
    $162 = $73 + 44 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = $73 + 32 | 0;
    $24 = $164;
    $165 = $24;
    $23 = $165;
    $166 = $23;
    $22 = $166;
    $167 = $22;
    $21 = $167;
    $168 = $21;
    $20 = $168;
    $169 = $20;
    $170 = HEAP8[$169 >> 0] | 0;
    $171 = $170 & 255;
    $172 = $171 & 1;
    $173 = ($172 | 0) != 0;
    if ($173) {
     $14 = $166;
     $174 = $14;
     $13 = $174;
     $175 = $13;
     $12 = $175;
     $176 = $12;
     $177 = $176 + 8 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     $185 = $178;
    } else {
     $19 = $166;
     $179 = $19;
     $18 = $179;
     $180 = $18;
     $17 = $180;
     $181 = $17;
     $182 = $181 + 1 | 0;
     $16 = $182;
     $183 = $16;
     $15 = $183;
     $184 = $15;
     $185 = $184;
    }
    $11 = $185;
    $186 = $11;
    $187 = $163;
    $188 = $186;
    $189 = $187 - $188 | 0;
    $190 = ($189 | 0) < 0;
    $191 = $190 << 31 >> 31;
    $192 = $__noff;
    $193 = $192;
    HEAP32[$193 >> 2] = $189;
    $194 = $192 + 4 | 0;
    $195 = $194;
    HEAP32[$195 >> 2] = $191;
    break;
   }
  default:
   {
    $25 = $agg$result;
    $196 = $26;
    $197 = $196;
    HEAP32[$197 >> 2] = -1;
    $198 = $196 + 4 | 0;
    $199 = $198;
    HEAP32[$199 >> 2] = -1;
    $200 = $25;
    HEAP32[$200 >> 2] = 0 | 0;
    HEAP32[$200 + 4 >> 2] = 0 | 0;
    $201 = $200 + 8 | 0;
    $202 = $26;
    $203 = $202;
    $204 = HEAP32[$203 >> 2] | 0;
    $205 = $202 + 4 | 0;
    $206 = $205;
    $207 = HEAP32[$206 >> 2] | 0;
    $208 = $201;
    $209 = $208;
    HEAP32[$209 >> 2] = $204;
    $210 = $208 + 4 | 0;
    $211 = $210;
    HEAP32[$211 >> 2] = $207;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $212 = $66;
 $213 = $212;
 $214 = HEAP32[$213 >> 2] | 0;
 $215 = $212 + 4 | 0;
 $216 = $215;
 $217 = HEAP32[$216 >> 2] | 0;
 $218 = $__noff;
 $219 = $218;
 $220 = HEAP32[$219 >> 2] | 0;
 $221 = $218 + 4 | 0;
 $222 = $221;
 $223 = HEAP32[$222 >> 2] | 0;
 $224 = (tempInt = _i64Add($220 | 0, $223 | 0, $214 | 0, $217 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $225 = tempRet0;
 $226 = $__noff;
 $227 = $226;
 HEAP32[$227 >> 2] = $224;
 $228 = $226 + 4 | 0;
 $229 = $228;
 HEAP32[$229 >> 2] = $225;
 $230 = $__noff;
 $231 = $230;
 $232 = HEAP32[$231 >> 2] | 0;
 $233 = $230 + 4 | 0;
 $234 = $233;
 $235 = HEAP32[$234 >> 2] | 0;
 $236 = ($235 | 0) < 0;
 if (!$236) {
  $237 = $73 + 44 | 0;
  $238 = HEAP32[$237 >> 2] | 0;
  $239 = $73 + 32 | 0;
  $40 = $239;
  $240 = $40;
  $39 = $240;
  $241 = $39;
  $38 = $241;
  $242 = $38;
  $37 = $242;
  $243 = $37;
  $36 = $243;
  $244 = $36;
  $245 = HEAP8[$244 >> 0] | 0;
  $246 = $245 & 255;
  $247 = $246 & 1;
  $248 = ($247 | 0) != 0;
  if ($248) {
   $30 = $241;
   $249 = $30;
   $29 = $249;
   $250 = $29;
   $28 = $250;
   $251 = $28;
   $252 = $251 + 8 | 0;
   $253 = HEAP32[$252 >> 2] | 0;
   $260 = $253;
  } else {
   $35 = $241;
   $254 = $35;
   $34 = $254;
   $255 = $34;
   $33 = $255;
   $256 = $33;
   $257 = $256 + 1 | 0;
   $32 = $257;
   $258 = $32;
   $31 = $258;
   $259 = $31;
   $260 = $259;
  }
  $27 = $260;
  $261 = $27;
  $262 = $238;
  $263 = $261;
  $264 = $262 - $263 | 0;
  $265 = ($264 | 0) < 0;
  $266 = $265 << 31 >> 31;
  $267 = $__noff;
  $268 = $267;
  $269 = HEAP32[$268 >> 2] | 0;
  $270 = $267 + 4 | 0;
  $271 = $270;
  $272 = HEAP32[$271 >> 2] | 0;
  $273 = ($266 | 0) < ($272 | 0);
  $274 = $264 >>> 0 < $269 >>> 0;
  $275 = ($266 | 0) == ($272 | 0);
  $276 = $275 & $274;
  $277 = $273 | $276;
  if (!$277) {
   $294 = $__noff;
   $295 = $294;
   $296 = HEAP32[$295 >> 2] | 0;
   $297 = $294 + 4 | 0;
   $298 = $297;
   $299 = HEAP32[$298 >> 2] | 0;
   $300 = ($296 | 0) != 0;
   $301 = ($299 | 0) != 0;
   $302 = $300 | $301;
   if ($302) {
    $303 = $68;
    $304 = $303 & 8;
    $305 = ($304 | 0) != 0;
    if ($305) {
     $43 = $73;
     $306 = $43;
     $307 = $306 + 12 | 0;
     $308 = HEAP32[$307 >> 2] | 0;
     $309 = ($308 | 0) == (0 | 0);
     if ($309) {
      $44 = $agg$result;
      $310 = $45;
      $311 = $310;
      HEAP32[$311 >> 2] = -1;
      $312 = $310 + 4 | 0;
      $313 = $312;
      HEAP32[$313 >> 2] = -1;
      $314 = $44;
      HEAP32[$314 >> 2] = 0 | 0;
      HEAP32[$314 + 4 >> 2] = 0 | 0;
      $315 = $314 + 8 | 0;
      $316 = $45;
      $317 = $316;
      $318 = HEAP32[$317 >> 2] | 0;
      $319 = $316 + 4 | 0;
      $320 = $319;
      $321 = HEAP32[$320 >> 2] | 0;
      $322 = $315;
      $323 = $322;
      HEAP32[$323 >> 2] = $318;
      $324 = $322 + 4 | 0;
      $325 = $324;
      HEAP32[$325 >> 2] = $321;
      STACKTOP = sp;
      return;
     }
    }
    $326 = $68;
    $327 = $326 & 16;
    $328 = ($327 | 0) != 0;
    if ($328) {
     $46 = $73;
     $329 = $46;
     $330 = $329 + 24 | 0;
     $331 = HEAP32[$330 >> 2] | 0;
     $332 = ($331 | 0) == (0 | 0);
     if ($332) {
      $47 = $agg$result;
      $333 = $48;
      $334 = $333;
      HEAP32[$334 >> 2] = -1;
      $335 = $333 + 4 | 0;
      $336 = $335;
      HEAP32[$336 >> 2] = -1;
      $337 = $47;
      HEAP32[$337 >> 2] = 0 | 0;
      HEAP32[$337 + 4 >> 2] = 0 | 0;
      $338 = $337 + 8 | 0;
      $339 = $48;
      $340 = $339;
      $341 = HEAP32[$340 >> 2] | 0;
      $342 = $339 + 4 | 0;
      $343 = $342;
      $344 = HEAP32[$343 >> 2] | 0;
      $345 = $338;
      $346 = $345;
      HEAP32[$346 >> 2] = $341;
      $347 = $345 + 4 | 0;
      $348 = $347;
      HEAP32[$348 >> 2] = $344;
      STACKTOP = sp;
      return;
     }
    }
   }
   $349 = $68;
   $350 = $349 & 8;
   $351 = ($350 | 0) != 0;
   if ($351) {
    $49 = $73;
    $352 = $49;
    $353 = $352 + 8 | 0;
    $354 = HEAP32[$353 >> 2] | 0;
    $50 = $73;
    $355 = $50;
    $356 = $355 + 8 | 0;
    $357 = HEAP32[$356 >> 2] | 0;
    $358 = $__noff;
    $359 = $358;
    $360 = HEAP32[$359 >> 2] | 0;
    $361 = $358 + 4 | 0;
    $362 = $361;
    $363 = HEAP32[$362 >> 2] | 0;
    $364 = $357 + $360 | 0;
    $365 = $73 + 44 | 0;
    $366 = HEAP32[$365 >> 2] | 0;
    $51 = $73;
    $52 = $354;
    $53 = $364;
    $54 = $366;
    $367 = $51;
    $368 = $52;
    $369 = $367 + 8 | 0;
    HEAP32[$369 >> 2] = $368;
    $370 = $53;
    $371 = $367 + 12 | 0;
    HEAP32[$371 >> 2] = $370;
    $372 = $54;
    $373 = $367 + 16 | 0;
    HEAP32[$373 >> 2] = $372;
   }
   $374 = $68;
   $375 = $374 & 16;
   $376 = ($375 | 0) != 0;
   if ($376) {
    $55 = $73;
    $377 = $55;
    $378 = $377 + 20 | 0;
    $379 = HEAP32[$378 >> 2] | 0;
    $56 = $73;
    $380 = $56;
    $381 = $380 + 28 | 0;
    $382 = HEAP32[$381 >> 2] | 0;
    $57 = $73;
    $58 = $379;
    $59 = $382;
    $383 = $57;
    $384 = $58;
    $385 = $383 + 24 | 0;
    HEAP32[$385 >> 2] = $384;
    $386 = $383 + 20 | 0;
    HEAP32[$386 >> 2] = $384;
    $387 = $59;
    $388 = $383 + 28 | 0;
    HEAP32[$388 >> 2] = $387;
    $389 = $__noff;
    $390 = $389;
    $391 = HEAP32[$390 >> 2] | 0;
    $392 = $389 + 4 | 0;
    $393 = $392;
    $394 = HEAP32[$393 >> 2] | 0;
    $60 = $73;
    $61 = $391;
    $395 = $60;
    $396 = $61;
    $397 = $395 + 24 | 0;
    $398 = HEAP32[$397 >> 2] | 0;
    $399 = $398 + $396 | 0;
    HEAP32[$397 >> 2] = $399;
   }
   $400 = $__noff;
   $401 = $400;
   $402 = HEAP32[$401 >> 2] | 0;
   $403 = $400 + 4 | 0;
   $404 = $403;
   $405 = HEAP32[$404 >> 2] | 0;
   $62 = $agg$result;
   $406 = $63;
   $407 = $406;
   HEAP32[$407 >> 2] = $402;
   $408 = $406 + 4 | 0;
   $409 = $408;
   HEAP32[$409 >> 2] = $405;
   $410 = $62;
   HEAP32[$410 >> 2] = 0 | 0;
   HEAP32[$410 + 4 >> 2] = 0 | 0;
   $411 = $410 + 8 | 0;
   $412 = $63;
   $413 = $412;
   $414 = HEAP32[$413 >> 2] | 0;
   $415 = $412 + 4 | 0;
   $416 = $415;
   $417 = HEAP32[$416 >> 2] | 0;
   $418 = $411;
   $419 = $418;
   HEAP32[$419 >> 2] = $414;
   $420 = $418 + 4 | 0;
   $421 = $420;
   HEAP32[$421 >> 2] = $417;
   STACKTOP = sp;
   return;
  }
 }
 $41 = $agg$result;
 $278 = $42;
 $279 = $278;
 HEAP32[$279 >> 2] = -1;
 $280 = $278 + 4 | 0;
 $281 = $280;
 HEAP32[$281 >> 2] = -1;
 $282 = $41;
 HEAP32[$282 >> 2] = 0 | 0;
 HEAP32[$282 + 4 >> 2] = 0 | 0;
 $283 = $282 + 8 | 0;
 $284 = $42;
 $285 = $284;
 $286 = HEAP32[$285 >> 2] | 0;
 $287 = $284 + 4 | 0;
 $288 = $287;
 $289 = HEAP32[$288 >> 2] | 0;
 $290 = $283;
 $291 = $290;
 HEAP32[$291 >> 2] = $286;
 $292 = $290 + 4 | 0;
 $293 = $292;
 HEAP32[$293 >> 2] = $289;
 STACKTOP = sp;
 return;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSE_($this, $__parent, $__k) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__k = $__k | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $19 = sp + 8 | 0;
 $22 = sp + 637 | 0;
 $__lhs_sz$i$i$i1 = sp + 400 | 0;
 $__rhs_sz$i$i$i2 = sp + 396 | 0;
 $92 = sp;
 $95 = sp + 636 | 0;
 $__lhs_sz$i$i$i = sp + 104 | 0;
 $__rhs_sz$i$i$i = sp + 100 | 0;
 $150 = $this;
 $151 = $__parent;
 $152 = $__k;
 $153 = $150;
 $148 = $153;
 $154 = $148;
 $147 = $154;
 $155 = $147;
 $156 = $155 + 4 | 0;
 $146 = $156;
 $157 = $146;
 $145 = $157;
 $158 = $145;
 $144 = $158;
 $159 = $144;
 $143 = $159;
 $160 = $143;
 $161 = HEAP32[$160 >> 2] | 0;
 $__nd = $161;
 $162 = $__nd;
 $163 = ($162 | 0) != (0 | 0);
 if (!$163) {
  $142 = $153;
  $441 = $142;
  $442 = $441 + 4 | 0;
  $141 = $442;
  $443 = $141;
  $140 = $443;
  $444 = $140;
  $139 = $444;
  $445 = $139;
  $138 = $445;
  $446 = $138;
  $447 = $151;
  HEAP32[$447 >> 2] = $446;
  $448 = $151;
  $449 = HEAP32[$448 >> 2] | 0;
  $149 = $449;
  $450 = $149;
  STACKTOP = sp;
  return $450 | 0;
 }
 while (1) {
  $72 = $153;
  $164 = $72;
  $165 = $164 + 8 | 0;
  $71 = $165;
  $166 = $71;
  $70 = $166;
  $167 = $70;
  $69 = $167;
  $168 = $69;
  $169 = $152;
  $170 = $__nd;
  $171 = $170 + 16 | 0;
  $62 = $168;
  $63 = $169;
  $64 = $171;
  $172 = $63;
  $173 = $64;
  $60 = $172;
  $61 = $173;
  $174 = $60;
  $175 = $61;
  $58 = $174;
  $59 = $175;
  $176 = $58;
  $56 = $176;
  $177 = $56;
  $55 = $177;
  $178 = $55;
  $54 = $178;
  $179 = $54;
  $53 = $179;
  $180 = $53;
  $181 = HEAP8[$180 >> 0] | 0;
  $182 = $181 & 255;
  $183 = $182 & 1;
  $184 = ($183 | 0) != 0;
  if ($184) {
   $49 = $177;
   $185 = $49;
   $48 = $185;
   $186 = $48;
   $47 = $186;
   $187 = $47;
   $188 = $187 + 4 | 0;
   $189 = HEAP32[$188 >> 2] | 0;
   $196 = $189;
  } else {
   $52 = $177;
   $190 = $52;
   $51 = $190;
   $191 = $51;
   $50 = $191;
   $192 = $50;
   $193 = HEAP8[$192 >> 0] | 0;
   $194 = $193 & 255;
   $195 = $194 >> 1;
   $196 = $195;
  }
  HEAP32[$__lhs_sz$i$i$i1 >> 2] = $196;
  $197 = $59;
  $46 = $197;
  $198 = $46;
  $45 = $198;
  $199 = $45;
  $44 = $199;
  $200 = $44;
  $43 = $200;
  $201 = $43;
  $202 = HEAP8[$201 >> 0] | 0;
  $203 = $202 & 255;
  $204 = $203 & 1;
  $205 = ($204 | 0) != 0;
  if ($205) {
   $39 = $198;
   $206 = $39;
   $38 = $206;
   $207 = $38;
   $37 = $207;
   $208 = $37;
   $209 = $208 + 4 | 0;
   $210 = HEAP32[$209 >> 2] | 0;
   $217 = $210;
  } else {
   $42 = $198;
   $211 = $42;
   $41 = $211;
   $212 = $41;
   $40 = $212;
   $213 = $40;
   $214 = HEAP8[$213 >> 0] | 0;
   $215 = $214 & 255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__rhs_sz$i$i$i2 >> 2] = $217;
  $36 = $176;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $34 = $219;
  $220 = $34;
  $33 = $220;
  $221 = $33;
  $32 = $221;
  $222 = $32;
  $223 = HEAP8[$222 >> 0] | 0;
  $224 = $223 & 255;
  $225 = $224 & 1;
  $226 = ($225 | 0) != 0;
  if ($226) {
   $26 = $219;
   $227 = $26;
   $25 = $227;
   $228 = $25;
   $24 = $228;
   $229 = $24;
   $230 = $229 + 8 | 0;
   $231 = HEAP32[$230 >> 2] | 0;
   $238 = $231;
  } else {
   $31 = $219;
   $232 = $31;
   $30 = $232;
   $233 = $30;
   $29 = $233;
   $234 = $29;
   $235 = $234 + 1 | 0;
   $28 = $235;
   $236 = $28;
   $27 = $236;
   $237 = $27;
   $238 = $237;
  }
  $23 = $238;
  $239 = $23;
  $240 = $59;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $11 = $242;
  $243 = $11;
  $10 = $243;
  $244 = $10;
  $9 = $244;
  $245 = $9;
  $246 = HEAP8[$245 >> 0] | 0;
  $247 = $246 & 255;
  $248 = $247 & 1;
  $249 = ($248 | 0) != 0;
  if ($249) {
   $3 = $242;
   $250 = $3;
   $2 = $250;
   $251 = $2;
   $1 = $251;
   $252 = $1;
   $253 = $252 + 8 | 0;
   $254 = HEAP32[$253 >> 2] | 0;
   $261 = $254;
  } else {
   $8 = $242;
   $255 = $8;
   $7 = $255;
   $256 = $7;
   $6 = $256;
   $257 = $6;
   $258 = $257 + 1 | 0;
   $5 = $258;
   $259 = $5;
   $4 = $259;
   $260 = $4;
   $261 = $260;
  }
  $0 = $261;
  $262 = $0;
  $20 = $__lhs_sz$i$i$i1;
  $21 = $__rhs_sz$i$i$i2;
  $263 = $20;
  $264 = $21;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  $17 = $263;
  $18 = $264;
  $265 = $18;
  $266 = $17;
  $14 = $19;
  $15 = $265;
  $16 = $266;
  $267 = $15;
  $268 = HEAP32[$267 >> 2] | 0;
  $269 = $16;
  $270 = HEAP32[$269 >> 2] | 0;
  $271 = $268 >>> 0 < $270 >>> 0;
  $272 = $18;
  $273 = $17;
  $274 = $271 ? $272 : $273;
  $275 = HEAP32[$274 >> 2] | 0;
  __THREW__ = 0;
  $276 = (tempInt = invoke_iiii(382, $239 | 0, $262 | 0, $275 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $277 = __THREW__;
  __THREW__ = 0;
  $278 = $277 & 1;
  if ($278) {
   label = 22;
   break;
  }
  $__result$i$i$i3 = $276;
  $279 = $__result$i$i$i3;
  $280 = ($279 | 0) != 0;
  do {
   if ($280) {
    $281 = $__result$i$i$i3;
    $57 = $281;
   } else {
    $282 = HEAP32[$__lhs_sz$i$i$i1 >> 2] | 0;
    $283 = HEAP32[$__rhs_sz$i$i$i2 >> 2] | 0;
    $284 = $282 >>> 0 < $283 >>> 0;
    if ($284) {
     $57 = -1;
     break;
    }
    $285 = HEAP32[$__lhs_sz$i$i$i1 >> 2] | 0;
    $286 = HEAP32[$__rhs_sz$i$i$i2 >> 2] | 0;
    $287 = $285 >>> 0 > $286 >>> 0;
    if ($287) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while (0);
  $290 = $57;
  $291 = ($290 | 0) < 0;
  if ($291) {
   $292 = $__nd;
   $293 = HEAP32[$292 >> 2] | 0;
   $294 = ($293 | 0) != (0 | 0);
   $295 = $__nd;
   if (!$294) {
    label = 26;
    break;
   }
   $296 = HEAP32[$295 >> 2] | 0;
   $__nd = $296;
   continue;
  }
  $67 = $153;
  $300 = $67;
  $301 = $300 + 8 | 0;
  $66 = $301;
  $302 = $66;
  $65 = $302;
  $303 = $65;
  $68 = $303;
  $304 = $68;
  $305 = $__nd;
  $306 = $305 + 16 | 0;
  $307 = $152;
  $135 = $304;
  $136 = $306;
  $137 = $307;
  $308 = $136;
  $309 = $137;
  $133 = $308;
  $134 = $309;
  $310 = $133;
  $311 = $134;
  $131 = $310;
  $132 = $311;
  $312 = $131;
  $129 = $312;
  $313 = $129;
  $128 = $313;
  $314 = $128;
  $127 = $314;
  $315 = $127;
  $126 = $315;
  $316 = $126;
  $317 = HEAP8[$316 >> 0] | 0;
  $318 = $317 & 255;
  $319 = $318 & 1;
  $320 = ($319 | 0) != 0;
  if ($320) {
   $122 = $313;
   $321 = $122;
   $121 = $321;
   $322 = $121;
   $120 = $322;
   $323 = $120;
   $324 = $323 + 4 | 0;
   $325 = HEAP32[$324 >> 2] | 0;
   $332 = $325;
  } else {
   $125 = $313;
   $326 = $125;
   $124 = $326;
   $327 = $124;
   $123 = $327;
   $328 = $123;
   $329 = HEAP8[$328 >> 0] | 0;
   $330 = $329 & 255;
   $331 = $330 >> 1;
   $332 = $331;
  }
  HEAP32[$__lhs_sz$i$i$i >> 2] = $332;
  $333 = $132;
  $119 = $333;
  $334 = $119;
  $118 = $334;
  $335 = $118;
  $117 = $335;
  $336 = $117;
  $116 = $336;
  $337 = $116;
  $338 = HEAP8[$337 >> 0] | 0;
  $339 = $338 & 255;
  $340 = $339 & 1;
  $341 = ($340 | 0) != 0;
  if ($341) {
   $112 = $334;
   $342 = $112;
   $111 = $342;
   $343 = $111;
   $110 = $343;
   $344 = $110;
   $345 = $344 + 4 | 0;
   $346 = HEAP32[$345 >> 2] | 0;
   $353 = $346;
  } else {
   $115 = $334;
   $347 = $115;
   $114 = $347;
   $348 = $114;
   $113 = $348;
   $349 = $113;
   $350 = HEAP8[$349 >> 0] | 0;
   $351 = $350 & 255;
   $352 = $351 >> 1;
   $353 = $352;
  }
  HEAP32[$__rhs_sz$i$i$i >> 2] = $353;
  $109 = $312;
  $354 = $109;
  $108 = $354;
  $355 = $108;
  $107 = $355;
  $356 = $107;
  $106 = $356;
  $357 = $106;
  $105 = $357;
  $358 = $105;
  $359 = HEAP8[$358 >> 0] | 0;
  $360 = $359 & 255;
  $361 = $360 & 1;
  $362 = ($361 | 0) != 0;
  if ($362) {
   $99 = $355;
   $363 = $99;
   $98 = $363;
   $364 = $98;
   $97 = $364;
   $365 = $97;
   $366 = $365 + 8 | 0;
   $367 = HEAP32[$366 >> 2] | 0;
   $374 = $367;
  } else {
   $104 = $355;
   $368 = $104;
   $103 = $368;
   $369 = $103;
   $102 = $369;
   $370 = $102;
   $371 = $370 + 1 | 0;
   $101 = $371;
   $372 = $101;
   $100 = $372;
   $373 = $100;
   $374 = $373;
  }
  $96 = $374;
  $375 = $96;
  $376 = $132;
  $86 = $376;
  $377 = $86;
  $85 = $377;
  $378 = $85;
  $84 = $378;
  $379 = $84;
  $83 = $379;
  $380 = $83;
  $82 = $380;
  $381 = $82;
  $382 = HEAP8[$381 >> 0] | 0;
  $383 = $382 & 255;
  $384 = $383 & 1;
  $385 = ($384 | 0) != 0;
  if ($385) {
   $76 = $378;
   $386 = $76;
   $75 = $386;
   $387 = $75;
   $74 = $387;
   $388 = $74;
   $389 = $388 + 8 | 0;
   $390 = HEAP32[$389 >> 2] | 0;
   $397 = $390;
  } else {
   $81 = $378;
   $391 = $81;
   $80 = $391;
   $392 = $80;
   $79 = $392;
   $393 = $79;
   $394 = $393 + 1 | 0;
   $78 = $394;
   $395 = $78;
   $77 = $395;
   $396 = $77;
   $397 = $396;
  }
  $73 = $397;
  $398 = $73;
  $93 = $__lhs_sz$i$i$i;
  $94 = $__rhs_sz$i$i$i;
  $399 = $93;
  $400 = $94;
  HEAP8[$92 >> 0] = HEAP8[$95 >> 0] | 0;
  $90 = $399;
  $91 = $400;
  $401 = $91;
  $402 = $90;
  $87 = $92;
  $88 = $401;
  $89 = $402;
  $403 = $88;
  $404 = HEAP32[$403 >> 2] | 0;
  $405 = $89;
  $406 = HEAP32[$405 >> 2] | 0;
  $407 = $404 >>> 0 < $406 >>> 0;
  $408 = $91;
  $409 = $90;
  $410 = $407 ? $408 : $409;
  $411 = HEAP32[$410 >> 2] | 0;
  __THREW__ = 0;
  $412 = (tempInt = invoke_iiii(382, $375 | 0, $398 | 0, $411 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $413 = __THREW__;
  __THREW__ = 0;
  $414 = $413 & 1;
  if ($414) {
   label = 47;
   break;
  }
  $__result$i$i$i = $412;
  $415 = $__result$i$i$i;
  $416 = ($415 | 0) != 0;
  do {
   if ($416) {
    $417 = $__result$i$i$i;
    $130 = $417;
   } else {
    $418 = HEAP32[$__lhs_sz$i$i$i >> 2] | 0;
    $419 = HEAP32[$__rhs_sz$i$i$i >> 2] | 0;
    $420 = $418 >>> 0 < $419 >>> 0;
    if ($420) {
     $130 = -1;
     break;
    }
    $421 = HEAP32[$__lhs_sz$i$i$i >> 2] | 0;
    $422 = HEAP32[$__rhs_sz$i$i$i >> 2] | 0;
    $423 = $421 >>> 0 > $422 >>> 0;
    if ($423) {
     $130 = 1;
     break;
    } else {
     $130 = 0;
     break;
    }
   }
  } while (0);
  $426 = $130;
  $427 = ($426 | 0) < 0;
  $428 = $__nd;
  if (!$427) {
   label = 52;
   break;
  }
  $429 = $428 + 4 | 0;
  $430 = HEAP32[$429 >> 2] | 0;
  $431 = ($430 | 0) != (0 | 0);
  $432 = $__nd;
  if (!$431) {
   label = 51;
   break;
  }
  $433 = $432 + 4 | 0;
  $434 = HEAP32[$433 >> 2] | 0;
  $__nd = $434;
 }
 if ((label | 0) == 22) {
  $288 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $289 = tempRet0;
  ___clang_call_terminate($288), asyncState ? abort(-12) | 0 : 0;
 } else if ((label | 0) == 26) {
  $297 = $151;
  HEAP32[$297 >> 2] = $295;
  $298 = $151;
  $299 = HEAP32[$298 >> 2] | 0;
  $149 = $299;
  $450 = $149;
  STACKTOP = sp;
  return $450 | 0;
 } else if ((label | 0) == 47) {
  $424 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $425 = tempRet0;
  ___clang_call_terminate($424), asyncState ? abort(-12) | 0 : 0;
 } else if ((label | 0) == 51) {
  $435 = $151;
  HEAP32[$435 >> 2] = $432;
  $436 = $151;
  $437 = HEAP32[$436 >> 2] | 0;
  $438 = $437 + 4 | 0;
  $149 = $438;
  $450 = $149;
  STACKTOP = sp;
  return $450 | 0;
 } else if ((label | 0) == 52) {
  $439 = $151;
  HEAP32[$439 >> 2] = $428;
  $440 = $151;
  $149 = $440;
  $450 = $149;
  STACKTOP = sp;
  return $450 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i50 = 0, $$01$i$i645 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$047 = 0, $__dc$1 = 0, $__dg$048 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$243 = 0, $__nf$243$lcssa = 0, $__nf$3 = 0, $__ns$056 = 0, $__ns$152 = 0, $__ns$2 = 0, $__p$049 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__grouping = sp;
 $0 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8908) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9064) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping, $1), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $6 = HEAP32[$0 >> 2] | 0;
   $7 = $6 + 44 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii($8 | 0, $0 | 0, $5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if ($11) {
    label = 8;
   } else {
    $12 = $__nb + 1 | 0;
    $13 = HEAP32[$__oe >> 2] | 0;
    $14 = $13 + 4 | 0;
    HEAP32[$__oe >> 2] = $14;
    HEAP32[$13 >> 2] = $9;
    $__nf$0 = $12;
    label = 10;
   }
   break;
  }
 default:
  {
   $__nf$0 = $__nb;
   label = 10;
  }
 }
 L4 : do {
  if ((label | 0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = $25 - $26 | 0;
   $28 = ($27 | 0) > 1;
   L6 : do {
    if ($28) {
     $30 = HEAP8[$__nf$0 >> 0] | 0;
     $31 = $30 << 24 >> 24 == 48;
     if ($31) {
      $32 = $__nf$0 + 1 | 0;
      $33 = HEAP8[$32 >> 0] | 0;
      switch ($33 << 24 >> 24) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        label = 11;
        break L6;
       }
      }
      $34 = HEAP32[$0 >> 2] | 0;
      $35 = $34 + 44 | 0;
      $36 = HEAP32[$35 >> 2] | 0;
      __THREW__ = 0;
      $37 = (tempInt = invoke_iii($36 | 0, $0 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $38 = __THREW__;
      __THREW__ = 0;
      $39 = $38 & 1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe >> 2] | 0;
      $41 = $40 + 4 | 0;
      HEAP32[$__oe >> 2] = $41;
      HEAP32[$40 >> 2] = $37;
      $42 = $__nf$0 + 2 | 0;
      $43 = HEAP8[$32 >> 0] | 0;
      $44 = HEAP32[$0 >> 2] | 0;
      $45 = $44 + 44 | 0;
      $46 = HEAP32[$45 >> 2] | 0;
      __THREW__ = 0;
      $47 = (tempInt = invoke_iii($46 | 0, $0 | 0, $43 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $48 = __THREW__;
      __THREW__ = 0;
      $49 = $48 & 1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe >> 2] | 0;
      $51 = $50 + 4 | 0;
      HEAP32[$__oe >> 2] = $51;
      HEAP32[$50 >> 2] = $47;
      $52 = $42 >>> 0 < $__ne >>> 0;
      if ($52) {
       $__ns$056 = $42;
       while (1) {
        $53 = HEAP8[$__ns$056 >> 0] | 0;
        __THREW__ = 0;
        $54 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $55 = __THREW__;
        __THREW__ = 0;
        $56 = $55 & 1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (tempInt = invoke_iii(470, $57 | 0, $54 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $59 = __THREW__;
        __THREW__ = 0;
        $60 = $59 & 1;
        if ($60) {
         break;
        }
        $61 = ($58 | 0) == 0;
        if ($61) {
         $__nf$1 = $42;
         $__ns$2 = $__ns$056;
         break L6;
        }
        $62 = $__ns$056 + 1 | 0;
        $63 = $62 >>> 0 < $__ne >>> 0;
        if ($63) {
         $__ns$056 = $62;
        } else {
         $__nf$1 = $42;
         $__ns$2 = $62;
         break L6;
        }
       }
       $21 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $22 = tempRet0;
       $lpad$phi$index = $21;
       $lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;
       $__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while (0);
   L18 : do {
    if ((label | 0) == 11) {
     $29 = $__nf$0 >>> 0 < $__ne >>> 0;
     if ($29) {
      $__ns$152 = $__nf$0;
      while (1) {
       $64 = HEAP8[$__ns$152 >> 0] | 0;
       __THREW__ = 0;
       $65 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $66 = __THREW__;
       __THREW__ = 0;
       $67 = $66 & 1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (tempInt = invoke_iii(471, $68 | 0, $65 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $70 = __THREW__;
       __THREW__ = 0;
       $71 = $70 & 1;
       if ($71) {
        break;
       }
       $72 = ($69 | 0) == 0;
       if ($72) {
        $__nf$1 = $__nf$0;
        $__ns$2 = $__ns$152;
        break L18;
       }
       $73 = $__ns$152 + 1 | 0;
       $74 = $73 >>> 0 < $__ne >>> 0;
       if ($74) {
        $__ns$152 = $73;
       } else {
        $__nf$1 = $__nf$0;
        $__ns$2 = $73;
        break L18;
       }
      }
      $19 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $20 = tempRet0;
      $lpad$phi$index = $19;
      $lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;
      $__ns$2 = $__nf$0;
     }
    }
   } while (0);
   $75 = HEAP8[$__grouping >> 0] | 0;
   $76 = $75 & 1;
   $77 = $76 << 24 >> 24 == 0;
   $78 = $__grouping + 4 | 0;
   $79 = HEAP32[$78 >> 2] | 0;
   $80 = $75 & 255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82 | 0) == 0;
   if ($83) {
    $84 = HEAP32[$__oe >> 2] | 0;
    $85 = HEAP32[$0 >> 2] | 0;
    $86 = $85 + 48 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($87 | 0, $0 | 0, $__nf$1 | 0, $__ns$2 | 0, $84 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $88 = __THREW__;
    __THREW__ = 0;
    $89 = $88 & 1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = $90 - $91 | 0;
    $93 = HEAP32[$__oe >> 2] | 0;
    $94 = $93 + ($92 << 2) | 0;
    HEAP32[$__oe >> 2] = $94;
    $$pre$phiZ2D = $0;
    $198 = $94;
   } else {
    $95 = ($__nf$1 | 0) == ($__ns$2 | 0);
    if (!$95) {
     $96 = $__ns$2 + -1 | 0;
     $97 = $__nf$1 >>> 0 < $96 >>> 0;
     if ($97) {
      $$01$i$i50 = $__nf$1;
      $100 = $96;
      while (1) {
       $98 = HEAP8[$$01$i$i50 >> 0] | 0;
       $99 = HEAP8[$100 >> 0] | 0;
       HEAP8[$$01$i$i50 >> 0] = $99;
       HEAP8[$100 >> 0] = $98;
       $101 = $$01$i$i50 + 1 | 0;
       $102 = $100 + -1 | 0;
       $103 = $101 >>> 0 < $102 >>> 0;
       if ($103) {
        $$01$i$i50 = $101;
        $100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1 >> 2] | 0;
    $105 = $104 + 16 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    __THREW__ = 0;
    $107 = (tempInt = invoke_ii($106 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    $109 = $108 & 1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = $__grouping + 8 | 0;
    $111 = $__grouping + 1 | 0;
    $112 = $__nf$1 >>> 0 < $__ns$2 >>> 0;
    L37 : do {
     if ($112) {
      $__dc$047 = 0;
      $__dg$048 = 0;
      $__p$049 = $__nf$1;
      while (1) {
       $113 = HEAP8[$__grouping >> 0] | 0;
       $114 = $113 & 1;
       $115 = $114 << 24 >> 24 == 0;
       $116 = HEAP32[$110 >> 2] | 0;
       $117 = $115 ? $111 : $116;
       $118 = $117 + $__dg$048 | 0;
       $119 = HEAP8[$118 >> 0] | 0;
       $120 = $119 << 24 >> 24 > 0;
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$047 | 0) == ($121 | 0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe >> 2] | 0;
        $124 = $123 + 4 | 0;
        HEAP32[$__oe >> 2] = $124;
        HEAP32[$123 >> 2] = $107;
        $125 = HEAP8[$__grouping >> 0] | 0;
        $126 = $125 & 1;
        $127 = $126 << 24 >> 24 == 0;
        $128 = HEAP32[$78 >> 2] | 0;
        $129 = $125 & 255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = $131 + -1 | 0;
        $133 = $__dg$048 >>> 0 < $132 >>> 0;
        $134 = $133 & 1;
        $$__dg$0 = $134 + $__dg$048 | 0;
        $__dc$1 = 0;
        $__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$047;
        $__dg$1 = $__dg$048;
       }
       $135 = HEAP8[$__p$049 >> 0] | 0;
       $136 = HEAP32[$0 >> 2] | 0;
       $137 = $136 + 44 | 0;
       $138 = HEAP32[$137 >> 2] | 0;
       __THREW__ = 0;
       $139 = (tempInt = invoke_iii($138 | 0, $0 | 0, $135 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $140 = __THREW__;
       __THREW__ = 0;
       $141 = $140 & 1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe >> 2] | 0;
       $143 = $142 + 4 | 0;
       HEAP32[$__oe >> 2] = $143;
       HEAP32[$142 >> 2] = $139;
       $144 = $__dc$1 + 1 | 0;
       $145 = $__p$049 + 1 | 0;
       $146 = $145 >>> 0 < $__ns$2 >>> 0;
       if ($146) {
        $__dc$047 = $144;
        $__dg$048 = $__dg$1;
        $__p$049 = $145;
       } else {
        break L37;
       }
      }
      $17 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $18 = tempRet0;
      $lpad$phi$index = $17;
      $lpad$phi$index5 = $18;
      break L4;
     }
    } while (0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = $147 - $148 | 0;
    $150 = $__ob + ($149 << 2) | 0;
    $151 = HEAP32[$__oe >> 2] | 0;
    $152 = ($150 | 0) == ($151 | 0);
    if ($152) {
     $$pre$phiZ2D = $0;
     $198 = $150;
    } else {
     $153 = $151 + -4 | 0;
     $154 = $150 >>> 0 < $153 >>> 0;
     if ($154) {
      $$01$i$i645 = $150;
      $158 = $153;
      while (1) {
       $156 = HEAP32[$$01$i$i645 >> 2] | 0;
       $157 = HEAP32[$158 >> 2] | 0;
       HEAP32[$$01$i$i645 >> 2] = $157;
       HEAP32[$158 >> 2] = $156;
       $159 = $$01$i$i645 + 4 | 0;
       $160 = $158 + -4 | 0;
       $161 = $159 >>> 0 < $160 >>> 0;
       if ($161) {
        $$01$i$i645 = $159;
        $158 = $160;
       } else {
        $$pre$phiZ2D = $0;
        $198 = $151;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;
      $198 = $151;
     }
    }
   }
   $155 = $__ns$2 >>> 0 < $__ne >>> 0;
   L50 : do {
    if ($155) {
     $__nf$243 = $__ns$2;
     while (1) {
      $162 = HEAP8[$__nf$243 >> 0] | 0;
      $163 = $162 << 24 >> 24 == 46;
      if ($163) {
       $__nf$243$lcssa = $__nf$243;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D >> 2] | 0;
      $174 = $173 + 44 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      __THREW__ = 0;
      $176 = (tempInt = invoke_iii($175 | 0, $0 | 0, $162 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $177 = __THREW__;
      __THREW__ = 0;
      $178 = $177 & 1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe >> 2] | 0;
      $180 = $179 + 4 | 0;
      HEAP32[$__oe >> 2] = $180;
      HEAP32[$179 >> 2] = $176;
      $181 = $__nf$243 + 1 | 0;
      $182 = $181 >>> 0 < $__ne >>> 0;
      if ($182) {
       $__nf$243 = $181;
      } else {
       $186 = $180;
       $__nf$3 = $181;
       break L50;
      }
     }
     if ((label | 0) == 4) {
      $15 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $16 = tempRet0;
      $lpad$phi$index = $15;
      $lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1 >> 2] | 0;
     $165 = $164 + 12 | 0;
     $166 = HEAP32[$165 >> 2] | 0;
     __THREW__ = 0;
     $167 = (tempInt = invoke_ii($166 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $168 = __THREW__;
     __THREW__ = 0;
     $169 = $168 & 1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe >> 2] | 0;
     $171 = $170 + 4 | 0;
     HEAP32[$__oe >> 2] = $171;
     HEAP32[$170 >> 2] = $167;
     $172 = $__nf$243$lcssa + 1 | 0;
     $186 = $171;
     $__nf$3 = $172;
    } else {
     $186 = $198;
     $__nf$3 = $__ns$2;
    }
   } while (0);
   $183 = HEAP32[$0 >> 2] | 0;
   $184 = $183 + 48 | 0;
   $185 = HEAP32[$184 >> 2] | 0;
   __THREW__ = 0;
   (tempInt = invoke_iiiii($185 | 0, $0 | 0, $__nf$3 | 0, $__ne | 0, $186 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $187 = __THREW__;
   __THREW__ = 0;
   $188 = $187 & 1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = $25 - $189 | 0;
    $191 = HEAP32[$__oe >> 2] | 0;
    $192 = $191 + ($190 << 2) | 0;
    HEAP32[$__oe >> 2] = $192;
    $193 = ($__np | 0) == ($__ne | 0);
    $194 = $__np;
    $195 = $__nb;
    $196 = $194 - $195 | 0;
    $197 = $__ob + ($196 << 2) | 0;
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op >> 2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 8) {
  $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $24 = tempRet0;
  $lpad$phi$index = $23;
  $lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8652) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   do {
    if ($__neg) {
     $14 = $13 + 44 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     FUNCTION_TABLE_vii[$15 & 1023]($0, $12), asyncState ? abort(-12) | 0 : 0;
     $16 = HEAP32[$0 >> 2] | 0;
     HEAP8[$__pat >> 0] = $16 & 255;
     HEAP8[$__pat + 1 >> 0] = $16 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $16 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $16 >> 24;
     $17 = HEAP32[$12 >> 2] | 0;
     $18 = $17 + 32 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     FUNCTION_TABLE_vii[$19 & 1023]($1, $12), asyncState ? abort(-12) | 0 : 0;
     $20 = HEAP8[$__sn >> 0] | 0;
     $21 = $20 & 1;
     $22 = $21 << 24 >> 24 == 0;
     if ($22) {
      HEAP8[$__sn >> 0] = 0;
     } else {
      $23 = $__sn + 8 | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      HEAP32[$24 >> 2] = 0;
     }
     $25 = $__sn + 4 | 0;
     HEAP32[$25 >> 2] = 0;
     __THREW__ = 0;
     invoke_vii(491, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $26 = __THREW__;
     __THREW__ = 0;
     $27 = $26 & 1;
     if ($27) {
      $28 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $29 = tempRet0;
      ___clang_call_terminate($28), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
      HEAP32[$1 >> 2] = 0;
      $30 = $1 + 4 | 0;
      HEAP32[$30 >> 2] = 0;
      $31 = $1 + 8 | 0;
      HEAP32[$31 >> 2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    } else {
     $32 = $13 + 40 | 0;
     $33 = HEAP32[$32 >> 2] | 0;
     FUNCTION_TABLE_vii[$33 & 1023]($2, $12), asyncState ? abort(-12) | 0 : 0;
     $34 = HEAP32[$2 >> 2] | 0;
     HEAP8[$__pat >> 0] = $34 & 255;
     HEAP8[$__pat + 1 >> 0] = $34 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $34 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $34 >> 24;
     $35 = HEAP32[$12 >> 2] | 0;
     $36 = $35 + 28 | 0;
     $37 = HEAP32[$36 >> 2] | 0;
     FUNCTION_TABLE_vii[$37 & 1023]($3, $12), asyncState ? abort(-12) | 0 : 0;
     $38 = HEAP8[$__sn >> 0] | 0;
     $39 = $38 & 1;
     $40 = $39 << 24 >> 24 == 0;
     if ($40) {
      HEAP8[$__sn >> 0] = 0;
     } else {
      $41 = $__sn + 8 | 0;
      $42 = HEAP32[$41 >> 2] | 0;
      HEAP32[$42 >> 2] = 0;
     }
     $43 = $__sn + 4 | 0;
     HEAP32[$43 >> 2] = 0;
     __THREW__ = 0;
     invoke_vii(491, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $44 = __THREW__;
     __THREW__ = 0;
     $45 = $44 & 1;
     if ($45) {
      $46 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $47 = tempRet0;
      ___clang_call_terminate($46), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$3 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
      HEAP32[$3 >> 2] = 0;
      $48 = $3 + 4 | 0;
      HEAP32[$48 >> 2] = 0;
      $49 = $3 + 8 | 0;
      HEAP32[$49 >> 2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
   } while (0);
   $50 = HEAP32[$12 >> 2] | 0;
   $51 = $50 + 12 | 0;
   $52 = HEAP32[$51 >> 2] | 0;
   $53 = (tempInt = FUNCTION_TABLE_ii[$52 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__dp >> 2] = $53;
   $54 = HEAP32[$12 >> 2] | 0;
   $55 = $54 + 16 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   $57 = (tempInt = FUNCTION_TABLE_ii[$56 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__ts >> 2] = $57;
   $58 = HEAP32[$12 >> 2] | 0;
   $59 = $58 + 20 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   FUNCTION_TABLE_vii[$60 & 1023]($4, $12), asyncState ? abort(-12) | 0 : 0;
   $61 = HEAP8[$__grp >> 0] | 0;
   $62 = $61 & 1;
   $63 = $62 << 24 >> 24 == 0;
   if ($63) {
    $67 = $__grp + 1 | 0;
    HEAP8[$67 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $64 = $__grp + 8 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    HEAP8[$65 >> 0] = 0;
    $66 = $__grp + 4 | 0;
    HEAP32[$66 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $68 = __THREW__;
   __THREW__ = 0;
   $69 = $68 & 1;
   if ($69) {
    $70 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $71 = tempRet0;
    ___clang_call_terminate($70), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$4 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
   HEAP32[$4 >> 2] = 0;
   $72 = $4 + 4 | 0;
   HEAP32[$72 >> 2] = 0;
   $73 = $4 + 8 | 0;
   HEAP32[$73 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4), asyncState ? abort(-12) | 0 : 0;
   $74 = HEAP32[$12 >> 2] | 0;
   $75 = $74 + 24 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   FUNCTION_TABLE_vii[$76 & 1023]($5, $12), asyncState ? abort(-12) | 0 : 0;
   $77 = HEAP8[$__sym >> 0] | 0;
   $78 = $77 & 1;
   $79 = $78 << 24 >> 24 == 0;
   if ($79) {
    HEAP8[$__sym >> 0] = 0;
   } else {
    $80 = $__sym + 8 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    HEAP32[$81 >> 2] = 0;
   }
   $82 = $__sym + 4 | 0;
   HEAP32[$82 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $83 = __THREW__;
   __THREW__ = 0;
   $84 = $83 & 1;
   if ($84) {
    $85 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $86 = tempRet0;
    ___clang_call_terminate($85), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$5 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2] | 0;
    HEAP32[$5 >> 2] = 0;
    $87 = $5 + 4 | 0;
    HEAP32[$87 >> 2] = 0;
    $88 = $5 + 8 | 0;
    HEAP32[$88 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5), asyncState ? abort(-12) | 0 : 0;
    $89 = HEAP32[$12 >> 2] | 0;
    $90 = $89 + 36 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = (tempInt = FUNCTION_TABLE_ii[$91 & 1023]($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $92;
    break;
   }
  } else {
   $93 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8588) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $94 = HEAP32[$93 >> 2] | 0;
   do {
    if ($__neg) {
     $95 = $94 + 44 | 0;
     $96 = HEAP32[$95 >> 2] | 0;
     FUNCTION_TABLE_vii[$96 & 1023]($6, $93), asyncState ? abort(-12) | 0 : 0;
     $97 = HEAP32[$6 >> 2] | 0;
     HEAP8[$__pat >> 0] = $97 & 255;
     HEAP8[$__pat + 1 >> 0] = $97 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $97 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $97 >> 24;
     $98 = HEAP32[$93 >> 2] | 0;
     $99 = $98 + 32 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     FUNCTION_TABLE_vii[$100 & 1023]($7, $93), asyncState ? abort(-12) | 0 : 0;
     $101 = HEAP8[$__sn >> 0] | 0;
     $102 = $101 & 1;
     $103 = $102 << 24 >> 24 == 0;
     if ($103) {
      HEAP8[$__sn >> 0] = 0;
     } else {
      $104 = $__sn + 8 | 0;
      $105 = HEAP32[$104 >> 2] | 0;
      HEAP32[$105 >> 2] = 0;
     }
     $106 = $__sn + 4 | 0;
     HEAP32[$106 >> 2] = 0;
     __THREW__ = 0;
     invoke_vii(491, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $107 = __THREW__;
     __THREW__ = 0;
     $108 = $107 & 1;
     if ($108) {
      $109 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $110 = tempRet0;
      ___clang_call_terminate($109), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$7 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
      HEAP32[$7 >> 2] = 0;
      $111 = $7 + 4 | 0;
      HEAP32[$111 >> 2] = 0;
      $112 = $7 + 8 | 0;
      HEAP32[$112 >> 2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    } else {
     $113 = $94 + 40 | 0;
     $114 = HEAP32[$113 >> 2] | 0;
     FUNCTION_TABLE_vii[$114 & 1023]($8, $93), asyncState ? abort(-12) | 0 : 0;
     $115 = HEAP32[$8 >> 2] | 0;
     HEAP8[$__pat >> 0] = $115 & 255;
     HEAP8[$__pat + 1 >> 0] = $115 >> 8 & 255;
     HEAP8[$__pat + 2 >> 0] = $115 >> 16 & 255;
     HEAP8[$__pat + 3 >> 0] = $115 >> 24;
     $116 = HEAP32[$93 >> 2] | 0;
     $117 = $116 + 28 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     FUNCTION_TABLE_vii[$118 & 1023]($9, $93), asyncState ? abort(-12) | 0 : 0;
     $119 = HEAP8[$__sn >> 0] | 0;
     $120 = $119 & 1;
     $121 = $120 << 24 >> 24 == 0;
     if ($121) {
      HEAP8[$__sn >> 0] = 0;
     } else {
      $122 = $__sn + 8 | 0;
      $123 = HEAP32[$122 >> 2] | 0;
      HEAP32[$123 >> 2] = 0;
     }
     $124 = $__sn + 4 | 0;
     HEAP32[$124 >> 2] = 0;
     __THREW__ = 0;
     invoke_vii(491, $__sn | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $125 = __THREW__;
     __THREW__ = 0;
     $126 = $125 & 1;
     if ($126) {
      $127 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $128 = tempRet0;
      ___clang_call_terminate($127), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$__sn >> 2] = HEAP32[$9 >> 2] | 0;
      HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
      HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
      HEAP32[$9 >> 2] = 0;
      $129 = $9 + 4 | 0;
      HEAP32[$129 >> 2] = 0;
      $130 = $9 + 8 | 0;
      HEAP32[$130 >> 2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
   } while (0);
   $131 = HEAP32[$93 >> 2] | 0;
   $132 = $131 + 12 | 0;
   $133 = HEAP32[$132 >> 2] | 0;
   $134 = (tempInt = FUNCTION_TABLE_ii[$133 & 1023]($93) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__dp >> 2] = $134;
   $135 = HEAP32[$93 >> 2] | 0;
   $136 = $135 + 16 | 0;
   $137 = HEAP32[$136 >> 2] | 0;
   $138 = (tempInt = FUNCTION_TABLE_ii[$137 & 1023]($93) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__ts >> 2] = $138;
   $139 = HEAP32[$93 >> 2] | 0;
   $140 = $139 + 20 | 0;
   $141 = HEAP32[$140 >> 2] | 0;
   FUNCTION_TABLE_vii[$141 & 1023]($10, $93), asyncState ? abort(-12) | 0 : 0;
   $142 = HEAP8[$__grp >> 0] | 0;
   $143 = $142 & 1;
   $144 = $143 << 24 >> 24 == 0;
   if ($144) {
    $148 = $__grp + 1 | 0;
    HEAP8[$148 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $145 = $__grp + 8 | 0;
    $146 = HEAP32[$145 >> 2] | 0;
    HEAP8[$146 >> 0] = 0;
    $147 = $__grp + 4 | 0;
    HEAP32[$147 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $149 = __THREW__;
   __THREW__ = 0;
   $150 = $149 & 1;
   if ($150) {
    $151 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $152 = tempRet0;
    ___clang_call_terminate($151), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$10 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   $153 = $10 + 4 | 0;
   HEAP32[$153 >> 2] = 0;
   $154 = $10 + 8 | 0;
   HEAP32[$154 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10), asyncState ? abort(-12) | 0 : 0;
   $155 = HEAP32[$93 >> 2] | 0;
   $156 = $155 + 24 | 0;
   $157 = HEAP32[$156 >> 2] | 0;
   FUNCTION_TABLE_vii[$157 & 1023]($11, $93), asyncState ? abort(-12) | 0 : 0;
   $158 = HEAP8[$__sym >> 0] | 0;
   $159 = $158 & 1;
   $160 = $159 << 24 >> 24 == 0;
   if ($160) {
    HEAP8[$__sym >> 0] = 0;
   } else {
    $161 = $__sym + 8 | 0;
    $162 = HEAP32[$161 >> 2] | 0;
    HEAP32[$162 >> 2] = 0;
   }
   $163 = $__sym + 4 | 0;
   HEAP32[$163 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $164 = __THREW__;
   __THREW__ = 0;
   $165 = $164 & 1;
   if ($165) {
    $166 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $167 = tempRet0;
    ___clang_call_terminate($166), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$11 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
    HEAP32[$11 >> 2] = 0;
    $168 = $11 + 4 | 0;
    HEAP32[$168 >> 2] = 0;
    $169 = $11 + 8 | 0;
    HEAP32[$169 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11), asyncState ? abort(-12) | 0 : 0;
    $170 = HEAP32[$93 >> 2] | 0;
    $171 = $170 + 36 | 0;
    $172 = HEAP32[$171 >> 2] | 0;
    $173 = (tempInt = FUNCTION_TABLE_ii[$172 & 1023]($93) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $173;
    break;
   }
  }
 } while (0);
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i46 = 0, $$01$i$i641 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$043 = 0, $__dc$1 = 0, $__dg$044 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$240 = 0, $__nf$240$lcssa = 0, $__nf$3 = 0, $__ns$052 = 0, $__ns$148 = 0, $__ns$2 = 0, $__p$045 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__grouping = sp;
 $0 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8916) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9056) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping, $1), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $6 = HEAP32[$0 >> 2] | 0;
   $7 = $6 + 28 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii($8 | 0, $0 | 0, $5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if ($11) {
    label = 8;
   } else {
    $12 = $__nb + 1 | 0;
    $13 = HEAP32[$__oe >> 2] | 0;
    $14 = $13 + 1 | 0;
    HEAP32[$__oe >> 2] = $14;
    HEAP8[$13 >> 0] = $9;
    $__nf$0 = $12;
    label = 10;
   }
   break;
  }
 default:
  {
   $__nf$0 = $__nb;
   label = 10;
  }
 }
 L4 : do {
  if ((label | 0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = $25 - $26 | 0;
   $28 = ($27 | 0) > 1;
   L6 : do {
    if ($28) {
     $30 = HEAP8[$__nf$0 >> 0] | 0;
     $31 = $30 << 24 >> 24 == 48;
     if ($31) {
      $32 = $__nf$0 + 1 | 0;
      $33 = HEAP8[$32 >> 0] | 0;
      switch ($33 << 24 >> 24) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        label = 11;
        break L6;
       }
      }
      $34 = HEAP32[$0 >> 2] | 0;
      $35 = $34 + 28 | 0;
      $36 = HEAP32[$35 >> 2] | 0;
      __THREW__ = 0;
      $37 = (tempInt = invoke_iii($36 | 0, $0 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $38 = __THREW__;
      __THREW__ = 0;
      $39 = $38 & 1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe >> 2] | 0;
      $41 = $40 + 1 | 0;
      HEAP32[$__oe >> 2] = $41;
      HEAP8[$40 >> 0] = $37;
      $42 = $__nf$0 + 2 | 0;
      $43 = HEAP8[$32 >> 0] | 0;
      $44 = HEAP32[$0 >> 2] | 0;
      $45 = $44 + 28 | 0;
      $46 = HEAP32[$45 >> 2] | 0;
      __THREW__ = 0;
      $47 = (tempInt = invoke_iii($46 | 0, $0 | 0, $43 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $48 = __THREW__;
      __THREW__ = 0;
      $49 = $48 & 1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe >> 2] | 0;
      $51 = $50 + 1 | 0;
      HEAP32[$__oe >> 2] = $51;
      HEAP8[$50 >> 0] = $47;
      $52 = $42 >>> 0 < $__ne >>> 0;
      if ($52) {
       $__ns$052 = $42;
       while (1) {
        $53 = HEAP8[$__ns$052 >> 0] | 0;
        __THREW__ = 0;
        $54 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $55 = __THREW__;
        __THREW__ = 0;
        $56 = $55 & 1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (tempInt = invoke_iii(470, $57 | 0, $54 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $59 = __THREW__;
        __THREW__ = 0;
        $60 = $59 & 1;
        if ($60) {
         break;
        }
        $61 = ($58 | 0) == 0;
        if ($61) {
         $__nf$1 = $42;
         $__ns$2 = $__ns$052;
         break L6;
        }
        $62 = $__ns$052 + 1 | 0;
        $63 = $62 >>> 0 < $__ne >>> 0;
        if ($63) {
         $__ns$052 = $62;
        } else {
         $__nf$1 = $42;
         $__ns$2 = $62;
         break L6;
        }
       }
       $21 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $22 = tempRet0;
       $lpad$phi$index = $21;
       $lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;
       $__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while (0);
   L18 : do {
    if ((label | 0) == 11) {
     $29 = $__nf$0 >>> 0 < $__ne >>> 0;
     if ($29) {
      $__ns$148 = $__nf$0;
      while (1) {
       $64 = HEAP8[$__ns$148 >> 0] | 0;
       __THREW__ = 0;
       $65 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $66 = __THREW__;
       __THREW__ = 0;
       $67 = $66 & 1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (tempInt = invoke_iii(471, $68 | 0, $65 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $70 = __THREW__;
       __THREW__ = 0;
       $71 = $70 & 1;
       if ($71) {
        break;
       }
       $72 = ($69 | 0) == 0;
       if ($72) {
        $__nf$1 = $__nf$0;
        $__ns$2 = $__ns$148;
        break L18;
       }
       $73 = $__ns$148 + 1 | 0;
       $74 = $73 >>> 0 < $__ne >>> 0;
       if ($74) {
        $__ns$148 = $73;
       } else {
        $__nf$1 = $__nf$0;
        $__ns$2 = $73;
        break L18;
       }
      }
      $19 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $20 = tempRet0;
      $lpad$phi$index = $19;
      $lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;
      $__ns$2 = $__nf$0;
     }
    }
   } while (0);
   $75 = HEAP8[$__grouping >> 0] | 0;
   $76 = $75 & 1;
   $77 = $76 << 24 >> 24 == 0;
   $78 = $__grouping + 4 | 0;
   $79 = HEAP32[$78 >> 2] | 0;
   $80 = $75 & 255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82 | 0) == 0;
   if ($83) {
    $84 = HEAP32[$__oe >> 2] | 0;
    $85 = HEAP32[$0 >> 2] | 0;
    $86 = $85 + 32 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($87 | 0, $0 | 0, $__nf$1 | 0, $__ns$2 | 0, $84 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $88 = __THREW__;
    __THREW__ = 0;
    $89 = $88 & 1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = $90 - $91 | 0;
    $93 = HEAP32[$__oe >> 2] | 0;
    $94 = $93 + $92 | 0;
    HEAP32[$__oe >> 2] = $94;
    $$pre$phiZ2D = $0;
   } else {
    $95 = ($__nf$1 | 0) == ($__ns$2 | 0);
    if (!$95) {
     $96 = $__ns$2 + -1 | 0;
     $97 = $__nf$1 >>> 0 < $96 >>> 0;
     if ($97) {
      $$01$i$i46 = $__nf$1;
      $100 = $96;
      while (1) {
       $98 = HEAP8[$$01$i$i46 >> 0] | 0;
       $99 = HEAP8[$100 >> 0] | 0;
       HEAP8[$$01$i$i46 >> 0] = $99;
       HEAP8[$100 >> 0] = $98;
       $101 = $$01$i$i46 + 1 | 0;
       $102 = $100 + -1 | 0;
       $103 = $101 >>> 0 < $102 >>> 0;
       if ($103) {
        $$01$i$i46 = $101;
        $100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1 >> 2] | 0;
    $105 = $104 + 16 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    __THREW__ = 0;
    $107 = (tempInt = invoke_ii($106 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    $109 = $108 & 1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = $__grouping + 8 | 0;
    $111 = $__grouping + 1 | 0;
    $112 = $__nf$1 >>> 0 < $__ns$2 >>> 0;
    L37 : do {
     if ($112) {
      $__dc$043 = 0;
      $__dg$044 = 0;
      $__p$045 = $__nf$1;
      while (1) {
       $113 = HEAP8[$__grouping >> 0] | 0;
       $114 = $113 & 1;
       $115 = $114 << 24 >> 24 == 0;
       $116 = HEAP32[$110 >> 2] | 0;
       $117 = $115 ? $111 : $116;
       $118 = $117 + $__dg$044 | 0;
       $119 = HEAP8[$118 >> 0] | 0;
       $120 = $119 << 24 >> 24 > 0;
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$043 | 0) == ($121 | 0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe >> 2] | 0;
        $124 = $123 + 1 | 0;
        HEAP32[$__oe >> 2] = $124;
        HEAP8[$123 >> 0] = $107;
        $125 = HEAP8[$__grouping >> 0] | 0;
        $126 = $125 & 1;
        $127 = $126 << 24 >> 24 == 0;
        $128 = HEAP32[$78 >> 2] | 0;
        $129 = $125 & 255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = $131 + -1 | 0;
        $133 = $__dg$044 >>> 0 < $132 >>> 0;
        $134 = $133 & 1;
        $$__dg$0 = $134 + $__dg$044 | 0;
        $__dc$1 = 0;
        $__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$043;
        $__dg$1 = $__dg$044;
       }
       $135 = HEAP8[$__p$045 >> 0] | 0;
       $136 = HEAP32[$0 >> 2] | 0;
       $137 = $136 + 28 | 0;
       $138 = HEAP32[$137 >> 2] | 0;
       __THREW__ = 0;
       $139 = (tempInt = invoke_iii($138 | 0, $0 | 0, $135 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $140 = __THREW__;
       __THREW__ = 0;
       $141 = $140 & 1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe >> 2] | 0;
       $143 = $142 + 1 | 0;
       HEAP32[$__oe >> 2] = $143;
       HEAP8[$142 >> 0] = $139;
       $144 = $__dc$1 + 1 | 0;
       $145 = $__p$045 + 1 | 0;
       $146 = $145 >>> 0 < $__ns$2 >>> 0;
       if ($146) {
        $__dc$043 = $144;
        $__dg$044 = $__dg$1;
        $__p$045 = $145;
       } else {
        break L37;
       }
      }
      $17 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $18 = tempRet0;
      $lpad$phi$index = $17;
      $lpad$phi$index5 = $18;
      break L4;
     }
    } while (0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = $147 - $148 | 0;
    $150 = $__ob + $149 | 0;
    $151 = HEAP32[$__oe >> 2] | 0;
    $152 = ($150 | 0) == ($151 | 0);
    if ($152) {
     $$pre$phiZ2D = $0;
    } else {
     $153 = $151 + -1 | 0;
     $154 = $150 >>> 0 < $153 >>> 0;
     if ($154) {
      $$01$i$i641 = $150;
      $158 = $153;
      while (1) {
       $156 = HEAP8[$$01$i$i641 >> 0] | 0;
       $157 = HEAP8[$158 >> 0] | 0;
       HEAP8[$$01$i$i641 >> 0] = $157;
       HEAP8[$158 >> 0] = $156;
       $159 = $$01$i$i641 + 1 | 0;
       $160 = $158 + -1 | 0;
       $161 = $159 >>> 0 < $160 >>> 0;
       if ($161) {
        $$01$i$i641 = $159;
        $158 = $160;
       } else {
        $$pre$phiZ2D = $0;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;
     }
    }
   }
   $155 = $__ns$2 >>> 0 < $__ne >>> 0;
   L50 : do {
    if ($155) {
     $__nf$240 = $__ns$2;
     while (1) {
      $162 = HEAP8[$__nf$240 >> 0] | 0;
      $163 = $162 << 24 >> 24 == 46;
      if ($163) {
       $__nf$240$lcssa = $__nf$240;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D >> 2] | 0;
      $174 = $173 + 28 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      __THREW__ = 0;
      $176 = (tempInt = invoke_iii($175 | 0, $0 | 0, $162 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $177 = __THREW__;
      __THREW__ = 0;
      $178 = $177 & 1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe >> 2] | 0;
      $180 = $179 + 1 | 0;
      HEAP32[$__oe >> 2] = $180;
      HEAP8[$179 >> 0] = $176;
      $181 = $__nf$240 + 1 | 0;
      $182 = $181 >>> 0 < $__ne >>> 0;
      if ($182) {
       $__nf$240 = $181;
      } else {
       $__nf$3 = $181;
       break L50;
      }
     }
     if ((label | 0) == 4) {
      $15 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $16 = tempRet0;
      $lpad$phi$index = $15;
      $lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1 >> 2] | 0;
     $165 = $164 + 12 | 0;
     $166 = HEAP32[$165 >> 2] | 0;
     __THREW__ = 0;
     $167 = (tempInt = invoke_ii($166 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $168 = __THREW__;
     __THREW__ = 0;
     $169 = $168 & 1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe >> 2] | 0;
     $171 = $170 + 1 | 0;
     HEAP32[$__oe >> 2] = $171;
     HEAP8[$170 >> 0] = $167;
     $172 = $__nf$240$lcssa + 1 | 0;
     $__nf$3 = $172;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while (0);
   $183 = HEAP32[$__oe >> 2] | 0;
   $184 = HEAP32[$0 >> 2] | 0;
   $185 = $184 + 32 | 0;
   $186 = HEAP32[$185 >> 2] | 0;
   __THREW__ = 0;
   (tempInt = invoke_iiiii($186 | 0, $0 | 0, $__nf$3 | 0, $__ne | 0, $183 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $187 = __THREW__;
   __THREW__ = 0;
   $188 = $187 & 1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = $25 - $189 | 0;
    $191 = HEAP32[$__oe >> 2] | 0;
    $192 = $191 + $190 | 0;
    HEAP32[$__oe >> 2] = $192;
    $193 = ($__np | 0) == ($__ne | 0);
    $194 = $__np;
    $195 = $__nb;
    $196 = $194 - $195 | 0;
    $197 = $__ob + $196 | 0;
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op >> 2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 8) {
  $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $24 = tempRet0;
  $lpad$phi$index = $23;
  $lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $refs + -1 | 0;
 $1 = $this + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$this >> 2] = 8892;
 $2 = $this + 8 | 0;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(497, $2 | 0, 28), asyncState ? abort(-12) | 0 : 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 if ($4) {
  $83 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $84 = tempRet0;
  $$1 = $84;
  $$12 = $83;
 } else {
  $5 = $this + 144 | 0;
  __THREW__ = 0;
  invoke_viii(393, $5 | 0, 21606 | 0, 1), asyncState ? abort(-12) | 0 : 0;
  $6 = __THREW__;
  __THREW__ = 0;
  $7 = $6 & 1;
  if ($7) {
   $85 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $86 = tempRet0;
   $$0 = $86;
   $$01 = $85;
  } else {
   $8 = HEAP32[$2 >> 2] | 0;
   $9 = $this + 12 | 0;
   $$pre$i$i$i = HEAP32[$9 >> 2] | 0;
   $10 = ($$pre$i$i$i | 0) == ($8 | 0);
   if (!$10) {
    $12 = $$pre$i$i$i;
    while (1) {
     $11 = $12 + -4 | 0;
     $13 = ($11 | 0) == ($8 | 0);
     if ($13) {
      $$lcssa = $11;
      break;
     } else {
      $12 = $11;
     }
    }
    HEAP32[$9 >> 2] = $$lcssa;
   }
   HEAP32[1420 >> 2] = 0;
   HEAP32[1416 >> 2] = 7820;
   __THREW__ = 0;
   invoke_vii(498, $this | 0, 1416 | 0), asyncState ? abort(-12) | 0 : 0;
   $14 = __THREW__;
   __THREW__ = 0;
   $15 = $14 & 1;
   do {
    if ($15) {
     label = 42;
    } else {
     HEAP32[1428 >> 2] = 0;
     HEAP32[1424 >> 2] = 7860;
     __THREW__ = 0;
     invoke_vii(499, $this | 0, 1424 | 0), asyncState ? abort(-12) | 0 : 0;
     $16 = __THREW__;
     __THREW__ = 0;
     $17 = $16 & 1;
     if ($17) {
      label = 42;
     } else {
      HEAP32[1436 >> 2] = 0;
      HEAP32[1432 >> 2] = 8932;
      HEAP32[1440 >> 2] = 0;
      HEAP8[1444 >> 0] = 0;
      $18 = (tempInt = __ZNSt3__15ctypeIcE13classic_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      HEAP32[1440 >> 2] = $18;
      __THREW__ = 0;
      invoke_vii(500, $this | 0, 1432 | 0), asyncState ? abort(-12) | 0 : 0;
      $19 = __THREW__;
      __THREW__ = 0;
      $20 = $19 & 1;
      if ($20) {
       label = 42;
      } else {
       HEAP32[1452 >> 2] = 0;
       HEAP32[1448 >> 2] = 9180;
       __THREW__ = 0;
       invoke_vii(501, $this | 0, 1448 | 0), asyncState ? abort(-12) | 0 : 0;
       $21 = __THREW__;
       __THREW__ = 0;
       $22 = $21 & 1;
       if ($22) {
        label = 42;
       } else {
        HEAP32[1460 >> 2] = 0;
        HEAP32[1456 >> 2] = 9248;
        __THREW__ = 0;
        invoke_vii(502, $this | 0, 1456 | 0), asyncState ? abort(-12) | 0 : 0;
        $23 = __THREW__;
        __THREW__ = 0;
        $24 = $23 & 1;
        if ($24) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(503, 1464 | 0, 1), asyncState ? abort(-12) | 0 : 0;
         $25 = __THREW__;
         __THREW__ = 0;
         $26 = $25 & 1;
         if ($26) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(504, $this | 0, 1464 | 0), asyncState ? abort(-12) | 0 : 0;
          $27 = __THREW__;
          __THREW__ = 0;
          $28 = $27 & 1;
          if ($28) {
           label = 42;
          } else {
           HEAP32[1484 >> 2] = 0;
           HEAP32[1480 >> 2] = 9296;
           __THREW__ = 0;
           invoke_vii(505, $this | 0, 1480 | 0), asyncState ? abort(-12) | 0 : 0;
           $29 = __THREW__;
           __THREW__ = 0;
           $30 = $29 & 1;
           if ($30) {
            label = 42;
           } else {
            HEAP32[1492 >> 2] = 0;
            HEAP32[1488 >> 2] = 9344;
            __THREW__ = 0;
            invoke_vii(506, $this | 0, 1488 | 0), asyncState ? abort(-12) | 0 : 0;
            $31 = __THREW__;
            __THREW__ = 0;
            $32 = $31 & 1;
            if ($32) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(1496, 1), asyncState ? abort(-12) | 0 : 0;
             __THREW__ = 0;
             invoke_vii(507, $this | 0, 1496 | 0), asyncState ? abort(-12) | 0 : 0;
             $33 = __THREW__;
             __THREW__ = 0;
             $34 = $33 & 1;
             if ($34) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(1520, 1), asyncState ? abort(-12) | 0 : 0;
              __THREW__ = 0;
              invoke_vii(508, $this | 0, 1520 | 0), asyncState ? abort(-12) | 0 : 0;
              $35 = __THREW__;
              __THREW__ = 0;
              $36 = $35 & 1;
              if ($36) {
               label = 42;
              } else {
               HEAP32[1556 >> 2] = 0;
               HEAP32[1552 >> 2] = 7900;
               __THREW__ = 0;
               invoke_vii(509, $this | 0, 1552 | 0), asyncState ? abort(-12) | 0 : 0;
               $37 = __THREW__;
               __THREW__ = 0;
               $38 = $37 & 1;
               if ($38) {
                label = 42;
               } else {
                HEAP32[1564 >> 2] = 0;
                HEAP32[1560 >> 2] = 7972;
                __THREW__ = 0;
                invoke_vii(510, $this | 0, 1560 | 0), asyncState ? abort(-12) | 0 : 0;
                $39 = __THREW__;
                __THREW__ = 0;
                $40 = $39 & 1;
                if ($40) {
                 label = 42;
                } else {
                 HEAP32[1572 >> 2] = 0;
                 HEAP32[1568 >> 2] = 8044;
                 __THREW__ = 0;
                 invoke_vii(511, $this | 0, 1568 | 0), asyncState ? abort(-12) | 0 : 0;
                 $41 = __THREW__;
                 __THREW__ = 0;
                 $42 = $41 & 1;
                 if ($42) {
                  label = 42;
                 } else {
                  HEAP32[1580 >> 2] = 0;
                  HEAP32[1576 >> 2] = 8104;
                  __THREW__ = 0;
                  invoke_vii(512, $this | 0, 1576 | 0), asyncState ? abort(-12) | 0 : 0;
                  $43 = __THREW__;
                  __THREW__ = 0;
                  $44 = $43 & 1;
                  if ($44) {
                   label = 42;
                   break;
                  }
                  HEAP32[1588 >> 2] = 0;
                  HEAP32[1584 >> 2] = 8412;
                  __THREW__ = 0;
                  invoke_vii(513, $this | 0, 1584 | 0), asyncState ? abort(-12) | 0 : 0;
                  $45 = __THREW__;
                  __THREW__ = 0;
                  $46 = $45 & 1;
                  if ($46) {
                   label = 42;
                   break;
                  }
                  HEAP32[1596 >> 2] = 0;
                  HEAP32[1592 >> 2] = 8476;
                  __THREW__ = 0;
                  invoke_vii(514, $this | 0, 1592 | 0), asyncState ? abort(-12) | 0 : 0;
                  $47 = __THREW__;
                  __THREW__ = 0;
                  $48 = $47 & 1;
                  if ($48) {
                   label = 42;
                   break;
                  }
                  HEAP32[1604 >> 2] = 0;
                  HEAP32[1600 >> 2] = 8540;
                  __THREW__ = 0;
                  invoke_vii(515, $this | 0, 1600 | 0), asyncState ? abort(-12) | 0 : 0;
                  $49 = __THREW__;
                  __THREW__ = 0;
                  $50 = $49 & 1;
                  if ($50) {
                   label = 42;
                   break;
                  }
                  HEAP32[1612 >> 2] = 0;
                  HEAP32[1608 >> 2] = 8604;
                  __THREW__ = 0;
                  invoke_vii(516, $this | 0, 1608 | 0), asyncState ? abort(-12) | 0 : 0;
                  $51 = __THREW__;
                  __THREW__ = 0;
                  $52 = $51 & 1;
                  if ($52) {
                   label = 42;
                   break;
                  }
                  HEAP32[1620 >> 2] = 0;
                  HEAP32[1616 >> 2] = 8668;
                  __THREW__ = 0;
                  invoke_vii(517, $this | 0, 1616 | 0), asyncState ? abort(-12) | 0 : 0;
                  $53 = __THREW__;
                  __THREW__ = 0;
                  $54 = $53 & 1;
                  if ($54) {
                   label = 42;
                   break;
                  }
                  HEAP32[1628 >> 2] = 0;
                  HEAP32[1624 >> 2] = 8704;
                  __THREW__ = 0;
                  invoke_vii(518, $this | 0, 1624 | 0), asyncState ? abort(-12) | 0 : 0;
                  $55 = __THREW__;
                  __THREW__ = 0;
                  $56 = $55 & 1;
                  if ($56) {
                   label = 42;
                   break;
                  }
                  HEAP32[1636 >> 2] = 0;
                  HEAP32[1632 >> 2] = 8740;
                  __THREW__ = 0;
                  invoke_vii(519, $this | 0, 1632 | 0), asyncState ? abort(-12) | 0 : 0;
                  $57 = __THREW__;
                  __THREW__ = 0;
                  $58 = $57 & 1;
                  if ($58) {
                   label = 42;
                   break;
                  }
                  HEAP32[1644 >> 2] = 0;
                  HEAP32[1640 >> 2] = 8776;
                  __THREW__ = 0;
                  invoke_vii(520, $this | 0, 1640 | 0), asyncState ? abort(-12) | 0 : 0;
                  $59 = __THREW__;
                  __THREW__ = 0;
                  $60 = $59 & 1;
                  if ($60) {
                   label = 42;
                   break;
                  }
                  HEAP32[1652 >> 2] = 0;
                  HEAP32[1648 >> 2] = 8164;
                  HEAP32[1656 >> 2] = 8212;
                  __THREW__ = 0;
                  invoke_vii(521, $this | 0, 1648 | 0), asyncState ? abort(-12) | 0 : 0;
                  $61 = __THREW__;
                  __THREW__ = 0;
                  $62 = $61 & 1;
                  if ($62) {
                   label = 42;
                   break;
                  }
                  HEAP32[1668 >> 2] = 0;
                  HEAP32[1664 >> 2] = 8256;
                  HEAP32[1672 >> 2] = 8304;
                  __THREW__ = 0;
                  invoke_vii(522, $this | 0, 1664 | 0), asyncState ? abort(-12) | 0 : 0;
                  $63 = __THREW__;
                  __THREW__ = 0;
                  $64 = $63 & 1;
                  if ($64) {
                   label = 42;
                   break;
                  }
                  HEAP32[1684 >> 2] = 0;
                  HEAP32[1680 >> 2] = 9160;
                  __THREW__ = 0;
                  $65 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                  $66 = __THREW__;
                  __THREW__ = 0;
                  $67 = $66 & 1;
                  if ($67) {
                   $68 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                   $69 = tempRet0;
                   $eh$lpad$body$index3Z2D = $69;
                   $eh$lpad$body$indexZ2D = $68;
                   break;
                  }
                  HEAP32[1688 >> 2] = $65;
                  HEAP32[1680 >> 2] = 8348;
                  __THREW__ = 0;
                  invoke_vii(523, $this | 0, 1680 | 0), asyncState ? abort(-12) | 0 : 0;
                  $70 = __THREW__;
                  __THREW__ = 0;
                  $71 = $70 & 1;
                  if ($71) {
                   label = 42;
                   break;
                  }
                  HEAP32[1700 >> 2] = 0;
                  HEAP32[1696 >> 2] = 9160;
                  __THREW__ = 0;
                  $72 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                  $73 = __THREW__;
                  __THREW__ = 0;
                  $74 = $73 & 1;
                  if ($74) {
                   $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                   $76 = tempRet0;
                   $eh$lpad$body$index3Z2D = $76;
                   $eh$lpad$body$indexZ2D = $75;
                   break;
                  }
                  HEAP32[1704 >> 2] = $72;
                  HEAP32[1696 >> 2] = 8380;
                  __THREW__ = 0;
                  invoke_vii(524, $this | 0, 1696 | 0), asyncState ? abort(-12) | 0 : 0;
                  $77 = __THREW__;
                  __THREW__ = 0;
                  $78 = $77 & 1;
                  if ($78) {
                   label = 42;
                   break;
                  }
                  HEAP32[1716 >> 2] = 0;
                  HEAP32[1712 >> 2] = 8812;
                  __THREW__ = 0;
                  invoke_vii(525, $this | 0, 1712 | 0), asyncState ? abort(-12) | 0 : 0;
                  $79 = __THREW__;
                  __THREW__ = 0;
                  $80 = $79 & 1;
                  if ($80) {
                   label = 42;
                   break;
                  }
                  HEAP32[1724 >> 2] = 0;
                  HEAP32[1720 >> 2] = 8852;
                  __THREW__ = 0;
                  invoke_vii(526, $this | 0, 1720 | 0), asyncState ? abort(-12) | 0 : 0;
                  $81 = __THREW__;
                  __THREW__ = 0;
                  $82 = $81 & 1;
                  if ($82) {
                   label = 42;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 42) {
    $87 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $88 = tempRet0;
    $eh$lpad$body$index3Z2D = $88;
    $eh$lpad$body$indexZ2D = $87;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5), asyncState ? abort(-12) | 0 : 0;
   $$0 = $eh$lpad$body$index3Z2D;
   $$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
  $$1 = $$0;
  $$12 = $$01;
 }
 ___resumeException($$12 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $20 = sp + 8 | 0;
 $23 = sp + 327 | 0;
 $31 = sp;
 $34 = sp + 326 | 0;
 $__1buf = sp + 324 | 0;
 $71 = sp + 48 | 0;
 $72 = sp + 44 | 0;
 $73 = sp + 28 | 0;
 $74 = sp + 24 | 0;
 $__inext = sp + 12 | 0;
 $70 = $this;
 $75 = $70;
 $76 = $75 + 64 | 0;
 $77 = HEAP32[$76 >> 2] | 0;
 $78 = ($77 | 0) == (0 | 0);
 if ($78) {
  $79 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;
  return $364 | 0;
 }
 $80 = (tempInt = __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $81 = $80 & 1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = $82 + 12 | 0;
 $84 = HEAP32[$83 >> 2] | 0;
 $85 = ($84 | 0) == (0 | 0);
 if ($85) {
  $86 = $__1buf + 1 | 0;
  $87 = $__1buf + 1 | 0;
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = $88 + 8 | 0;
  HEAP32[$90 >> 2] = $89;
  $91 = $61;
  $92 = $88 + 12 | 0;
  HEAP32[$92 >> 2] = $91;
  $93 = $62;
  $94 = $88 + 16 | 0;
  HEAP32[$94 >> 2] = $93;
 }
 $95 = $__initial;
 $96 = $95 & 1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = $97 + 16 | 0;
  $99 = HEAP32[$98 >> 2] | 0;
  $48 = $75;
  $100 = $48;
  $101 = $100 + 8 | 0;
  $102 = HEAP32[$101 >> 2] | 0;
  $103 = $99;
  $104 = $102;
  $105 = $103 - $104 | 0;
  $106 = ($105 | 0) / 2 & -1;
  HEAP32[$71 >> 2] = $106;
  HEAP32[$72 >> 2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  HEAP8[$31 >> 0] = HEAP8[$34 >> 0] | 0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111 >> 2] | 0;
  $113 = $28;
  $114 = HEAP32[$113 >> 2] | 0;
  $115 = $112 >>> 0 < $114 >>> 0;
  $116 = $30;
  $117 = $29;
  $118 = $115 ? $116 : $117;
  $119 = HEAP32[$118 >> 2] | 0;
  $120 = $119;
 }
 $__unget_sz = $120;
 $121 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = $122 + 12 | 0;
 $124 = HEAP32[$123 >> 2] | 0;
 $0 = $75;
 $125 = $0;
 $126 = $125 + 16 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = ($124 | 0) == ($127 | 0);
 do {
  if ($128) {
   $1 = $75;
   $129 = $1;
   $130 = $129 + 8 | 0;
   $131 = HEAP32[$130 >> 2] | 0;
   $2 = $75;
   $132 = $2;
   $133 = $132 + 16 | 0;
   $134 = HEAP32[$133 >> 2] | 0;
   $135 = $__unget_sz;
   $136 = 0 - $135 | 0;
   $137 = $134 + $136 | 0;
   $138 = $__unget_sz;
   $139 = $138;
   (tempInt = _memmove($131 | 0, $137 | 0, $139 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $140 = $75 + 98 | 0;
   $141 = HEAP8[$140 >> 0] | 0;
   $142 = $141 & 1;
   if ($142) {
    $3 = $75;
    $143 = $3;
    $144 = $143 + 16 | 0;
    $145 = HEAP32[$144 >> 2] | 0;
    $4 = $75;
    $146 = $4;
    $147 = $146 + 8 | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = $145;
    $150 = $148;
    $151 = $149 - $150 | 0;
    $152 = $__unget_sz;
    $153 = $151 - $152 | 0;
    $__nmemb = $153;
    $5 = $75;
    $154 = $5;
    $155 = $154 + 8 | 0;
    $156 = HEAP32[$155 >> 2] | 0;
    $157 = $__unget_sz;
    $158 = $156 + $157 | 0;
    $159 = $__nmemb;
    $160 = $75 + 64 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = (tempInt = _fread($158, 1, $159, $161) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $__nmemb = $162;
    $163 = $__nmemb;
    $164 = ($163 | 0) != 0;
    if (!$164) {
     break;
    }
    $6 = $75;
    $165 = $6;
    $166 = $165 + 8 | 0;
    $167 = HEAP32[$166 >> 2] | 0;
    $7 = $75;
    $168 = $7;
    $169 = $168 + 8 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    $171 = $__unget_sz;
    $172 = $170 + $171 | 0;
    $8 = $75;
    $173 = $8;
    $174 = $173 + 8 | 0;
    $175 = HEAP32[$174 >> 2] | 0;
    $176 = $__unget_sz;
    $177 = $175 + $176 | 0;
    $178 = $__nmemb;
    $179 = $177 + $178 | 0;
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = $180 + 8 | 0;
    HEAP32[$182 >> 2] = $181;
    $183 = $11;
    $184 = $180 + 12 | 0;
    HEAP32[$184 >> 2] = $183;
    $185 = $12;
    $186 = $180 + 16 | 0;
    HEAP32[$186 >> 2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = $187 + 12 | 0;
    $189 = HEAP32[$188 >> 2] | 0;
    $190 = HEAP8[$189 >> 0] | 0;
    $191 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($190) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $__c = $191;
    break;
   }
   $192 = $75 + 32 | 0;
   $193 = HEAP32[$192 >> 2] | 0;
   $194 = $75 + 36 | 0;
   $195 = HEAP32[$194 >> 2] | 0;
   $196 = $75 + 40 | 0;
   $197 = HEAP32[$196 >> 2] | 0;
   $198 = $75 + 36 | 0;
   $199 = HEAP32[$198 >> 2] | 0;
   $200 = $197;
   $201 = $199;
   $202 = $200 - $201 | 0;
   (tempInt = _memmove($193 | 0, $195 | 0, $202 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $203 = $75 + 32 | 0;
   $204 = HEAP32[$203 >> 2] | 0;
   $205 = $75 + 40 | 0;
   $206 = HEAP32[$205 >> 2] | 0;
   $207 = $75 + 36 | 0;
   $208 = HEAP32[$207 >> 2] | 0;
   $209 = $206;
   $210 = $208;
   $211 = $209 - $210 | 0;
   $212 = $204 + $211 | 0;
   $213 = $75 + 36 | 0;
   HEAP32[$213 >> 2] = $212;
   $214 = $75 + 32 | 0;
   $215 = HEAP32[$214 >> 2] | 0;
   $216 = $75 + 32 | 0;
   $217 = HEAP32[$216 >> 2] | 0;
   $218 = $75 + 44 | 0;
   $219 = ($217 | 0) == ($218 | 0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = $75 + 52 | 0;
    $221 = HEAP32[$220 >> 2] | 0;
    $223 = $221;
   }
   $222 = $215 + $223 | 0;
   $224 = $75 + 40 | 0;
   HEAP32[$224 >> 2] = $222;
   $225 = $75 + 60 | 0;
   $226 = HEAP32[$225 >> 2] | 0;
   $227 = $__unget_sz;
   $228 = $226 - $227 | 0;
   HEAP32[$73 >> 2] = $228;
   $229 = $75 + 40 | 0;
   $230 = HEAP32[$229 >> 2] | 0;
   $231 = $75 + 36 | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   $233 = $230;
   $234 = $232;
   $235 = $233 - $234 | 0;
   HEAP32[$74 >> 2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   HEAP8[$20 >> 0] = HEAP8[$23 >> 0] | 0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240 >> 2] | 0;
   $242 = $17;
   $243 = HEAP32[$242 >> 2] | 0;
   $244 = $241 >>> 0 < $243 >>> 0;
   $245 = $19;
   $246 = $18;
   $247 = $244 ? $245 : $246;
   $248 = HEAP32[$247 >> 2] | 0;
   $__nmemb1 = $248;
   $249 = $75 + 80 | 0;
   $250 = $75 + 72 | 0;
   HEAP32[$249 >> 2] = HEAP32[$250 >> 2] | 0;
   HEAP32[$249 + 4 >> 2] = HEAP32[$250 + 4 >> 2] | 0;
   $251 = $75 + 36 | 0;
   $252 = HEAP32[$251 >> 2] | 0;
   $253 = $__nmemb1;
   $254 = $75 + 64 | 0;
   $255 = HEAP32[$254 >> 2] | 0;
   $256 = (tempInt = _fread($252, 1, $253, $255) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257 | 0) != 0;
   if ($258) {
    $259 = $75 + 68 | 0;
    $260 = HEAP32[$259 >> 2] | 0;
    $261 = ($260 | 0) != (0 | 0);
    if (!$261) {
     $262 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     __ZNSt8bad_castC2Ev($262), asyncState ? abort(-12) | 0 : 0;
     ___cxa_throw($262 | 0, 232 | 0, 75 | 0), asyncState ? abort(-12) | 0 : 0;
    }
    $263 = $75 + 36 | 0;
    $264 = HEAP32[$263 >> 2] | 0;
    $265 = $__nr;
    $266 = $264 + $265 | 0;
    $267 = $75 + 40 | 0;
    HEAP32[$267 >> 2] = $266;
    $268 = $75 + 68 | 0;
    $269 = HEAP32[$268 >> 2] | 0;
    $270 = $75 + 72 | 0;
    $271 = $75 + 32 | 0;
    $272 = HEAP32[$271 >> 2] | 0;
    $273 = $75 + 40 | 0;
    $274 = HEAP32[$273 >> 2] | 0;
    $275 = $75 + 36 | 0;
    $24 = $75;
    $276 = $24;
    $277 = $276 + 8 | 0;
    $278 = HEAP32[$277 >> 2] | 0;
    $279 = $__unget_sz;
    $280 = $278 + $279 | 0;
    $25 = $75;
    $281 = $25;
    $282 = $281 + 8 | 0;
    $283 = HEAP32[$282 >> 2] | 0;
    $284 = $75 + 60 | 0;
    $285 = HEAP32[$284 >> 2] | 0;
    $286 = $283 + $285 | 0;
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287 >> 2] | 0;
    $289 = $288 + 16 | 0;
    $290 = HEAP32[$289 >> 2] | 0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (tempInt = FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287, $291, $292, $293, $294, $295, $296, $297) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $__r = $298;
    $299 = $__r;
    $300 = ($299 | 0) == 3;
    if ($300) {
     $301 = $75 + 32 | 0;
     $302 = HEAP32[$301 >> 2] | 0;
     $303 = $75 + 32 | 0;
     $304 = HEAP32[$303 >> 2] | 0;
     $305 = $75 + 40 | 0;
     $306 = HEAP32[$305 >> 2] | 0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = $307 + 8 | 0;
     HEAP32[$309 >> 2] = $308;
     $310 = $45;
     $311 = $307 + 12 | 0;
     HEAP32[$311 >> 2] = $310;
     $312 = $46;
     $313 = $307 + 16 | 0;
     HEAP32[$313 >> 2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = $314 + 12 | 0;
     $316 = HEAP32[$315 >> 2] | 0;
     $317 = HEAP8[$316 >> 0] | 0;
     $318 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($317) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $__c = $318;
     break;
    }
    $319 = HEAP32[$__inext >> 2] | 0;
    $49 = $75;
    $320 = $49;
    $321 = $320 + 8 | 0;
    $322 = HEAP32[$321 >> 2] | 0;
    $323 = $__unget_sz;
    $324 = $322 + $323 | 0;
    $325 = ($319 | 0) != ($324 | 0);
    if ($325) {
     $50 = $75;
     $326 = $50;
     $327 = $326 + 8 | 0;
     $328 = HEAP32[$327 >> 2] | 0;
     $51 = $75;
     $329 = $51;
     $330 = $329 + 8 | 0;
     $331 = HEAP32[$330 >> 2] | 0;
     $332 = $__unget_sz;
     $333 = $331 + $332 | 0;
     $334 = HEAP32[$__inext >> 2] | 0;
     $52 = $75;
     $53 = $328;
     $54 = $333;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = $335 + 8 | 0;
     HEAP32[$337 >> 2] = $336;
     $338 = $54;
     $339 = $335 + 12 | 0;
     HEAP32[$339 >> 2] = $338;
     $340 = $55;
     $341 = $335 + 16 | 0;
     HEAP32[$341 >> 2] = $340;
     $56 = $75;
     $342 = $56;
     $343 = $342 + 12 | 0;
     $344 = HEAP32[$343 >> 2] | 0;
     $345 = HEAP8[$344 >> 0] | 0;
     $346 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($345) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $__c = $346;
    }
   }
  } else {
   $58 = $75;
   $347 = $58;
   $348 = $347 + 12 | 0;
   $349 = HEAP32[$348 >> 2] | 0;
   $350 = HEAP8[$349 >> 0] | 0;
   $351 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($350) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $__c = $351;
  }
 } while (0);
 $63 = $75;
 $352 = $63;
 $353 = $352 + 8 | 0;
 $354 = HEAP32[$353 >> 2] | 0;
 $355 = ($354 | 0) == ($__1buf | 0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = $356 + 8 | 0;
  HEAP32[$358 >> 2] = $357;
  $359 = $66;
  $360 = $356 + 12 | 0;
  HEAP32[$360 >> 2] = $359;
  $361 = $67;
  $362 = $356 + 16 | 0;
  HEAP32[$362 >> 2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;
 return $364 | 0;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8524) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = $11 + 44 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   FUNCTION_TABLE_vii[$13 & 1023]($0, $10), asyncState ? abort(-12) | 0 : 0;
   $14 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $14 & 255;
   HEAP8[$__pat + 1 >> 0] = $14 >> 8 & 255;
   HEAP8[$__pat + 2 >> 0] = $14 >> 16 & 255;
   HEAP8[$__pat + 3 >> 0] = $14 >> 24;
   $15 = HEAP32[$10 >> 2] | 0;
   $16 = $15 + 32 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   FUNCTION_TABLE_vii[$17 & 1023]($1, $10), asyncState ? abort(-12) | 0 : 0;
   $18 = HEAP8[$__nsn >> 0] | 0;
   $19 = $18 & 1;
   $20 = $19 << 24 >> 24 == 0;
   if ($20) {
    $24 = $__nsn + 1 | 0;
    HEAP8[$24 >> 0] = 0;
    HEAP8[$__nsn >> 0] = 0;
   } else {
    $21 = $__nsn + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $__nsn + 4 | 0;
    HEAP32[$23 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__nsn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $25 = __THREW__;
   __THREW__ = 0;
   $26 = $25 & 1;
   if ($26) {
    $27 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $28 = tempRet0;
    ___clang_call_terminate($27), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $29 = $1 + 4 | 0;
   HEAP32[$29 >> 2] = 0;
   $30 = $1 + 8 | 0;
   HEAP32[$30 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
   $31 = HEAP32[$10 >> 2] | 0;
   $32 = $31 + 28 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   FUNCTION_TABLE_vii[$33 & 1023]($2, $10), asyncState ? abort(-12) | 0 : 0;
   $34 = HEAP8[$__psn >> 0] | 0;
   $35 = $34 & 1;
   $36 = $35 << 24 >> 24 == 0;
   if ($36) {
    $40 = $__psn + 1 | 0;
    HEAP8[$40 >> 0] = 0;
    HEAP8[$__psn >> 0] = 0;
   } else {
    $37 = $__psn + 8 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    HEAP8[$38 >> 0] = 0;
    $39 = $__psn + 4 | 0;
    HEAP32[$39 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__psn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $41 = __THREW__;
   __THREW__ = 0;
   $42 = $41 & 1;
   if ($42) {
    $43 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $44 = tempRet0;
    ___clang_call_terminate($43), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__psn >> 2] = HEAP32[$2 >> 2] | 0;
   HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
   HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
   HEAP32[$2 >> 2] = 0;
   $45 = $2 + 4 | 0;
   HEAP32[$45 >> 2] = 0;
   $46 = $2 + 8 | 0;
   HEAP32[$46 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
   $47 = HEAP32[$10 >> 2] | 0;
   $48 = $47 + 12 | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   $50 = (tempInt = FUNCTION_TABLE_ii[$49 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__dp >> 0] = $50;
   $51 = HEAP32[$10 >> 2] | 0;
   $52 = $51 + 16 | 0;
   $53 = HEAP32[$52 >> 2] | 0;
   $54 = (tempInt = FUNCTION_TABLE_ii[$53 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__ts >> 0] = $54;
   $55 = HEAP32[$10 >> 2] | 0;
   $56 = $55 + 20 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   FUNCTION_TABLE_vii[$57 & 1023]($3, $10), asyncState ? abort(-12) | 0 : 0;
   $58 = HEAP8[$__grp >> 0] | 0;
   $59 = $58 & 1;
   $60 = $59 << 24 >> 24 == 0;
   if ($60) {
    $64 = $__grp + 1 | 0;
    HEAP8[$64 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $61 = $__grp + 8 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    HEAP8[$62 >> 0] = 0;
    $63 = $__grp + 4 | 0;
    HEAP32[$63 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $65 = __THREW__;
   __THREW__ = 0;
   $66 = $65 & 1;
   if ($66) {
    $67 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $68 = tempRet0;
    ___clang_call_terminate($67), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$3 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $69 = $3 + 4 | 0;
   HEAP32[$69 >> 2] = 0;
   $70 = $3 + 8 | 0;
   HEAP32[$70 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
   $71 = HEAP32[$10 >> 2] | 0;
   $72 = $71 + 24 | 0;
   $73 = HEAP32[$72 >> 2] | 0;
   FUNCTION_TABLE_vii[$73 & 1023]($4, $10), asyncState ? abort(-12) | 0 : 0;
   $74 = HEAP8[$__sym >> 0] | 0;
   $75 = $74 & 1;
   $76 = $75 << 24 >> 24 == 0;
   if ($76) {
    $80 = $__sym + 1 | 0;
    HEAP8[$80 >> 0] = 0;
    HEAP8[$__sym >> 0] = 0;
   } else {
    $77 = $__sym + 8 | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    HEAP8[$78 >> 0] = 0;
    $79 = $__sym + 4 | 0;
    HEAP32[$79 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $81 = __THREW__;
   __THREW__ = 0;
   $82 = $81 & 1;
   if ($82) {
    $83 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $84 = tempRet0;
    ___clang_call_terminate($83), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    HEAP32[$4 >> 2] = 0;
    $85 = $4 + 4 | 0;
    HEAP32[$85 >> 2] = 0;
    $86 = $4 + 8 | 0;
    HEAP32[$86 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4), asyncState ? abort(-12) | 0 : 0;
    $87 = HEAP32[$10 >> 2] | 0;
    $88 = $87 + 36 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    $90 = (tempInt = FUNCTION_TABLE_ii[$89 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $90;
    break;
   }
  } else {
   $91 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8460) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   $93 = $92 + 44 | 0;
   $94 = HEAP32[$93 >> 2] | 0;
   FUNCTION_TABLE_vii[$94 & 1023]($5, $91), asyncState ? abort(-12) | 0 : 0;
   $95 = HEAP32[$5 >> 2] | 0;
   HEAP8[$__pat >> 0] = $95 & 255;
   HEAP8[$__pat + 1 >> 0] = $95 >> 8 & 255;
   HEAP8[$__pat + 2 >> 0] = $95 >> 16 & 255;
   HEAP8[$__pat + 3 >> 0] = $95 >> 24;
   $96 = HEAP32[$91 >> 2] | 0;
   $97 = $96 + 32 | 0;
   $98 = HEAP32[$97 >> 2] | 0;
   FUNCTION_TABLE_vii[$98 & 1023]($6, $91), asyncState ? abort(-12) | 0 : 0;
   $99 = HEAP8[$__nsn >> 0] | 0;
   $100 = $99 & 1;
   $101 = $100 << 24 >> 24 == 0;
   if ($101) {
    $105 = $__nsn + 1 | 0;
    HEAP8[$105 >> 0] = 0;
    HEAP8[$__nsn >> 0] = 0;
   } else {
    $102 = $__nsn + 8 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    HEAP8[$103 >> 0] = 0;
    $104 = $__nsn + 4 | 0;
    HEAP32[$104 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__nsn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $106 = __THREW__;
   __THREW__ = 0;
   $107 = $106 & 1;
   if ($107) {
    $108 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $109 = tempRet0;
    ___clang_call_terminate($108), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
   HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
   HEAP32[$6 >> 2] = 0;
   $110 = $6 + 4 | 0;
   HEAP32[$110 >> 2] = 0;
   $111 = $6 + 8 | 0;
   HEAP32[$111 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6), asyncState ? abort(-12) | 0 : 0;
   $112 = HEAP32[$91 >> 2] | 0;
   $113 = $112 + 28 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   FUNCTION_TABLE_vii[$114 & 1023]($7, $91), asyncState ? abort(-12) | 0 : 0;
   $115 = HEAP8[$__psn >> 0] | 0;
   $116 = $115 & 1;
   $117 = $116 << 24 >> 24 == 0;
   if ($117) {
    $121 = $__psn + 1 | 0;
    HEAP8[$121 >> 0] = 0;
    HEAP8[$__psn >> 0] = 0;
   } else {
    $118 = $__psn + 8 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    HEAP8[$119 >> 0] = 0;
    $120 = $__psn + 4 | 0;
    HEAP32[$120 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__psn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    $124 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $125 = tempRet0;
    ___clang_call_terminate($124), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__psn >> 2] = HEAP32[$7 >> 2] | 0;
   HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
   HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
   HEAP32[$7 >> 2] = 0;
   $126 = $7 + 4 | 0;
   HEAP32[$126 >> 2] = 0;
   $127 = $7 + 8 | 0;
   HEAP32[$127 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
   $128 = HEAP32[$91 >> 2] | 0;
   $129 = $128 + 12 | 0;
   $130 = HEAP32[$129 >> 2] | 0;
   $131 = (tempInt = FUNCTION_TABLE_ii[$130 & 1023]($91) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__dp >> 0] = $131;
   $132 = HEAP32[$91 >> 2] | 0;
   $133 = $132 + 16 | 0;
   $134 = HEAP32[$133 >> 2] | 0;
   $135 = (tempInt = FUNCTION_TABLE_ii[$134 & 1023]($91) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP8[$__ts >> 0] = $135;
   $136 = HEAP32[$91 >> 2] | 0;
   $137 = $136 + 20 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   FUNCTION_TABLE_vii[$138 & 1023]($8, $91), asyncState ? abort(-12) | 0 : 0;
   $139 = HEAP8[$__grp >> 0] | 0;
   $140 = $139 & 1;
   $141 = $140 << 24 >> 24 == 0;
   if ($141) {
    $145 = $__grp + 1 | 0;
    HEAP8[$145 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $142 = $__grp + 8 | 0;
    $143 = HEAP32[$142 >> 2] | 0;
    HEAP8[$143 >> 0] = 0;
    $144 = $__grp + 4 | 0;
    HEAP32[$144 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $146 = __THREW__;
   __THREW__ = 0;
   $147 = $146 & 1;
   if ($147) {
    $148 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $149 = tempRet0;
    ___clang_call_terminate($148), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$8 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   $150 = $8 + 4 | 0;
   HEAP32[$150 >> 2] = 0;
   $151 = $8 + 8 | 0;
   HEAP32[$151 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8), asyncState ? abort(-12) | 0 : 0;
   $152 = HEAP32[$91 >> 2] | 0;
   $153 = $152 + 24 | 0;
   $154 = HEAP32[$153 >> 2] | 0;
   FUNCTION_TABLE_vii[$154 & 1023]($9, $91), asyncState ? abort(-12) | 0 : 0;
   $155 = HEAP8[$__sym >> 0] | 0;
   $156 = $155 & 1;
   $157 = $156 << 24 >> 24 == 0;
   if ($157) {
    $161 = $__sym + 1 | 0;
    HEAP8[$161 >> 0] = 0;
    HEAP8[$__sym >> 0] = 0;
   } else {
    $158 = $__sym + 8 | 0;
    $159 = HEAP32[$158 >> 2] | 0;
    HEAP8[$159 >> 0] = 0;
    $160 = $__sym + 4 | 0;
    HEAP32[$160 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $162 = __THREW__;
   __THREW__ = 0;
   $163 = $162 & 1;
   if ($163) {
    $164 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $165 = tempRet0;
    ___clang_call_terminate($164), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    HEAP32[$9 >> 2] = 0;
    $166 = $9 + 4 | 0;
    HEAP32[$166 >> 2] = 0;
    $167 = $9 + 8 | 0;
    HEAP32[$167 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9), asyncState ? abort(-12) | 0 : 0;
    $168 = HEAP32[$91 >> 2] | 0;
    $169 = $168 + 36 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    $171 = (tempInt = FUNCTION_TABLE_ii[$170 & 1023]($91) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $171;
    break;
   }
  }
 } while (0);
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8652) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = $11 + 44 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   FUNCTION_TABLE_vii[$13 & 1023]($0, $10), asyncState ? abort(-12) | 0 : 0;
   $14 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $14 & 255;
   HEAP8[$__pat + 1 >> 0] = $14 >> 8 & 255;
   HEAP8[$__pat + 2 >> 0] = $14 >> 16 & 255;
   HEAP8[$__pat + 3 >> 0] = $14 >> 24;
   $15 = HEAP32[$10 >> 2] | 0;
   $16 = $15 + 32 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   FUNCTION_TABLE_vii[$17 & 1023]($1, $10), asyncState ? abort(-12) | 0 : 0;
   $18 = HEAP8[$__nsn >> 0] | 0;
   $19 = $18 & 1;
   $20 = $19 << 24 >> 24 == 0;
   if ($20) {
    HEAP8[$__nsn >> 0] = 0;
   } else {
    $21 = $__nsn + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    HEAP32[$22 >> 2] = 0;
   }
   $23 = $__nsn + 4 | 0;
   HEAP32[$23 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__nsn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $24 = __THREW__;
   __THREW__ = 0;
   $25 = $24 & 1;
   if ($25) {
    $26 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $27 = tempRet0;
    ___clang_call_terminate($26), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
   HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $28 = $1 + 4 | 0;
   HEAP32[$28 >> 2] = 0;
   $29 = $1 + 8 | 0;
   HEAP32[$29 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
   $30 = HEAP32[$10 >> 2] | 0;
   $31 = $30 + 28 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   FUNCTION_TABLE_vii[$32 & 1023]($2, $10), asyncState ? abort(-12) | 0 : 0;
   $33 = HEAP8[$__psn >> 0] | 0;
   $34 = $33 & 1;
   $35 = $34 << 24 >> 24 == 0;
   if ($35) {
    HEAP8[$__psn >> 0] = 0;
   } else {
    $36 = $__psn + 8 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    HEAP32[$37 >> 2] = 0;
   }
   $38 = $__psn + 4 | 0;
   HEAP32[$38 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__psn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $39 = __THREW__;
   __THREW__ = 0;
   $40 = $39 & 1;
   if ($40) {
    $41 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $42 = tempRet0;
    ___clang_call_terminate($41), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__psn >> 2] = HEAP32[$2 >> 2] | 0;
   HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
   HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
   HEAP32[$2 >> 2] = 0;
   $43 = $2 + 4 | 0;
   HEAP32[$43 >> 2] = 0;
   $44 = $2 + 8 | 0;
   HEAP32[$44 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
   $45 = HEAP32[$10 >> 2] | 0;
   $46 = $45 + 12 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   $48 = (tempInt = FUNCTION_TABLE_ii[$47 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__dp >> 2] = $48;
   $49 = HEAP32[$10 >> 2] | 0;
   $50 = $49 + 16 | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   $52 = (tempInt = FUNCTION_TABLE_ii[$51 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__ts >> 2] = $52;
   $53 = HEAP32[$10 >> 2] | 0;
   $54 = $53 + 20 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   FUNCTION_TABLE_vii[$55 & 1023]($3, $10), asyncState ? abort(-12) | 0 : 0;
   $56 = HEAP8[$__grp >> 0] | 0;
   $57 = $56 & 1;
   $58 = $57 << 24 >> 24 == 0;
   if ($58) {
    $62 = $__grp + 1 | 0;
    HEAP8[$62 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $59 = $__grp + 8 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    HEAP8[$60 >> 0] = 0;
    $61 = $__grp + 4 | 0;
    HEAP32[$61 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $63 = __THREW__;
   __THREW__ = 0;
   $64 = $63 & 1;
   if ($64) {
    $65 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $66 = tempRet0;
    ___clang_call_terminate($65), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$3 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $67 = $3 + 4 | 0;
   HEAP32[$67 >> 2] = 0;
   $68 = $3 + 8 | 0;
   HEAP32[$68 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
   $69 = HEAP32[$10 >> 2] | 0;
   $70 = $69 + 24 | 0;
   $71 = HEAP32[$70 >> 2] | 0;
   FUNCTION_TABLE_vii[$71 & 1023]($4, $10), asyncState ? abort(-12) | 0 : 0;
   $72 = HEAP8[$__sym >> 0] | 0;
   $73 = $72 & 1;
   $74 = $73 << 24 >> 24 == 0;
   if ($74) {
    HEAP8[$__sym >> 0] = 0;
   } else {
    $75 = $__sym + 8 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    HEAP32[$76 >> 2] = 0;
   }
   $77 = $__sym + 4 | 0;
   HEAP32[$77 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $78 = __THREW__;
   __THREW__ = 0;
   $79 = $78 & 1;
   if ($79) {
    $80 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $81 = tempRet0;
    ___clang_call_terminate($80), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$4 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2] | 0;
    HEAP32[$4 >> 2] = 0;
    $82 = $4 + 4 | 0;
    HEAP32[$82 >> 2] = 0;
    $83 = $4 + 8 | 0;
    HEAP32[$83 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4), asyncState ? abort(-12) | 0 : 0;
    $84 = HEAP32[$10 >> 2] | 0;
    $85 = $84 + 36 | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = (tempInt = FUNCTION_TABLE_ii[$86 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8588) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   $90 = $89 + 44 | 0;
   $91 = HEAP32[$90 >> 2] | 0;
   FUNCTION_TABLE_vii[$91 & 1023]($5, $88), asyncState ? abort(-12) | 0 : 0;
   $92 = HEAP32[$5 >> 2] | 0;
   HEAP8[$__pat >> 0] = $92 & 255;
   HEAP8[$__pat + 1 >> 0] = $92 >> 8 & 255;
   HEAP8[$__pat + 2 >> 0] = $92 >> 16 & 255;
   HEAP8[$__pat + 3 >> 0] = $92 >> 24;
   $93 = HEAP32[$88 >> 2] | 0;
   $94 = $93 + 32 | 0;
   $95 = HEAP32[$94 >> 2] | 0;
   FUNCTION_TABLE_vii[$95 & 1023]($6, $88), asyncState ? abort(-12) | 0 : 0;
   $96 = HEAP8[$__nsn >> 0] | 0;
   $97 = $96 & 1;
   $98 = $97 << 24 >> 24 == 0;
   if ($98) {
    HEAP8[$__nsn >> 0] = 0;
   } else {
    $99 = $__nsn + 8 | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    HEAP32[$100 >> 2] = 0;
   }
   $101 = $__nsn + 4 | 0;
   HEAP32[$101 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__nsn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $102 = __THREW__;
   __THREW__ = 0;
   $103 = $102 & 1;
   if ($103) {
    $104 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $105 = tempRet0;
    ___clang_call_terminate($104), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
   HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2] | 0;
   HEAP32[$6 >> 2] = 0;
   $106 = $6 + 4 | 0;
   HEAP32[$106 >> 2] = 0;
   $107 = $6 + 8 | 0;
   HEAP32[$107 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6), asyncState ? abort(-12) | 0 : 0;
   $108 = HEAP32[$88 >> 2] | 0;
   $109 = $108 + 28 | 0;
   $110 = HEAP32[$109 >> 2] | 0;
   FUNCTION_TABLE_vii[$110 & 1023]($7, $88), asyncState ? abort(-12) | 0 : 0;
   $111 = HEAP8[$__psn >> 0] | 0;
   $112 = $111 & 1;
   $113 = $112 << 24 >> 24 == 0;
   if ($113) {
    HEAP8[$__psn >> 0] = 0;
   } else {
    $114 = $__psn + 8 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    HEAP32[$115 >> 2] = 0;
   }
   $116 = $__psn + 4 | 0;
   HEAP32[$116 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__psn | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $117 = __THREW__;
   __THREW__ = 0;
   $118 = $117 & 1;
   if ($118) {
    $119 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $120 = tempRet0;
    ___clang_call_terminate($119), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__psn >> 2] = HEAP32[$7 >> 2] | 0;
   HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
   HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2] | 0;
   HEAP32[$7 >> 2] = 0;
   $121 = $7 + 4 | 0;
   HEAP32[$121 >> 2] = 0;
   $122 = $7 + 8 | 0;
   HEAP32[$122 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
   $123 = HEAP32[$88 >> 2] | 0;
   $124 = $123 + 12 | 0;
   $125 = HEAP32[$124 >> 2] | 0;
   $126 = (tempInt = FUNCTION_TABLE_ii[$125 & 1023]($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__dp >> 2] = $126;
   $127 = HEAP32[$88 >> 2] | 0;
   $128 = $127 + 16 | 0;
   $129 = HEAP32[$128 >> 2] | 0;
   $130 = (tempInt = FUNCTION_TABLE_ii[$129 & 1023]($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__ts >> 2] = $130;
   $131 = HEAP32[$88 >> 2] | 0;
   $132 = $131 + 20 | 0;
   $133 = HEAP32[$132 >> 2] | 0;
   FUNCTION_TABLE_vii[$133 & 1023]($8, $88), asyncState ? abort(-12) | 0 : 0;
   $134 = HEAP8[$__grp >> 0] | 0;
   $135 = $134 & 1;
   $136 = $135 << 24 >> 24 == 0;
   if ($136) {
    $140 = $__grp + 1 | 0;
    HEAP8[$140 >> 0] = 0;
    HEAP8[$__grp >> 0] = 0;
   } else {
    $137 = $__grp + 8 | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    HEAP8[$138 >> 0] = 0;
    $139 = $__grp + 4 | 0;
    HEAP32[$139 >> 2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(433, $__grp | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $141 = __THREW__;
   __THREW__ = 0;
   $142 = $141 & 1;
   if ($142) {
    $143 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $144 = tempRet0;
    ___clang_call_terminate($143), asyncState ? abort(-12) | 0 : 0;
   }
   HEAP32[$__grp >> 2] = HEAP32[$8 >> 2] | 0;
   HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2] | 0;
   HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   $145 = $8 + 4 | 0;
   HEAP32[$145 >> 2] = 0;
   $146 = $8 + 8 | 0;
   HEAP32[$146 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8), asyncState ? abort(-12) | 0 : 0;
   $147 = HEAP32[$88 >> 2] | 0;
   $148 = $147 + 24 | 0;
   $149 = HEAP32[$148 >> 2] | 0;
   FUNCTION_TABLE_vii[$149 & 1023]($9, $88), asyncState ? abort(-12) | 0 : 0;
   $150 = HEAP8[$__sym >> 0] | 0;
   $151 = $150 & 1;
   $152 = $151 << 24 >> 24 == 0;
   if ($152) {
    HEAP8[$__sym >> 0] = 0;
   } else {
    $153 = $__sym + 8 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    HEAP32[$154 >> 2] = 0;
   }
   $155 = $__sym + 4 | 0;
   HEAP32[$155 >> 2] = 0;
   __THREW__ = 0;
   invoke_vii(491, $__sym | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $156 = __THREW__;
   __THREW__ = 0;
   $157 = $156 & 1;
   if ($157) {
    $158 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $159 = tempRet0;
    ___clang_call_terminate($158), asyncState ? abort(-12) | 0 : 0;
   } else {
    HEAP32[$__sym >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2] | 0;
    HEAP32[$9 >> 2] = 0;
    $160 = $9 + 4 | 0;
    HEAP32[$160 >> 2] = 0;
    $161 = $9 + 8 | 0;
    HEAP32[$161 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9), asyncState ? abort(-12) | 0 : 0;
    $162 = HEAP32[$88 >> 2] | 0;
    $163 = $162 + 36 | 0;
    $164 = HEAP32[$163 >> 2] | 0;
    $165 = (tempInt = FUNCTION_TABLE_ii[$164 & 1023]($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $storemerge = $165;
    break;
   }
  }
 } while (0);
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE25__construct_node_with_keyERSE_($agg$result, $this, $__k) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 72 | 0;
 $8 = sp + 701 | 0;
 $18 = sp + 628 | 0;
 $19 = sp + 64 | 0;
 $22 = sp + 616 | 0;
 $23 = sp + 608 | 0;
 $24 = sp + 56 | 0;
 $35 = sp + 552 | 0;
 $50 = sp + 48 | 0;
 $55 = sp + 700 | 0;
 $63 = sp + 40 | 0;
 $66 = sp + 699 | 0;
 $77 = sp + 32 | 0;
 $80 = sp + 698 | 0;
 $96 = sp + 324 | 0;
 $97 = sp + 24 | 0;
 $100 = sp + 312 | 0;
 $101 = sp + 304 | 0;
 $102 = sp + 16 | 0;
 $107 = sp + 280 | 0;
 $122 = sp + 8 | 0;
 $125 = sp + 697 | 0;
 $136 = sp;
 $139 = sp + 696 | 0;
 $__h = sp + 96 | 0;
 $153 = sp + 88 | 0;
 $151 = $this;
 $152 = $__k;
 $157 = $151;
 $150 = $157;
 $158 = $150;
 $159 = $158 + 4 | 0;
 $149 = $159;
 $160 = $149;
 $148 = $160;
 $161 = $148;
 $__na = $161;
 $162 = $__na;
 $114 = $162;
 $115 = 1;
 $163 = $114;
 $164 = $115;
 $111 = $163;
 $112 = $164;
 $113 = 0;
 $165 = $112;
 $166 = $165 * 48 | 0;
 $110 = $166;
 $167 = $110;
 $168 = (tempInt = __Znwj($167) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $169 = $__na;
 $108 = $153;
 $109 = $169;
 $170 = $108;
 $171 = $109;
 HEAP32[$170 >> 2] = $171;
 $172 = $170 + 4 | 0;
 HEAP8[$172 >> 0] = 0;
 $173 = $170 + 5 | 0;
 HEAP8[$173 >> 0] = 0;
 $104 = $__h;
 $105 = $168;
 $106 = $153;
 $174 = $104;
 $175 = $105;
 $176 = $106;
 $103 = $176;
 $177 = $103;
 HEAP32[$107 >> 2] = HEAP32[$177 >> 2] | 0;
 HEAP32[$107 + 4 >> 2] = HEAP32[$177 + 4 >> 2] | 0;
 HEAP8[$102 >> 0] = HEAP8[$107 >> 0] | 0;
 HEAP8[$102 + 1 >> 0] = HEAP8[$107 + 1 >> 0] | 0;
 HEAP8[$102 + 2 >> 0] = HEAP8[$107 + 2 >> 0] | 0;
 HEAP8[$102 + 3 >> 0] = HEAP8[$107 + 3 >> 0] | 0;
 HEAP8[$102 + 4 >> 0] = HEAP8[$107 + 4 >> 0] | 0;
 HEAP8[$102 + 5 >> 0] = HEAP8[$107 + 5 >> 0] | 0;
 HEAP8[$102 + 6 >> 0] = HEAP8[$107 + 6 >> 0] | 0;
 HEAP8[$102 + 7 >> 0] = HEAP8[$107 + 7 >> 0] | 0;
 $99 = $174;
 HEAP32[$100 >> 2] = $175;
 $178 = $99;
 $98 = $100;
 $179 = $98;
 $180 = HEAP32[$179 >> 2] | 0;
 $92 = $102;
 $181 = $92;
 HEAP32[$101 >> 2] = HEAP32[$181 >> 2] | 0;
 HEAP32[$101 + 4 >> 2] = HEAP32[$181 + 4 >> 2] | 0;
 HEAP8[$97 >> 0] = HEAP8[$101 >> 0] | 0;
 HEAP8[$97 + 1 >> 0] = HEAP8[$101 + 1 >> 0] | 0;
 HEAP8[$97 + 2 >> 0] = HEAP8[$101 + 2 >> 0] | 0;
 HEAP8[$97 + 3 >> 0] = HEAP8[$101 + 3 >> 0] | 0;
 HEAP8[$97 + 4 >> 0] = HEAP8[$101 + 4 >> 0] | 0;
 HEAP8[$97 + 5 >> 0] = HEAP8[$101 + 5 >> 0] | 0;
 HEAP8[$97 + 6 >> 0] = HEAP8[$101 + 6 >> 0] | 0;
 HEAP8[$97 + 7 >> 0] = HEAP8[$101 + 7 >> 0] | 0;
 $95 = $178;
 HEAP32[$96 >> 2] = $180;
 $182 = $95;
 $94 = $96;
 $183 = $94;
 $184 = HEAP32[$183 >> 2] | 0;
 HEAP32[$182 >> 2] = $184;
 $185 = $182 + 4 | 0;
 $93 = $97;
 $186 = $93;
 HEAP32[$185 >> 2] = HEAP32[$186 >> 2] | 0;
 HEAP32[$185 + 4 >> 2] = HEAP32[$186 + 4 >> 2] | 0;
 $187 = $__na;
 $91 = $__h;
 $188 = $91;
 $90 = $188;
 $189 = $90;
 $89 = $189;
 $190 = $89;
 $191 = HEAP32[$190 >> 2] | 0;
 $192 = $191 + 16 | 0;
 $56 = $192;
 $193 = $56;
 $194 = $152;
 $52 = $187;
 $53 = $193;
 $54 = $194;
 $195 = $52;
 $196 = $53;
 $197 = $54;
 $51 = $197;
 $198 = $51;
 HEAP8[$50 >> 0] = HEAP8[$55 >> 0] | 0;
 $47 = $195;
 $48 = $196;
 $49 = $198;
 $199 = $47;
 $200 = $48;
 $201 = $49;
 $46 = $201;
 $202 = $46;
 $43 = $199;
 $44 = $200;
 $45 = $202;
 $203 = $44;
 $204 = $45;
 $42 = $204;
 $205 = $42;
 __THREW__ = 0;
 invoke_vii(411, $203 | 0, $205 | 0), asyncState ? abort(-12) | 0 : 0;
 $206 = __THREW__;
 __THREW__ = 0;
 $207 = $206 & 1;
 if ($207) {
  $301 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $302 = tempRet0;
  $154 = $301;
  $155 = $302;
  $147 = $__h;
  $303 = $147;
  $145 = $303;
  $146 = 0;
  $304 = $145;
  $144 = $304;
  $305 = $144;
  $143 = $305;
  $306 = $143;
  $307 = HEAP32[$306 >> 2] | 0;
  $__tmp$i$i = $307;
  $308 = $146;
  $119 = $304;
  $309 = $119;
  $118 = $309;
  $310 = $118;
  HEAP32[$310 >> 2] = $308;
  $311 = $__tmp$i$i;
  $312 = ($311 | 0) != (0 | 0);
  if (!$312) {
   $348 = $154;
   $349 = $155;
   ___resumeException($348 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $117 = $304;
  $313 = $117;
  $116 = $313;
  $314 = $116;
  $315 = $314 + 4 | 0;
  $316 = $__tmp$i$i;
  $141 = $315;
  $142 = $316;
  $317 = $141;
  $318 = $317 + 5 | 0;
  $319 = HEAP8[$318 >> 0] | 0;
  $320 = $319 & 1;
  if ($320) {
   $321 = HEAP32[$317 >> 2] | 0;
   $322 = $142;
   $323 = $322 + 16 | 0;
   $324 = $323 + 16 | 0;
   $140 = $324;
   $325 = $140;
   $137 = $321;
   $138 = $325;
   $326 = $137;
   $327 = $138;
   HEAP8[$136 >> 0] = HEAP8[$139 >> 0] | 0;
   $134 = $326;
   $135 = $327;
   $328 = $135;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($328), asyncState ? abort(-12) | 0 : 0;
  }
  $329 = $317 + 4 | 0;
  $330 = HEAP8[$329 >> 0] | 0;
  $331 = $330 & 1;
  if ($331) {
   $332 = HEAP32[$317 >> 2] | 0;
   $333 = $142;
   $334 = $333 + 16 | 0;
   $133 = $334;
   $335 = $133;
   $123 = $332;
   $124 = $335;
   $336 = $123;
   $337 = $124;
   HEAP8[$122 >> 0] = HEAP8[$125 >> 0] | 0;
   $120 = $336;
   $121 = $337;
   $338 = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($338), asyncState ? abort(-12) | 0 : 0;
  }
  $339 = $142;
  $340 = ($339 | 0) != (0 | 0);
  if (!$340) {
   $348 = $154;
   $349 = $155;
   ___resumeException($348 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $341 = HEAP32[$317 >> 2] | 0;
  $342 = $142;
  $130 = $341;
  $131 = $342;
  $132 = 1;
  $343 = $130;
  $344 = $131;
  $345 = $132;
  $127 = $343;
  $128 = $344;
  $129 = $345;
  $346 = $128;
  $126 = $346;
  $347 = $126;
  __ZdlPv($347), asyncState ? abort(-12) | 0 : 0;
  $348 = $154;
  $349 = $155;
  ___resumeException($348 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $41 = $__h;
  $208 = $41;
  $40 = $208;
  $209 = $40;
  $39 = $209;
  $210 = $39;
  $211 = $210 + 4 | 0;
  $212 = $211 + 4 | 0;
  HEAP8[$212 >> 0] = 1;
  $213 = $__na;
  $38 = $__h;
  $214 = $38;
  $37 = $214;
  $215 = $37;
  $36 = $215;
  $216 = $36;
  $217 = HEAP32[$216 >> 2] | 0;
  $218 = $217 + 16 | 0;
  $219 = $218 + 16 | 0;
  $0 = $219;
  $220 = $0;
  $6 = $213;
  $7 = $220;
  $221 = $6;
  $222 = $7;
  HEAP8[$5 >> 0] = HEAP8[$8 >> 0] | 0;
  $3 = $221;
  $4 = $222;
  $223 = $3;
  $224 = $4;
  $1 = $223;
  $2 = $224;
  $225 = $2;
  HEAP32[$225 >> 2] = 0 | 0;
  HEAP32[$225 + 4 >> 2] = 0 | 0;
  HEAP32[$225 + 8 >> 2] = 0 | 0;
  HEAP32[$225 + 12 >> 2] = 0 | 0;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev($225), asyncState ? abort(-12) | 0 : 0;
  $11 = $__h;
  $226 = $11;
  $10 = $226;
  $227 = $10;
  $9 = $227;
  $228 = $9;
  $229 = $228 + 4 | 0;
  $230 = $229 + 5 | 0;
  HEAP8[$230 >> 0] = 1;
  $12 = $__h;
  $231 = $12;
  $33 = $agg$result;
  $34 = $231;
  $232 = $33;
  $233 = $34;
  $32 = $233;
  $234 = $32;
  $31 = $234;
  $235 = $31;
  $30 = $235;
  $236 = $30;
  $237 = HEAP32[$236 >> 2] | 0;
  $__t$i$i = $237;
  $29 = $234;
  $238 = $29;
  $28 = $238;
  $239 = $28;
  HEAP32[$239 >> 2] = 0;
  $240 = $__t$i$i;
  $241 = $34;
  $27 = $241;
  $242 = $27;
  $26 = $242;
  $243 = $26;
  $25 = $243;
  $244 = $25;
  $245 = $244 + 4 | 0;
  $13 = $245;
  $246 = $13;
  HEAP32[$35 >> 2] = HEAP32[$246 >> 2] | 0;
  HEAP32[$35 + 4 >> 2] = HEAP32[$246 + 4 >> 2] | 0;
  HEAP8[$24 >> 0] = HEAP8[$35 >> 0] | 0;
  HEAP8[$24 + 1 >> 0] = HEAP8[$35 + 1 >> 0] | 0;
  HEAP8[$24 + 2 >> 0] = HEAP8[$35 + 2 >> 0] | 0;
  HEAP8[$24 + 3 >> 0] = HEAP8[$35 + 3 >> 0] | 0;
  HEAP8[$24 + 4 >> 0] = HEAP8[$35 + 4 >> 0] | 0;
  HEAP8[$24 + 5 >> 0] = HEAP8[$35 + 5 >> 0] | 0;
  HEAP8[$24 + 6 >> 0] = HEAP8[$35 + 6 >> 0] | 0;
  HEAP8[$24 + 7 >> 0] = HEAP8[$35 + 7 >> 0] | 0;
  $21 = $232;
  HEAP32[$22 >> 2] = $240;
  $247 = $21;
  $20 = $22;
  $248 = $20;
  $249 = HEAP32[$248 >> 2] | 0;
  $14 = $24;
  $250 = $14;
  HEAP32[$23 >> 2] = HEAP32[$250 >> 2] | 0;
  HEAP32[$23 + 4 >> 2] = HEAP32[$250 + 4 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$23 >> 0] | 0;
  HEAP8[$19 + 1 >> 0] = HEAP8[$23 + 1 >> 0] | 0;
  HEAP8[$19 + 2 >> 0] = HEAP8[$23 + 2 >> 0] | 0;
  HEAP8[$19 + 3 >> 0] = HEAP8[$23 + 3 >> 0] | 0;
  HEAP8[$19 + 4 >> 0] = HEAP8[$23 + 4 >> 0] | 0;
  HEAP8[$19 + 5 >> 0] = HEAP8[$23 + 5 >> 0] | 0;
  HEAP8[$19 + 6 >> 0] = HEAP8[$23 + 6 >> 0] | 0;
  HEAP8[$19 + 7 >> 0] = HEAP8[$23 + 7 >> 0] | 0;
  $17 = $247;
  HEAP32[$18 >> 2] = $249;
  $251 = $17;
  $16 = $18;
  $252 = $16;
  $253 = HEAP32[$252 >> 2] | 0;
  HEAP32[$251 >> 2] = $253;
  $254 = $251 + 4 | 0;
  $15 = $19;
  $255 = $15;
  HEAP32[$254 >> 2] = HEAP32[$255 >> 2] | 0;
  HEAP32[$254 + 4 >> 2] = HEAP32[$255 + 4 >> 2] | 0;
  $156 = 1;
  $88 = $__h;
  $256 = $88;
  $86 = $256;
  $87 = 0;
  $257 = $86;
  $85 = $257;
  $258 = $85;
  $84 = $258;
  $259 = $84;
  $260 = HEAP32[$259 >> 2] | 0;
  $__tmp$i$i1 = $260;
  $261 = $87;
  $60 = $257;
  $262 = $60;
  $59 = $262;
  $263 = $59;
  HEAP32[$263 >> 2] = $261;
  $264 = $__tmp$i$i1;
  $265 = ($264 | 0) != (0 | 0);
  if (!$265) {
   STACKTOP = sp;
   return;
  }
  $58 = $257;
  $266 = $58;
  $57 = $266;
  $267 = $57;
  $268 = $267 + 4 | 0;
  $269 = $__tmp$i$i1;
  $82 = $268;
  $83 = $269;
  $270 = $82;
  $271 = $270 + 5 | 0;
  $272 = HEAP8[$271 >> 0] | 0;
  $273 = $272 & 1;
  if ($273) {
   $274 = HEAP32[$270 >> 2] | 0;
   $275 = $83;
   $276 = $275 + 16 | 0;
   $277 = $276 + 16 | 0;
   $81 = $277;
   $278 = $81;
   $78 = $274;
   $79 = $278;
   $279 = $78;
   $280 = $79;
   HEAP8[$77 >> 0] = HEAP8[$80 >> 0] | 0;
   $75 = $279;
   $76 = $280;
   $281 = $76;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($281), asyncState ? abort(-12) | 0 : 0;
  }
  $282 = $270 + 4 | 0;
  $283 = HEAP8[$282 >> 0] | 0;
  $284 = $283 & 1;
  if ($284) {
   $285 = HEAP32[$270 >> 2] | 0;
   $286 = $83;
   $287 = $286 + 16 | 0;
   $74 = $287;
   $288 = $74;
   $64 = $285;
   $65 = $288;
   $289 = $64;
   $290 = $65;
   HEAP8[$63 >> 0] = HEAP8[$66 >> 0] | 0;
   $61 = $289;
   $62 = $290;
   $291 = $62;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($291), asyncState ? abort(-12) | 0 : 0;
  }
  $292 = $83;
  $293 = ($292 | 0) != (0 | 0);
  if (!$293) {
   STACKTOP = sp;
   return;
  }
  $294 = HEAP32[$270 >> 2] | 0;
  $295 = $83;
  $71 = $294;
  $72 = $295;
  $73 = 1;
  $296 = $71;
  $297 = $72;
  $298 = $73;
  $68 = $296;
  $69 = $297;
  $70 = $298;
  $299 = $69;
  $67 = $299;
  $300 = $67;
  __ZdlPv($300), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$216 = 0, $__neg = 0, $__w$017 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 472 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72 | 0;
 $__wb = sp + 64 | 0;
 $__wn = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__neg = sp + 576 | 0;
 $0 = sp + 48 | 0;
 $__atoms = sp + 8 | 0;
 $__nbuf = sp + 476 | 0;
 $1 = $__wbuf;
 HEAP32[$__wb >> 2] = $1;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 $3 = $__wbuf + 400 | 0;
 __THREW__ = 0;
 $4 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $34 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $35 = tempRet0;
  HEAP32[$__wb >> 2] = 0;
  $$112 = $34;
  $$1210 = $35;
  $121 = 478;
  $122 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc >> 2] = $4;
  __THREW__ = 0;
  $7 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = __THREW__;
  __THREW__ = 0;
  $9 = $8 & 1;
  L4 : do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg >> 0] = 0;
    $10 = HEAP32[$__e >> 2] | 0;
    HEAP32[$0 >> 2] = $10;
    $11 = $__iob + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
    $13 = (tempInt = invoke_iiiiiiiiiiii(486, $__b | 0, $$byval_copy | 0, $__intl | 0, $__loc | 0, $12 | 0, $__err | 0, $__neg | 0, $7 | 0, $__wb | 0, $__wn | 0, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $14 = __THREW__;
    __THREW__ = 0;
    $15 = $14 & 1;
    if ($15) {
     label = 10;
    } else {
     L7 : do {
      if ($13) {
       $16 = HEAP32[$7 >> 2] | 0;
       $17 = $16 + 48 | 0;
       $18 = HEAP32[$17 >> 2] | 0;
       __THREW__ = 0;
       (tempInt = invoke_iiiii($18 | 0, $7 | 0, 21728 | 0, 21738 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $19 = __THREW__;
       __THREW__ = 0;
       $20 = $19 & 1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn >> 2] | 0;
       $22 = HEAP32[$__wb >> 2] | 0;
       $23 = $21;
       $24 = $22;
       $25 = $23 - $24 | 0;
       $26 = ($25 | 0) > 392;
       if ($26) {
        $27 = $25 >> 2;
        $28 = $27 + 2 | 0;
        $29 = (tempInt = _malloc($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $30 = $29;
        $31 = ($29 | 0) == (0 | 0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(468), asyncState ? abort(-12) | 0 : 0;
         $32 = __THREW__;
         __THREW__ = 0;
         $33 = $32 & 1;
         if ($33) {
          $41 = $30;
         } else {
          $76 = $30;
          $__nc$0 = 0;
          label = 13;
         }
        } else {
         $76 = $30;
         $__nc$0 = $29;
         label = 13;
        }
       } else {
        $76 = 0;
        $__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label | 0) == 13) {
         $43 = HEAP8[$__neg >> 0] | 0;
         $44 = $43 << 24 >> 24 == 0;
         if ($44) {
          $__nc$1 = $__nc$0;
         } else {
          $45 = $__nc$0 + 1 | 0;
          HEAP8[$__nc$0 >> 0] = 45;
          $__nc$1 = $45;
         }
         $46 = $__atoms + 40 | 0;
         $47 = $__atoms;
         $48 = $22 >>> 0 < $21 >>> 0;
         if ($48) {
          $49 = $__atoms + 4 | 0;
          $50 = $49 + 4 | 0;
          $51 = $50 + 4 | 0;
          $52 = $51 + 4 | 0;
          $53 = $52 + 4 | 0;
          $54 = $53 + 4 | 0;
          $55 = $54 + 4 | 0;
          $56 = $55 + 4 | 0;
          $57 = $56 + 4 | 0;
          $__nc$216 = $__nc$1;
          $__w$017 = $22;
          while (1) {
           $58 = HEAP32[$__w$017 >> 2] | 0;
           $59 = HEAP32[$__atoms >> 2] | 0;
           $60 = ($59 | 0) == ($58 | 0);
           do {
            if ($60) {
             $$0$lcssa$i = $__atoms;
            } else {
             $61 = HEAP32[$49 >> 2] | 0;
             $62 = ($61 | 0) == ($58 | 0);
             if ($62) {
              $$0$lcssa$i = $49;
             } else {
              $127 = HEAP32[$50 >> 2] | 0;
              $128 = ($127 | 0) == ($58 | 0);
              if ($128) {
               $$0$lcssa$i = $50;
              } else {
               $129 = HEAP32[$51 >> 2] | 0;
               $130 = ($129 | 0) == ($58 | 0);
               if ($130) {
                $$0$lcssa$i = $51;
               } else {
                $131 = HEAP32[$52 >> 2] | 0;
                $132 = ($131 | 0) == ($58 | 0);
                if ($132) {
                 $$0$lcssa$i = $52;
                } else {
                 $133 = HEAP32[$53 >> 2] | 0;
                 $134 = ($133 | 0) == ($58 | 0);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP32[$54 >> 2] | 0;
                 $136 = ($135 | 0) == ($58 | 0);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP32[$55 >> 2] | 0;
                 $138 = ($137 | 0) == ($58 | 0);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP32[$56 >> 2] | 0;
                 $140 = ($139 | 0) == ($58 | 0);
                 if ($140) {
                  $$0$lcssa$i = $56;
                  break;
                 }
                 $141 = HEAP32[$57 >> 2] | 0;
                 $142 = ($141 | 0) == ($58 | 0);
                 $$ = $142 ? $57 : $46;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while (0);
           $63 = $$0$lcssa$i;
           $64 = $63 - $47 | 0;
           $65 = $64 >> 2;
           $66 = 21728 + $65 | 0;
           $67 = HEAP8[$66 >> 0] | 0;
           HEAP8[$__nc$216 >> 0] = $67;
           $68 = $__w$017 + 4 | 0;
           $69 = $__nc$216 + 1 | 0;
           $$pre = HEAP32[$__wn >> 2] | 0;
           $70 = $68 >>> 0 < $$pre >>> 0;
           if ($70) {
            $__nc$216 = $69;
            $__w$017 = $68;
           } else {
            $__nc$2$lcssa = $69;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa >> 0] = 0;
         HEAP32[$vararg_buffer >> 2] = $__v;
         $71 = (tempInt = _sscanf($__nbuf, 21708, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $72 = ($71 | 0) == 1;
         if (!$72) {
          __THREW__ = 0;
          invoke_vi(480, 21712 | 0), asyncState ? abort(-12) | 0 : 0;
          $73 = __THREW__;
          __THREW__ = 0;
          $74 = $73 & 1;
          if ($74) {
           $41 = $76;
           break;
          }
         }
         $75 = ($76 | 0) == 0;
         if (!$75) {
          $77 = $76;
          _free($77), asyncState ? abort(-12) | 0 : 0;
         }
         break L7;
        }
       } while (0);
       $38 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $39 = tempRet0;
       $40 = ($41 | 0) == 0;
       if ($40) {
        $$0 = $38;
        $$01 = $39;
        $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $42 = $41;
       _free($42), asyncState ? abort(-12) | 0 : 0;
       $$0 = $38;
       $$01 = $39;
       $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while (0);
     $78 = HEAP32[$__b >> 2] | 0;
     $79 = ($78 | 0) == (0 | 0);
     do {
      if ($79) {
       $143 = 1;
      } else {
       $80 = $78 + 12 | 0;
       $81 = HEAP32[$80 >> 2] | 0;
       $82 = $78 + 16 | 0;
       $83 = HEAP32[$82 >> 2] | 0;
       $84 = ($81 | 0) == ($83 | 0);
       if ($84) {
        $85 = HEAP32[$78 >> 2] | 0;
        $86 = $85 + 36 | 0;
        $87 = HEAP32[$86 >> 2] | 0;
        __THREW__ = 0;
        $88 = (tempInt = invoke_ii($87 | 0, $78 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $89 = __THREW__;
        __THREW__ = 0;
        $90 = $89 & 1;
        if ($90) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $88;
        }
       } else {
        $91 = HEAP32[$81 >> 2] | 0;
        $$0$i$i$i$i = $91;
       }
       $92 = ($$0$i$i$i$i | 0) == -1;
       if ($92) {
        HEAP32[$__b >> 2] = 0;
        $143 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
        $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
        $143 = $phitmp$i$i$i;
        break;
       }
      }
     } while (0);
     $93 = HEAP32[$__e >> 2] | 0;
     $94 = ($93 | 0) == (0 | 0);
     do {
      if ($94) {
       label = 38;
      } else {
       $95 = $93 + 12 | 0;
       $96 = HEAP32[$95 >> 2] | 0;
       $97 = $93 + 16 | 0;
       $98 = HEAP32[$97 >> 2] | 0;
       $99 = ($96 | 0) == ($98 | 0);
       if ($99) {
        $100 = HEAP32[$93 >> 2] | 0;
        $101 = $100 + 36 | 0;
        $102 = HEAP32[$101 >> 2] | 0;
        __THREW__ = 0;
        $103 = (tempInt = invoke_ii($102 | 0, $93 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $104 = __THREW__;
        __THREW__ = 0;
        $105 = $104 & 1;
        if ($105) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $103;
        }
       } else {
        $106 = HEAP32[$96 >> 2] | 0;
        $$0$i$i1$i$i = $106;
       }
       $107 = ($$0$i$i1$i$i | 0) == -1;
       if ($107) {
        HEAP32[$__e >> 2] = 0;
        label = 38;
        break;
       } else {
        if ($143) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 38) {
      if ($143) {
       label = 40;
      }
     }
     if ((label | 0) == 40) {
      $108 = HEAP32[$__err >> 2] | 0;
      $109 = $108 | 2;
      HEAP32[$__err >> 2] = $109;
     }
     $110 = HEAP32[$__b >> 2] | 0;
     $111 = HEAP32[$__loc >> 2] | 0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($111) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $112 = HEAP32[$__wb >> 2] | 0;
     HEAP32[$__wb >> 2] = 0;
     $113 = ($112 | 0) == (0 | 0);
     if (!$113) {
      $114 = HEAP32[$2 >> 2] | 0;
      __THREW__ = 0;
      invoke_vi($114 | 0, $112 | 0), asyncState ? abort(-12) | 0 : 0;
      $115 = __THREW__;
      __THREW__ = 0;
      $116 = $115 & 1;
      if ($116) {
       $117 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $118 = tempRet0;
       ___clang_call_terminate($117), asyncState ? abort(-12) | 0 : 0;
      }
     }
     STACKTOP = sp;
     return $110 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 10) {
   $36 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $37 = tempRet0;
   $$0 = $36;
   $$01 = $37;
   $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $119 = HEAP32[$__loc >> 2] | 0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($119) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$pre6 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D >> 2] | 0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D >> 2] = 0;
  $120 = ($$pre6 | 0) == (0 | 0);
  if ($120) {
   $$113 = $$0;
   $$1211 = $$01;
  } else {
   $$pre14 = HEAP32[$2 >> 2] | 0;
   $$112 = $$0;
   $$1210 = $$01;
   $121 = $$pre14;
   $122 = $$pre6;
   label = 47;
  }
 }
 if ((label | 0) == 47) {
  __THREW__ = 0;
  invoke_vi($121 | 0, $122 | 0), asyncState ? abort(-12) | 0 : 0;
  $123 = __THREW__;
  __THREW__ = 0;
  $124 = $123 & 1;
  if ($124) {
   $125 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $126 = tempRet0;
   ___clang_call_terminate($125), asyncState ? abort(-12) | 0 : 0;
  } else {
   $$113 = $$112;
   $$1211 = $$1210;
  }
 }
 ___resumeException($$113 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __Z9WriteFileRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_($path, $data) {
 $path = $path | 0;
 $data = $data | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $fot = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $53 = sp + 452 | 0;
 $fot = sp + 40 | 0;
 $58 = sp + 16 | 0;
 $59 = sp + 4 | 0;
 $54 = $path;
 $55 = $data;
 $61 = $54;
 $52 = $61;
 $62 = $52;
 $51 = $62;
 $63 = $51;
 $50 = $63;
 $64 = $50;
 $49 = $64;
 $65 = $49;
 $48 = $65;
 $66 = $48;
 $47 = $66;
 $67 = $47;
 $68 = HEAP8[$67 >> 0] | 0;
 $69 = $68 & 255;
 $70 = $69 & 1;
 $71 = ($70 | 0) != 0;
 if ($71) {
  $41 = $64;
  $72 = $41;
  $40 = $72;
  $73 = $40;
  $39 = $73;
  $74 = $39;
  $75 = $74 + 8 | 0;
  $76 = HEAP32[$75 >> 2] | 0;
  $83 = $76;
 } else {
  $46 = $64;
  $77 = $46;
  $45 = $77;
  $78 = $45;
  $44 = $78;
  $79 = $44;
  $80 = $79 + 1 | 0;
  $43 = $80;
  $81 = $43;
  $42 = $81;
  $82 = $42;
  $83 = $82;
 }
 $38 = $83;
 $84 = $38;
 $33 = $fot;
 $34 = $84;
 $35 = 16;
 $85 = $33;
 $86 = $85 + 104 | 0;
 $32 = $86;
 $87 = $32;
 $31 = $87;
 $88 = $31;
 $89 = 7764;
 HEAP32[$88 >> 2] = $89;
 $90 = 7664;
 HEAP32[$87 >> 2] = $90;
 $91 = 2636;
 HEAP32[$85 >> 2] = $91;
 $92 = $85 + 104 | 0;
 $93 = 2656;
 HEAP32[$92 >> 2] = $93;
 $94 = $85 + 4 | 0;
 $28 = $85;
 $95 = 2668;
 $29 = $95;
 $30 = $94;
 $96 = $28;
 $97 = $29;
 $98 = HEAP32[$97 >> 2] | 0;
 HEAP32[$96 >> 2] = $98;
 $99 = $97 + 4 | 0;
 $100 = HEAP32[$99 >> 2] | 0;
 $101 = HEAP32[$96 >> 2] | 0;
 $102 = $101 + -12 | 0;
 $103 = HEAP32[$102 >> 2] | 0;
 $104 = $96 + $103 | 0;
 HEAP32[$104 >> 2] = $100;
 $105 = HEAP32[$96 >> 2] | 0;
 $106 = $105 + -12 | 0;
 $107 = HEAP32[$106 >> 2] | 0;
 $108 = $96 + $107 | 0;
 $109 = $30;
 $26 = $108;
 $27 = $109;
 $110 = $26;
 $111 = $27;
 __THREW__ = 0;
 invoke_vii(366, $110 | 0, $111 | 0), asyncState ? abort(-12) | 0 : 0;
 $112 = __THREW__;
 __THREW__ = 0;
 $113 = $112 & 1;
 if ($113) {
  $144 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $145 = tempRet0;
  $36 = $144;
  $37 = $145;
  $150 = $85 + 104 | 0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($150), asyncState ? abort(-12) | 0 : 0;
  $151 = $36;
  $152 = $37;
  ___resumeException($151 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $114 = $110 + 72 | 0;
 HEAP32[$114 >> 2] = 0;
 $115 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $116 = $110 + 76 | 0;
 HEAP32[$116 >> 2] = $115;
 $117 = 2636;
 HEAP32[$85 >> 2] = $117;
 $118 = $85 + 104 | 0;
 $119 = 2656;
 HEAP32[$118 >> 2] = $119;
 $120 = $85 + 4 | 0;
 __THREW__ = 0;
 invoke_vi(399, $120 | 0), asyncState ? abort(-12) | 0 : 0;
 $121 = __THREW__;
 __THREW__ = 0;
 $122 = $121 & 1;
 if ($122) {
  $146 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $147 = tempRet0;
  $36 = $146;
  $37 = $147;
 } else {
  $123 = $85 + 4 | 0;
  $124 = $34;
  $125 = $35;
  $126 = $125 | 16;
  __THREW__ = 0;
  $127 = (tempInt = invoke_iiii(400, $123 | 0, $124 | 0, $126 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $128 = __THREW__;
  __THREW__ = 0;
  $129 = $128 & 1;
  do {
   if (!$129) {
    $130 = ($127 | 0) == (0 | 0);
    if ($130) {
     $131 = HEAP32[$85 >> 2] | 0;
     $132 = $131 + -12 | 0;
     $133 = HEAP32[$132 >> 2] | 0;
     $134 = $85 + $133 | 0;
     $24 = $134;
     $25 = 4;
     $135 = $24;
     $136 = $25;
     $22 = $135;
     $23 = $136;
     $137 = $22;
     $138 = $137 + 16 | 0;
     $139 = HEAP32[$138 >> 2] | 0;
     $140 = $23;
     $141 = $139 | $140;
     __THREW__ = 0;
     invoke_vii(394, $137 | 0, $141 | 0), asyncState ? abort(-12) | 0 : 0;
     $142 = __THREW__;
     __THREW__ = 0;
     $143 = $142 & 1;
     if ($143) {
      break;
     }
    }
    $21 = $fot;
    $153 = $21;
    $154 = $153 + 4 | 0;
    $20 = $154;
    $155 = $20;
    $156 = $155 + 64 | 0;
    $157 = HEAP32[$156 >> 2] | 0;
    $158 = ($157 | 0) != (0 | 0);
    do {
     if ($158) {
      $195 = $55;
      __THREW__ = 0;
      (tempInt = invoke_iii(403, $fot | 0, $195 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $196 = __THREW__;
      __THREW__ = 0;
      $197 = $196 & 1;
      if (!$197) {
       $198 = HEAP32[$fot >> 2] | 0;
       $199 = $198 + -12 | 0;
       $200 = HEAP32[$199 >> 2] | 0;
       $201 = $fot + $200 | 0;
       $8 = $201;
       $202 = $8;
       $7 = $202;
       $203 = $7;
       $204 = $203 + 16 | 0;
       $205 = HEAP32[$204 >> 2] | 0;
       $206 = ($205 | 0) == 0;
       if ($206) {
        __THREW__ = 0;
        $207 = (tempInt = invoke_iii(404, 2368 | 0, 13698 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $208 = __THREW__;
        __THREW__ = 0;
        $209 = $208 & 1;
        if ($209) {
         break;
        }
        $210 = $55;
        __THREW__ = 0;
        $211 = (tempInt = invoke_iii(403, $207 | 0, $210 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $212 = __THREW__;
        __THREW__ = 0;
        $213 = $212 & 1;
        if ($213) {
         break;
        }
        __THREW__ = 0;
        $214 = (tempInt = invoke_iii(404, $211 | 0, 13720 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $215 = __THREW__;
        __THREW__ = 0;
        $216 = $215 & 1;
        if ($216) {
         break;
        }
        $217 = $54;
        __THREW__ = 0;
        $218 = (tempInt = invoke_iii(403, $214 | 0, $217 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $219 = __THREW__;
        __THREW__ = 0;
        $220 = $219 & 1;
        if ($220) {
         break;
        }
        $5 = $218;
        $6 = 397;
        $221 = $5;
        $222 = $6;
        __THREW__ = 0;
        (tempInt = invoke_ii($222 | 0, $221 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $223 = __THREW__;
        __THREW__ = 0;
        $224 = $223 & 1;
        if ($224) {
         break;
        }
       }
       $4 = $fot;
       $225 = $4;
       $226 = $225 + 4 | 0;
       __THREW__ = 0;
       $227 = (tempInt = invoke_ii(405, $226 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $228 = __THREW__;
       __THREW__ = 0;
       $229 = $228 & 1;
       if (!$229) {
        $230 = ($227 | 0) == (0 | 0);
        if ($230) {
         $231 = HEAP32[$225 >> 2] | 0;
         $232 = $231 + -12 | 0;
         $233 = HEAP32[$232 >> 2] | 0;
         $234 = $225 + $233 | 0;
         $2 = $234;
         $3 = 4;
         $235 = $2;
         $236 = $3;
         $0 = $235;
         $1 = $236;
         $237 = $0;
         $238 = $237 + 16 | 0;
         $239 = HEAP32[$238 >> 2] | 0;
         $240 = $1;
         $241 = $239 | $240;
         __THREW__ = 0;
         invoke_vii(394, $237 | 0, $241 | 0), asyncState ? abort(-12) | 0 : 0;
         $242 = __THREW__;
         __THREW__ = 0;
         $243 = $242 & 1;
         if ($243) {
          break;
         }
        }
        $$expand_i1_val2 = 1;
        HEAP8[$53 >> 0] = $$expand_i1_val2;
        $60 = 1;
        __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($fot), asyncState ? abort(-12) | 0 : 0;
        $$pre_trunc = HEAP8[$53 >> 0] | 0;
        $244 = $$pre_trunc & 1;
        STACKTOP = sp;
        return $244 | 0;
       }
      }
     } else {
      $159 = $54;
      __THREW__ = 0;
      invoke_viii(401, $59 | 0, 13663 | 0, $159 | 0), asyncState ? abort(-12) | 0 : 0;
      $160 = __THREW__;
      __THREW__ = 0;
      $161 = $160 & 1;
      if (!$161) {
       $18 = $59;
       $19 = 13684;
       $162 = $18;
       $163 = $19;
       __THREW__ = 0;
       $164 = (tempInt = invoke_iii(402, $162 | 0, $163 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       $166 = $165 & 1;
       if ($166) {
        $191 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $192 = tempRet0;
        $56 = $191;
        $57 = $192;
       } else {
        $17 = $164;
        $167 = $17;
        $15 = $58;
        $16 = $167;
        $168 = $15;
        $169 = $16;
        $14 = $169;
        $170 = $14;
        HEAP32[$168 >> 2] = HEAP32[$170 >> 2] | 0;
        HEAP32[$168 + 4 >> 2] = HEAP32[$170 + 4 >> 2] | 0;
        HEAP32[$168 + 8 >> 2] = HEAP32[$170 + 8 >> 2] | 0;
        $171 = $16;
        $13 = $171;
        $172 = $13;
        $12 = $172;
        $173 = $12;
        $11 = $173;
        $174 = $11;
        $__a$i$i$i = $174;
        $__i$i$i$i = 0;
        while (1) {
         $175 = $__i$i$i$i;
         $176 = $175 >>> 0 < 3;
         if (!$176) {
          break;
         }
         $177 = $__i$i$i$i;
         $178 = $__a$i$i$i;
         $179 = $178 + ($177 << 2) | 0;
         HEAP32[$179 >> 2] = 0;
         $180 = $__i$i$i$i;
         $181 = $180 + 1 | 0;
         $__i$i$i$i = $181;
        }
        __THREW__ = 0;
        $182 = (tempInt = invoke_iii(403, 2368 | 0, $58 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $183 = __THREW__;
        __THREW__ = 0;
        $184 = $183 & 1;
        if (!$184) {
         $9 = $182;
         $10 = 397;
         $185 = $9;
         $186 = $10;
         __THREW__ = 0;
         (tempInt = invoke_ii($186 | 0, $185 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $187 = __THREW__;
         __THREW__ = 0;
         $188 = $187 & 1;
         if (!$188) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($58), asyncState ? abort(-12) | 0 : 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($59), asyncState ? abort(-12) | 0 : 0;
          $$expand_i1_val = 0;
          HEAP8[$53 >> 0] = $$expand_i1_val;
          $60 = 1;
          __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($fot), asyncState ? abort(-12) | 0 : 0;
          $$pre_trunc = HEAP8[$53 >> 0] | 0;
          $244 = $$pre_trunc & 1;
          STACKTOP = sp;
          return $244 | 0;
         }
        }
        $193 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $194 = tempRet0;
        $56 = $193;
        $57 = $194;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($58), asyncState ? abort(-12) | 0 : 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($59), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($fot), asyncState ? abort(-12) | 0 : 0;
       $245 = $56;
       $246 = $57;
       ___resumeException($245 | 0), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $189 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $190 = tempRet0;
    $56 = $189;
    $57 = $190;
    __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($fot), asyncState ? abort(-12) | 0 : 0;
    $245 = $56;
    $246 = $57;
    ___resumeException($245 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  } while (0);
  $148 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $149 = tempRet0;
  $36 = $148;
  $37 = $149;
  __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($120), asyncState ? abort(-12) | 0 : 0;
 }
 $150 = $85 + 104 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($150), asyncState ? abort(-12) | 0 : 0;
 $151 = $36;
 $152 = $37;
 ___resumeException($151 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP32[$__decimal_point >> 2] | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i6 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i6 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $157 = 1;
    } else {
     $21 = $$pre$i$i$i6 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i6 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i6 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;
      $157 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$17 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i24 = $66 + -1 | 0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$13 >> 2] | 0;
     $74 = $72 ? $15 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   $112 = HEAP8[$__in_units >> 0] | 0;
   $113 = $112 << 24 >> 24 == 0;
   $or$cond = $113 | $111;
   if (!$or$cond) {
    $114 = HEAP32[$__g_end >> 2] | 0;
    $115 = $114;
    $116 = $__g;
    $117 = $115 - $116 | 0;
    $118 = ($117 | 0) < 160;
    if ($118) {
     $119 = HEAP32[$__dc >> 2] | 0;
     $120 = $114 + 4 | 0;
     HEAP32[$__g_end >> 2] = $120;
     HEAP32[$114 >> 2] = $119;
    }
   }
   $121 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $122 = +(tempDouble = +invoke_diii(559, $__a$2 | 0, $121 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $123 = __THREW__;
   __THREW__ = 0;
   $124 = $123 & 1;
   if ($124) {
    label = 26;
   } else {
    HEAPF32[$__v >> 2] = $122;
    $125 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $125, $__err), asyncState ? abort(-12) | 0 : 0;
    $126 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = $$pre$i$i$i$lcssa + 12 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = $$pre$i$i$i$lcssa + 16 | 0;
     $130 = HEAP32[$129 >> 2] | 0;
     $131 = ($128 | 0) == ($130 | 0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $133 = $132 + 36 | 0;
      $134 = HEAP32[$133 >> 2] | 0;
      __THREW__ = 0;
      $135 = (tempInt = invoke_ii($134 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $136 = __THREW__;
      __THREW__ = 0;
      $137 = $136 & 1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128 >> 2] | 0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i | 0) == -1;
     if ($139) {
      HEAP32[$__b >> 2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = $$pre$i3$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i3$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142 >> 2] | 0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i | 0) == -1;
      if ($153) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $154 = HEAP32[$__err >> 2] | 0;
     $155 = $154 | 2;
     HEAP32[$__err >> 2] = $155;
    }
    $156 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $156 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP32[$__decimal_point >> 2] | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i6 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i6 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $157 = 1;
    } else {
     $21 = $$pre$i$i$i6 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i6 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i6 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;
      $157 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$17 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i24 = $66 + -1 | 0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$13 >> 2] | 0;
     $74 = $72 ? $15 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   $112 = HEAP8[$__in_units >> 0] | 0;
   $113 = $112 << 24 >> 24 == 0;
   $or$cond = $113 | $111;
   if (!$or$cond) {
    $114 = HEAP32[$__g_end >> 2] | 0;
    $115 = $114;
    $116 = $__g;
    $117 = $115 - $116 | 0;
    $118 = ($117 | 0) < 160;
    if ($118) {
     $119 = HEAP32[$__dc >> 2] | 0;
     $120 = $114 + 4 | 0;
     HEAP32[$__g_end >> 2] = $120;
     HEAP32[$114 >> 2] = $119;
    }
   }
   $121 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $122 = +(tempDouble = +invoke_diii(561, $__a$2 | 0, $121 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $123 = __THREW__;
   __THREW__ = 0;
   $124 = $123 & 1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v >> 3] = $122;
    $125 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $125, $__err), asyncState ? abort(-12) | 0 : 0;
    $126 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = $$pre$i$i$i$lcssa + 12 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = $$pre$i$i$i$lcssa + 16 | 0;
     $130 = HEAP32[$129 >> 2] | 0;
     $131 = ($128 | 0) == ($130 | 0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $133 = $132 + 36 | 0;
      $134 = HEAP32[$133 >> 2] | 0;
      __THREW__ = 0;
      $135 = (tempInt = invoke_ii($134 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $136 = __THREW__;
      __THREW__ = 0;
      $137 = $136 & 1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128 >> 2] | 0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i | 0) == -1;
     if ($139) {
      HEAP32[$__b >> 2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = $$pre$i3$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i3$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142 >> 2] | 0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i | 0) == -1;
      if ($153) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $154 = HEAP32[$__err >> 2] | 0;
     $155 = $154 | 2;
     HEAP32[$__err >> 2] = $155;
    }
    $156 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $156 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP32[$__decimal_point >> 2] | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i6 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i6 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $157 = 1;
    } else {
     $21 = $$pre$i$i$i6 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i6 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i6 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;
      $157 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$17 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i24 = $66 + -1 | 0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$13 >> 2] | 0;
     $74 = $72 ? $15 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   $112 = HEAP8[$__in_units >> 0] | 0;
   $113 = $112 << 24 >> 24 == 0;
   $or$cond = $113 | $111;
   if (!$or$cond) {
    $114 = HEAP32[$__g_end >> 2] | 0;
    $115 = $114;
    $116 = $__g;
    $117 = $115 - $116 | 0;
    $118 = ($117 | 0) < 160;
    if ($118) {
     $119 = HEAP32[$__dc >> 2] | 0;
     $120 = $114 + 4 | 0;
     HEAP32[$__g_end >> 2] = $120;
     HEAP32[$114 >> 2] = $119;
    }
   }
   $121 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $122 = +(tempDouble = +invoke_diii(560, $__a$2 | 0, $121 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $123 = __THREW__;
   __THREW__ = 0;
   $124 = $123 & 1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v >> 3] = $122;
    $125 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $125, $__err), asyncState ? abort(-12) | 0 : 0;
    $126 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = $$pre$i$i$i$lcssa + 12 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = $$pre$i$i$i$lcssa + 16 | 0;
     $130 = HEAP32[$129 >> 2] | 0;
     $131 = ($128 | 0) == ($130 | 0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $133 = $132 + 36 | 0;
      $134 = HEAP32[$133 >> 2] | 0;
      __THREW__ = 0;
      $135 = (tempInt = invoke_ii($134 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $136 = __THREW__;
      __THREW__ = 0;
      $137 = $136 & 1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128 >> 2] | 0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i | 0) == -1;
     if ($139) {
      HEAP32[$__b >> 2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = $$pre$i3$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i3$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142 >> 2] | 0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i | 0) == -1;
      if ($153) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $154 = HEAP32[$__err >> 2] | 0;
     $155 = $154 | 2;
     HEAP32[$__err >> 2] = $155;
    }
    $156 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $156 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$217 = 0, $__neg = 0, $__w$018 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 24 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 138 | 0;
 $0 = sp + 4 | 0;
 $__atoms = sp + 128 | 0;
 $__nbuf = sp + 28 | 0;
 $1 = $__wbuf;
 HEAP32[$__wb >> 2] = $1;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 $3 = $__wbuf + 100 | 0;
 __THREW__ = 0;
 $4 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $33 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $34 = tempRet0;
  HEAP32[$__wb >> 2] = 0;
  $$113 = $33;
  $$1211 = $34;
  $119 = 478;
  $120 = $__wbuf;
  label = 45;
 } else {
  HEAP32[$__loc >> 2] = $4;
  __THREW__ = 0;
  $7 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = __THREW__;
  __THREW__ = 0;
  $9 = $8 & 1;
  L4 : do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg >> 0] = 0;
    $10 = HEAP32[$__e >> 2] | 0;
    HEAP32[$0 >> 2] = $10;
    $11 = $__iob + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
    $13 = (tempInt = invoke_iiiiiiiiiiii(479, $__b | 0, $$byval_copy | 0, $__intl | 0, $__loc | 0, $12 | 0, $__err | 0, $__neg | 0, $7 | 0, $__wb | 0, $__wn | 0, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $14 = __THREW__;
    __THREW__ = 0;
    $15 = $14 & 1;
    if ($15) {
     label = 10;
    } else {
     L7 : do {
      if ($13) {
       $16 = HEAP32[$7 >> 2] | 0;
       $17 = $16 + 32 | 0;
       $18 = HEAP32[$17 >> 2] | 0;
       __THREW__ = 0;
       (tempInt = invoke_iiiii($18 | 0, $7 | 0, 21697 | 0, 21707 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $19 = __THREW__;
       __THREW__ = 0;
       $20 = $19 & 1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn >> 2] | 0;
       $22 = HEAP32[$__wb >> 2] | 0;
       $23 = $21;
       $24 = $22;
       $25 = $23 - $24 | 0;
       $26 = ($25 | 0) > 98;
       if ($26) {
        $27 = $25 + 2 | 0;
        $28 = (tempInt = _malloc($27) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $29 = $28;
        $30 = ($28 | 0) == (0 | 0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(468), asyncState ? abort(-12) | 0 : 0;
         $31 = __THREW__;
         __THREW__ = 0;
         $32 = $31 & 1;
         if ($32) {
          $40 = $29;
         } else {
          $74 = $29;
          $__nc$0 = 0;
          label = 13;
         }
        } else {
         $74 = $29;
         $__nc$0 = $28;
         label = 13;
        }
       } else {
        $74 = 0;
        $__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label | 0) == 13) {
         $42 = HEAP8[$__neg >> 0] | 0;
         $43 = $42 << 24 >> 24 == 0;
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = $__nc$0 + 1 | 0;
          HEAP8[$__nc$0 >> 0] = 45;
          $__nc$1 = $44;
         }
         $45 = $__atoms + 10 | 0;
         $46 = $__atoms;
         $47 = $22 >>> 0 < $21 >>> 0;
         if ($47) {
          $48 = $__atoms + 1 | 0;
          $49 = $48 + 1 | 0;
          $50 = $49 + 1 | 0;
          $51 = $50 + 1 | 0;
          $52 = $51 + 1 | 0;
          $53 = $52 + 1 | 0;
          $54 = $53 + 1 | 0;
          $55 = $54 + 1 | 0;
          $56 = $55 + 1 | 0;
          $__nc$217 = $__nc$1;
          $__w$018 = $22;
          while (1) {
           $57 = HEAP8[$__w$018 >> 0] | 0;
           $58 = HEAP8[$__atoms >> 0] | 0;
           $59 = $58 << 24 >> 24 == $57 << 24 >> 24;
           do {
            if ($59) {
             $$0$lcssa$i = $__atoms;
            } else {
             $60 = HEAP8[$48 >> 0] | 0;
             $61 = $60 << 24 >> 24 == $57 << 24 >> 24;
             if ($61) {
              $$0$lcssa$i = $48;
             } else {
              $125 = HEAP8[$49 >> 0] | 0;
              $126 = $125 << 24 >> 24 == $57 << 24 >> 24;
              if ($126) {
               $$0$lcssa$i = $49;
              } else {
               $127 = HEAP8[$50 >> 0] | 0;
               $128 = $127 << 24 >> 24 == $57 << 24 >> 24;
               if ($128) {
                $$0$lcssa$i = $50;
               } else {
                $129 = HEAP8[$51 >> 0] | 0;
                $130 = $129 << 24 >> 24 == $57 << 24 >> 24;
                if ($130) {
                 $$0$lcssa$i = $51;
                } else {
                 $131 = HEAP8[$52 >> 0] | 0;
                 $132 = $131 << 24 >> 24 == $57 << 24 >> 24;
                 if ($132) {
                  $$0$lcssa$i = $52;
                  break;
                 }
                 $133 = HEAP8[$53 >> 0] | 0;
                 $134 = $133 << 24 >> 24 == $57 << 24 >> 24;
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP8[$54 >> 0] | 0;
                 $136 = $135 << 24 >> 24 == $57 << 24 >> 24;
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP8[$55 >> 0] | 0;
                 $138 = $137 << 24 >> 24 == $57 << 24 >> 24;
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP8[$56 >> 0] | 0;
                 $140 = $139 << 24 >> 24 == $57 << 24 >> 24;
                 $$ = $140 ? $56 : $45;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while (0);
           $62 = $$0$lcssa$i;
           $63 = $62 - $46 | 0;
           $64 = 21697 + $63 | 0;
           $65 = HEAP8[$64 >> 0] | 0;
           HEAP8[$__nc$217 >> 0] = $65;
           $66 = $__w$018 + 1 | 0;
           $67 = $__nc$217 + 1 | 0;
           $$pre = HEAP32[$__wn >> 2] | 0;
           $68 = $66 >>> 0 < $$pre >>> 0;
           if ($68) {
            $__nc$217 = $67;
            $__w$018 = $66;
           } else {
            $__nc$2$lcssa = $67;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa >> 0] = 0;
         HEAP32[$vararg_buffer >> 2] = $__v;
         $69 = (tempInt = _sscanf($__nbuf, 21708, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $70 = ($69 | 0) == 1;
         if (!$70) {
          __THREW__ = 0;
          invoke_vi(480, 21712 | 0), asyncState ? abort(-12) | 0 : 0;
          $71 = __THREW__;
          __THREW__ = 0;
          $72 = $71 & 1;
          if ($72) {
           $40 = $74;
           break;
          }
         }
         $73 = ($74 | 0) == 0;
         if (!$73) {
          $75 = $74;
          _free($75), asyncState ? abort(-12) | 0 : 0;
         }
         break L7;
        }
       } while (0);
       $37 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $38 = tempRet0;
       $39 = ($40 | 0) == 0;
       if ($39) {
        $$0 = $37;
        $$01 = $38;
        $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $40;
       _free($41), asyncState ? abort(-12) | 0 : 0;
       $$0 = $37;
       $$01 = $38;
       $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while (0);
     $76 = HEAP32[$__b >> 2] | 0;
     $77 = ($76 | 0) == (0 | 0);
     do {
      if ($77) {
       $91 = 0;
      } else {
       $78 = $76 + 12 | 0;
       $79 = HEAP32[$78 >> 2] | 0;
       $80 = $76 + 16 | 0;
       $81 = HEAP32[$80 >> 2] | 0;
       $82 = ($79 | 0) == ($81 | 0);
       if ($82) {
        $83 = HEAP32[$76 >> 2] | 0;
        $84 = $83 + 36 | 0;
        $85 = HEAP32[$84 >> 2] | 0;
        __THREW__ = 0;
        $86 = (tempInt = invoke_ii($85 | 0, $76 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $87 = __THREW__;
        __THREW__ = 0;
        $88 = $87 & 1;
        if ($88) {
         label = 10;
         break L4;
        }
        $89 = ($86 | 0) == -1;
        if ($89) {
         HEAP32[$__b >> 2] = 0;
         $91 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
         $91 = $$pre$i$i$i;
         break;
        }
       } else {
        $91 = $76;
       }
      }
     } while (0);
     $90 = ($91 | 0) == (0 | 0);
     $92 = HEAP32[$__e >> 2] | 0;
     $93 = ($92 | 0) == (0 | 0);
     do {
      if ($93) {
       label = 37;
      } else {
       $94 = $92 + 12 | 0;
       $95 = HEAP32[$94 >> 2] | 0;
       $96 = $92 + 16 | 0;
       $97 = HEAP32[$96 >> 2] | 0;
       $98 = ($95 | 0) == ($97 | 0);
       if ($98) {
        $99 = HEAP32[$92 >> 2] | 0;
        $100 = $99 + 36 | 0;
        $101 = HEAP32[$100 >> 2] | 0;
        __THREW__ = 0;
        $102 = (tempInt = invoke_ii($101 | 0, $92 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $103 = __THREW__;
        __THREW__ = 0;
        $104 = $103 & 1;
        if ($104) {
         label = 10;
         break L4;
        }
        $105 = ($102 | 0) == -1;
        if ($105) {
         HEAP32[$__e >> 2] = 0;
         label = 37;
         break;
        }
       }
       if (!$90) {
        label = 38;
       }
      }
     } while (0);
     if ((label | 0) == 37) {
      if ($90) {
       label = 38;
      }
     }
     if ((label | 0) == 38) {
      $106 = HEAP32[$__err >> 2] | 0;
      $107 = $106 | 2;
      HEAP32[$__err >> 2] = $107;
     }
     $108 = HEAP32[$__b >> 2] | 0;
     $109 = HEAP32[$__loc >> 2] | 0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($109) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $110 = HEAP32[$__wb >> 2] | 0;
     HEAP32[$__wb >> 2] = 0;
     $111 = ($110 | 0) == (0 | 0);
     if (!$111) {
      $112 = HEAP32[$2 >> 2] | 0;
      __THREW__ = 0;
      invoke_vi($112 | 0, $110 | 0), asyncState ? abort(-12) | 0 : 0;
      $113 = __THREW__;
      __THREW__ = 0;
      $114 = $113 & 1;
      if ($114) {
       $115 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $116 = tempRet0;
       ___clang_call_terminate($115), asyncState ? abort(-12) | 0 : 0;
      }
     }
     STACKTOP = sp;
     return $108 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 10) {
   $35 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $36 = tempRet0;
   $$0 = $35;
   $$01 = $36;
   $$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $117 = HEAP32[$__loc >> 2] | 0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($117) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D >> 2] | 0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D >> 2] = 0;
  $118 = ($$pre7 | 0) == (0 | 0);
  if ($118) {
   $$114 = $$0;
   $$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2 >> 2] | 0;
   $$113 = $$0;
   $$1211 = $$01;
   $119 = $$pre15;
   $120 = $$pre7;
   label = 45;
  }
 }
 if ((label | 0) == 45) {
  __THREW__ = 0;
  invoke_vi($119 | 0, $120 | 0), asyncState ? abort(-12) | 0 : 0;
  $121 = __THREW__;
  __THREW__ = 0;
  $122 = $121 & 1;
  if ($122) {
   $123 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $124 = tempRet0;
   ___clang_call_terminate($123), asyncState ? abort(-12) | 0 : 0;
  } else {
   $$114 = $$113;
   $$1212 = $$1211;
  }
 }
 ___resumeException($$114 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $160 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $160 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $161;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(558, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = tempRet0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125 >> 2] = $120;
    $126 = $124 + 4 | 0;
    $127 = $126;
    HEAP32[$127 >> 2] = $121;
    $128 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $128, $__err), asyncState ? abort(-12) | 0 : 0;
    $129 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = $$pre$i$i$i$lcssa + 12 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = $$pre$i$i$i$lcssa + 16 | 0;
     $133 = HEAP32[$132 >> 2] | 0;
     $134 = ($131 | 0) == ($133 | 0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $136 = $135 + 36 | 0;
      $137 = HEAP32[$136 >> 2] | 0;
      __THREW__ = 0;
      $138 = (tempInt = invoke_ii($137 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $139 = __THREW__;
      __THREW__ = 0;
      $140 = $139 & 1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131 >> 2] | 0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i | 0) == -1;
     if ($142) {
      HEAP32[$__b >> 2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = $$pre$i3$i$i + 12 | 0;
      $145 = HEAP32[$144 >> 2] | 0;
      $146 = $$pre$i3$i$i + 16 | 0;
      $147 = HEAP32[$146 >> 2] | 0;
      $148 = ($145 | 0) == ($147 | 0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $150 = $149 + 36 | 0;
       $151 = HEAP32[$150 >> 2] | 0;
       __THREW__ = 0;
       $152 = (tempInt = invoke_ii($151 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $153 = __THREW__;
       __THREW__ = 0;
       $154 = $153 & 1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145 >> 2] | 0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i | 0) == -1;
      if ($156) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $157 = HEAP32[$__err >> 2] | 0;
     $158 = $157 | 2;
     HEAP32[$__err >> 2] = $158;
    }
    $159 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $159 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $160 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $160 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $161;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(554, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = tempRet0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125 >> 2] = $120;
    $126 = $124 + 4 | 0;
    $127 = $126;
    HEAP32[$127 >> 2] = $121;
    $128 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $128, $__err), asyncState ? abort(-12) | 0 : 0;
    $129 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = $$pre$i$i$i$lcssa + 12 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = $$pre$i$i$i$lcssa + 16 | 0;
     $133 = HEAP32[$132 >> 2] | 0;
     $134 = ($131 | 0) == ($133 | 0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $136 = $135 + 36 | 0;
      $137 = HEAP32[$136 >> 2] | 0;
      __THREW__ = 0;
      $138 = (tempInt = invoke_ii($137 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $139 = __THREW__;
      __THREW__ = 0;
      $140 = $139 & 1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131 >> 2] | 0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i | 0) == -1;
     if ($142) {
      HEAP32[$__b >> 2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = $$pre$i3$i$i + 12 | 0;
      $145 = HEAP32[$144 >> 2] | 0;
      $146 = $$pre$i3$i$i + 16 | 0;
      $147 = HEAP32[$146 >> 2] | 0;
      $148 = ($145 | 0) == ($147 | 0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $150 = $149 + 36 | 0;
       $151 = HEAP32[$150 >> 2] | 0;
       __THREW__ = 0;
       $152 = (tempInt = invoke_ii($151 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $153 = __THREW__;
       __THREW__ = 0;
       $154 = $153 & 1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145 >> 2] | 0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i | 0) == -1;
      if ($156) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $157 = HEAP32[$__err >> 2] | 0;
     $158 = $157 | 2;
     HEAP32[$__err >> 2] = $158;
    }
    $159 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $159 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP8[$__decimal_point >> 0] | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$17 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i20 = $65 + -1 | 0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$13 >> 2] | 0;
     $73 = $71 ? $15 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   $113 = HEAP8[$__in_units >> 0] | 0;
   $114 = $113 << 24 >> 24 == 0;
   $or$cond = $114 | $112;
   if (!$or$cond) {
    $115 = HEAP32[$__g_end >> 2] | 0;
    $116 = $115;
    $117 = $__g;
    $118 = $116 - $117 | 0;
    $119 = ($118 | 0) < 160;
    if ($119) {
     $120 = HEAP32[$__dc >> 2] | 0;
     $121 = $115 + 4 | 0;
     HEAP32[$__g_end >> 2] = $121;
     HEAP32[$115 >> 2] = $120;
    }
   }
   $122 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $123 = +(tempDouble = +invoke_diii(559, $__a$2 | 0, $122 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $124 = __THREW__;
   __THREW__ = 0;
   $125 = $124 & 1;
   if ($125) {
    label = 25;
   } else {
    HEAPF32[$__v >> 2] = $123;
    $126 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $126, $__err), asyncState ? abort(-12) | 0 : 0;
    $127 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = $$pre$i$i$i$lcssa + 12 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $$pre$i$i$i$lcssa + 16 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = ($129 | 0) == ($131 | 0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $134 = $133 + 36 | 0;
      $135 = HEAP32[$134 >> 2] | 0;
      __THREW__ = 0;
      $136 = (tempInt = invoke_ii($135 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $137 = __THREW__;
      __THREW__ = 0;
      $138 = $137 & 1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136 | 0) == -1;
      if ($139) {
       HEAP32[$__b >> 2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141 | 0) == (0 | 0);
    $142 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = $$pre$i2$i$i + 12 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = $$pre$i2$i$i + 16 | 0;
      $146 = HEAP32[$145 >> 2] | 0;
      $147 = ($144 | 0) == ($146 | 0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $149 = $148 + 36 | 0;
       $150 = HEAP32[$149 >> 2] | 0;
       __THREW__ = 0;
       $151 = (tempInt = invoke_ii($150 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $152 = __THREW__;
       __THREW__ = 0;
       $153 = $152 & 1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151 | 0) == -1;
       if ($154) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$140) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $155 = HEAP32[$__err >> 2] | 0;
     $156 = $155 | 2;
     HEAP32[$__err >> 2] = $156;
    }
    $157 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $157 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP8[$__decimal_point >> 0] | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$17 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i20 = $65 + -1 | 0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$13 >> 2] | 0;
     $73 = $71 ? $15 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   $113 = HEAP8[$__in_units >> 0] | 0;
   $114 = $113 << 24 >> 24 == 0;
   $or$cond = $114 | $112;
   if (!$or$cond) {
    $115 = HEAP32[$__g_end >> 2] | 0;
    $116 = $115;
    $117 = $__g;
    $118 = $116 - $117 | 0;
    $119 = ($118 | 0) < 160;
    if ($119) {
     $120 = HEAP32[$__dc >> 2] | 0;
     $121 = $115 + 4 | 0;
     HEAP32[$__g_end >> 2] = $121;
     HEAP32[$115 >> 2] = $120;
    }
   }
   $122 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $123 = +(tempDouble = +invoke_diii(561, $__a$2 | 0, $122 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $124 = __THREW__;
   __THREW__ = 0;
   $125 = $124 & 1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v >> 3] = $123;
    $126 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $126, $__err), asyncState ? abort(-12) | 0 : 0;
    $127 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = $$pre$i$i$i$lcssa + 12 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $$pre$i$i$i$lcssa + 16 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = ($129 | 0) == ($131 | 0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $134 = $133 + 36 | 0;
      $135 = HEAP32[$134 >> 2] | 0;
      __THREW__ = 0;
      $136 = (tempInt = invoke_ii($135 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $137 = __THREW__;
      __THREW__ = 0;
      $138 = $137 & 1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136 | 0) == -1;
      if ($139) {
       HEAP32[$__b >> 2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141 | 0) == (0 | 0);
    $142 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = $$pre$i2$i$i + 12 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = $$pre$i2$i$i + 16 | 0;
      $146 = HEAP32[$145 >> 2] | 0;
      $147 = ($144 | 0) == ($146 | 0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $149 = $148 + 36 | 0;
       $150 = HEAP32[$149 >> 2] | 0;
       __THREW__ = 0;
       $151 = (tempInt = invoke_ii($150 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $152 = __THREW__;
       __THREW__ = 0;
       $153 = $152 & 1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151 | 0) == -1;
       if ($154) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$140) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $155 = HEAP32[$__err >> 2] | 0;
     $156 = $155 | 2;
     HEAP32[$__err >> 2] = $156;
    }
    $157 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $157 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $0 = $__buf + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__buf + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__buf >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf >> 2] | 0;
  $6 = $5 & -2;
  $phitmp$i = $6 + -1 | 0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $7 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 L4 : do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__buf + 8 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $__buf + 1 | 0;
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end >> 2] = $16;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   HEAP8[$__in_units >> 0] = 1;
   HEAP8[$__exp >> 0] = 69;
   $17 = $__buf + 4 | 0;
   $18 = HEAP8[$__decimal_point >> 0] | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $16;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$17 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i20 = $65 + -1 | 0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$13 >> 2] | 0;
     $73 = $71 ? $15 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92, $__in_units, $__exp, $__a$1, $__a_end, $18, $19, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $158;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   $113 = HEAP8[$__in_units >> 0] | 0;
   $114 = $113 << 24 >> 24 == 0;
   $or$cond = $114 | $112;
   if (!$or$cond) {
    $115 = HEAP32[$__g_end >> 2] | 0;
    $116 = $115;
    $117 = $__g;
    $118 = $116 - $117 | 0;
    $119 = ($118 | 0) < 160;
    if ($119) {
     $120 = HEAP32[$__dc >> 2] | 0;
     $121 = $115 + 4 | 0;
     HEAP32[$__g_end >> 2] = $121;
     HEAP32[$115 >> 2] = $120;
    }
   }
   $122 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $123 = +(tempDouble = +invoke_diii(560, $__a$2 | 0, $122 | 0, $__err | 0), asyncState ? +abort(-12) : tempDouble);
   $124 = __THREW__;
   __THREW__ = 0;
   $125 = $124 & 1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v >> 3] = $123;
    $126 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $126, $__err), asyncState ? abort(-12) | 0 : 0;
    $127 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = $$pre$i$i$i$lcssa + 12 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $$pre$i$i$i$lcssa + 16 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = ($129 | 0) == ($131 | 0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $134 = $133 + 36 | 0;
      $135 = HEAP32[$134 >> 2] | 0;
      __THREW__ = 0;
      $136 = (tempInt = invoke_ii($135 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $137 = __THREW__;
      __THREW__ = 0;
      $138 = $137 & 1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136 | 0) == -1;
      if ($139) {
       HEAP32[$__b >> 2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141 | 0) == (0 | 0);
    $142 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = $$pre$i2$i$i + 12 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = $$pre$i2$i$i + 16 | 0;
      $146 = HEAP32[$145 >> 2] | 0;
      $147 = ($144 | 0) == ($146 | 0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $149 = $148 + 36 | 0;
       $150 = HEAP32[$149 >> 2] | 0;
       __THREW__ = 0;
       $151 = (tempInt = invoke_ii($150 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $152 = __THREW__;
       __THREW__ = 0;
       $153 = $152 & 1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151 | 0) == -1;
       if ($154) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$140) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($140) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $155 = HEAP32[$__err >> 2] | 0;
     $156 = $155 | 2;
     HEAP32[$__err >> 2] = $156;
    }
    $157 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $157 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $155 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $155 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(555, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = __THREW__;
   __THREW__ = 0;
   $122 = $121 & 1;
   if ($122) {
    label = 26;
   } else {
    HEAP16[$__v >> 1] = $120;
    $123 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $123, $__err), asyncState ? abort(-12) | 0 : 0;
    $124 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = $$pre$i$i$i$lcssa + 12 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $$pre$i$i$i$lcssa + 16 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = ($126 | 0) == ($128 | 0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $131 = $130 + 36 | 0;
      $132 = HEAP32[$131 >> 2] | 0;
      __THREW__ = 0;
      $133 = (tempInt = invoke_ii($132 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $134 = __THREW__;
      __THREW__ = 0;
      $135 = $134 & 1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126 >> 2] | 0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i | 0) == -1;
     if ($137) {
      HEAP32[$__b >> 2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = $$pre$i3$i$i + 12 | 0;
      $140 = HEAP32[$139 >> 2] | 0;
      $141 = $$pre$i3$i$i + 16 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = ($140 | 0) == ($142 | 0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $145 = $144 + 36 | 0;
       $146 = HEAP32[$145 >> 2] | 0;
       __THREW__ = 0;
       $147 = (tempInt = invoke_ii($146 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       $149 = $148 & 1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140 >> 2] | 0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i | 0) == -1;
      if ($151) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $152 = HEAP32[$__err >> 2] | 0;
     $153 = $152 | 2;
     HEAP32[$__err >> 2] = $153;
    }
    $154 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $154 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $155 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $155 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(557, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = __THREW__;
   __THREW__ = 0;
   $122 = $121 & 1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v >> 2] = $120;
    $123 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $123, $__err), asyncState ? abort(-12) | 0 : 0;
    $124 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = $$pre$i$i$i$lcssa + 12 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $$pre$i$i$i$lcssa + 16 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = ($126 | 0) == ($128 | 0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $131 = $130 + 36 | 0;
      $132 = HEAP32[$131 >> 2] | 0;
      __THREW__ = 0;
      $133 = (tempInt = invoke_ii($132 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $134 = __THREW__;
      __THREW__ = 0;
      $135 = $134 & 1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126 >> 2] | 0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i | 0) == -1;
     if ($137) {
      HEAP32[$__b >> 2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = $$pre$i3$i$i + 12 | 0;
      $140 = HEAP32[$139 >> 2] | 0;
      $141 = $$pre$i3$i$i + 16 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = ($140 | 0) == ($142 | 0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $145 = $144 + 36 | 0;
       $146 = HEAP32[$145 >> 2] | 0;
       __THREW__ = 0;
       $147 = (tempInt = invoke_ii($146 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       $149 = $148 & 1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140 >> 2] | 0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i | 0) == -1;
      if ($151) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $152 = HEAP32[$__err >> 2] | 0;
     $153 = $152 | 2;
     HEAP32[$__err >> 2] = $153;
    }
    $154 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $154 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $155 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $155 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(556, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = __THREW__;
   __THREW__ = 0;
   $122 = $121 & 1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v >> 2] = $120;
    $123 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $123, $__err), asyncState ? abort(-12) | 0 : 0;
    $124 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = $$pre$i$i$i$lcssa + 12 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $$pre$i$i$i$lcssa + 16 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = ($126 | 0) == ($128 | 0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $131 = $130 + 36 | 0;
      $132 = HEAP32[$131 >> 2] | 0;
      __THREW__ = 0;
      $133 = (tempInt = invoke_ii($132 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $134 = __THREW__;
      __THREW__ = 0;
      $135 = $134 & 1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126 >> 2] | 0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i | 0) == -1;
     if ($137) {
      HEAP32[$__b >> 2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = $$pre$i3$i$i + 12 | 0;
      $140 = HEAP32[$139 >> 2] | 0;
      $141 = $$pre$i3$i$i + 16 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = ($140 | 0) == ($142 | 0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $145 = $144 + 36 | 0;
       $146 = HEAP32[$145 >> 2] | 0;
       __THREW__ = 0;
       $147 = (tempInt = invoke_ii($146 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       $149 = $148 & 1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140 >> 2] | 0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i | 0) == -1;
      if ($151) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $152 = HEAP32[$__err >> 2] | 0;
     $153 = $152 | 2;
     HEAP32[$__err >> 2] = $153;
    }
    $154 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $154 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP32[$__thousands_sep >> 2] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i5 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i5 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
     $155 = 1;
    } else {
     $21 = $$pre$i$i$i5 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i5 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22 >> 2] | 0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3 | 0) == -1;
     if ($33) {
      HEAP32[$__b >> 2] = 0;
      $$pre$i$i$i = 0;
      $155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
      $155 = 0;
     }
    }
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if ($40) {
       $41 = HEAP32[$34 >> 2] | 0;
       $42 = $41 + 36 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       __THREW__ = 0;
       $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37 >> 2] | 0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9 | 0) == -1;
      if ($48) {
       HEAP32[$__e >> 2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i3$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i3$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end >> 2] | 0;
    $50 = HEAP8[$__buf >> 0] | 0;
    $51 = $50 & 1;
    $52 = $51 << 24 >> 24 == 0;
    $53 = HEAP32[$18 >> 2] | 0;
    $54 = $50 & 255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = $__a$0 + $56 | 0;
    $58 = ($49 | 0) == ($57 | 0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $59 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $60 = __THREW__;
     __THREW__ = 0;
     $61 = $60 & 1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf >> 0] | 0;
     $63 = $62 & 1;
     $64 = $63 << 24 >> 24 == 0;
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf >> 2] | 0;
      $66 = $65 & -2;
      $phitmp$i23 = $66 + -1 | 0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $67 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $68 = __THREW__;
     __THREW__ = 0;
     $69 = $68 & 1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf >> 0] | 0;
     $71 = $70 & 1;
     $72 = $71 << 24 >> 24 == 0;
     $73 = HEAP32[$14 >> 2] | 0;
     $74 = $72 ? $16 : $73;
     $75 = $74 + $56 | 0;
     HEAP32[$__a_end >> 2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = $$pre$i$i$i + 12 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $$pre$i$i$i + 16 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($81 | 0) == ($83 | 0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $86 = $85 + 36 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __THREW__ = 0;
     $88 = (tempInt = invoke_ii($87 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81 >> 2] | 0;
     $$0$i$i = $91;
    }
    $92 = (tempInt = __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $93 = ($92 | 0) == 0;
    if (!$93) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i3$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80 >> 2] | 0;
    $95 = HEAP32[$82 >> 2] | 0;
    $96 = ($94 | 0) == ($95 | 0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $98 = $97 + 40 | 0;
     $99 = HEAP32[$98 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($99 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $100 = __THREW__;
     __THREW__ = 0;
     $101 = $100 & 1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = $94 + 4 | 0;
     HEAP32[$80 >> 2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 25) {
    $76 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = tempRet0;
    $lpad$phi$index = $76;
    $lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping >> 0] | 0;
   $104 = $103 & 1;
   $105 = $104 << 24 >> 24 == 0;
   $106 = $__grouping + 4 | 0;
   $107 = HEAP32[$106 >> 2] | 0;
   $108 = $103 & 255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110 | 0) == 0;
   if (!$111) {
    $112 = HEAP32[$__g_end >> 2] | 0;
    $113 = $112;
    $114 = $__g;
    $115 = $113 - $114 | 0;
    $116 = ($115 | 0) < 160;
    if ($116) {
     $117 = HEAP32[$__dc >> 2] | 0;
     $118 = $112 + 4 | 0;
     HEAP32[$__g_end >> 2] = $118;
     HEAP32[$112 >> 2] = $117;
    }
   }
   $119 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $120 = (tempInt = invoke_iiiii(553, $__a$2 | 0, $119 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $121 = __THREW__;
   __THREW__ = 0;
   $122 = $121 & 1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v >> 2] = $120;
    $123 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $123, $__err), asyncState ? abort(-12) | 0 : 0;
    $124 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = $$pre$i$i$i$lcssa + 12 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $$pre$i$i$i$lcssa + 16 | 0;
     $128 = HEAP32[$127 >> 2] | 0;
     $129 = ($126 | 0) == ($128 | 0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $131 = $130 + 36 | 0;
      $132 = HEAP32[$131 >> 2] | 0;
      __THREW__ = 0;
      $133 = (tempInt = invoke_ii($132 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $134 = __THREW__;
      __THREW__ = 0;
      $135 = $134 & 1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126 >> 2] | 0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i | 0) == -1;
     if ($137) {
      HEAP32[$__b >> 2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i | 0) == (0 | 0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = $$pre$i3$i$i + 12 | 0;
      $140 = HEAP32[$139 >> 2] | 0;
      $141 = $$pre$i3$i$i + 16 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = ($140 | 0) == ($142 | 0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i >> 2] | 0;
       $145 = $144 + 36 | 0;
       $146 = HEAP32[$145 >> 2] | 0;
       __THREW__ = 0;
       $147 = (tempInt = invoke_ii($146 | 0, $$pre$i3$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       $149 = $148 & 1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140 >> 2] | 0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i | 0) == -1;
      if ($151) {
       HEAP32[$__e >> 2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label | 0) == 53) {
     $152 = HEAP32[$__err >> 2] | 0;
     $153 = $152 | 2;
     HEAP32[$__err >> 2] = $153;
    }
    $154 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $154 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $78 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $79 = tempRet0;
  $lpad$phi$index = $78;
  $lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $161;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(558, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = tempRet0;
   $123 = __THREW__;
   __THREW__ = 0;
   $124 = $123 & 1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126 >> 2] = $121;
    $127 = $125 + 4 | 0;
    $128 = $127;
    HEAP32[$128 >> 2] = $122;
    $129 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $129, $__err), asyncState ? abort(-12) | 0 : 0;
    $130 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = $$pre$i$i$i$lcssa + 12 | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $$pre$i$i$i$lcssa + 16 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = ($132 | 0) == ($134 | 0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $137 = $136 + 36 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      __THREW__ = 0;
      $139 = (tempInt = invoke_ii($138 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $140 = __THREW__;
      __THREW__ = 0;
      $141 = $140 & 1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139 | 0) == -1;
      if ($142) {
       HEAP32[$__b >> 2] = 0;
       $144 = 0;
      } else {
       $144 = $$pre$i$i$i$lcssa;
      }
     } else {
      $144 = $$pre$i$i$i$lcssa;
     }
    }
    $143 = ($144 | 0) == (0 | 0);
    $145 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = $$pre$i2$i$i + 12 | 0;
      $147 = HEAP32[$146 >> 2] | 0;
      $148 = $$pre$i2$i$i + 16 | 0;
      $149 = HEAP32[$148 >> 2] | 0;
      $150 = ($147 | 0) == ($149 | 0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $152 = $151 + 36 | 0;
       $153 = HEAP32[$152 >> 2] | 0;
       __THREW__ = 0;
       $154 = (tempInt = invoke_ii($153 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $155 = __THREW__;
       __THREW__ = 0;
       $156 = $155 & 1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154 | 0) == -1;
       if ($157) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$143) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($143) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $158 = HEAP32[$__err >> 2] | 0;
     $159 = $158 | 2;
     HEAP32[$__err >> 2] = $159;
    }
    $160 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $160 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $161;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(554, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = tempRet0;
   $123 = __THREW__;
   __THREW__ = 0;
   $124 = $123 & 1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126 >> 2] = $121;
    $127 = $125 + 4 | 0;
    $128 = $127;
    HEAP32[$128 >> 2] = $122;
    $129 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $129, $__err), asyncState ? abort(-12) | 0 : 0;
    $130 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = $$pre$i$i$i$lcssa + 12 | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $$pre$i$i$i$lcssa + 16 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = ($132 | 0) == ($134 | 0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $137 = $136 + 36 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      __THREW__ = 0;
      $139 = (tempInt = invoke_ii($138 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $140 = __THREW__;
      __THREW__ = 0;
      $141 = $140 & 1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139 | 0) == -1;
      if ($142) {
       HEAP32[$__b >> 2] = 0;
       $144 = 0;
      } else {
       $144 = $$pre$i$i$i$lcssa;
      }
     } else {
      $144 = $$pre$i$i$i$lcssa;
     }
    }
    $143 = ($144 | 0) == (0 | 0);
    $145 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = $$pre$i2$i$i + 12 | 0;
      $147 = HEAP32[$146 >> 2] | 0;
      $148 = $$pre$i2$i$i + 16 | 0;
      $149 = HEAP32[$148 >> 2] | 0;
      $150 = ($147 | 0) == ($149 | 0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $152 = $151 + 36 | 0;
       $153 = HEAP32[$152 >> 2] | 0;
       __THREW__ = 0;
       $154 = (tempInt = invoke_ii($153 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $155 = __THREW__;
       __THREW__ = 0;
       $156 = $155 & 1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154 | 0) == -1;
       if ($157) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$143) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($143) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $158 = HEAP32[$__err >> 2] | 0;
     $159 = $158 | 2;
     HEAP32[$__err >> 2] = $159;
    }
    $160 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $160 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(555, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 25;
   } else {
    HEAP16[$__v >> 1] = $121;
    $124 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $124, $__err), asyncState ? abort(-12) | 0 : 0;
    $125 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = $$pre$i$i$i$lcssa + 12 | 0;
     $127 = HEAP32[$126 >> 2] | 0;
     $128 = $$pre$i$i$i$lcssa + 16 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = ($127 | 0) == ($129 | 0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $132 = $131 + 36 | 0;
      $133 = HEAP32[$132 >> 2] | 0;
      __THREW__ = 0;
      $134 = (tempInt = invoke_ii($133 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $135 = __THREW__;
      __THREW__ = 0;
      $136 = $135 & 1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134 | 0) == -1;
      if ($137) {
       HEAP32[$__b >> 2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139 | 0) == (0 | 0);
    $140 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = $$pre$i2$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i2$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149 | 0) == -1;
       if ($152) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$138) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $153 = HEAP32[$__err >> 2] | 0;
     $154 = $153 | 2;
     HEAP32[$__err >> 2] = $154;
    }
    $155 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $155 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(557, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v >> 2] = $121;
    $124 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $124, $__err), asyncState ? abort(-12) | 0 : 0;
    $125 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = $$pre$i$i$i$lcssa + 12 | 0;
     $127 = HEAP32[$126 >> 2] | 0;
     $128 = $$pre$i$i$i$lcssa + 16 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = ($127 | 0) == ($129 | 0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $132 = $131 + 36 | 0;
      $133 = HEAP32[$132 >> 2] | 0;
      __THREW__ = 0;
      $134 = (tempInt = invoke_ii($133 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $135 = __THREW__;
      __THREW__ = 0;
      $136 = $135 & 1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134 | 0) == -1;
      if ($137) {
       HEAP32[$__b >> 2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139 | 0) == (0 | 0);
    $140 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = $$pre$i2$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i2$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149 | 0) == -1;
       if ($152) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$138) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $153 = HEAP32[$__err >> 2] | 0;
     $154 = $153 | 2;
     HEAP32[$__err >> 2] = $154;
    }
    $155 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $155 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(556, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v >> 2] = $121;
    $124 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $124, $__err), asyncState ? abort(-12) | 0 : 0;
    $125 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = $$pre$i$i$i$lcssa + 12 | 0;
     $127 = HEAP32[$126 >> 2] | 0;
     $128 = $$pre$i$i$i$lcssa + 16 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = ($127 | 0) == ($129 | 0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $132 = $131 + 36 | 0;
      $133 = HEAP32[$132 >> 2] | 0;
      __THREW__ = 0;
      $134 = (tempInt = invoke_ii($133 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $135 = __THREW__;
      __THREW__ = 0;
      $136 = $135 & 1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134 | 0) == -1;
      if ($137) {
       HEAP32[$__b >> 2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139 | 0) == (0 | 0);
    $140 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = $$pre$i2$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i2$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149 | 0) == -1;
       if ($152) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$138) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $153 = HEAP32[$__err >> 2] | 0;
     $154 = $153 | 2;
     HEAP32[$__err >> 2] = $154;
    }
    $155 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $155 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = (tempInt = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$__buf >> 2] = 0;
 $1 = $__buf + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__buf + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = HEAP8[$__buf >> 0] | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf >> 2] | 0;
  $7 = $6 & -2;
  $phitmp$i = $7 + -1 | 0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(408, $__buf | 0, $8 | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 L4 : do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf >> 0] | 0;
   $12 = $11 & 1;
   $13 = $12 << 24 >> 24 == 0;
   $14 = $__buf + 8 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $__buf + 1 | 0;
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end >> 2] = $17;
   HEAP32[$__g_end >> 2] = $__g;
   HEAP32[$__dc >> 2] = 0;
   $18 = $__buf + 4 | 0;
   $19 = HEAP8[$__thousands_sep >> 0] | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   $$pre$i$i$i4 = $$pre;
   $__a$0 = $17;
   L6 : while (1) {
    $20 = ($$pre$i$i$i4 | 0) == (0 | 0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = $$pre$i$i$i4 + 12 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $$pre$i$i$i4 + 16 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($22 | 0) == ($24 | 0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4 >> 2] | 0;
      $27 = $26 + 36 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      __THREW__ = 0;
      $29 = (tempInt = invoke_ii($28 | 0, $$pre$i$i$i4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29 | 0) == -1;
      if ($32) {
       HEAP32[$__b >> 2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i | 0) == (0 | 0);
    $34 = HEAP32[$__e >> 2] | 0;
    $35 = ($34 | 0) == (0 | 0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = $34 + 12 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      $38 = $34 + 16 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $40 = ($37 | 0) == ($39 | 0);
      if (!$40) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34 >> 2] | 0;
      $42 = $41 + 36 | 0;
      $43 = HEAP32[$42 >> 2] | 0;
      __THREW__ = 0;
      $44 = (tempInt = invoke_ii($43 | 0, $34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44 | 0) == -1;
      if ($47) {
       HEAP32[$__e >> 2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;
        $$pre$i2$i$i = $34;
        $__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while (0);
    if ((label | 0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;
      $$pre$i2$i$i = 0;
      $__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end >> 2] | 0;
    $49 = HEAP8[$__buf >> 0] | 0;
    $50 = $49 & 1;
    $51 = $50 << 24 >> 24 == 0;
    $52 = HEAP32[$18 >> 2] | 0;
    $53 = $49 & 255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = $__a$0 + $55 | 0;
    $57 = ($48 | 0) == ($56 | 0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $58 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf >> 0] | 0;
     $62 = $61 & 1;
     $63 = $62 << 24 >> 24 == 0;
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf >> 2] | 0;
      $65 = $64 & -2;
      $phitmp$i19 = $65 + -1 | 0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(408, $__buf | 0, $66 | 0, 0), asyncState ? abort(-12) | 0 : 0;
     $67 = __THREW__;
     __THREW__ = 0;
     $68 = $67 & 1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf >> 0] | 0;
     $70 = $69 & 1;
     $71 = $70 << 24 >> 24 == 0;
     $72 = HEAP32[$14 >> 2] | 0;
     $73 = $71 ? $16 : $72;
     $74 = $73 + $55 | 0;
     HEAP32[$__a_end >> 2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = $$pre$i$i$i + 12 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $$pre$i$i$i + 16 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($80 | 0) == ($82 | 0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $85 = $84 + 36 | 0;
     $86 = HEAP32[$85 >> 2] | 0;
     __THREW__ = 0;
     $87 = (tempInt = invoke_ii($86 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80 >> 0] | 0;
     $91 = $90 & 255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i & 255;
    $93 = (tempInt = __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92, $0, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $94 = ($93 | 0) == 0;
    if (!$94) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;
     $$pre$i2$i$i = $156;
     $__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79 >> 2] | 0;
    $96 = HEAP32[$81 >> 2] | 0;
    $97 = ($95 | 0) == ($96 | 0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i >> 2] | 0;
     $99 = $98 + 40 | 0;
     $100 = HEAP32[$99 >> 2] | 0;
     __THREW__ = 0;
     (tempInt = invoke_ii($100 | 0, $$pre$i$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = __THREW__;
     __THREW__ = 0;
     $102 = $101 & 1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;
      $__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = $95 + 1 | 0;
     HEAP32[$79 >> 2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;
     $__a$0 = $__a$1;
     continue;
    }
   }
   if ((label | 0) == 24) {
    $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $76 = tempRet0;
    $lpad$phi$index = $75;
    $lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping >> 0] | 0;
   $105 = $104 & 1;
   $106 = $105 << 24 >> 24 == 0;
   $107 = $__grouping + 4 | 0;
   $108 = HEAP32[$107 >> 2] | 0;
   $109 = $104 & 255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111 | 0) == 0;
   if (!$112) {
    $113 = HEAP32[$__g_end >> 2] | 0;
    $114 = $113;
    $115 = $__g;
    $116 = $114 - $115 | 0;
    $117 = ($116 | 0) < 160;
    if ($117) {
     $118 = HEAP32[$__dc >> 2] | 0;
     $119 = $113 + 4 | 0;
     HEAP32[$__g_end >> 2] = $119;
     HEAP32[$113 >> 2] = $118;
    }
   }
   $120 = HEAP32[$__a_end >> 2] | 0;
   __THREW__ = 0;
   $121 = (tempInt = invoke_iiiii(553, $__a$2 | 0, $120 | 0, $__err | 0, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = __THREW__;
   __THREW__ = 0;
   $123 = $122 & 1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v >> 2] = $121;
    $124 = HEAP32[$__g_end >> 2] | 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $124, $__err), asyncState ? abort(-12) | 0 : 0;
    $125 = ($$pre$i$i$i$lcssa | 0) == (0 | 0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = $$pre$i$i$i$lcssa + 12 | 0;
     $127 = HEAP32[$126 >> 2] | 0;
     $128 = $$pre$i$i$i$lcssa + 16 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = ($127 | 0) == ($129 | 0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa >> 2] | 0;
      $132 = $131 + 36 | 0;
      $133 = HEAP32[$132 >> 2] | 0;
      __THREW__ = 0;
      $134 = (tempInt = invoke_ii($133 | 0, $$pre$i$i$i$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $135 = __THREW__;
      __THREW__ = 0;
      $136 = $135 & 1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134 | 0) == -1;
      if ($137) {
       HEAP32[$__b >> 2] = 0;
       $139 = 0;
      } else {
       $139 = $$pre$i$i$i$lcssa;
      }
     } else {
      $139 = $$pre$i$i$i$lcssa;
     }
    }
    $138 = ($139 | 0) == (0 | 0);
    $140 = ($$pre$i2$i$i | 0) == (0 | 0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = $$pre$i2$i$i + 12 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $$pre$i2$i$i + 16 | 0;
      $144 = HEAP32[$143 >> 2] | 0;
      $145 = ($142 | 0) == ($144 | 0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i >> 2] | 0;
       $147 = $146 + 36 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       __THREW__ = 0;
       $149 = (tempInt = invoke_ii($148 | 0, $$pre$i2$i$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $150 = __THREW__;
       __THREW__ = 0;
       $151 = $150 & 1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149 | 0) == -1;
       if ($152) {
        HEAP32[$__e >> 2] = 0;
        label = 49;
        break;
       }
      }
      if (!$138) {
       label = 50;
      }
     }
    } while (0);
    if ((label | 0) == 49) {
     if ($138) {
      label = 50;
     }
    }
    if ((label | 0) == 50) {
     $153 = HEAP32[$__err >> 2] | 0;
     $154 = $153 | 2;
     HEAP32[$__err >> 2] = $154;
    }
    $155 = HEAP32[$__b >> 2] | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return $155 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $78 = tempRet0;
  $lpad$phi$index = $77;
  $lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$ = 0, $$$0 = 0, $$$027 = 0, $$0$i$i$lcssa = 0, $$0$i$i35 = 0, $$0$i$i9$lcssa = 0, $$0$i$i958 = 0, $$01$i$i56 = 0, $$062 = 0, $$2 = 0, $$lcssa = 0, $$lcssa34 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa26 = 0, $__d$036 = 0, $__d$142 = 0, $__d$2 = 0, $__d$351 = 0, $__f$043 = 0, $__f$146 = 0, $__gl$0$ph = 0, $__gl$054 = 0, $__gl$1 = 0, $__ig$053 = 0, $__ig$1 = 0, $__ng$052 = 0, $__ng$1 = 0, $__p$061 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep$sum = 0, $scevgep29 = 0, $umax28 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 1 | 0;
 $3 = $__sym + 4 | 0;
 $4 = $__flags & 512;
 $5 = ($4 | 0) == 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 1 | 0;
 $8 = $__ct + 8 | 0;
 $9 = ($__fd | 0) > 0;
 $10 = $__grp + 4 | 0;
 $11 = $__grp + 8 | 0;
 $12 = $__grp + 1 | 0;
 $13 = $__fd + 1 | 0;
 $14 = -2 - $__fd | 0;
 $15 = ($__fd | 0) < 0;
 $$op = $__fd ^ -1;
 $16 = $15 ? $$op : -1;
 $17 = $14 - $16 | 0;
 $18 = ($__fd | 0) > 0;
 $$062 = $__db;
 $__p$061 = 0;
 asyncState ? abort(-12) | 0 : 0;
 while (1) {
  $19 = $__pat + $__p$061 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  $21 = $20 << 24 >> 24;
  switch ($21 | 0) {
  case 0:
   {
    $22 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__mi >> 2] = $22;
    $$2 = $$062;
    break;
   }
  case 1:
   {
    $23 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__mi >> 2] = $23;
    $24 = HEAP32[$__ct >> 2] | 0;
    $25 = $24 + 28 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = (tempInt = FUNCTION_TABLE_iii[$26 & 1023]($__ct, 32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $28 = HEAP32[$__me >> 2] | 0;
    $29 = $28 + 1 | 0;
    HEAP32[$__me >> 2] = $29;
    HEAP8[$28 >> 0] = $27;
    $$2 = $$062;
    break;
   }
  case 3:
   {
    $30 = HEAP8[$__sn >> 0] | 0;
    $31 = $30 & 1;
    $32 = $31 << 24 >> 24 == 0;
    $33 = HEAP32[$0 >> 2] | 0;
    $34 = $30 & 255;
    $35 = $34 >>> 1;
    $36 = $32 ? $35 : $33;
    $37 = ($36 | 0) == 0;
    if ($37) {
     $$2 = $$062;
    } else {
     $38 = HEAP32[$1 >> 2] | 0;
     $39 = $32 ? $2 : $38;
     $40 = HEAP8[$39 >> 0] | 0;
     $41 = HEAP32[$__me >> 2] | 0;
     $42 = $41 + 1 | 0;
     HEAP32[$__me >> 2] = $42;
     HEAP8[$41 >> 0] = $40;
     $$2 = $$062;
    }
    break;
   }
  case 2:
   {
    $43 = HEAP8[$__sym >> 0] | 0;
    $44 = $43 & 1;
    $45 = $44 << 24 >> 24 == 0;
    $46 = HEAP32[$3 >> 2] | 0;
    $47 = $43 & 255;
    $48 = $47 >>> 1;
    $49 = $45 ? $48 : $46;
    $50 = ($49 | 0) == 0;
    $or$cond = $5 | $50;
    if ($or$cond) {
     $$2 = $$062;
    } else {
     $51 = HEAP32[$6 >> 2] | 0;
     $52 = $45 ? $7 : $51;
     $53 = $52 + $49 | 0;
     $54 = HEAP32[$__me >> 2] | 0;
     $55 = ($49 | 0) == 0;
     if ($55) {
      $$0$i$i9$lcssa = $54;
     } else {
      $$0$i$i958 = $54;
      $57 = $52;
      while (1) {
       $56 = HEAP8[$57 >> 0] | 0;
       HEAP8[$$0$i$i958 >> 0] = $56;
       $58 = $57 + 1 | 0;
       $59 = $$0$i$i958 + 1 | 0;
       $60 = ($58 | 0) == ($53 | 0);
       if ($60) {
        $$0$i$i9$lcssa = $59;
        break;
       } else {
        $$0$i$i958 = $59;
        $57 = $58;
       }
      }
     }
     HEAP32[$__me >> 2] = $$0$i$i9$lcssa;
     $$2 = $$062;
    }
    break;
   }
  case 4:
   {
    $61 = HEAP32[$__me >> 2] | 0;
    $62 = $$062 + 1 | 0;
    $$$0 = $__neg ? $62 : $$062;
    $$$027 = $$$0;
    $63 = HEAP32[$8 >> 2] | 0;
    $64 = $$$0 >>> 0 < $__de >>> 0;
    L15 : do {
     if ($64) {
      $__d$036 = $$$0;
      while (1) {
       $65 = HEAP8[$__d$036 >> 0] | 0;
       $isascii1$i = $65 << 24 >> 24 > -1;
       if (!$isascii1$i) {
        $__d$0$lcssa = $__d$036;
        break L15;
       }
       $66 = $65 << 24 >> 24;
       $67 = $63 + ($66 << 1) | 0;
       $68 = HEAP16[$67 >> 1] | 0;
       $69 = $68 & 2048;
       $70 = $69 << 16 >> 16 == 0;
       if ($70) {
        $__d$0$lcssa = $__d$036;
        break L15;
       }
       $71 = $__d$036 + 1 | 0;
       $72 = $71 >>> 0 < $__de >>> 0;
       if ($72) {
        $__d$036 = $71;
       } else {
        $__d$0$lcssa = $71;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while (0);
    $__d$0$lcssa26 = $__d$0$lcssa;
    if ($9) {
     $73 = -2 - $__d$0$lcssa26 | 0;
     $74 = $__d$0$lcssa26 >>> 0 > $$$027 >>> 0;
     $75 = $74 ? $$$027 : $__d$0$lcssa26;
     $76 = $75 ^ -1;
     $77 = $73 - $76 | 0;
     $78 = $17 >>> 0 > $77 >>> 0;
     $umax28 = $78 ? $17 : $77;
     $79 = $__d$0$lcssa >>> 0 > $$$0 >>> 0;
     $80 = $79 & $18;
     if ($80) {
      $__d$142 = $__d$0$lcssa;
      $__f$043 = $__fd;
      while (1) {
       $81 = $__d$142 + -1 | 0;
       $82 = HEAP8[$81 >> 0] | 0;
       $83 = HEAP32[$__me >> 2] | 0;
       $84 = $83 + 1 | 0;
       HEAP32[$__me >> 2] = $84;
       HEAP8[$83 >> 0] = $82;
       $85 = $__f$043 + -1 | 0;
       $86 = $81 >>> 0 > $$$0 >>> 0;
       $87 = ($__f$043 | 0) > 1;
       $88 = $86 & $87;
       if ($88) {
        $__d$142 = $81;
        $__f$043 = $85;
       } else {
        $$lcssa = $87;
        break;
       }
      }
     } else {
      $$lcssa = $18;
     }
     $89 = $13 + $umax28 | 0;
     $scevgep$sum = $umax28 + 1 | 0;
     $scevgep29 = $__d$0$lcssa + $scevgep$sum | 0;
     if ($$lcssa) {
      $90 = HEAP32[$__ct >> 2] | 0;
      $91 = $90 + 28 | 0;
      $92 = HEAP32[$91 >> 2] | 0;
      $93 = (tempInt = FUNCTION_TABLE_iii[$92 & 1023]($__ct, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $97 = $93;
     } else {
      $97 = 0;
     }
     $94 = ($89 | 0) > 0;
     $95 = HEAP32[$__me >> 2] | 0;
     $96 = $95 + 1 | 0;
     HEAP32[$__me >> 2] = $96;
     if ($94) {
      $98 = $95;
      $__f$146 = $89;
      while (1) {
       HEAP8[$98 >> 0] = $97;
       $99 = $__f$146 + -1 | 0;
       $100 = ($__f$146 | 0) > 1;
       $101 = HEAP32[$__me >> 2] | 0;
       $102 = $101 + 1 | 0;
       HEAP32[$__me >> 2] = $102;
       if ($100) {
        $98 = $101;
        $__f$146 = $99;
       } else {
        $$lcssa34 = $101;
        break;
       }
      }
     } else {
      $$lcssa34 = $95;
     }
     HEAP8[$$lcssa34 >> 0] = $__dp;
     $__d$2 = $scevgep29;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $103 = ($__d$2 | 0) == ($$$0 | 0);
    if ($103) {
     $104 = HEAP32[$__ct >> 2] | 0;
     $105 = $104 + 28 | 0;
     $106 = HEAP32[$105 >> 2] | 0;
     $107 = (tempInt = FUNCTION_TABLE_iii[$106 & 1023]($__ct, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $108 = HEAP32[$__me >> 2] | 0;
     $109 = $108 + 1 | 0;
     HEAP32[$__me >> 2] = $109;
     HEAP8[$108 >> 0] = $107;
    } else {
     $110 = HEAP8[$__grp >> 0] | 0;
     $111 = $110 & 1;
     $112 = $111 << 24 >> 24 == 0;
     $113 = HEAP32[$10 >> 2] | 0;
     $114 = $110 & 255;
     $115 = $114 >>> 1;
     $116 = $112 ? $115 : $113;
     $117 = ($116 | 0) == 0;
     if ($117) {
      $__gl$0$ph = -1;
     } else {
      $118 = HEAP32[$11 >> 2] | 0;
      $119 = $112 ? $12 : $118;
      $120 = HEAP8[$119 >> 0] | 0;
      $121 = $120 << 24 >> 24;
      $__gl$0$ph = $121;
     }
     $122 = ($__d$2 | 0) == ($$$0 | 0);
     if (!$122) {
      $__d$351 = $__d$2;
      $__gl$054 = $__gl$0$ph;
      $__ig$053 = 0;
      $__ng$052 = 0;
      while (1) {
       $123 = ($__ng$052 | 0) == ($__gl$054 | 0);
       if ($123) {
        $124 = HEAP32[$__me >> 2] | 0;
        $125 = $124 + 1 | 0;
        HEAP32[$__me >> 2] = $125;
        HEAP8[$124 >> 0] = $__ts;
        $126 = $__ig$053 + 1 | 0;
        $127 = HEAP8[$__grp >> 0] | 0;
        $128 = $127 & 1;
        $129 = $128 << 24 >> 24 == 0;
        $130 = HEAP32[$10 >> 2] | 0;
        $131 = $127 & 255;
        $132 = $131 >>> 1;
        $133 = $129 ? $132 : $130;
        $134 = $126 >>> 0 < $133 >>> 0;
        if ($134) {
         $135 = HEAP32[$11 >> 2] | 0;
         $136 = $129 ? $12 : $135;
         $137 = $136 + $126 | 0;
         $138 = HEAP8[$137 >> 0] | 0;
         $139 = $138 << 24 >> 24 == 127;
         $140 = $138 << 24 >> 24;
         $$ = $139 ? -1 : $140;
         $__gl$1 = $$;
         $__ig$1 = $126;
         $__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$052;
         $__ig$1 = $126;
         $__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$054;
        $__ig$1 = $__ig$053;
        $__ng$1 = $__ng$052;
       }
       $141 = $__d$351 + -1 | 0;
       $142 = HEAP8[$141 >> 0] | 0;
       $143 = HEAP32[$__me >> 2] | 0;
       $144 = $143 + 1 | 0;
       HEAP32[$__me >> 2] = $144;
       HEAP8[$143 >> 0] = $142;
       $145 = $__ng$1 + 1 | 0;
       $146 = ($141 | 0) == ($$$0 | 0);
       if ($146) {
        break;
       } else {
        $__d$351 = $141;
        $__gl$054 = $__gl$1;
        $__ig$053 = $__ig$1;
        $__ng$052 = $145;
       }
      }
     }
    }
    $147 = HEAP32[$__me >> 2] | 0;
    $148 = ($61 | 0) == ($147 | 0);
    if ($148) {
     $$2 = $$$0;
    } else {
     $149 = $147 + -1 | 0;
     $150 = $61 >>> 0 < $149 >>> 0;
     if ($150) {
      $$01$i$i56 = $61;
      $153 = $149;
      while (1) {
       $151 = HEAP8[$$01$i$i56 >> 0] | 0;
       $152 = HEAP8[$153 >> 0] | 0;
       HEAP8[$$01$i$i56 >> 0] = $152;
       HEAP8[$153 >> 0] = $151;
       $154 = $$01$i$i56 + 1 | 0;
       $155 = $153 + -1 | 0;
       $156 = $154 >>> 0 < $155 >>> 0;
       if ($156) {
        $$01$i$i56 = $154;
        $153 = $155;
       } else {
        $$2 = $$$0;
        break;
       }
      }
     } else {
      $$2 = $$$0;
     }
    }
    break;
   }
  default:
   {
    $$2 = $$062;
   }
  }
  $157 = $__p$061 + 1 | 0;
  $exitcond = ($157 | 0) == 4;
  if ($exitcond) {
   break;
  } else {
   $$062 = $$2;
   $__p$061 = $157;
  }
 }
 $158 = HEAP8[$__sn >> 0] | 0;
 $159 = $158 & 1;
 $160 = $159 << 24 >> 24 == 0;
 $161 = HEAP32[$0 >> 2] | 0;
 $162 = $158 & 255;
 $163 = $162 >>> 1;
 $164 = $160 ? $163 : $161;
 $165 = $164 >>> 0 > 1;
 if ($165) {
  $166 = HEAP32[$1 >> 2] | 0;
  $167 = $160 ? $2 : $166;
  $168 = $167 + $164 | 0;
  $169 = HEAP32[$__me >> 2] | 0;
  $170 = ($164 | 0) == 1;
  if ($170) {
   $$0$i$i$lcssa = $169;
  } else {
   $171 = $167 + 1 | 0;
   $$0$i$i35 = $169;
   $173 = $171;
   while (1) {
    $172 = HEAP8[$173 >> 0] | 0;
    HEAP8[$$0$i$i35 >> 0] = $172;
    $174 = $$0$i$i35 + 1 | 0;
    $175 = $173 + 1 | 0;
    $176 = ($175 | 0) == ($168 | 0);
    if ($176) {
     $$0$i$i$lcssa = $174;
     break;
    } else {
     $$0$i$i35 = $174;
     $173 = $175;
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$i$i$lcssa;
 }
 $177 = $__flags & 176;
 switch ($177 | 0) {
 case 32:
  {
   $178 = HEAP32[$__me >> 2] | 0;
   HEAP32[$__mi >> 2] = $178;
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$__mi >> 2] = $__mb;
  }
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$ = 0, $$$0 = 0, $$0$i$i30 = 0, $$0$i$i954 = 0, $$01$i$i52 = 0, $$057 = 0, $$2 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $$op = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$031 = 0, $__d$1$lcssa = 0, $__d$137 = 0, $__d$2 = 0, $__d$347 = 0, $__f$0$lcssa = 0, $__f$038 = 0, $__f$143 = 0, $__gl$0$ph = 0, $__gl$050 = 0, $__gl$1 = 0, $__ig$049 = 0, $__ig$1 = 0, $__me$promoted = 0, $__me$promoted66 = 0, $__ng$048 = 0, $__ng$1 = 0, $__p$056 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i10 = 0, $scevgep$sum = 0, $scevgep26 = 0, $scevgep27$sum = 0, $scevgep28 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sym + 4 | 0;
 $3 = $__flags & 512;
 $4 = ($3 | 0) == 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 4 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 1 | 0;
 $10 = ($__fd | 0) > 0;
 $$057 = $__db;
 $__p$056 = 0;
 asyncState ? abort(-12) | 0 : 0;
 while (1) {
  $11 = $__pat + $__p$056 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $13 = $12 << 24 >> 24;
  switch ($13 | 0) {
  case 0:
   {
    $14 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__mi >> 2] = $14;
    $$2 = $$057;
    break;
   }
  case 1:
   {
    $15 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__mi >> 2] = $15;
    $16 = HEAP32[$__ct >> 2] | 0;
    $17 = $16 + 44 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = (tempInt = FUNCTION_TABLE_iii[$18 & 1023]($__ct, 32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $20 = HEAP32[$__me >> 2] | 0;
    $21 = $20 + 4 | 0;
    HEAP32[$__me >> 2] = $21;
    HEAP32[$20 >> 2] = $19;
    $$2 = $$057;
    break;
   }
  case 3:
   {
    $22 = HEAP8[$__sn >> 0] | 0;
    $23 = $22 & 1;
    $24 = $23 << 24 >> 24 == 0;
    $25 = HEAP32[$0 >> 2] | 0;
    $26 = $22 & 255;
    $27 = $26 >>> 1;
    $28 = $24 ? $27 : $25;
    $29 = ($28 | 0) == 0;
    if ($29) {
     $$2 = $$057;
    } else {
     $30 = HEAP32[$1 >> 2] | 0;
     $31 = $24 ? $0 : $30;
     $32 = HEAP32[$31 >> 2] | 0;
     $33 = HEAP32[$__me >> 2] | 0;
     $34 = $33 + 4 | 0;
     HEAP32[$__me >> 2] = $34;
     HEAP32[$33 >> 2] = $32;
     $$2 = $$057;
    }
    break;
   }
  case 2:
   {
    $35 = HEAP8[$__sym >> 0] | 0;
    $36 = $35 & 1;
    $37 = $36 << 24 >> 24 == 0;
    $38 = HEAP32[$2 >> 2] | 0;
    $39 = $35 & 255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = ($41 | 0) == 0;
    $or$cond = $4 | $42;
    if ($or$cond) {
     $$2 = $$057;
    } else {
     $43 = HEAP32[$5 >> 2] | 0;
     $44 = $37 ? $2 : $43;
     $45 = $44 + ($41 << 2) | 0;
     $46 = HEAP32[$__me >> 2] | 0;
     $47 = ($41 | 0) == 0;
     if (!$47) {
      $$0$i$i954 = $46;
      $49 = $44;
      while (1) {
       $48 = HEAP32[$49 >> 2] | 0;
       HEAP32[$$0$i$i954 >> 2] = $48;
       $50 = $49 + 4 | 0;
       $51 = $$0$i$i954 + 4 | 0;
       $52 = ($50 | 0) == ($45 | 0);
       if ($52) {
        break;
       } else {
        $$0$i$i954 = $51;
        $49 = $50;
       }
      }
     }
     $scevgep$i10 = $46 + ($41 << 2) | 0;
     HEAP32[$__me >> 2] = $scevgep$i10;
     $$2 = $$057;
    }
    break;
   }
  case 4:
   {
    $53 = HEAP32[$__me >> 2] | 0;
    $54 = $$057 + 4 | 0;
    $$$0 = $__neg ? $54 : $$057;
    $55 = $$$0 >>> 0 < $__de >>> 0;
    L15 : do {
     if ($55) {
      $__d$031 = $$$0;
      while (1) {
       $56 = HEAP32[$__d$031 >> 2] | 0;
       $57 = HEAP32[$__ct >> 2] | 0;
       $58 = $57 + 12 | 0;
       $59 = HEAP32[$58 >> 2] | 0;
       $60 = (tempInt = FUNCTION_TABLE_iiii[$59 & 1023]($__ct, 2048, $56) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       if (!$60) {
        $__d$0$lcssa = $__d$031;
        break L15;
       }
       $61 = $__d$031 + 4 | 0;
       $62 = $61 >>> 0 < $__de >>> 0;
       if ($62) {
        $__d$031 = $61;
       } else {
        $__d$0$lcssa = $61;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while (0);
    if ($6) {
     $63 = $__d$0$lcssa >>> 0 > $$$0 >>> 0;
     $64 = $63 & $10;
     if ($64) {
      $__me$promoted66 = HEAP32[$__me >> 2] | 0;
      $68 = $__me$promoted66;
      $__d$137 = $__d$0$lcssa;
      $__f$038 = $__fd;
      while (1) {
       $65 = $__d$137 + -4 | 0;
       $66 = HEAP32[$65 >> 2] | 0;
       $67 = $68 + 4 | 0;
       HEAP32[$68 >> 2] = $66;
       $69 = $__f$038 + -1 | 0;
       $70 = $65 >>> 0 > $$$0 >>> 0;
       $71 = ($__f$038 | 0) > 1;
       $72 = $70 & $71;
       if ($72) {
        $68 = $67;
        $__d$137 = $65;
        $__f$038 = $69;
       } else {
        $$lcssa63 = $65;
        $$lcssa64 = $69;
        $$lcssa65 = $71;
        $$lcssa67 = $67;
        break;
       }
      }
      HEAP32[$__me >> 2] = $$lcssa67;
      $$lcssa = $$lcssa65;
      $__d$1$lcssa = $$lcssa63;
      $__f$0$lcssa = $$lcssa64;
     } else {
      $$lcssa = $10;
      $__d$1$lcssa = $__d$0$lcssa;
      $__f$0$lcssa = $__fd;
     }
     if ($$lcssa) {
      $73 = HEAP32[$__ct >> 2] | 0;
      $74 = $73 + 44 | 0;
      $75 = HEAP32[$74 >> 2] | 0;
      $76 = (tempInt = FUNCTION_TABLE_iii[$75 & 1023]($__ct, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $83 = $76;
     } else {
      $83 = 0;
     }
     $__me$promoted = HEAP32[$__me >> 2] | 0;
     $77 = ($__f$0$lcssa | 0) < 0;
     $$op = $__f$0$lcssa ^ -1;
     $78 = $77 ? $$op : -1;
     $79 = $__f$0$lcssa + $78 | 0;
     $80 = ($__f$0$lcssa | 0) > 0;
     if ($80) {
      $82 = $__me$promoted;
      $__f$143 = $__f$0$lcssa;
      while (1) {
       $81 = $82 + 4 | 0;
       HEAP32[$82 >> 2] = $83;
       $84 = $__f$143 + -1 | 0;
       $85 = ($__f$143 | 0) > 1;
       if ($85) {
        $82 = $81;
        $__f$143 = $84;
       } else {
        break;
       }
      }
     }
     $scevgep$sum = $79 + 2 | 0;
     $scevgep26 = $__me$promoted + ($scevgep$sum << 2) | 0;
     $scevgep27$sum = $79 + 1 | 0;
     $scevgep28 = $__me$promoted + ($scevgep27$sum << 2) | 0;
     HEAP32[$__me >> 2] = $scevgep26;
     HEAP32[$scevgep28 >> 2] = $__dp;
     $__d$2 = $__d$1$lcssa;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $86 = ($__d$2 | 0) == ($$$0 | 0);
    if ($86) {
     $87 = HEAP32[$__ct >> 2] | 0;
     $88 = $87 + 44 | 0;
     $89 = HEAP32[$88 >> 2] | 0;
     $90 = (tempInt = FUNCTION_TABLE_iii[$89 & 1023]($__ct, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $91 = HEAP32[$__me >> 2] | 0;
     $92 = $91 + 4 | 0;
     HEAP32[$__me >> 2] = $92;
     HEAP32[$91 >> 2] = $90;
     $130 = $92;
    } else {
     $93 = HEAP8[$__grp >> 0] | 0;
     $94 = $93 & 1;
     $95 = $94 << 24 >> 24 == 0;
     $96 = HEAP32[$7 >> 2] | 0;
     $97 = $93 & 255;
     $98 = $97 >>> 1;
     $99 = $95 ? $98 : $96;
     $100 = ($99 | 0) == 0;
     if ($100) {
      $__gl$0$ph = -1;
     } else {
      $101 = HEAP32[$8 >> 2] | 0;
      $102 = $95 ? $9 : $101;
      $103 = HEAP8[$102 >> 0] | 0;
      $104 = $103 << 24 >> 24;
      $__gl$0$ph = $104;
     }
     $105 = ($__d$2 | 0) == ($$$0 | 0);
     if (!$105) {
      $__d$347 = $__d$2;
      $__gl$050 = $__gl$0$ph;
      $__ig$049 = 0;
      $__ng$048 = 0;
      while (1) {
       $106 = ($__ng$048 | 0) == ($__gl$050 | 0);
       $107 = HEAP32[$__me >> 2] | 0;
       if ($106) {
        $108 = $107 + 4 | 0;
        HEAP32[$__me >> 2] = $108;
        HEAP32[$107 >> 2] = $__ts;
        $109 = $__ig$049 + 1 | 0;
        $110 = HEAP8[$__grp >> 0] | 0;
        $111 = $110 & 1;
        $112 = $111 << 24 >> 24 == 0;
        $113 = $110 & 255;
        $114 = $113 >>> 1;
        $115 = $112 ? $114 : $96;
        $116 = $109 >>> 0 < $115 >>> 0;
        if ($116) {
         $117 = HEAP32[$8 >> 2] | 0;
         $118 = $112 ? $9 : $117;
         $119 = $118 + $109 | 0;
         $120 = HEAP8[$119 >> 0] | 0;
         $121 = $120 << 24 >> 24 == 127;
         $122 = $120 << 24 >> 24;
         $$ = $121 ? -1 : $122;
         $126 = $108;
         $__gl$1 = $$;
         $__ig$1 = $109;
         $__ng$1 = 0;
        } else {
         $126 = $108;
         $__gl$1 = $__ng$048;
         $__ig$1 = $109;
         $__ng$1 = 0;
        }
       } else {
        $126 = $107;
        $__gl$1 = $__gl$050;
        $__ig$1 = $__ig$049;
        $__ng$1 = $__ng$048;
       }
       $123 = $__d$347 + -4 | 0;
       $124 = HEAP32[$123 >> 2] | 0;
       $125 = $126 + 4 | 0;
       HEAP32[$__me >> 2] = $125;
       HEAP32[$126 >> 2] = $124;
       $127 = $__ng$1 + 1 | 0;
       $128 = ($123 | 0) == ($$$0 | 0);
       if ($128) {
        break;
       } else {
        $__d$347 = $123;
        $__gl$050 = $__gl$1;
        $__ig$049 = $__ig$1;
        $__ng$048 = $127;
       }
      }
     }
     $$pre29 = HEAP32[$__me >> 2] | 0;
     $130 = $$pre29;
    }
    $129 = ($53 | 0) == ($130 | 0);
    if ($129) {
     $$2 = $$$0;
    } else {
     $131 = $130 + -4 | 0;
     $132 = $53 >>> 0 < $131 >>> 0;
     if ($132) {
      $$01$i$i52 = $53;
      $135 = $131;
      while (1) {
       $133 = HEAP32[$$01$i$i52 >> 2] | 0;
       $134 = HEAP32[$135 >> 2] | 0;
       HEAP32[$$01$i$i52 >> 2] = $134;
       HEAP32[$135 >> 2] = $133;
       $136 = $$01$i$i52 + 4 | 0;
       $137 = $135 + -4 | 0;
       $138 = $136 >>> 0 < $137 >>> 0;
       if ($138) {
        $$01$i$i52 = $136;
        $135 = $137;
       } else {
        $$2 = $$$0;
        break;
       }
      }
     } else {
      $$2 = $$$0;
     }
    }
    break;
   }
  default:
   {
    $$2 = $$057;
   }
  }
  $139 = $__p$056 + 1 | 0;
  $exitcond = ($139 | 0) == 4;
  if ($exitcond) {
   break;
  } else {
   $$057 = $$2;
   $__p$056 = $139;
  }
 }
 $140 = HEAP8[$__sn >> 0] | 0;
 $141 = $140 & 1;
 $142 = $141 << 24 >> 24 == 0;
 $143 = HEAP32[$0 >> 2] | 0;
 $144 = $140 & 255;
 $145 = $144 >>> 1;
 $146 = $142 ? $145 : $143;
 $147 = $146 >>> 0 > 1;
 if ($147) {
  $148 = HEAP32[$1 >> 2] | 0;
  $149 = $142 ? $0 : $148;
  $150 = $149 + 4 | 0;
  $151 = $149 + ($146 << 2) | 0;
  $152 = HEAP32[$__me >> 2] | 0;
  $153 = $150;
  $154 = $151;
  $155 = $154 - $153 | 0;
  $156 = ($146 | 0) == 1;
  if (!$156) {
   $$0$i$i30 = $152;
   $158 = $150;
   while (1) {
    $157 = HEAP32[$158 >> 2] | 0;
    HEAP32[$$0$i$i30 >> 2] = $157;
    $159 = $158 + 4 | 0;
    $160 = $$0$i$i30 + 4 | 0;
    $161 = ($159 | 0) == ($151 | 0);
    if ($161) {
     break;
    } else {
     $$0$i$i30 = $160;
     $158 = $159;
    }
   }
  }
  $162 = $155 >>> 2;
  $scevgep$i = $152 + ($162 << 2) | 0;
  HEAP32[$__me >> 2] = $scevgep$i;
 }
 $163 = $__flags & 176;
 switch ($163 | 0) {
 case 32:
  {
   $164 = HEAP32[$__me >> 2] | 0;
   HEAP32[$__mi >> 2] = $164;
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$__mi >> 2] = $__mb;
  }
 }
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre17$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 892 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $__buf = sp + 900 | 0;
 $__bb = sp + 888 | 0;
 $__digits = sp + 488 | 0;
 $__loc = sp + 480 | 0;
 $__pat = sp + 896 | 0;
 $__dp = sp + 476 | 0;
 $__ts = sp + 472 | 0;
 $__grp = sp + 460 | 0;
 $__sym = sp + 448 | 0;
 $__sn = sp + 436 | 0;
 $__fd = sp + 432 | 0;
 $__mbuf = sp + 32 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 20 | 0;
 $0 = sp + 16 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$vararg_buffer >> 3] = $__units;
 $1 = (tempInt = _snprintf($__buf, 100, 21739, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = $1 >>> 0 > 99;
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = __THREW__;
   __THREW__ = 0;
   $5 = $4 & 1;
   if ($5) {
    $139 = 0;
    $140 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1 >> 3] = $__units;
    $6 = (tempInt = invoke_iiiii(467, $__bb | 0, $3 | 0, 21739 | 0, $vararg_buffer1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $7 = __THREW__;
    __THREW__ = 0;
    $8 = $7 & 1;
    if ($8) {
     $139 = 0;
     $140 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb >> 2] | 0;
     $10 = ($9 | 0) == (0 | 0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $11 = __THREW__;
      __THREW__ = 0;
      $12 = $11 & 1;
      if ($12) {
       $139 = 0;
       $140 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb >> 2] | 0;
      $16 = $$pre;
     } else {
      $16 = $9;
     }
     $15 = $16;
     $17 = $6 << 2;
     $18 = (tempInt = _malloc($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $19 = $18;
     $20 = ($18 | 0) == (0 | 0);
     if ($20) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $21 = __THREW__;
      __THREW__ = 0;
      $22 = $21 & 1;
      if ($22) {
       $139 = $15;
       $140 = $19;
       label = 7;
      } else {
       $127 = $19;
       $130 = $15;
       $__db$0 = 0;
       $__n$0 = $6;
       label = 10;
      }
     } else {
      $127 = $19;
      $130 = $15;
      $__db$0 = $18;
      $__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $127 = 0;
   $130 = 0;
   $__db$0 = $__digits;
   $__n$0 = $1;
   label = 10;
  }
 } while (0);
 if ((label | 0) == 10) {
  __THREW__ = 0;
  $23 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  $25 = $24 & 1;
  if ($25) {
   $139 = $130;
   $140 = $127;
   label = 7;
  } else {
   HEAP32[$__loc >> 2] = $23;
   __THREW__ = 0;
   $26 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   $28 = $27 & 1;
   if ($28) {
    label = 22;
   } else {
    $29 = HEAP32[$__bb >> 2] | 0;
    $30 = $29 + $__n$0 | 0;
    $31 = HEAP32[$26 >> 2] | 0;
    $32 = $31 + 48 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($33 | 0, $26 | 0, $29 | 0, $30 | 0, $__db$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $34 = __THREW__;
    __THREW__ = 0;
    $35 = $34 & 1;
    if ($35) {
     label = 22;
    } else {
     $36 = ($__n$0 | 0) == 0;
     if ($36) {
      $46 = 0;
     } else {
      $37 = HEAP32[$__bb >> 2] | 0;
      $38 = HEAP8[$37 >> 0] | 0;
      $39 = $38 << 24 >> 24 == 45;
      $46 = $39;
     }
     HEAP32[$__grp >> 2] = 0;
     $40 = $__grp + 4 | 0;
     HEAP32[$40 >> 2] = 0;
     $41 = $__grp + 8 | 0;
     HEAP32[$41 >> 2] = 0;
     HEAP32[$__sym >> 2] = 0;
     $42 = $__sym + 4 | 0;
     HEAP32[$42 >> 2] = 0;
     $43 = $__sym + 8 | 0;
     HEAP32[$43 >> 2] = 0;
     HEAP32[$__sn >> 2] = 0;
     $44 = $__sn + 4 | 0;
     HEAP32[$44 >> 2] = 0;
     $45 = $__sn + 8 | 0;
     HEAP32[$45 >> 2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(494, $__intl | 0, $46 | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__sn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
     $47 = __THREW__;
     __THREW__ = 0;
     $48 = $47 & 1;
     if ($48) {
      $102 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $103 = tempRet0;
      $$0 = $102;
      $$01 = $103;
      $$pre17 = $23;
     } else {
      $49 = HEAP32[$__fd >> 2] | 0;
      $50 = ($__n$0 | 0) > ($49 | 0);
      if ($50) {
       $51 = $__n$0 - $49 | 0;
       $52 = $51 << 1;
       $53 = HEAP8[$__sn >> 0] | 0;
       $54 = $53 & 1;
       $55 = $54 << 24 >> 24 == 0;
       $56 = $__sn + 4 | 0;
       $57 = HEAP32[$56 >> 2] | 0;
       $58 = $53 & 255;
       $59 = $58 >>> 1;
       $60 = $55 ? $59 : $57;
       $61 = HEAP8[$__sym >> 0] | 0;
       $62 = $61 & 1;
       $63 = $62 << 24 >> 24 == 0;
       $64 = $__sym + 4 | 0;
       $65 = HEAP32[$64 >> 2] | 0;
       $66 = $61 & 255;
       $67 = $66 >>> 1;
       $68 = $63 ? $67 : $65;
       $69 = $52 | 1;
       $70 = $69 + $49 | 0;
       $71 = $70 + $60 | 0;
       $72 = $71 + $68 | 0;
       $93 = $72;
      } else {
       $73 = HEAP8[$__sn >> 0] | 0;
       $74 = $73 & 1;
       $75 = $74 << 24 >> 24 == 0;
       $76 = $__sn + 4 | 0;
       $77 = HEAP32[$76 >> 2] | 0;
       $78 = $73 & 255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = HEAP8[$__sym >> 0] | 0;
       $82 = $81 & 1;
       $83 = $82 << 24 >> 24 == 0;
       $84 = $__sym + 4 | 0;
       $85 = HEAP32[$84 >> 2] | 0;
       $86 = $81 & 255;
       $87 = $86 >>> 1;
       $88 = $83 ? $87 : $85;
       $89 = $49 + 2 | 0;
       $90 = $89 + $80 | 0;
       $91 = $90 + $88 | 0;
       $93 = $91;
      }
      $92 = $93 >>> 0 > 100;
      if ($92) {
       $94 = $93 << 2;
       $95 = (tempInt = _malloc($94) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $96 = $95;
       $97 = ($95 | 0) == (0 | 0);
       if ($97) {
        __THREW__ = 0;
        invoke_v(468), asyncState ? abort(-12) | 0 : 0;
        $98 = __THREW__;
        __THREW__ = 0;
        $99 = $98 & 1;
        if ($99) {
         $107 = $96;
        } else {
         $123 = $96;
         $__mb$0 = 0;
         label = 26;
        }
       } else {
        $123 = $96;
        $__mb$0 = $95;
        label = 26;
       }
      } else {
       $123 = 0;
       $__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label | 0) == 26) {
       $109 = $__iob + 4 | 0;
       $110 = HEAP32[$109 >> 2] | 0;
       $111 = $__db$0 + ($__n$0 << 2) | 0;
       $112 = HEAP32[$__dp >> 2] | 0;
       $113 = HEAP32[$__ts >> 2] | 0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(495, $__mb$0 | 0, $__mi | 0, $__me | 0, $110 | 0, $__db$0 | 0, $111 | 0, $26 | 0, $46 | 0, $__pat | 0, $112 | 0, $113 | 0, $__grp | 0, $__sym | 0, $__sn | 0, $49 | 0), asyncState ? abort(-12) | 0 : 0;
       $114 = __THREW__;
       __THREW__ = 0;
       $115 = $114 & 1;
       if ($115) {
        $107 = $123;
       } else {
        $116 = HEAP32[$__s >> 2] | 0;
        HEAP32[$0 >> 2] = $116;
        $117 = HEAP32[$__mi >> 2] | 0;
        $118 = HEAP32[$__me >> 2] | 0;
        __THREW__ = 0;
        HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
        $119 = (tempInt = invoke_iiiiiii(474, $$byval_copy | 0, $__mb$0 | 0, $117 | 0, $118 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $120 = __THREW__;
        __THREW__ = 0;
        $121 = $120 & 1;
        if ($121) {
         $107 = $123;
        } else {
         $122 = ($123 | 0) == 0;
         if ($122) {
          $125 = $23;
         } else {
          $124 = $123;
          _free($124), asyncState ? abort(-12) | 0 : 0;
          $$pre19 = HEAP32[$__loc >> 2] | 0;
          $125 = $$pre19;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
         (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($125) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $126 = ($127 | 0) == 0;
         if (!$126) {
          $128 = $127;
          _free($128), asyncState ? abort(-12) | 0 : 0;
         }
         $129 = ($130 | 0) == 0;
         if (!$129) {
          $131 = $130;
          _free($131), asyncState ? abort(-12) | 0 : 0;
         }
         STACKTOP = sp;
         return $119 | 0;
        }
       }
      }
      $104 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $105 = tempRet0;
      $106 = ($107 | 0) == 0;
      if ($106) {
       $$0 = $104;
       $$01 = $105;
       $$pre17 = $23;
      } else {
       $108 = $107;
       _free($108), asyncState ? abort(-12) | 0 : 0;
       $$pre17$pre = HEAP32[$__loc >> 2] | 0;
       $$0 = $104;
       $$01 = $105;
       $$pre17 = $$pre17$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$12 = $$01;
     $132 = $$pre17;
    }
   }
   if ((label | 0) == 22) {
    $100 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $101 = tempRet0;
    $$1 = $100;
    $$12 = $101;
    $132 = $23;
   }
   (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($132) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$2 = $$1;
   $$23 = $$12;
   $134 = $127;
   $137 = $130;
  }
 }
 if ((label | 0) == 7) {
  $13 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $14 = tempRet0;
  $$2 = $13;
  $$23 = $14;
  $134 = $140;
  $137 = $139;
 }
 $133 = ($134 | 0) == 0;
 if (!$133) {
  $135 = $134;
  _free($135), asyncState ? abort(-12) | 0 : 0;
 }
 $136 = ($137 | 0) == 0;
 if (!$136) {
  $138 = $137;
  _free($138), asyncState ? abort(-12) | 0 : 0;
 }
 ___resumeException($$2 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer6yyfillEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $line = 0, $offset_cursor = 0, $offset_marker = 0, $offset_start = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $58 = sp + 112 | 0;
 $line = sp + 20 | 0;
 $76 = sp;
 $73 = $this;
 $77 = $73;
 $78 = HEAP32[$77 >> 2] | 0;
 $79 = ($78 | 0) != (0 | 0);
 if (!$79) {
  STACKTOP = sp;
  return;
 }
 $80 = HEAP32[$77 >> 2] | 0;
 $81 = HEAP32[$80 >> 2] | 0;
 $82 = $81 + -12 | 0;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = $80 + $83 | 0;
 $72 = $84;
 $85 = $72;
 $71 = $85;
 $86 = $71;
 $70 = $86;
 $87 = $70;
 $88 = $87 + 16 | 0;
 $89 = HEAP32[$88 >> 2] | 0;
 $90 = $89 & 5;
 $91 = ($90 | 0) != 0;
 if ($91) {
  STACKTOP = sp;
  return;
 }
 $92 = $77 + 20 | 0;
 $93 = HEAP32[$92 >> 2] | 0;
 $94 = $77 + 16 | 0;
 $95 = HEAP32[$94 >> 2] | 0;
 $96 = $93;
 $97 = $95;
 $98 = $96 - $97 | 0;
 $offset_start = $98;
 $99 = $77 + 24 | 0;
 $100 = HEAP32[$99 >> 2] | 0;
 $101 = $77 + 20 | 0;
 $102 = HEAP32[$101 >> 2] | 0;
 $103 = $100;
 $104 = $102;
 $105 = $103 - $104 | 0;
 $offset_marker = $105;
 $106 = $77 + 28 | 0;
 $107 = HEAP32[$106 >> 2] | 0;
 $108 = $77 + 20 | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 $110 = $107;
 $111 = $109;
 $112 = $110 - $111 | 0;
 $offset_cursor = $112;
 $113 = $77 + 4 | 0;
 $114 = $offset_start;
 __THREW__ = 0;
 (tempInt = invoke_iiii(416, $113 | 0, 0, $114 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $115 = __THREW__;
 __THREW__ = 0;
 $116 = $115 & 1;
 if ($116) {
  $282 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $283 = tempRet0;
  ___clang_call_terminate($282), asyncState ? abort(-12) | 0 : 0;
 }
 $69 = $line;
 $117 = $69;
 $68 = $117;
 $118 = $68;
 $67 = $118;
 $119 = $67;
 $66 = $119;
 $65 = $117;
 $120 = $65;
 $64 = $120;
 $121 = $64;
 $63 = $121;
 $122 = $63;
 $__a$i$i = $122;
 $__i$i$i = 0;
 while (1) {
  $123 = $__i$i$i;
  $124 = $123 >>> 0 < 3;
  if (!$124) {
   break;
  }
  $125 = $__i$i$i;
  $126 = $__a$i$i;
  $127 = $126 + ($125 << 2) | 0;
  HEAP32[$127 >> 2] = 0;
  $128 = $__i$i$i;
  $129 = $128 + 1 | 0;
  $__i$i$i = $129;
 }
 $130 = HEAP32[$77 >> 2] | 0;
 $61 = $130;
 $62 = $line;
 $131 = $61;
 $132 = $62;
 $133 = $61;
 $134 = HEAP32[$133 >> 2] | 0;
 $135 = $134 + -12 | 0;
 $136 = HEAP32[$135 >> 2] | 0;
 $137 = $133 + $136 | 0;
 $56 = $137;
 $57 = 10;
 $138 = $56;
 __THREW__ = 0;
 $139 = (tempInt = invoke_ii(417, $138 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $140 = __THREW__;
 __THREW__ = 0;
 $141 = $140 & 1;
 do {
  if ($141) {
   label = 28;
  } else {
   HEAP32[$58 >> 2] = $139;
   $55 = $58;
   $142 = $55;
   __THREW__ = 0;
   $143 = (tempInt = invoke_iii(398, $142 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $144 = __THREW__;
   __THREW__ = 0;
   $145 = $144 & 1;
   if (!$145) {
    $146 = $57;
    $53 = $143;
    $54 = $146;
    $147 = $53;
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = $148 + 28 | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    $151 = $54;
    __THREW__ = 0;
    $152 = (tempInt = invoke_iii($150 | 0, $147 | 0, $151 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $153 = __THREW__;
    __THREW__ = 0;
    $154 = $153 & 1;
    if (!$154) {
     __ZNSt3__16localeD2Ev($58), asyncState ? abort(-12) | 0 : 0;
     __THREW__ = 0;
     (tempInt = invoke_iiii(418, $131 | 0, $132 | 0, $152 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $159 = __THREW__;
     __THREW__ = 0;
     $160 = $159 & 1;
     if ($160) {
      label = 28;
      break;
     }
     $161 = $77 + 4 | 0;
     __THREW__ = 0;
     invoke_viii(401, $76 | 0, 14173 | 0, $line | 0), asyncState ? abort(-12) | 0 : 0;
     $162 = __THREW__;
     __THREW__ = 0;
     $163 = $162 & 1;
     if ($163) {
      label = 28;
      break;
     }
     $51 = $161;
     $52 = $76;
     $164 = $51;
     $165 = $52;
     $49 = $164;
     $50 = $165;
     $166 = $49;
     $167 = $50;
     $48 = $167;
     $168 = $48;
     $47 = $168;
     $169 = $47;
     $46 = $169;
     $170 = $46;
     $45 = $170;
     $171 = $45;
     $44 = $171;
     $172 = $44;
     $173 = HEAP8[$172 >> 0] | 0;
     $174 = $173 & 255;
     $175 = $174 & 1;
     $176 = ($175 | 0) != 0;
     if ($176) {
      $38 = $169;
      $177 = $38;
      $37 = $177;
      $178 = $37;
      $36 = $178;
      $179 = $36;
      $180 = $179 + 8 | 0;
      $181 = HEAP32[$180 >> 2] | 0;
      $188 = $181;
     } else {
      $43 = $169;
      $182 = $43;
      $42 = $182;
      $183 = $42;
      $41 = $183;
      $184 = $41;
      $185 = $184 + 1 | 0;
      $40 = $185;
      $186 = $40;
      $39 = $186;
      $187 = $39;
      $188 = $187;
     }
     $35 = $188;
     $189 = $35;
     $190 = $50;
     $34 = $190;
     $191 = $34;
     $33 = $191;
     $192 = $33;
     $32 = $192;
     $193 = $32;
     $31 = $193;
     $194 = $31;
     $195 = HEAP8[$194 >> 0] | 0;
     $196 = $195 & 255;
     $197 = $196 & 1;
     $198 = ($197 | 0) != 0;
     if ($198) {
      $27 = $191;
      $199 = $27;
      $26 = $199;
      $200 = $26;
      $25 = $200;
      $201 = $25;
      $202 = $201 + 4 | 0;
      $203 = HEAP32[$202 >> 2] | 0;
      $210 = $203;
     } else {
      $30 = $191;
      $204 = $30;
      $29 = $204;
      $205 = $29;
      $28 = $205;
      $206 = $28;
      $207 = HEAP8[$206 >> 0] | 0;
      $208 = $207 & 255;
      $209 = $208 >> 1;
      $210 = $209;
     }
     __THREW__ = 0;
     (tempInt = invoke_iiii(365, $166 | 0, $189 | 0, $210 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $211 = __THREW__;
     __THREW__ = 0;
     $212 = $211 & 1;
     if ($212) {
      $279 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $280 = tempRet0;
      $74 = $279;
      $75 = $280;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($76), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line), asyncState ? abort(-12) | 0 : 0;
      $281 = $74;
      ___clang_call_terminate($281), asyncState ? abort(-12) | 0 : 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($76), asyncState ? abort(-12) | 0 : 0;
     $213 = $77 + 4 | 0;
     $24 = $213;
     $214 = $24;
     $23 = $214;
     $215 = $23;
     $22 = $215;
     $216 = $22;
     $21 = $216;
     $217 = $21;
     $20 = $217;
     $218 = $20;
     $19 = $218;
     $219 = $19;
     $220 = HEAP8[$219 >> 0] | 0;
     $221 = $220 & 255;
     $222 = $221 & 1;
     $223 = ($222 | 0) != 0;
     if ($223) {
      $13 = $216;
      $224 = $13;
      $12 = $224;
      $225 = $12;
      $11 = $225;
      $226 = $11;
      $227 = $226 + 8 | 0;
      $228 = HEAP32[$227 >> 2] | 0;
      $235 = $228;
     } else {
      $18 = $216;
      $229 = $18;
      $17 = $229;
      $230 = $17;
      $16 = $230;
      $231 = $16;
      $232 = $231 + 1 | 0;
      $15 = $232;
      $233 = $15;
      $14 = $233;
      $234 = $14;
      $235 = $234;
     }
     $10 = $235;
     $236 = $10;
     $237 = $77 + 16 | 0;
     HEAP32[$237 >> 2] = $236;
     $238 = $77 + 16 | 0;
     $239 = HEAP32[$238 >> 2] | 0;
     $240 = $77 + 20 | 0;
     HEAP32[$240 >> 2] = $239;
     $241 = $77 + 20 | 0;
     $242 = HEAP32[$241 >> 2] | 0;
     $243 = $offset_marker;
     $244 = $242 + $243 | 0;
     $245 = $77 + 24 | 0;
     HEAP32[$245 >> 2] = $244;
     $246 = $77 + 20 | 0;
     $247 = HEAP32[$246 >> 2] | 0;
     $248 = $offset_cursor;
     $249 = $247 + $248 | 0;
     $250 = $77 + 28 | 0;
     HEAP32[$250 >> 2] = $249;
     $251 = $77 + 20 | 0;
     $252 = HEAP32[$251 >> 2] | 0;
     $253 = $77 + 4 | 0;
     $9 = $253;
     $254 = $9;
     $8 = $254;
     $255 = $8;
     $7 = $255;
     $256 = $7;
     $6 = $256;
     $257 = $6;
     $258 = HEAP8[$257 >> 0] | 0;
     $259 = $258 & 255;
     $260 = $259 & 1;
     $261 = ($260 | 0) != 0;
     if ($261) {
      $2 = $254;
      $262 = $2;
      $1 = $262;
      $263 = $1;
      $0 = $263;
      $264 = $0;
      $265 = $264 + 4 | 0;
      $266 = HEAP32[$265 >> 2] | 0;
      $274 = $266;
     } else {
      $5 = $254;
      $267 = $5;
      $4 = $267;
      $268 = $4;
      $3 = $268;
      $269 = $3;
      $270 = HEAP8[$269 >> 0] | 0;
      $271 = $270 & 255;
      $272 = $271 >> 1;
      $274 = $272;
     }
     $273 = $252 + $274 | 0;
     $275 = $273 + -1 | 0;
     $276 = $77 + 32 | 0;
     HEAP32[$276 >> 2] = $275;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line), asyncState ? abort(-12) | 0 : 0;
     STACKTOP = sp;
     return;
    }
   }
   $155 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $156 = tempRet0;
   $59 = $155;
   $60 = $156;
   __ZNSt3__16localeD2Ev($58), asyncState ? abort(-12) | 0 : 0;
   $157 = $59;
   $158 = $60;
   $eh$lpad$body$index2Z2D = $158;
   $eh$lpad$body$indexZ2D = $157;
  }
 } while (0);
 if ((label | 0) == 28) {
  $277 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $278 = tempRet0;
  $eh$lpad$body$index2Z2D = $278;
  $eh$lpad$body$indexZ2D = $277;
 }
 $74 = $eh$lpad$body$indexZ2D;
 $75 = $eh$lpad$body$index2Z2D;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line), asyncState ? abort(-12) | 0 : 0;
 $281 = $74;
 ___clang_call_terminate($281), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 76 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $__buf = sp + 288 | 0;
 $__bb = sp + 72 | 0;
 $__digits = sp + 188 | 0;
 $__loc = sp + 68 | 0;
 $__pat = sp + 184 | 0;
 $__dp = sp + 181 | 0;
 $__ts = sp + 180 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__sn = sp + 32 | 0;
 $__fd = sp + 28 | 0;
 $__mbuf = sp + 80 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 20 | 0;
 $0 = sp + 16 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$vararg_buffer >> 3] = $__units;
 $1 = (tempInt = _snprintf($__buf, 100, 21739, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = $1 >>> 0 > 99;
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = __THREW__;
   __THREW__ = 0;
   $5 = $4 & 1;
   if ($5) {
    $137 = 0;
    $138 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1 >> 3] = $__units;
    $6 = (tempInt = invoke_iiiii(467, $__bb | 0, $3 | 0, 21739 | 0, $vararg_buffer1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $7 = __THREW__;
    __THREW__ = 0;
    $8 = $7 & 1;
    if ($8) {
     $137 = 0;
     $138 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb >> 2] | 0;
     $10 = ($9 | 0) == (0 | 0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $11 = __THREW__;
      __THREW__ = 0;
      $12 = $11 & 1;
      if ($12) {
       $137 = 0;
       $138 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb >> 2] | 0;
      $16 = $$pre;
     } else {
      $16 = $9;
     }
     $15 = $16;
     $17 = (tempInt = _malloc($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $18 = $17;
     $19 = ($17 | 0) == (0 | 0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $20 = __THREW__;
      __THREW__ = 0;
      $21 = $20 & 1;
      if ($21) {
       $137 = $15;
       $138 = $18;
       label = 7;
      } else {
       $125 = $18;
       $128 = $15;
       $__db$0 = 0;
       $__n$0 = $6;
       label = 10;
      }
     } else {
      $125 = $18;
      $128 = $15;
      $__db$0 = $17;
      $__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $125 = 0;
   $128 = 0;
   $__db$0 = $__digits;
   $__n$0 = $1;
   label = 10;
  }
 } while (0);
 if ((label | 0) == 10) {
  __THREW__ = 0;
  $22 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $23 = __THREW__;
  __THREW__ = 0;
  $24 = $23 & 1;
  if ($24) {
   $137 = $128;
   $138 = $125;
   label = 7;
  } else {
   HEAP32[$__loc >> 2] = $22;
   __THREW__ = 0;
   $25 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $26 = __THREW__;
   __THREW__ = 0;
   $27 = $26 & 1;
   if ($27) {
    label = 22;
   } else {
    $28 = HEAP32[$__bb >> 2] | 0;
    $29 = $28 + $__n$0 | 0;
    $30 = HEAP32[$25 >> 2] | 0;
    $31 = $30 + 32 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    __THREW__ = 0;
    (tempInt = invoke_iiiii($32 | 0, $25 | 0, $28 | 0, $29 | 0, $__db$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $33 = __THREW__;
    __THREW__ = 0;
    $34 = $33 & 1;
    if ($34) {
     label = 22;
    } else {
     $35 = ($__n$0 | 0) == 0;
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb >> 2] | 0;
      $37 = HEAP8[$36 >> 0] | 0;
      $38 = $37 << 24 >> 24 == 45;
      $45 = $38;
     }
     HEAP32[$__grp >> 2] = 0;
     $39 = $__grp + 4 | 0;
     HEAP32[$39 >> 2] = 0;
     $40 = $__grp + 8 | 0;
     HEAP32[$40 >> 2] = 0;
     HEAP32[$__sym >> 2] = 0;
     $41 = $__sym + 4 | 0;
     HEAP32[$41 >> 2] = 0;
     $42 = $__sym + 8 | 0;
     HEAP32[$42 >> 2] = 0;
     HEAP32[$__sn >> 2] = 0;
     $43 = $__sn + 4 | 0;
     HEAP32[$43 >> 2] = 0;
     $44 = $__sn + 8 | 0;
     HEAP32[$44 >> 2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(492, $__intl | 0, $45 | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__sn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
     $46 = __THREW__;
     __THREW__ = 0;
     $47 = $46 & 1;
     if ($47) {
      $100 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $101 = tempRet0;
      $$0 = $100;
      $$01 = $101;
      $$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd >> 2] | 0;
      $49 = ($__n$0 | 0) > ($48 | 0);
      if ($49) {
       $50 = $__n$0 - $48 | 0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn >> 0] | 0;
       $53 = $52 & 1;
       $54 = $53 << 24 >> 24 == 0;
       $55 = $__sn + 4 | 0;
       $56 = HEAP32[$55 >> 2] | 0;
       $57 = $52 & 255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym >> 0] | 0;
       $61 = $60 & 1;
       $62 = $61 << 24 >> 24 == 0;
       $63 = $__sym + 4 | 0;
       $64 = HEAP32[$63 >> 2] | 0;
       $65 = $60 & 255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = $68 + $48 | 0;
       $70 = $69 + $59 | 0;
       $71 = $70 + $67 | 0;
       $92 = $71;
      } else {
       $72 = HEAP8[$__sn >> 0] | 0;
       $73 = $72 & 1;
       $74 = $73 << 24 >> 24 == 0;
       $75 = $__sn + 4 | 0;
       $76 = HEAP32[$75 >> 2] | 0;
       $77 = $72 & 255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym >> 0] | 0;
       $81 = $80 & 1;
       $82 = $81 << 24 >> 24 == 0;
       $83 = $__sym + 4 | 0;
       $84 = HEAP32[$83 >> 2] | 0;
       $85 = $80 & 255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = $48 + 2 | 0;
       $89 = $88 + $79 | 0;
       $90 = $89 + $87 | 0;
       $92 = $90;
      }
      $91 = $92 >>> 0 > 100;
      if ($91) {
       $93 = (tempInt = _malloc($92) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $94 = $93;
       $95 = ($93 | 0) == (0 | 0);
       if ($95) {
        __THREW__ = 0;
        invoke_v(468), asyncState ? abort(-12) | 0 : 0;
        $96 = __THREW__;
        __THREW__ = 0;
        $97 = $96 & 1;
        if ($97) {
         $105 = $94;
        } else {
         $121 = $94;
         $__mb$0 = 0;
         label = 26;
        }
       } else {
        $121 = $94;
        $__mb$0 = $93;
        label = 26;
       }
      } else {
       $121 = 0;
       $__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label | 0) == 26) {
       $107 = $__iob + 4 | 0;
       $108 = HEAP32[$107 >> 2] | 0;
       $109 = $__db$0 + $__n$0 | 0;
       $110 = HEAP8[$__dp >> 0] | 0;
       $111 = HEAP8[$__ts >> 0] | 0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(493, $__mb$0 | 0, $__mi | 0, $__me | 0, $108 | 0, $__db$0 | 0, $109 | 0, $25 | 0, $45 | 0, $__pat | 0, $110 | 0, $111 | 0, $__grp | 0, $__sym | 0, $__sn | 0, $48 | 0), asyncState ? abort(-12) | 0 : 0;
       $112 = __THREW__;
       __THREW__ = 0;
       $113 = $112 & 1;
       if ($113) {
        $105 = $121;
       } else {
        $114 = HEAP32[$__s >> 2] | 0;
        HEAP32[$0 >> 2] = $114;
        $115 = HEAP32[$__mi >> 2] | 0;
        $116 = HEAP32[$__me >> 2] | 0;
        __THREW__ = 0;
        HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
        $117 = (tempInt = invoke_iiiiiii(446, $$byval_copy | 0, $__mb$0 | 0, $115 | 0, $116 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $118 = __THREW__;
        __THREW__ = 0;
        $119 = $118 & 1;
        if ($119) {
         $105 = $121;
        } else {
         $120 = ($121 | 0) == 0;
         if ($120) {
          $123 = $22;
         } else {
          $122 = $121;
          _free($122), asyncState ? abort(-12) | 0 : 0;
          $$pre22 = HEAP32[$__loc >> 2] | 0;
          $123 = $$pre22;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
         (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($123) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $124 = ($125 | 0) == 0;
         if (!$124) {
          $126 = $125;
          _free($126), asyncState ? abort(-12) | 0 : 0;
         }
         $127 = ($128 | 0) == 0;
         if (!$127) {
          $129 = $128;
          _free($129), asyncState ? abort(-12) | 0 : 0;
         }
         STACKTOP = sp;
         return $117 | 0;
        }
       }
      }
      $102 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $103 = tempRet0;
      $104 = ($105 | 0) == 0;
      if ($104) {
       $$0 = $102;
       $$01 = $103;
       $$pre20 = $22;
      } else {
       $106 = $105;
       _free($106), asyncState ? abort(-12) | 0 : 0;
       $$pre20$pre = HEAP32[$__loc >> 2] | 0;
       $$0 = $102;
       $$01 = $103;
       $$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$12 = $$01;
     $130 = $$pre20;
    }
   }
   if ((label | 0) == 22) {
    $98 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $99 = tempRet0;
    $$1 = $98;
    $$12 = $99;
    $130 = $22;
   }
   (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($130) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$2 = $$1;
   $$23 = $$12;
   $132 = $125;
   $135 = $128;
  }
 }
 if ((label | 0) == 7) {
  $13 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $14 = tempRet0;
  $$2 = $13;
  $$23 = $14;
  $132 = $138;
  $135 = $137;
 }
 $131 = ($132 | 0) == 0;
 if (!$131) {
  $133 = $132;
  _free($133), asyncState ? abort(-12) | 0 : 0;
 }
 $134 = ($135 | 0) == 0;
 if (!$134) {
  $136 = $135;
  _free($136), asyncState ? abort(-12) | 0 : 0;
 }
 ___resumeException($$2 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = $134 + 32 | 0;
 $136 = $133;
 (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135, $136) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $137 = $134 + 44 | 0;
 HEAP32[$137 >> 2] = 0;
 $138 = $134 + 48 | 0;
 $139 = HEAP32[$138 >> 2] | 0;
 $140 = $139 & 8;
 $141 = ($140 | 0) != 0;
 if ($141) {
  $142 = $134 + 32 | 0;
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147 >> 0] | 0;
  $149 = $148 & 255;
  $150 = $149 & 1;
  $151 = ($150 | 0) != 0;
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = $154 + 8 | 0;
   $156 = HEAP32[$155 >> 2] | 0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = $159 + 1 | 0;
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = $134 + 32 | 0;
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169 >> 0] | 0;
  $171 = $170 & 255;
  $172 = $171 & 1;
  $173 = ($172 | 0) != 0;
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = $176 + 4 | 0;
   $178 = HEAP32[$177 >> 2] | 0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181 >> 0] | 0;
   $183 = $182 & 255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = $164 + $186 | 0;
  $187 = $134 + 44 | 0;
  HEAP32[$187 >> 2] = $185;
  $188 = $134 + 32 | 0;
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193 >> 0] | 0;
  $195 = $194 & 255;
  $196 = $195 & 1;
  $197 = ($196 | 0) != 0;
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = $200 + 8 | 0;
   $202 = HEAP32[$201 >> 2] | 0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = $205 + 1 | 0;
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = $134 + 32 | 0;
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216 >> 0] | 0;
  $218 = $217 & 255;
  $219 = $218 & 1;
  $220 = ($219 | 0) != 0;
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = $223 + 8 | 0;
   $225 = HEAP32[$224 >> 2] | 0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = $228 + 1 | 0;
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = $134 + 44 | 0;
  $235 = HEAP32[$234 >> 2] | 0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = $236 + 8 | 0;
  HEAP32[$238 >> 2] = $237;
  $239 = $30;
  $240 = $236 + 12 | 0;
  HEAP32[$240 >> 2] = $239;
  $241 = $31;
  $242 = $236 + 16 | 0;
  HEAP32[$242 >> 2] = $241;
 }
 $243 = $134 + 48 | 0;
 $244 = HEAP32[$243 >> 2] | 0;
 $245 = $244 & 16;
 $246 = ($245 | 0) != 0;
 if (!$246) {
  STACKTOP = sp;
  return;
 }
 $247 = $134 + 32 | 0;
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251 >> 0] | 0;
 $253 = $252 & 255;
 $254 = $253 & 1;
 $255 = ($254 | 0) != 0;
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = $258 + 4 | 0;
  $260 = HEAP32[$259 >> 2] | 0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263 >> 0] | 0;
  $265 = $264 & 255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = $134 + 32 | 0;
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273 >> 0] | 0;
 $275 = $274 & 255;
 $276 = $275 & 1;
 $277 = ($276 | 0) != 0;
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = $280 + 8 | 0;
  $282 = HEAP32[$281 >> 2] | 0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = $285 + 1 | 0;
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = $290 + $291 | 0;
 $293 = $134 + 44 | 0;
 HEAP32[$293 >> 2] = $292;
 $294 = $134 + 32 | 0;
 $295 = $134 + 32 | 0;
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299 >> 0] | 0;
 $301 = $300 & 255;
 $302 = $301 & 1;
 $303 = ($302 | 0) != 0;
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306 >> 2] | 0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = $310 - 1 | 0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311, $312, 0), asyncState ? abort(-12) | 0 : 0;
 $313 = $134 + 32 | 0;
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318 >> 0] | 0;
 $320 = $319 & 255;
 $321 = $320 & 1;
 $322 = ($321 | 0) != 0;
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = $325 + 8 | 0;
  $327 = HEAP32[$326 >> 2] | 0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = $330 + 1 | 0;
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = $134 + 32 | 0;
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341 >> 0] | 0;
 $343 = $342 & 255;
 $344 = $343 & 1;
 $345 = ($344 | 0) != 0;
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = $348 + 8 | 0;
  $350 = HEAP32[$349 >> 2] | 0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = $353 + 1 | 0;
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = $134 + 32 | 0;
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363 >> 0] | 0;
 $365 = $364 & 255;
 $366 = $365 & 1;
 $367 = ($366 | 0) != 0;
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = $370 + 4 | 0;
  $372 = HEAP32[$371 >> 2] | 0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375 >> 0] | 0;
  $377 = $376 & 255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = $358 + $380 | 0;
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = $381 + 24 | 0;
 HEAP32[$383 >> 2] = $382;
 $384 = $381 + 20 | 0;
 HEAP32[$384 >> 2] = $382;
 $385 = $115;
 $386 = $381 + 28 | 0;
 HEAP32[$386 >> 2] = $385;
 $387 = $134 + 48 | 0;
 $388 = HEAP32[$387 >> 2] | 0;
 $389 = $388 & 3;
 $390 = ($389 | 0) != 0;
 if (!$390) {
  STACKTOP = sp;
  return;
 }
 $391 = $__sz;
 $116 = $134;
 $117 = $391;
 $392 = $116;
 $393 = $117;
 $394 = $392 + 24 | 0;
 $395 = HEAP32[$394 >> 2] | 0;
 $396 = $395 + $393 | 0;
 HEAP32[$394 >> 2] = $396;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$01$be = 0, $$01165 = 0, $$01165$lcssa223 = 0, $$02$be = 0, $$02164 = 0, $$02164$lcssa230 = 0, $$1$lcssa = 0, $$1157 = 0, $$1157$lcssa215 = 0, $$1157$lcssa216 = 0, $$2 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa244 = 0, $$lcssa252 = 0, $$pre = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0169 = 0, $fend$1$be = 0, $fend$1166 = 0, $fend$2$lcssa = 0, $fend$2158 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond163 = 0, $save_state = 0, $storemerge156 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $save_state = sp;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0169 = $frm;
   while (1) {
    $1 = HEAP8[$fend$0169 >> 0] | 0;
    $2 = $1 << 24 >> 24 == 0;
    if ($2) {
     $fend$0$lcssa = $fend$0169;
     break L1;
    }
    $3 = $fend$0169 + 1 | 0;
    $4 = ($3 | 0) == ($frm_end | 0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0169 = $3;
    }
   }
  }
 } while (0);
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $5 = $to_end;
 $6 = $this + 8 | 0;
 $7 = ($frm | 0) == ($frm_end | 0);
 $8 = ($to | 0) == ($to_end | 0);
 $or$cond163 = $8 | $7;
 L6 : do {
  if ($or$cond163) {
   $103 = $frm;
   label = 47;
  } else {
   $$01165 = $frm;
   $$02164 = $to;
   $fend$1166 = $fend$0$lcssa;
   L7 : while (1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $9 + 4 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16 >> 2] = $11;
    $17 = $15 + 4 | 0;
    $18 = $17;
    HEAP32[$18 >> 2] = $14;
    $19 = $fend$1166;
    $20 = $$01165;
    $21 = $19 - $20 | 0;
    $22 = $$02164;
    $23 = $5 - $22 | 0;
    $24 = $23 >> 2;
    $25 = HEAP32[$6 >> 2] | 0;
    $26 = (tempInt = _uselocale($25) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __THREW__ = 0;
    $27 = (tempInt = invoke_iiiiii(538, $$02164 | 0, $frm_nxt | 0, $21 | 0, $24 | 0, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $28 = __THREW__;
    __THREW__ = 0;
    $29 = $28 & 1;
    if ($29) {
     $$lcssa244 = $26;
     label = 9;
     break;
    }
    $30 = ($26 | 0) == (0 | 0);
    if (!$30) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $26 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $31 = __THREW__;
     __THREW__ = 0;
     $32 = $31 & 1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27 | 0) {
    case 0:
     {
      $$0 = 2;
      break L6;
      break;
     }
    case -1:
     {
      $$01165$lcssa223 = $$01165;
      $$02164$lcssa230 = $$02164;
      $$lcssa238 = $19;
      label = 14;
      break L7;
      break;
     }
    default:
     {}
    }
    $70 = HEAP32[$to_nxt >> 2] | 0;
    $71 = $70 + ($27 << 2) | 0;
    HEAP32[$to_nxt >> 2] = $71;
    $72 = ($71 | 0) == ($to_end | 0);
    if ($72) {
     label = 31;
     break;
    }
    $73 = ($fend$1166 | 0) == ($frm_end | 0);
    $$pre = HEAP32[$frm_nxt >> 2] | 0;
    if ($73) {
     $$01$be = $$pre;
     $$02$be = $71;
     $fend$1$be = $frm_end;
    } else {
     $76 = HEAP32[$6 >> 2] | 0;
     $77 = (tempInt = _uselocale($76) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     __THREW__ = 0;
     $78 = (tempInt = invoke_iiiii(539, $71 | 0, $$pre | 0, 1, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $79 = __THREW__;
     __THREW__ = 0;
     $80 = $79 & 1;
     if ($80) {
      $$lcssa252 = $77;
      label = 38;
      break;
     }
     $81 = ($77 | 0) == (0 | 0);
     if (!$81) {
      __THREW__ = 0;
      (tempInt = invoke_ii(477, $77 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $82 = __THREW__;
      __THREW__ = 0;
      $83 = $82 & 1;
      if ($83) {
       label = 37;
       break;
      }
     }
     $93 = ($78 | 0) == 0;
     if (!$93) {
      $$0 = 2;
      break L6;
     }
     $94 = HEAP32[$to_nxt >> 2] | 0;
     $95 = $94 + 4 | 0;
     HEAP32[$to_nxt >> 2] = $95;
     $96 = HEAP32[$frm_nxt >> 2] | 0;
     $97 = $96 + 1 | 0;
     HEAP32[$frm_nxt >> 2] = $97;
     $98 = ($97 | 0) == ($frm_end | 0);
     L22 : do {
      if ($98) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2158 = $97;
       while (1) {
        $99 = HEAP8[$fend$2158 >> 0] | 0;
        $100 = $99 << 24 >> 24 == 0;
        if ($100) {
         $fend$2$lcssa = $fend$2158;
         break L22;
        }
        $101 = $fend$2158 + 1 | 0;
        $102 = ($101 | 0) == ($frm_end | 0);
        if ($102) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2158 = $101;
        }
       }
      }
     } while (0);
     $$pre80 = HEAP32[$to_nxt >> 2] | 0;
     $$01$be = $97;
     $$02$be = $$pre80;
     $fend$1$be = $fend$2$lcssa;
    }
    $74 = ($$01$be | 0) == ($frm_end | 0);
    $75 = ($$02$be | 0) == ($to_end | 0);
    $or$cond = $75 | $74;
    if ($or$cond) {
     $103 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01165 = $$01$be;
     $$02164 = $$02$be;
     $fend$1166 = $fend$1$be;
    }
   }
   if ((label | 0) == 8) {
    $33 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $34 = tempRet0;
    ___clang_call_terminate($33), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 9) {
    $35 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $36 = tempRet0;
    $37 = ($$lcssa244 | 0) == (0 | 0);
    if (!$37) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $$lcssa244 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     $39 = $38 & 1;
     if ($39) {
      $40 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $41 = tempRet0;
      ___clang_call_terminate($40), asyncState ? abort(-12) | 0 : 0;
     }
    }
    ___resumeException($35 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 14) {
    HEAP32[$to_nxt >> 2] = $$02164$lcssa230;
    $42 = HEAP32[$frm_nxt >> 2] | 0;
    $43 = ($$01165$lcssa223 | 0) == ($42 | 0);
    L36 : do {
     if ($43) {
      $$1$lcssa = $$01165$lcssa223;
     } else {
      $$1157 = $$01165$lcssa223;
      $storemerge156 = $$02164$lcssa230;
      L37 : while (1) {
       $44 = $$1157;
       $45 = $$lcssa238 - $44 | 0;
       $46 = HEAP32[$6 >> 2] | 0;
       $47 = (tempInt = _uselocale($46) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       __THREW__ = 0;
       $48 = (tempInt = invoke_iiiii(539, $storemerge156 | 0, $$1157 | 0, $45 | 0, $save_state | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $49 = __THREW__;
       __THREW__ = 0;
       $50 = $49 & 1;
       if ($50) {
        $$lcssa = $47;
        label = 19;
        break;
       }
       $51 = ($47 | 0) == (0 | 0);
       if (!$51) {
        __THREW__ = 0;
        (tempInt = invoke_ii(477, $47 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $52 = __THREW__;
        __THREW__ = 0;
        $53 = $52 & 1;
        if ($53) {
         label = 18;
         break;
        }
       }
       switch ($48 | 0) {
       case -1:
        {
         $$1157$lcssa215 = $$1157;
         label = 25;
         break L37;
         break;
        }
       case -2:
        {
         $$1157$lcssa216 = $$1157;
         label = 26;
         break L37;
         break;
        }
       case 0:
        {
         $63 = $$1157 + 1 | 0;
         $$2 = $63;
         break;
        }
       default:
        {
         $64 = $$1157 + $48 | 0;
         $$2 = $64;
        }
       }
       $65 = HEAP32[$to_nxt >> 2] | 0;
       $66 = $65 + 4 | 0;
       HEAP32[$to_nxt >> 2] = $66;
       $67 = HEAP32[$frm_nxt >> 2] | 0;
       $68 = ($$2 | 0) == ($67 | 0);
       if ($68) {
        $$1$lcssa = $$2;
        break L36;
       } else {
        $$1157 = $$2;
        $storemerge156 = $66;
       }
      }
      if ((label | 0) == 18) {
       $54 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $55 = tempRet0;
       ___clang_call_terminate($54), asyncState ? abort(-12) | 0 : 0;
      } else if ((label | 0) == 19) {
       $56 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $57 = tempRet0;
       $58 = ($$lcssa | 0) == (0 | 0);
       if (!$58) {
        __THREW__ = 0;
        (tempInt = invoke_ii(477, $$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $59 = __THREW__;
        __THREW__ = 0;
        $60 = $59 & 1;
        if ($60) {
         $61 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $62 = tempRet0;
         ___clang_call_terminate($61), asyncState ? abort(-12) | 0 : 0;
        }
       }
       ___resumeException($56 | 0), asyncState ? abort(-12) | 0 : 0;
      } else if ((label | 0) == 25) {
       HEAP32[$frm_nxt >> 2] = $$1157$lcssa215;
       $$0 = 2;
       break L6;
      } else if ((label | 0) == 26) {
       HEAP32[$frm_nxt >> 2] = $$1157$lcssa216;
       $$0 = 1;
       break L6;
      }
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa;
    $not$3 = ($$1$lcssa | 0) != ($frm_end | 0);
    $69 = $not$3 & 1;
    $$0 = $69;
    break;
   } else if ((label | 0) == 31) {
    $$pre81 = HEAP32[$frm_nxt >> 2] | 0;
    $103 = $$pre81;
    label = 47;
    break;
   } else if ((label | 0) == 37) {
    $84 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $85 = tempRet0;
    ___clang_call_terminate($84), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 38) {
    $86 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $87 = tempRet0;
    $88 = ($$lcssa252 | 0) == (0 | 0);
    if (!$88) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $$lcssa252 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      $91 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $92 = tempRet0;
      ___clang_call_terminate($91), asyncState ? abort(-12) | 0 : 0;
     }
    }
    ___resumeException($86 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 if ((label | 0) == 47) {
  $not$ = ($103 | 0) != ($frm_end | 0);
  $104 = $not$ & 1;
  $$0 = $104;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src >> 2] | 0;
 $1 = ($st | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st >> 2] | 0;
  $3 = ($2 | 0) == 0;
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws | 0) == (0 | 0);
   if ($4) {
    $$36 = $wn;
    $c$2 = $2;
    $s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st >> 2] = 0;
    $$3 = $ws;
    $$7 = $wn;
    $c$4 = $2;
    $s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label | 0) == 5) {
  $5 = ($ws | 0) == (0 | 0);
  if ($5) {
   $$03 = $wn;
   $s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;
   $$47$ph = $wn;
   $s$5$ph = $0;
   label = 6;
  }
 }
 L7 : while (1) {
  if ((label | 0) == 6) {
   label = 0;
   $6 = ($$47$ph | 0) == 0;
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;
    $$4718 = $$47$ph;
    $s$520 = $s$5$ph;
   }
   while (1) {
    $63 = HEAP8[$s$520 >> 0] | 0;
    $64 = $63 & 255;
    $65 = $64 + -1 | 0;
    $66 = $65 >>> 0 < 127;
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68 | 0) == 0;
      $70 = $$4718 >>> 0 > 4;
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;
       $$5 = $$4718;
       $s$6 = $s$520;
       while (1) {
        $71 = HEAP32[$s$6 >> 2] | 0;
        $72 = $71 + -16843009 | 0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74 | 0) == 0;
        if (!$75) {
         $$1$lcssa = $$1;
         $$5$lcssa = $$5;
         $$lcssa94 = $71;
         $s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = $s$6 + 1 | 0;
        $77 = $71 & 255;
        $78 = $$1 + 4 | 0;
        HEAP32[$$1 >> 2] = $77;
        $79 = $s$6 + 2 | 0;
        $80 = HEAP8[$76 >> 0] | 0;
        $81 = $80 & 255;
        $82 = $$1 + 8 | 0;
        HEAP32[$78 >> 2] = $81;
        $83 = $s$6 + 3 | 0;
        $84 = HEAP8[$79 >> 0] | 0;
        $85 = $84 & 255;
        $86 = $$1 + 12 | 0;
        HEAP32[$82 >> 2] = $85;
        $87 = $s$6 + 4 | 0;
        $88 = HEAP8[$83 >> 0] | 0;
        $89 = $88 & 255;
        $90 = $$1 + 16 | 0;
        HEAP32[$86 >> 2] = $89;
        $91 = $$5 + -4 | 0;
        $$old1 = $91 >>> 0 > 4;
        if ($$old1) {
         $$1 = $90;
         $$5 = $91;
         $s$6 = $87;
        } else {
         $$lcssa96 = $87;
         $$lcssa97 = $90;
         $$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label | 0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96 >> 0] | 0;
        $$2 = $$lcssa97;
        $$6 = $$lcssa98;
        $94 = $$pre$pre;
        $s$7 = $$lcssa96;
        break;
       } else if ((label | 0) == 32) {
        label = 0;
        $92 = $$lcssa94 & 255;
        $$2 = $$1$lcssa;
        $$6 = $$5$lcssa;
        $94 = $92;
        $s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;
       $$6 = $$4718;
       $94 = $63;
       $s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;
      $$6 = $$4718;
      $94 = $63;
      $s$7 = $s$520;
     }
    } while (0);
    $93 = $94 & 255;
    $95 = $93 + -1 | 0;
    $96 = $95 >>> 0 < 127;
    if (!$96) {
     $$2$lcssa = $$2;
     $$6$lcssa = $$6;
     $$lcssa102 = $93;
     $s$7$lcssa = $s$7;
     break;
    }
    $97 = $s$7 + 1 | 0;
    $98 = $$2 + 4 | 0;
    HEAP32[$$2 >> 2] = $93;
    $99 = $$6 + -1 | 0;
    $100 = ($99 | 0) == 0;
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;
     $$4718 = $99;
     $s$520 = $97;
    }
   }
   $101 = $$lcssa102 + -194 | 0;
   $102 = $101 >>> 0 > 50;
   if ($102) {
    $$434 = $$2$lcssa;
    $$833 = $$6$lcssa;
    $s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = $s$7$lcssa + 1 | 0;
   $104 = 3484 + ($101 << 2) | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   $$3 = $$2$lcssa;
   $$7 = $$6$lcssa;
   $c$4 = $105;
   $s$8 = $103;
   label = 37;
   continue;
  } else if ((label | 0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0 >> 0] | 0;
   $8 = $7 & 255;
   $9 = $8 + -1 | 0;
   $10 = $9 >>> 0 < 127;
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12 | 0) == 0;
    if ($13) {
     $14 = HEAP32[$s$0 >> 2] | 0;
     $15 = $14 + -16843009 | 0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17 | 0) == 0;
     if ($18) {
      $$1415 = $$03;
      $s$116 = $s$0;
      while (1) {
       $19 = $s$116 + 4 | 0;
       $20 = $$1415 + -4 | 0;
       $21 = HEAP32[$19 >> 2] | 0;
       $22 = $21 + -16843009 | 0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24 | 0) == 0;
       if ($25) {
        $$1415 = $20;
        $s$116 = $19;
       } else {
        $$14$lcssa = $20;
        $$in = $21;
        $s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;
      $$in = $14;
      $s$1$lcssa = $s$0;
     }
     $26 = $$in & 255;
     $$25 = $$14$lcssa;
     $28 = $26;
     $s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;
     $28 = $7;
     $s$2 = $s$0;
    }
   } else {
    $$25 = $$03;
    $28 = $7;
    $s$2 = $s$0;
   }
   $27 = $28 & 255;
   $29 = $27 + -1 | 0;
   $30 = $29 >>> 0 < 127;
   if ($30) {
    $31 = $s$2 + 1 | 0;
    $32 = $$25 + -1 | 0;
    $$03 = $32;
    $s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;
    $$lcssa90 = $27;
    $s$2$lcssa = $s$2;
   }
   $33 = $$lcssa90 + -194 | 0;
   $34 = $33 >>> 0 > 50;
   if ($34) {
    $$434 = $ws;
    $$833 = $$25$lcssa;
    $s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = $s$2$lcssa + 1 | 0;
   $36 = 3484 + ($33 << 2) | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   $$36 = $$25$lcssa;
   $c$2 = $37;
   $s$3 = $35;
   label = 16;
   continue;
  } else if ((label | 0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3 >> 0] | 0;
   $39 = $38 & 255;
   $40 = $39 >>> 3;
   $41 = $40 + -16 | 0;
   $42 = $c$2 >> 26;
   $43 = $40 + $42 | 0;
   $44 = $41 | $43;
   $45 = $44 >>> 0 > 7;
   if ($45) {
    label = 17;
    break;
   }
   $47 = $s$3 + 1 | 0;
   $48 = $c$2 & 33554432;
   $49 = ($48 | 0) == 0;
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47 >> 0] | 0;
    $51 = $50 & -64;
    $52 = $51 << 24 >> 24 == -128;
    if (!$52) {
     label = 20;
     break;
    }
    $54 = $s$3 + 2 | 0;
    $55 = $c$2 & 524288;
    $56 = ($55 | 0) == 0;
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54 >> 0] | 0;
     $58 = $57 & -64;
     $59 = $58 << 24 >> 24 == -128;
     if (!$59) {
      label = 23;
      break;
     }
     $61 = $s$3 + 3 | 0;
     $s$4 = $61;
    }
   }
   $62 = $$36 + -1 | 0;
   $$03 = $62;
   $s$0 = $s$4;
   label = 7;
   continue;
  } else if ((label | 0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8 >> 0] | 0;
   $107 = $106 & 255;
   $108 = $107 >>> 3;
   $109 = $108 + -16 | 0;
   $110 = $c$4 >> 26;
   $111 = $108 + $110 | 0;
   $112 = $109 | $111;
   $113 = $112 >>> 0 > 7;
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = $s$8 + 1 | 0;
   $117 = $107 + -128 | 0;
   $118 = $117 | $115;
   $119 = ($118 | 0) < 0;
   if ($119) {
    $120 = HEAP8[$116 >> 0] | 0;
    $121 = $120 & 255;
    $122 = $121 & 192;
    $123 = ($122 | 0) == 128;
    if (!$123) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = $s$8 + 2 | 0;
    $127 = $121 + -128 | 0;
    $128 = $127 | $125;
    $129 = ($128 | 0) < 0;
    if ($129) {
     $130 = HEAP8[$126 >> 0] | 0;
     $131 = $130 & 255;
     $132 = $131 & 192;
     $133 = ($132 | 0) == 128;
     if (!$133) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = $s$8 + 3 | 0;
     $137 = $131 + -128 | 0;
     $138 = $137 | $135;
     $c$5 = $138;
     $s$9 = $136;
    } else {
     $c$5 = $128;
     $s$9 = $126;
    }
   } else {
    $c$5 = $118;
    $s$9 = $116;
   }
   $139 = $$3 + 4 | 0;
   HEAP32[$$3 >> 2] = $c$5;
   $140 = $$7 + -1 | 0;
   $$02$ph = $139;
   $$47$ph = $140;
   $s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label | 0) == 17) {
  $46 = $s$3 + -1 | 0;
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $46;
  label = 47;
 } else if ((label | 0) == 20) {
  $53 = $s$3 + -1 | 0;
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $53;
  label = 47;
 } else if ((label | 0) == 23) {
  $60 = $s$3 + -1 | 0;
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $60;
  label = 47;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
 } else if ((label | 0) == 38) {
  $114 = $s$8 + -1 | 0;
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $114;
  label = 47;
 } else if ((label | 0) == 41) {
  $124 = $s$8 + -1 | 0;
  $$48 = $$3;
  $s$109 = $124;
  label = 52;
 } else if ((label | 0) == 44) {
  $134 = $s$8 + -1 | 0;
  $$48 = $$3;
  $s$109 = $134;
  label = 52;
 }
 if ((label | 0) == 47) {
  $141 = ($c$6 | 0) == 0;
  if ($141) {
   $$434 = $$4;
   $$833 = $$8;
   $s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;
   $s$109 = $s$10;
   label = 52;
  }
 }
 if ((label | 0) == 48) {
  $142 = HEAP8[$s$1035 >> 0] | 0;
  $143 = $142 << 24 >> 24 == 0;
  if ($143) {
   $144 = ($$434 | 0) == (0 | 0);
   if (!$144) {
    HEAP32[$$434 >> 2] = 0;
    HEAP32[$src >> 2] = 0;
   }
   $145 = $wn - $$833 | 0;
   $$0 = $145;
  } else {
   $$48 = $$434;
   $s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label | 0) == 52) {
  $146 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$146 >> 2] = 84;
  $147 = ($$48 | 0) == (0 | 0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src >> 2] = $s$109;
   $$0 = -1;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = $0 + 12 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = $0 + 16 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = ($3 | 0) == ($5 | 0);
   if ($6) {
    $7 = HEAP32[$0 >> 2] | 0;
    $8 = $7 + 36 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (tempInt = FUNCTION_TABLE_ii[$9 & 1023]($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3 >> 2] | 0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i | 0) == -1;
   if ($12) {
    HEAP32[$__b >> 2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
    $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 $14 = ($13 | 0) == (0 | 0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = $13 + 12 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $13 + 16 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = ($16 | 0) == ($18 | 0);
   if ($19) {
    $20 = HEAP32[$13 >> 2] | 0;
    $21 = $20 + 36 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = (tempInt = FUNCTION_TABLE_ii[$22 & 1023]($13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16 >> 2] | 0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i | 0) == -1;
   if ($25) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   $26 = HEAP32[$__err >> 2] | 0;
   $27 = $26 | 6;
   HEAP32[$__err >> 2] = $27;
   $$01 = 0;
  } else if ((label | 0) == 17) {
   $28 = HEAP32[$__b >> 2] | 0;
   $29 = $28 + 12 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $31 = $28 + 16 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   $33 = ($30 | 0) == ($32 | 0);
   if ($33) {
    $34 = HEAP32[$28 >> 2] | 0;
    $35 = $34 + 36 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = (tempInt = FUNCTION_TABLE_ii[$36 & 1023]($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30 >> 2] | 0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct >> 2] | 0;
   $40 = $39 + 12 | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $42 = (tempInt = FUNCTION_TABLE_iiii[$41 & 1023]($__ct, 2048, $$0$i$i) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if (!$42) {
    $43 = HEAP32[$__err >> 2] | 0;
    $44 = $43 | 4;
    HEAP32[$__err >> 2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct >> 2] | 0;
   $46 = $45 + 52 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   $48 = (tempInt = FUNCTION_TABLE_iiii[$47 & 1023]($__ct, $$0$i$i, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b >> 2] | 0;
   $51 = $50 + 12 | 0;
   $52 = HEAP32[$51 >> 2] | 0;
   $53 = $50 + 16 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   $55 = ($52 | 0) == ($54 | 0);
   if ($55) {
    $56 = HEAP32[$50 >> 2] | 0;
    $57 = $56 + 40 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    (tempInt = FUNCTION_TABLE_ii[$58 & 1023]($50) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$in = $__n;
    $$pre$i3$i$i10 = $149;
    $74 = $149;
    $__r$0$in = $49;
   } else {
    $59 = $52 + 4 | 0;
    HEAP32[$51 >> 2] = $59;
    $$0$in = $__n;
    $$pre$i3$i$i10 = $149;
    $74 = $149;
    $__r$0$in = $49;
   }
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0;
    $$0 = $$0$in + -1 | 0;
    $60 = HEAP32[$__b >> 2] | 0;
    $61 = ($60 | 0) == (0 | 0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = $60 + 12 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      $64 = $60 + 16 | 0;
      $65 = HEAP32[$64 >> 2] | 0;
      $66 = ($63 | 0) == ($65 | 0);
      if ($66) {
       $67 = HEAP32[$60 >> 2] | 0;
       $68 = $67 + 36 | 0;
       $69 = HEAP32[$68 >> 2] | 0;
       $70 = (tempInt = FUNCTION_TABLE_ii[$69 & 1023]($60) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63 >> 2] | 0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2 | 0) == -1;
      if ($72) {
       HEAP32[$__b >> 2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4 | 0) == (0 | 0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while (0);
    $73 = ($74 | 0) == (0 | 0);
    do {
     if ($73) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;
      $150 = 0;
      $87 = 1;
     } else {
      $75 = $74 + 12 | 0;
      $76 = HEAP32[$75 >> 2] | 0;
      $77 = $74 + 16 | 0;
      $78 = HEAP32[$77 >> 2] | 0;
      $79 = ($76 | 0) == ($78 | 0);
      if ($79) {
       $80 = HEAP32[$74 >> 2] | 0;
       $81 = $80 + 36 | 0;
       $82 = HEAP32[$81 >> 2] | 0;
       $83 = (tempInt = FUNCTION_TABLE_ii[$82 & 1023]($74) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76 >> 2] | 0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8 | 0) == -1;
      if ($85) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i3$i$i25 = 0;
       $150 = 0;
       $87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10 | 0) == (0 | 0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;
       $150 = $$pre$i3$i$i10;
       $87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while (0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0$in | 0) > 1;
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b >> 2] | 0;
    if (!$89) {
     $$lcssa = $90;
     $$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;
     $__r$0$lcssa = $__r$0;
     break;
    }
    $91 = $90 + 12 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = $90 + 16 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = ($92 | 0) == ($94 | 0);
    if ($95) {
     $96 = HEAP32[$90 >> 2] | 0;
     $97 = $96 + 36 | 0;
     $98 = HEAP32[$97 >> 2] | 0;
     $99 = (tempInt = FUNCTION_TABLE_ii[$98 & 1023]($90) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92 >> 2] | 0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct >> 2] | 0;
    $102 = $101 + 12 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = (tempInt = FUNCTION_TABLE_iiii[$103 & 1023]($__ct, 2048, $$0$i$i14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    if (!$104) {
     $$01 = $__r$0;
     break L22;
    }
    $105 = $__r$0 * 10 | 0;
    $106 = HEAP32[$__ct >> 2] | 0;
    $107 = $106 + 52 | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    $109 = (tempInt = FUNCTION_TABLE_iiii[$108 & 1023]($__ct, $$0$i$i14, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $110 = $109 << 24 >> 24;
    $111 = $110 + $105 | 0;
    $112 = HEAP32[$__b >> 2] | 0;
    $113 = $112 + 12 | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $112 + 16 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = ($114 | 0) == ($116 | 0);
    if ($117) {
     $118 = HEAP32[$112 >> 2] | 0;
     $119 = $118 + 40 | 0;
     $120 = HEAP32[$119 >> 2] | 0;
     (tempInt = FUNCTION_TABLE_ii[$120 & 1023]($112) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0$in = $$0;
     $$pre$i3$i$i10 = $$pre$i3$i$i25;
     $74 = $150;
     $__r$0$in = $111;
     continue;
    } else {
     $121 = $114 + 4 | 0;
     HEAP32[$113 >> 2] = $121;
     $$0$in = $$0;
     $$pre$i3$i$i10 = $$pre$i3$i$i25;
     $74 = $150;
     $__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa | 0) == (0 | 0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = $$lcssa + 12 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     $125 = $$lcssa + 16 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = ($124 | 0) == ($126 | 0);
     if ($127) {
      $128 = HEAP32[$$lcssa >> 2] | 0;
      $129 = $128 + 36 | 0;
      $130 = HEAP32[$129 >> 2] | 0;
      $131 = (tempInt = FUNCTION_TABLE_ii[$130 & 1023]($$lcssa) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124 >> 2] | 0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17 | 0) == -1;
     if ($133) {
      HEAP32[$__b >> 2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b >> 2] | 0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19 | 0) == (0 | 0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while (0);
   $134 = ($$pre$i3$i$i25$lcssa | 0) == (0 | 0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = $$pre$i3$i$i25$lcssa + 12 | 0;
     $136 = HEAP32[$135 >> 2] | 0;
     $137 = $$pre$i3$i$i25$lcssa + 16 | 0;
     $138 = HEAP32[$137 >> 2] | 0;
     $139 = ($136 | 0) == ($138 | 0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa >> 2] | 0;
      $141 = $140 + 36 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = (tempInt = FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136 >> 2] | 0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23 | 0) == -1;
     if ($145) {
      HEAP32[$__e >> 2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 60) {
    if (!$151) {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err >> 2] | 0;
   $147 = $146 | 2;
   HEAP32[$__err >> 2] = $147;
   $$01 = $__r$0$lcssa;
  }
 } while (0);
 return $$01 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = $0 + 12 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = $0 + 16 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = ($3 | 0) == ($5 | 0);
   if ($6) {
    $7 = HEAP32[$0 >> 2] | 0;
    $8 = $7 + 36 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (tempInt = FUNCTION_TABLE_ii[$9 & 1023]($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $11 = ($10 | 0) == -1;
    if ($11) {
     HEAP32[$__b >> 2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while (0);
 $12 = ($13 | 0) == (0 | 0);
 $14 = HEAP32[$__e >> 2] | 0;
 $15 = ($14 | 0) == (0 | 0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = $14 + 12 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $18 = $14 + 16 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   $20 = ($17 | 0) == ($19 | 0);
   if ($20) {
    $21 = HEAP32[$14 >> 2] | 0;
    $22 = $21 + 36 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = (tempInt = FUNCTION_TABLE_ii[$23 & 1023]($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $25 = ($24 | 0) == -1;
    if ($25) {
     HEAP32[$__e >> 2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16 : do {
  if ((label | 0) == 12) {
   $26 = HEAP32[$__err >> 2] | 0;
   $27 = $26 | 6;
   HEAP32[$__err >> 2] = $27;
   $$01 = 0;
  } else if ((label | 0) == 13) {
   $28 = HEAP32[$__b >> 2] | 0;
   $29 = $28 + 12 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $31 = $28 + 16 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   $33 = ($30 | 0) == ($32 | 0);
   if ($33) {
    $34 = HEAP32[$28 >> 2] | 0;
    $35 = $34 + 36 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = (tempInt = FUNCTION_TABLE_ii[$36 & 1023]($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30 >> 0] | 0;
    $39 = $38 & 255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i & 255;
   $isascii1$i = $40 << 24 >> 24 > -1;
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = $__ct + 8 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 + ($41 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    $46 = $45 & 2048;
    $47 = $46 << 16 >> 16 == 0;
    if (!$47) {
     $50 = HEAP32[$__ct >> 2] | 0;
     $51 = $50 + 36 | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = (tempInt = FUNCTION_TABLE_iiii[$52 & 1023]($__ct, $40, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b >> 2] | 0;
     $56 = $55 + 12 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     $58 = $55 + 16 | 0;
     $59 = HEAP32[$58 >> 2] | 0;
     $60 = ($57 | 0) == ($59 | 0);
     if ($60) {
      $61 = HEAP32[$55 >> 2] | 0;
      $62 = $61 + 40 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      (tempInt = FUNCTION_TABLE_ii[$63 & 1023]($55) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$in = $__n;
      $$pre$i2$i$i7 = $157;
      $80 = $157;
      $__r$0$in = $54;
     } else {
      $64 = $57 + 1 | 0;
      HEAP32[$56 >> 2] = $64;
      $$0$in = $__n;
      $$pre$i2$i$i7 = $157;
      $80 = $157;
      $__r$0$in = $54;
     }
     while (1) {
      $__r$0 = $__r$0$in + -48 | 0;
      $$0 = $$0$in + -1 | 0;
      $65 = HEAP32[$__b >> 2] | 0;
      $66 = ($65 | 0) == (0 | 0);
      do {
       if ($66) {
        $78 = 0;
       } else {
        $67 = $65 + 12 | 0;
        $68 = HEAP32[$67 >> 2] | 0;
        $69 = $65 + 16 | 0;
        $70 = HEAP32[$69 >> 2] | 0;
        $71 = ($68 | 0) == ($70 | 0);
        if ($71) {
         $72 = HEAP32[$65 >> 2] | 0;
         $73 = $72 + 36 | 0;
         $74 = HEAP32[$73 >> 2] | 0;
         $75 = (tempInt = FUNCTION_TABLE_ii[$74 & 1023]($65) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $76 = ($75 | 0) == -1;
         if ($76) {
          HEAP32[$__b >> 2] = 0;
          $78 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
          $78 = $$pre$i$i$i3;
          break;
         }
        } else {
         $78 = $65;
        }
       }
      } while (0);
      $77 = ($78 | 0) == (0 | 0);
      $79 = ($80 | 0) == (0 | 0);
      if ($79) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;
       $92 = 0;
      } else {
       $81 = $80 + 12 | 0;
       $82 = HEAP32[$81 >> 2] | 0;
       $83 = $80 + 16 | 0;
       $84 = HEAP32[$83 >> 2] | 0;
       $85 = ($82 | 0) == ($84 | 0);
       if ($85) {
        $86 = HEAP32[$80 >> 2] | 0;
        $87 = $86 + 36 | 0;
        $88 = HEAP32[$87 >> 2] | 0;
        $89 = (tempInt = FUNCTION_TABLE_ii[$88 & 1023]($80) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $90 = ($89 | 0) == -1;
        if ($90) {
         HEAP32[$__e >> 2] = 0;
         $$pre$i2$i$i20 = 0;
         $92 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;
         $92 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;
        $92 = $80;
       }
      }
      $91 = ($92 | 0) == (0 | 0);
      $tmp$i$i9 = $77 ^ $91;
      $93 = ($$0$in | 0) > 1;
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b >> 2] | 0;
      if (!$94) {
       $$lcssa = $95;
       $$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;
       $__r$0$lcssa = $__r$0;
       break;
      }
      $96 = $95 + 12 | 0;
      $97 = HEAP32[$96 >> 2] | 0;
      $98 = $95 + 16 | 0;
      $99 = HEAP32[$98 >> 2] | 0;
      $100 = ($97 | 0) == ($99 | 0);
      if ($100) {
       $101 = HEAP32[$95 >> 2] | 0;
       $102 = $101 + 36 | 0;
       $103 = HEAP32[$102 >> 2] | 0;
       $104 = (tempInt = FUNCTION_TABLE_ii[$103 & 1023]($95) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97 >> 0] | 0;
       $106 = $105 & 255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10 & 255;
      $isascii1$i12 = $107 << 24 >> 24 > -1;
      if (!$isascii1$i12) {
       $$01 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42 >> 2] | 0;
      $110 = $109 + ($108 << 1) | 0;
      $111 = HEAP16[$110 >> 1] | 0;
      $112 = $111 & 2048;
      $113 = $112 << 16 >> 16 == 0;
      if ($113) {
       $$01 = $__r$0;
       break L16;
      }
      $114 = $__r$0 * 10 | 0;
      $115 = HEAP32[$__ct >> 2] | 0;
      $116 = $115 + 36 | 0;
      $117 = HEAP32[$116 >> 2] | 0;
      $118 = (tempInt = FUNCTION_TABLE_iiii[$117 & 1023]($__ct, $107, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $119 = $118 << 24 >> 24;
      $120 = $119 + $114 | 0;
      $121 = HEAP32[$__b >> 2] | 0;
      $122 = $121 + 12 | 0;
      $123 = HEAP32[$122 >> 2] | 0;
      $124 = $121 + 16 | 0;
      $125 = HEAP32[$124 >> 2] | 0;
      $126 = ($123 | 0) == ($125 | 0);
      if ($126) {
       $127 = HEAP32[$121 >> 2] | 0;
       $128 = $127 + 40 | 0;
       $129 = HEAP32[$128 >> 2] | 0;
       (tempInt = FUNCTION_TABLE_ii[$129 & 1023]($121) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $$0$in = $$0;
       $$pre$i2$i$i7 = $$pre$i2$i$i20;
       $80 = $92;
       $__r$0$in = $120;
       continue;
      } else {
       $130 = $123 + 1 | 0;
       HEAP32[$122 >> 2] = $130;
       $$0$in = $$0;
       $$pre$i2$i$i7 = $$pre$i2$i$i20;
       $80 = $92;
       $__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa | 0) == (0 | 0);
     do {
      if ($131) {
       $143 = 0;
      } else {
       $132 = $$lcssa + 12 | 0;
       $133 = HEAP32[$132 >> 2] | 0;
       $134 = $$lcssa + 16 | 0;
       $135 = HEAP32[$134 >> 2] | 0;
       $136 = ($133 | 0) == ($135 | 0);
       if ($136) {
        $137 = HEAP32[$$lcssa >> 2] | 0;
        $138 = $137 + 36 | 0;
        $139 = HEAP32[$138 >> 2] | 0;
        $140 = (tempInt = FUNCTION_TABLE_ii[$139 & 1023]($$lcssa) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $141 = ($140 | 0) == -1;
        if ($141) {
         HEAP32[$__b >> 2] = 0;
         $143 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b >> 2] | 0;
         $143 = $$pre$i$i$i16;
         break;
        }
       } else {
        $143 = $$lcssa;
       }
      }
     } while (0);
     $142 = ($143 | 0) == (0 | 0);
     $144 = ($$pre$i2$i$i20$lcssa | 0) == (0 | 0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = $$pre$i2$i$i20$lcssa + 12 | 0;
       $146 = HEAP32[$145 >> 2] | 0;
       $147 = $$pre$i2$i$i20$lcssa + 16 | 0;
       $148 = HEAP32[$147 >> 2] | 0;
       $149 = ($146 | 0) == ($148 | 0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa >> 2] | 0;
        $151 = $150 + 36 | 0;
        $152 = HEAP32[$151 >> 2] | 0;
        $153 = (tempInt = FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $154 = ($153 | 0) == -1;
        if ($154) {
         HEAP32[$__e >> 2] = 0;
         label = 50;
         break;
        }
       }
       if ($142) {
        $$01 = $__r$0$lcssa;
        break L16;
       }
      }
     } while (0);
     if ((label | 0) == 50) {
      if (!$142) {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err >> 2] | 0;
     $156 = $155 | 2;
     HEAP32[$__err >> 2] = $156;
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err >> 2] | 0;
   $49 = $48 | 4;
   HEAP32[$__err >> 2] = $49;
   $$01 = 0;
  }
 } while (0);
 return $$01 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$01$be = 0, $$01128 = 0, $$01128$lcssa170 = 0, $$02$be = 0, $$02127 = 0, $$02127$lcssa177 = 0, $$1$lcssa = 0, $$1113 = 0, $$lcssa = 0, $$lcssa183 = 0, $$lcssa191 = 0, $$pre = 0, $$pre59 = 0, $$pre60 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0133 = 0, $fend$1$be = 0, $fend$1129 = 0, $fend$2$lcssa = 0, $fend$2120 = 0, $n$0117 = 0, $not$ = 0, $or$cond = 0, $or$cond126 = 0, $p$0118 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0133 = $frm;
   while (1) {
    $1 = HEAP32[$fend$0133 >> 2] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
     $fend$0$lcssa = $fend$0133;
     break L1;
    }
    $3 = $fend$0133 + 4 | 0;
    $4 = ($3 | 0) == ($frm_end | 0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0133 = $3;
    }
   }
  }
 } while (0);
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $5 = $to_end;
 $6 = $this + 8 | 0;
 $7 = ($frm | 0) == ($frm_end | 0);
 $8 = ($to | 0) == ($to_end | 0);
 $or$cond126 = $8 | $7;
 L6 : do {
  if ($or$cond126) {
   $111 = $frm;
   label = 47;
  } else {
   $$01128 = $frm;
   $$02127 = $to;
   $fend$1129 = $fend$0$lcssa;
   L7 : while (1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $9 + 4 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16 >> 2] = $11;
    $17 = $15 + 4 | 0;
    $18 = $17;
    HEAP32[$18 >> 2] = $14;
    $19 = $fend$1129;
    $20 = $$01128;
    $21 = $19 - $20 | 0;
    $22 = $21 >> 2;
    $23 = $$02127;
    $24 = $5 - $23 | 0;
    $25 = HEAP32[$6 >> 2] | 0;
    $26 = (tempInt = _uselocale($25) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __THREW__ = 0;
    $27 = (tempInt = invoke_iiiiii(536, $$02127 | 0, $frm_nxt | 0, $22 | 0, $24 | 0, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $28 = __THREW__;
    __THREW__ = 0;
    $29 = $28 & 1;
    if ($29) {
     $$lcssa183 = $26;
     label = 9;
     break;
    }
    $30 = ($26 | 0) == (0 | 0);
    if (!$30) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $26 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $31 = __THREW__;
     __THREW__ = 0;
     $32 = $31 & 1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27 | 0) {
    case 0:
     {
      $$0 = 1;
      break L6;
      break;
     }
    case -1:
     {
      $$01128$lcssa170 = $$01128;
      $$02127$lcssa177 = $$02127;
      label = 14;
      break L7;
      break;
     }
    default:
     {}
    }
    $69 = HEAP32[$to_nxt >> 2] | 0;
    $70 = $69 + $27 | 0;
    HEAP32[$to_nxt >> 2] = $70;
    $71 = ($70 | 0) == ($to_end | 0);
    if ($71) {
     label = 27;
     break;
    }
    $72 = ($fend$1129 | 0) == ($frm_end | 0);
    if ($72) {
     $$pre = HEAP32[$frm_nxt >> 2] | 0;
     $$01$be = $$pre;
     $$02$be = $70;
     $fend$1$be = $frm_end;
    } else {
     $75 = HEAP32[$6 >> 2] | 0;
     $76 = (tempInt = _uselocale($75) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     __THREW__ = 0;
     $77 = (tempInt = invoke_iiii(537, $tmp | 0, 0, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $78 = __THREW__;
     __THREW__ = 0;
     $79 = $78 & 1;
     if ($79) {
      $$lcssa191 = $76;
      label = 35;
      break;
     }
     $80 = ($76 | 0) == (0 | 0);
     if (!$80) {
      __THREW__ = 0;
      (tempInt = invoke_ii(477, $76 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $81 = __THREW__;
      __THREW__ = 0;
      $82 = $81 & 1;
      if ($82) {
       label = 34;
       break;
      }
     }
     $92 = ($77 | 0) == -1;
     if ($92) {
      $$0 = 2;
      break L6;
     }
     $93 = HEAP32[$to_nxt >> 2] | 0;
     $94 = $93;
     $95 = $5 - $94 | 0;
     $96 = $77 >>> 0 > $95 >>> 0;
     if ($96) {
      $$0 = 1;
      break L6;
     }
     $97 = ($77 | 0) == 0;
     if (!$97) {
      $n$0117 = $77;
      $p$0118 = $tmp;
      while (1) {
       $98 = $p$0118 + 1 | 0;
       $99 = HEAP8[$p$0118 >> 0] | 0;
       $100 = HEAP32[$to_nxt >> 2] | 0;
       $101 = $100 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $101;
       HEAP8[$100 >> 0] = $99;
       $102 = $n$0117 + -1 | 0;
       $103 = ($102 | 0) == 0;
       if ($103) {
        break;
       } else {
        $n$0117 = $102;
        $p$0118 = $98;
       }
      }
     }
     $104 = HEAP32[$frm_nxt >> 2] | 0;
     $105 = $104 + 4 | 0;
     HEAP32[$frm_nxt >> 2] = $105;
     $106 = ($105 | 0) == ($frm_end | 0);
     L28 : do {
      if ($106) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2120 = $105;
       while (1) {
        $107 = HEAP32[$fend$2120 >> 2] | 0;
        $108 = ($107 | 0) == 0;
        if ($108) {
         $fend$2$lcssa = $fend$2120;
         break L28;
        }
        $109 = $fend$2120 + 4 | 0;
        $110 = ($109 | 0) == ($frm_end | 0);
        if ($110) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2120 = $109;
        }
       }
      }
     } while (0);
     $$pre59 = HEAP32[$to_nxt >> 2] | 0;
     $$01$be = $105;
     $$02$be = $$pre59;
     $fend$1$be = $fend$2$lcssa;
    }
    $73 = ($$01$be | 0) == ($frm_end | 0);
    $74 = ($$02$be | 0) == ($to_end | 0);
    $or$cond = $74 | $73;
    if ($or$cond) {
     $111 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01128 = $$01$be;
     $$02127 = $$02$be;
     $fend$1129 = $fend$1$be;
    }
   }
   if ((label | 0) == 8) {
    $33 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $34 = tempRet0;
    ___clang_call_terminate($33), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 9) {
    $35 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $36 = tempRet0;
    $37 = ($$lcssa183 | 0) == (0 | 0);
    if (!$37) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $$lcssa183 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     $39 = $38 & 1;
     if ($39) {
      $40 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $41 = tempRet0;
      ___clang_call_terminate($40), asyncState ? abort(-12) | 0 : 0;
     }
    }
    ___resumeException($35 | 0), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 14) {
    HEAP32[$to_nxt >> 2] = $$02127$lcssa177;
    $42 = HEAP32[$frm_nxt >> 2] | 0;
    $43 = ($$01128$lcssa170 | 0) == ($42 | 0);
    L42 : do {
     if ($43) {
      $$1$lcssa = $$01128$lcssa170;
     } else {
      $$1113 = $$01128$lcssa170;
      $47 = $$02127$lcssa177;
      while (1) {
       $44 = HEAP32[$$1113 >> 2] | 0;
       $45 = HEAP32[$6 >> 2] | 0;
       $46 = (tempInt = _uselocale($45) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       __THREW__ = 0;
       $48 = (tempInt = invoke_iiii(537, $47 | 0, $44 | 0, $save_state | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $49 = __THREW__;
       __THREW__ = 0;
       $50 = $49 & 1;
       if ($50) {
        $$lcssa = $46;
        break;
       }
       $51 = ($46 | 0) == (0 | 0);
       if (!$51) {
        __THREW__ = 0;
        (tempInt = invoke_ii(477, $46 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $52 = __THREW__;
        __THREW__ = 0;
        $53 = $52 & 1;
        if ($53) {
         label = 18;
         break;
        }
       }
       $63 = ($48 | 0) == -1;
       if ($63) {
        $$1$lcssa = $$1113;
        break L42;
       }
       $64 = HEAP32[$to_nxt >> 2] | 0;
       $65 = $64 + $48 | 0;
       HEAP32[$to_nxt >> 2] = $65;
       $66 = $$1113 + 4 | 0;
       $67 = HEAP32[$frm_nxt >> 2] | 0;
       $68 = ($66 | 0) == ($67 | 0);
       if ($68) {
        $$1$lcssa = $66;
        break L42;
       } else {
        $$1113 = $66;
        $47 = $65;
       }
      }
      if ((label | 0) == 18) {
       $54 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $55 = tempRet0;
       ___clang_call_terminate($54), asyncState ? abort(-12) | 0 : 0;
      }
      $56 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $57 = tempRet0;
      $58 = ($$lcssa | 0) == (0 | 0);
      if (!$58) {
       __THREW__ = 0;
       (tempInt = invoke_ii(477, $$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $59 = __THREW__;
       __THREW__ = 0;
       $60 = $59 & 1;
       if ($60) {
        $61 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $62 = tempRet0;
        ___clang_call_terminate($61), asyncState ? abort(-12) | 0 : 0;
       }
      }
      ___resumeException($56 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    } while (0);
    HEAP32[$frm_nxt >> 2] = $$1$lcssa;
    $$0 = 2;
    break;
   } else if ((label | 0) == 27) {
    $$pre60 = HEAP32[$frm_nxt >> 2] | 0;
    $111 = $$pre60;
    label = 47;
    break;
   } else if ((label | 0) == 34) {
    $83 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $84 = tempRet0;
    ___clang_call_terminate($83), asyncState ? abort(-12) | 0 : 0;
   } else if ((label | 0) == 35) {
    $85 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $86 = tempRet0;
    $87 = ($$lcssa191 | 0) == (0 | 0);
    if (!$87) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $$lcssa191 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     $89 = $88 & 1;
     if ($89) {
      $90 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $91 = tempRet0;
      ___clang_call_terminate($90), asyncState ? abort(-12) | 0 : 0;
     }
    }
    ___resumeException($85 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 if ((label | 0) == 47) {
  $not$ = ($111 | 0) != ($frm_end | 0);
  $112 = $not$ & 1;
  $$0 = $112;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function emterpret(pc) {
 pc = pc | 0;
 var sp = 0, inst = 0, lx = 0, ly = 0, lz = 0;
 var ld = 0.0;
 HEAP32[EMTSTACKTOP >> 2] = pc;
 sp = EMTSTACKTOP + 8 | 0;
 assert(HEAPU8[pc >> 0] >>> 0 == 140 | 0);
 lx = HEAPU16[pc + 2 >> 1] | 0;
 EMTSTACKTOP = EMTSTACKTOP + (lx + 1 << 3) | 0;
 assert((EMTSTACKTOP | 0) <= (EMT_STACK_MAX | 0) | 0);
 if ((asyncState | 0) != 2) {} else {
  pc = (HEAP32[sp - 4 >> 2] | 0) - 8 | 0;
 }
 pc = pc + 4 | 0;
 while (1) {
  pc = pc + 4 | 0;
  inst = HEAP32[pc >> 2] | 0;
  lx = inst >> 8 & 255;
  ly = inst >> 16 & 255;
  lz = inst >>> 24;
  switch (inst & 255) {
  case 0:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 1:
   HEAP32[sp + (lx << 3) >> 2] = inst >> 16;
   break;
  case 2:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[pc >> 2] | 0;
   break;
  case 3:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 19:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 25:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) | 0;
   break;
  case 26:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (inst >> 24) | 0;
   break;
  case 32:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == inst >> 24 | 0;
   break;
  case 33:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != inst >> 24 | 0;
   break;
  case 38:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & inst >> 24;
   break;
  case 40:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ inst >> 24;
   break;
  case 49:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 78:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 82:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 83:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 119:
   pc = pc + (inst >> 16 << 2) | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 120:
   if (HEAP32[sp + (lx << 3) >> 2] | 0) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 121:
   if (!(HEAP32[sp + (lx << 3) >> 2] | 0)) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 128:
   HEAP32[sp + (lx << 3) >> 2] = tempRet0;
   break;
  case 130:
   switch (ly | 0) {
   case 0:
    {
     HEAP32[sp + (lx << 3) >> 2] = STACK_MAX;
     continue;
    }
   case 1:
    {
     HEAP32[sp + (lx << 3) >> 2] = __THREW__;
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 132:
   switch (inst >> 8 & 255) {
   case 0:
    {
     STACK_MAX = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   case 1:
    {
     __THREW__ = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 134:
   lz = HEAPU8[(HEAP32[pc + 4 >> 2] | 0) + 1 | 0] | 0;
   ly = 0;
   assert((EMTSTACKTOP + 8 | 0) <= (EMT_STACK_MAX | 0) | 0);
   if ((asyncState | 0) != 2) {
    while ((ly | 0) < (lz | 0)) {
     HEAP32[EMTSTACKTOP + (ly << 3) + 8 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) >> 2] | 0;
     HEAP32[EMTSTACKTOP + (ly << 3) + 12 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) + 4 >> 2] | 0;
     ly = ly + 1 | 0;
    }
   }
   HEAP32[sp - 4 >> 2] = pc;
   emterpret(HEAP32[pc + 4 >> 2] | 0);
   if ((asyncState | 0) == 1) {
    EMTSTACKTOP = sp - 8 | 0;
    return;
   }
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[EMTSTACKTOP >> 2] | 0;
   HEAP32[sp + (lx << 3) + 4 >> 2] = HEAP32[EMTSTACKTOP + 4 >> 2] | 0;
   pc = pc + (4 + lz + 3 >> 2 << 2) | 0;
   break;
  case 135:
   switch (inst >>> 16 | 0) {
   case 0:
    {
     HEAP32[sp - 4 >> 2] = pc;
     abort();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 1:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 2:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_ii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 1023](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 3:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __Z10SendStatusv();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 4:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __Z7MountFSv();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 5:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 6:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = invoke_iii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 7:
    {
     HEAP32[sp - 4 >> 2] = pc;
     invoke_vii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 8:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 9:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 10:
    {
     HEAP32[sp - 4 >> 2] = pc;
     invoke_viii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 11:
    {
     HEAP32[sp - 4 >> 2] = pc;
     invoke_vi(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 12:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___cxa_find_matching_catch() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 13:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 14:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ___resumeException(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 15:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_1(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 16:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __Z6FSBusyv() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 17:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_sleep(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 18:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_0(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 19:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEb(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 20:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __Z8ReadFileRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 21:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = __Z9WriteFileRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 22:
    {
     HEAP32[sp - 4 >> 2] = pc;
     __Z13CheckMessagesv();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 136:
   HEAP32[sp + (lx << 3) >> 2] = STACKTOP;
   break;
  case 137:
   STACKTOP = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 139:
   EMTSTACKTOP = sp - 8 | 0;
   HEAP32[EMTSTACKTOP >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   HEAP32[EMTSTACKTOP + 4 >> 2] = HEAP32[sp + (lx << 3) + 4 >> 2] | 0;
   return;
   break;
  default:
   assert(0);
  }
 }
 assert(0);
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[7176 >> 2] | 0;
 $5 = $1 & 3;
 $notlhs = $p >>> 0 >= $4 >>> 0;
 $notrhs = ($5 | 0) != 1;
 $or$cond$not = $notrhs & $notlhs;
 $6 = $p >>> 0 < $3 >>> 0;
 $or$cond30 = $or$cond$not & $6;
 asyncState ? abort(-12) | 0 : 0;
 if (!$or$cond30) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $$sum2728 = $2 | 4;
 $7 = $p + $$sum2728 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 & 1;
 $10 = ($9 | 0) == 0;
 if ($10) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $11 = ($5 | 0) == 0;
 if ($11) {
  $12 = $nb >>> 0 < 256;
  if ($12) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $13 = $nb + 4 | 0;
  $14 = $2 >>> 0 < $13 >>> 0;
  if (!$14) {
   $15 = $2 - $nb | 0;
   $16 = HEAP32[7640 >> 2] | 0;
   $17 = $16 << 1;
   $18 = $15 >>> 0 > $17 >>> 0;
   if (!$18) {
    $newp$0 = $p;
    return $newp$0 | 0;
   }
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $19 = $2 >>> 0 < $nb >>> 0;
 if (!$19) {
  $20 = $2 - $nb | 0;
  $21 = $20 >>> 0 > 15;
  if (!$21) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $22 = $p + $nb | 0;
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0 >> 2] = $25;
  $$sum23 = $nb + 4 | 0;
  $26 = $p + $$sum23 | 0;
  $27 = $20 | 3;
  HEAP32[$26 >> 2] = $27;
  $28 = HEAP32[$7 >> 2] | 0;
  $29 = $28 | 1;
  HEAP32[$7 >> 2] = $29;
  _dispose_chunk($22, $20), asyncState ? abort(-12) | 0 : 0;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $30 = HEAP32[7184 >> 2] | 0;
 $31 = ($3 | 0) == ($30 | 0);
 if ($31) {
  $32 = HEAP32[7172 >> 2] | 0;
  $33 = $32 + $2 | 0;
  $34 = $33 >>> 0 > $nb >>> 0;
  if (!$34) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  $36 = $p + $nb | 0;
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0 >> 2] = $39;
  $$sum22 = $nb + 4 | 0;
  $40 = $p + $$sum22 | 0;
  $41 = $35 | 1;
  HEAP32[$40 >> 2] = $41;
  HEAP32[7184 >> 2] = $36;
  HEAP32[7172 >> 2] = $35;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $42 = HEAP32[7180 >> 2] | 0;
 $43 = ($3 | 0) == ($42 | 0);
 if ($43) {
  $44 = HEAP32[7168 >> 2] | 0;
  $45 = $44 + $2 | 0;
  $46 = $45 >>> 0 < $nb >>> 0;
  if ($46) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  $48 = $47 >>> 0 > 15;
  if ($48) {
   $49 = $p + $nb | 0;
   $50 = $p + $45 | 0;
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0 >> 2] = $53;
   $$sum19 = $nb + 4 | 0;
   $54 = $p + $$sum19 | 0;
   $55 = $47 | 1;
   HEAP32[$54 >> 2] = $55;
   HEAP32[$50 >> 2] = $47;
   $$sum20 = $45 + 4 | 0;
   $56 = $p + $$sum20 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   $58 = $57 & -2;
   HEAP32[$56 >> 2] = $58;
   $storemerge = $49;
   $storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0 >> 2] = $61;
   $$sum17 = $45 + 4 | 0;
   $62 = $p + $$sum17 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $64 = $63 | 1;
   HEAP32[$62 >> 2] = $64;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[7168 >> 2] = $storemerge21;
  HEAP32[7180 >> 2] = $storemerge;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $65 = $8 & 2;
 $66 = ($65 | 0) == 0;
 if (!$66) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $67 = $8 & -8;
 $68 = $67 + $2 | 0;
 $69 = $68 >>> 0 < $nb >>> 0;
 if ($69) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 $72 = $8 >>> 0 < 256;
 do {
  if ($72) {
   $$sum15 = $2 + 8 | 0;
   $73 = $p + $$sum15 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   $$sum16 = $2 + 12 | 0;
   $75 = $p + $$sum16 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   $77 = $71 << 1;
   $78 = 7200 + ($77 << 2) | 0;
   $79 = ($74 | 0) == ($78 | 0);
   if (!$79) {
    $80 = $74 >>> 0 < $4 >>> 0;
    if ($80) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $81 = $74 + 12 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($82 | 0) == ($3 | 0);
    if (!$83) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
   }
   $84 = ($76 | 0) == ($74 | 0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[7160 >> 2] | 0;
    $88 = $87 & $86;
    HEAP32[7160 >> 2] = $88;
    break;
   }
   $89 = ($76 | 0) == ($78 | 0);
   if ($89) {
    $$pre = $76 + 8 | 0;
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = $76 >>> 0 < $4 >>> 0;
    if ($90) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $91 = $76 + 8 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == ($3 | 0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
   }
   $94 = $74 + 12 | 0;
   HEAP32[$94 >> 2] = $76;
   HEAP32[$$pre$phiZ2D >> 2] = $74;
  } else {
   $$sum = $2 + 24 | 0;
   $95 = $p + $$sum | 0;
   $96 = HEAP32[$95 >> 2] | 0;
   $$sum2 = $2 + 12 | 0;
   $97 = $p + $$sum2 | 0;
   $98 = HEAP32[$97 >> 2] | 0;
   $99 = ($98 | 0) == ($3 | 0);
   do {
    if ($99) {
     $$sum4 = $2 + 20 | 0;
     $109 = $p + $$sum4 | 0;
     $110 = HEAP32[$109 >> 2] | 0;
     $111 = ($110 | 0) == (0 | 0);
     if ($111) {
      $$sum3 = $2 + 16 | 0;
      $112 = $p + $$sum3 | 0;
      $113 = HEAP32[$112 >> 2] | 0;
      $114 = ($113 | 0) == (0 | 0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;
       $RP$0 = $112;
      }
     } else {
      $R$0 = $110;
      $RP$0 = $109;
     }
     while (1) {
      $115 = $R$0 + 20 | 0;
      $116 = HEAP32[$115 >> 2] | 0;
      $117 = ($116 | 0) == (0 | 0);
      if (!$117) {
       $R$0 = $116;
       $RP$0 = $115;
       continue;
      }
      $118 = $R$0 + 16 | 0;
      $119 = HEAP32[$118 >> 2] | 0;
      $120 = ($119 | 0) == (0 | 0);
      if ($120) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;
       $RP$0 = $118;
      }
     }
     $121 = $RP$0$lcssa >>> 0 < $4 >>> 0;
     if ($121) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = $2 + 8 | 0;
     $100 = $p + $$sum14 | 0;
     $101 = HEAP32[$100 >> 2] | 0;
     $102 = $101 >>> 0 < $4 >>> 0;
     if ($102) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $103 = $101 + 12 | 0;
     $104 = HEAP32[$103 >> 2] | 0;
     $105 = ($104 | 0) == ($3 | 0);
     if (!$105) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $106 = $98 + 8 | 0;
     $107 = HEAP32[$106 >> 2] | 0;
     $108 = ($107 | 0) == ($3 | 0);
     if ($108) {
      HEAP32[$103 >> 2] = $98;
      HEAP32[$106 >> 2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   } while (0);
   $122 = ($96 | 0) == (0 | 0);
   if (!$122) {
    $$sum11 = $2 + 28 | 0;
    $123 = $p + $$sum11 | 0;
    $124 = HEAP32[$123 >> 2] | 0;
    $125 = 7464 + ($124 << 2) | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = ($3 | 0) == ($126 | 0);
    if ($127) {
     HEAP32[$125 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[7164 >> 2] | 0;
      $131 = $130 & $129;
      HEAP32[7164 >> 2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[7176 >> 2] | 0;
     $133 = $96 >>> 0 < $132 >>> 0;
     if ($133) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $134 = $96 + 16 | 0;
     $135 = HEAP32[$134 >> 2] | 0;
     $136 = ($135 | 0) == ($3 | 0);
     if ($136) {
      HEAP32[$134 >> 2] = $R$1;
     } else {
      $137 = $96 + 20 | 0;
      HEAP32[$137 >> 2] = $R$1;
     }
     $138 = ($R$1 | 0) == (0 | 0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[7176 >> 2] | 0;
    $140 = $R$1 >>> 0 < $139 >>> 0;
    if ($140) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $141 = $R$1 + 24 | 0;
    HEAP32[$141 >> 2] = $96;
    $$sum12 = $2 + 16 | 0;
    $142 = $p + $$sum12 | 0;
    $143 = HEAP32[$142 >> 2] | 0;
    $144 = ($143 | 0) == (0 | 0);
    do {
     if (!$144) {
      $145 = $143 >>> 0 < $139 >>> 0;
      if ($145) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $146 = $R$1 + 16 | 0;
       HEAP32[$146 >> 2] = $143;
       $147 = $143 + 24 | 0;
       HEAP32[$147 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum13 = $2 + 20 | 0;
    $148 = $p + $$sum13 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = ($149 | 0) == (0 | 0);
    if (!$150) {
     $151 = HEAP32[7176 >> 2] | 0;
     $152 = $149 >>> 0 < $151 >>> 0;
     if ($152) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      $153 = $R$1 + 20 | 0;
      HEAP32[$153 >> 2] = $149;
      $154 = $149 + 24 | 0;
      HEAP32[$154 >> 2] = $R$1;
      break;
     }
    }
   }
  }
 } while (0);
 $155 = $70 >>> 0 < 16;
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0 >> 2] = $158;
  $$sum910 = $68 | 4;
  $159 = $p + $$sum910 | 0;
  $160 = HEAP32[$159 >> 2] | 0;
  $161 = $160 | 1;
  HEAP32[$159 >> 2] = $161;
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  $162 = $p + $nb | 0;
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0 >> 2] = $165;
  $$sum5 = $nb + 4 | 0;
  $166 = $p + $$sum5 | 0;
  $167 = $70 | 3;
  HEAP32[$166 >> 2] = $167;
  $$sum78 = $68 | 4;
  $168 = $p + $$sum78 | 0;
  $169 = HEAP32[$168 >> 2] | 0;
  $170 = $169 | 1;
  HEAP32[$168 >> 2] = $170;
  _dispose_chunk($162, $70), asyncState ? abort(-12) | 0 : 0;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser8unexpectENSA_5lexer10token_typeE($this, $t) {
 $this = $this | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $error_msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $error_msg = sp + 44 | 0;
 $76 = sp + 32 | 0;
 $79 = sp + 12 | 0;
 $80 = sp;
 $74 = $this;
 $75 = $t;
 $81 = $74;
 $82 = $75;
 $83 = $81 + 32 | 0;
 $84 = HEAP32[$83 >> 2] | 0;
 $85 = ($82 | 0) == ($84 | 0);
 if (!$85) {
  STACKTOP = sp;
  return;
 }
 $72 = $error_msg;
 $73 = 14535;
 $86 = $72;
 $71 = $86;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $73;
 $90 = $73;
 $91 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($90) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($86, $89, $91), asyncState ? abort(-12) | 0 : 0;
 $92 = $81 + 36 | 0;
 __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer9get_tokenEv($76, $92), asyncState ? abort(-12) | 0 : 0;
 $67 = $error_msg;
 $68 = $76;
 $93 = $67;
 $94 = $68;
 $65 = $93;
 $66 = $94;
 $95 = $65;
 $96 = $66;
 $64 = $96;
 $97 = $64;
 $63 = $97;
 $98 = $63;
 $62 = $98;
 $99 = $62;
 $61 = $99;
 $100 = $61;
 $60 = $100;
 $101 = $60;
 $102 = HEAP8[$101 >> 0] | 0;
 $103 = $102 & 255;
 $104 = $103 & 1;
 $105 = ($104 | 0) != 0;
 if ($105) {
  $54 = $98;
  $106 = $54;
  $53 = $106;
  $107 = $53;
  $52 = $107;
  $108 = $52;
  $109 = $108 + 8 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $117 = $110;
 } else {
  $59 = $98;
  $111 = $59;
  $58 = $111;
  $112 = $58;
  $57 = $112;
  $113 = $57;
  $114 = $113 + 1 | 0;
  $56 = $114;
  $115 = $56;
  $55 = $115;
  $116 = $55;
  $117 = $116;
 }
 $51 = $117;
 $118 = $51;
 $119 = $66;
 $50 = $119;
 $120 = $50;
 $49 = $120;
 $121 = $49;
 $48 = $121;
 $122 = $48;
 $47 = $122;
 $123 = $47;
 $124 = HEAP8[$123 >> 0] | 0;
 $125 = $124 & 255;
 $126 = $125 & 1;
 $127 = ($126 | 0) != 0;
 if ($127) {
  $43 = $120;
  $128 = $43;
  $42 = $128;
  $129 = $42;
  $41 = $129;
  $130 = $41;
  $131 = $130 + 4 | 0;
  $132 = HEAP32[$131 >> 2] | 0;
  $139 = $132;
 } else {
  $46 = $120;
  $133 = $46;
  $45 = $133;
  $134 = $45;
  $44 = $134;
  $135 = $44;
  $136 = HEAP8[$135 >> 0] | 0;
  $137 = $136 & 255;
  $138 = $137 >> 1;
  $139 = $138;
 }
 __THREW__ = 0;
 (tempInt = invoke_iiii(365, $95 | 0, $118 | 0, $139 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $140 = __THREW__;
 __THREW__ = 0;
 $141 = $140 & 1;
 if ($141) {
  $226 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $227 = tempRet0;
  $77 = $226;
  $78 = $227;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($76), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
  $236 = $77;
  $237 = $78;
  ___resumeException($236 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($76), asyncState ? abort(-12) | 0 : 0;
 $39 = $error_msg;
 $40 = 14562;
 $142 = $39;
 $143 = $40;
 __THREW__ = 0;
 (tempInt = invoke_iii(402, $142 | 0, $143 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $144 = __THREW__;
 __THREW__ = 0;
 $145 = $144 & 1;
 L16 : do {
  if (!$145) {
   $146 = $81 + 32 | 0;
   $147 = HEAP32[$146 >> 2] | 0;
   __THREW__ = 0;
   invoke_vii(432, $80 | 0, $147 | 0), asyncState ? abort(-12) | 0 : 0;
   $148 = __THREW__;
   __THREW__ = 0;
   $149 = $148 & 1;
   if (!$149) {
    $37 = $80;
    $38 = 13621;
    $150 = $37;
    $151 = $38;
    __THREW__ = 0;
    $152 = (tempInt = invoke_iii(402, $150 | 0, $151 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $153 = __THREW__;
    __THREW__ = 0;
    $154 = $153 & 1;
    do {
     if ($154) {
      $230 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $231 = tempRet0;
      $77 = $230;
      $78 = $231;
     } else {
      $36 = $152;
      $155 = $36;
      $34 = $79;
      $35 = $155;
      $156 = $34;
      $157 = $35;
      $33 = $157;
      $158 = $33;
      HEAP32[$156 >> 2] = HEAP32[$158 >> 2] | 0;
      HEAP32[$156 + 4 >> 2] = HEAP32[$158 + 4 >> 2] | 0;
      HEAP32[$156 + 8 >> 2] = HEAP32[$158 + 8 >> 2] | 0;
      $159 = $35;
      $32 = $159;
      $160 = $32;
      $31 = $160;
      $161 = $31;
      $30 = $161;
      $162 = $30;
      $__a$i$i$i = $162;
      $__i$i$i$i = 0;
      while (1) {
       $163 = $__i$i$i$i;
       $164 = $163 >>> 0 < 3;
       if (!$164) {
        break;
       }
       $165 = $__i$i$i$i;
       $166 = $__a$i$i$i;
       $167 = $166 + ($165 << 2) | 0;
       HEAP32[$167 >> 2] = 0;
       $168 = $__i$i$i$i;
       $169 = $168 + 1 | 0;
       $__i$i$i$i = $169;
      }
      $28 = $error_msg;
      $29 = $79;
      $170 = $28;
      $171 = $29;
      $26 = $170;
      $27 = $171;
      $172 = $26;
      $173 = $27;
      $25 = $173;
      $174 = $25;
      $24 = $174;
      $175 = $24;
      $23 = $175;
      $176 = $23;
      $22 = $176;
      $177 = $22;
      $21 = $177;
      $178 = $21;
      $179 = HEAP8[$178 >> 0] | 0;
      $180 = $179 & 255;
      $181 = $180 & 1;
      $182 = ($181 | 0) != 0;
      if ($182) {
       $15 = $175;
       $183 = $15;
       $14 = $183;
       $184 = $14;
       $13 = $184;
       $185 = $13;
       $186 = $185 + 8 | 0;
       $187 = HEAP32[$186 >> 2] | 0;
       $194 = $187;
      } else {
       $20 = $175;
       $188 = $20;
       $19 = $188;
       $189 = $19;
       $18 = $189;
       $190 = $18;
       $191 = $190 + 1 | 0;
       $17 = $191;
       $192 = $17;
       $16 = $192;
       $193 = $16;
       $194 = $193;
      }
      $12 = $194;
      $195 = $12;
      $196 = $27;
      $11 = $196;
      $197 = $11;
      $10 = $197;
      $198 = $10;
      $9 = $198;
      $199 = $9;
      $8 = $199;
      $200 = $8;
      $201 = HEAP8[$200 >> 0] | 0;
      $202 = $201 & 255;
      $203 = $202 & 1;
      $204 = ($203 | 0) != 0;
      if ($204) {
       $4 = $197;
       $205 = $4;
       $3 = $205;
       $206 = $3;
       $2 = $206;
       $207 = $2;
       $208 = $207 + 4 | 0;
       $209 = HEAP32[$208 >> 2] | 0;
       $216 = $209;
      } else {
       $7 = $197;
       $210 = $7;
       $6 = $210;
       $211 = $6;
       $5 = $211;
       $212 = $5;
       $213 = HEAP8[$212 >> 0] | 0;
       $214 = $213 & 255;
       $215 = $214 >> 1;
       $216 = $215;
      }
      __THREW__ = 0;
      (tempInt = invoke_iiii(365, $172 | 0, $195 | 0, $216 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $217 = __THREW__;
      __THREW__ = 0;
      $218 = $217 & 1;
      if ($218) {
       $232 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $233 = tempRet0;
       $77 = $232;
       $78 = $233;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($79), asyncState ? abort(-12) | 0 : 0;
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($79), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($80), asyncState ? abort(-12) | 0 : 0;
      $219 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $0 = $219;
      $1 = $error_msg;
      $220 = $0;
      $221 = $1;
      __THREW__ = 0;
      invoke_vii(386, $220 | 0, $221 | 0), asyncState ? abort(-12) | 0 : 0;
      $222 = __THREW__;
      __THREW__ = 0;
      $223 = $222 & 1;
      if (!$223) {
       $224 = 3256;
       HEAP32[$220 >> 2] = $224;
       __THREW__ = 0;
       invoke_viii(387, $219 | 0, 176 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
       $225 = __THREW__;
       __THREW__ = 0;
       break L16;
      }
      $234 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $235 = tempRet0;
      $77 = $234;
      $78 = $235;
      ___cxa_free_exception($219 | 0), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
      $236 = $77;
      $237 = $78;
      ___resumeException($236 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    } while (0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($80), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
    $236 = $77;
    $237 = $78;
    ___resumeException($236 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $228 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $229 = tempRet0;
 $77 = $228;
 $78 = $229;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($error_msg), asyncState ? abort(-12) | 0 : 0;
 $236 = $77;
 $237 = $78;
 ___resumeException($236 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $47 = sp;
 $50 = sp + 349 | 0;
 $83 = sp + 8 | 0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $87 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($85, $86) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($87) {
  $299 = $79;
  $300 = (tempInt = __ZNSt3__111char_traitsIcE7not_eofEi($299) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;
  return $301 | 0;
 }
 $76 = $84;
 $88 = $76;
 $89 = $88 + 12 | 0;
 $90 = HEAP32[$89 >> 2] | 0;
 $75 = $84;
 $91 = $75;
 $92 = $91 + 8 | 0;
 $93 = HEAP32[$92 >> 2] | 0;
 $94 = $90;
 $95 = $93;
 $96 = $94 - $95 | 0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = $97 + 24 | 0;
 $99 = HEAP32[$98 >> 2] | 0;
 $70 = $84;
 $100 = $70;
 $101 = $100 + 28 | 0;
 $102 = HEAP32[$101 >> 2] | 0;
 $103 = ($99 | 0) == ($102 | 0);
 do {
  if ($103) {
   $104 = $84 + 48 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   $106 = $105 & 16;
   $107 = ($106 | 0) != 0;
   if (!$107) {
    $108 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;
    return $301 | 0;
   }
   $69 = $84;
   $109 = $69;
   $110 = $109 + 24 | 0;
   $111 = HEAP32[$110 >> 2] | 0;
   $40 = $84;
   $112 = $40;
   $113 = $112 + 20 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   $115 = $111;
   $116 = $114;
   $117 = $115 - $116 | 0;
   $__nout = $117;
   $118 = $84 + 44 | 0;
   $119 = HEAP32[$118 >> 2] | 0;
   $7 = $84;
   $120 = $7;
   $121 = $120 + 20 | 0;
   $122 = HEAP32[$121 >> 2] | 0;
   $123 = $119;
   $124 = $122;
   $125 = $123 - $124 | 0;
   $__hm = $125;
   $126 = $84 + 32 | 0;
   __THREW__ = 0;
   invoke_vii(407, $126 | 0, 0), asyncState ? abort(-12) | 0 : 0;
   $127 = __THREW__;
   __THREW__ = 0;
   $128 = $127 & 1;
   if (!$128) {
    $129 = $84 + 32 | 0;
    $130 = $84 + 32 | 0;
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134 >> 0] | 0;
    $136 = $135 & 255;
    $137 = $136 & 1;
    $138 = ($137 | 0) != 0;
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141 >> 2] | 0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = $145 - 1 | 0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(408, $146 | 0, $147 | 0, 0), asyncState ? abort(-12) | 0 : 0;
    $148 = __THREW__;
    __THREW__ = 0;
    $149 = $148 & 1;
    if (!$149) {
     $150 = $84 + 32 | 0;
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155 >> 0] | 0;
     $157 = $156 & 255;
     $158 = $157 & 1;
     $159 = ($158 | 0) != 0;
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = $162 + 8 | 0;
      $164 = HEAP32[$163 >> 2] | 0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = $167 + 1 | 0;
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = $84 + 32 | 0;
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179 >> 0] | 0;
     $181 = $180 & 255;
     $182 = $181 & 1;
     $183 = ($182 | 0) != 0;
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = $186 + 4 | 0;
      $188 = HEAP32[$187 >> 2] | 0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191 >> 0] | 0;
      $193 = $192 & 255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = $174 + $196 | 0;
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = $197 + 24 | 0;
     HEAP32[$199 >> 2] = $198;
     $200 = $197 + 20 | 0;
     HEAP32[$200 >> 2] = $198;
     $201 = $36;
     $202 = $197 + 28 | 0;
     HEAP32[$202 >> 2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = $204 + 24 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     $208 = $207 + $205 | 0;
     HEAP32[$206 >> 2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = $209 + 20 | 0;
     $211 = HEAP32[$210 >> 2] | 0;
     $212 = $__hm;
     $213 = $211 + $212 | 0;
     $214 = $84 + 44 | 0;
     HEAP32[$214 >> 2] = $213;
     break;
    }
   }
   $215 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (tempInt = ___cxa_begin_catch($217 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $218 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
   $301 = $77;
   STACKTOP = sp;
   return $301 | 0;
  }
 } while (0);
 $41 = $84;
 $219 = $41;
 $220 = $219 + 24 | 0;
 $221 = HEAP32[$220 >> 2] | 0;
 $222 = $221 + 1 | 0;
 HEAP32[$83 >> 2] = $222;
 $223 = $84 + 44 | 0;
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 HEAP8[$47 >> 0] = HEAP8[$50 >> 0] | 0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228 >> 2] | 0;
 $230 = $44;
 $231 = HEAP32[$230 >> 2] | 0;
 $232 = $229 >>> 0 < $231 >>> 0;
 $233 = $46;
 $234 = $45;
 $235 = $232 ? $233 : $234;
 $236 = HEAP32[$235 >> 2] | 0;
 $237 = $84 + 44 | 0;
 HEAP32[$237 >> 2] = $236;
 $238 = $84 + 48 | 0;
 $239 = HEAP32[$238 >> 2] | 0;
 $240 = $239 & 8;
 $241 = ($240 | 0) != 0;
 if ($241) {
  $242 = $84 + 32 | 0;
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247 >> 0] | 0;
  $249 = $248 & 255;
  $250 = $249 & 1;
  $251 = ($250 | 0) != 0;
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = $254 + 8 | 0;
   $256 = HEAP32[$255 >> 2] | 0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = $259 + 1 | 0;
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = $266 + $267 | 0;
  $269 = $84 + 44 | 0;
  $270 = HEAP32[$269 >> 2] | 0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = $271 + 8 | 0;
  HEAP32[$273 >> 2] = $272;
  $274 = $67;
  $275 = $271 + 12 | 0;
  HEAP32[$275 >> 2] = $274;
  $276 = $68;
  $277 = $271 + 16 | 0;
  HEAP32[$277 >> 2] = $276;
 }
 $278 = $79;
 $279 = $278 & 255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = $280 + 24 | 0;
 $282 = HEAP32[$281 >> 2] | 0;
 $283 = $280 + 28 | 0;
 $284 = HEAP32[$283 >> 2] | 0;
 $285 = ($282 | 0) == ($284 | 0);
 if ($285) {
  $286 = HEAP32[$280 >> 2] | 0;
  $287 = $286 + 52 | 0;
  $288 = HEAP32[$287 >> 2] | 0;
  $289 = $74;
  $290 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($289) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $291 = (tempInt = FUNCTION_TABLE_iii[$288 & 1023]($280, $290) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $72 = $291;
 } else {
  $292 = $74;
  $293 = $280 + 24 | 0;
  $294 = HEAP32[$293 >> 2] | 0;
  $295 = $294 + 1 | 0;
  HEAP32[$293 >> 2] = $295;
  HEAP8[$294 >> 0] = $292;
  $296 = $74;
  $297 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($296) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;
 return $301 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__extbe = sp + 28 | 0;
 $__c = sp;
 $__state = sp + 16 | 0;
 $26 = $this;
 $27 = $26;
 $28 = $27 + 64 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $30 = ($29 | 0) == (0 | 0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;
  return $245 | 0;
 }
 $31 = $27 + 68 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = ($32 | 0) != (0 | 0);
 if (!$33) {
  $34 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __ZNSt8bad_castC2Ev($34), asyncState ? abort(-12) | 0 : 0;
  ___cxa_throw($34 | 0, 232 | 0, 75 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $35 = $27 + 92 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 $37 = $36 & 16;
 $38 = ($37 | 0) != 0;
 if ($38) {
  $24 = $27;
  $39 = $24;
  $40 = $39 + 24 | 0;
  $41 = HEAP32[$40 >> 2] | 0;
  $14 = $27;
  $42 = $14;
  $43 = $42 + 20 | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  $45 = ($41 | 0) != ($44 | 0);
  if ($45) {
   $46 = HEAP32[$27 >> 2] | 0;
   $47 = $46 + 52 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   $49 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $50 = (tempInt = FUNCTION_TABLE_iii[$48 & 1023]($27, $49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $51 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $52 = ($50 | 0) == ($51 | 0);
   if ($52) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;
    return $245 | 0;
   }
  }
  while (1) {
   $53 = $27 + 68 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   $55 = $27 + 72 | 0;
   $56 = $27 + 32 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   $58 = $27 + 32 | 0;
   $59 = HEAP32[$58 >> 2] | 0;
   $60 = $27 + 52 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   $62 = $59 + $61 | 0;
   $2 = $54;
   $3 = $55;
   $4 = $57;
   $5 = $62;
   $6 = $__extbe;
   $63 = $2;
   $64 = HEAP32[$63 >> 2] | 0;
   $65 = $64 + 20 | 0;
   $66 = HEAP32[$65 >> 2] | 0;
   $67 = $3;
   $68 = $4;
   $69 = $5;
   $70 = $6;
   $71 = (tempInt = FUNCTION_TABLE_iiiiii[$66 & 1023]($63, $67, $68, $69, $70) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $__r = $71;
   $72 = HEAP32[$__extbe >> 2] | 0;
   $73 = $27 + 32 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   $75 = $72;
   $76 = $74;
   $77 = $75 - $76 | 0;
   $__nmemb = $77;
   $78 = $27 + 32 | 0;
   $79 = HEAP32[$78 >> 2] | 0;
   $80 = $__nmemb;
   $81 = $27 + 64 | 0;
   $82 = HEAP32[$81 >> 2] | 0;
   $83 = (tempInt = _fwrite($79, 1, $80, $82) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $84 = $__nmemb;
   $85 = ($83 | 0) != ($84 | 0);
   if ($85) {
    label = 10;
    break;
   }
   $86 = $__r;
   $87 = ($86 | 0) == 1;
   if (!$87) {
    break;
   }
  }
  if ((label | 0) == 10) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;
   return $245 | 0;
  }
  $88 = $__r;
  $89 = ($88 | 0) == 2;
  if ($89) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;
   return $245 | 0;
  }
  $90 = $27 + 64 | 0;
  $91 = HEAP32[$90 >> 2] | 0;
  $92 = (tempInt = _fflush($91) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $93 = ($92 | 0) != 0;
  if ($93) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;
   return $245 | 0;
  }
 } else {
  $94 = $27 + 92 | 0;
  $95 = HEAP32[$94 >> 2] | 0;
  $96 = $95 & 8;
  $97 = ($96 | 0) != 0;
  if ($97) {
   $98 = $27 + 80 | 0;
   HEAP32[$__state >> 2] = HEAP32[$98 >> 2] | 0;
   HEAP32[$__state + 4 >> 2] = HEAP32[$98 + 4 >> 2] | 0;
   $__update_st = 0;
   $99 = $27 + 98 | 0;
   $100 = HEAP8[$99 >> 0] | 0;
   $101 = $100 & 1;
   do {
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = $102 + 16 | 0;
     $104 = HEAP32[$103 >> 2] | 0;
     $0 = $27;
     $105 = $0;
     $106 = $105 + 12 | 0;
     $107 = HEAP32[$106 >> 2] | 0;
     $108 = $104;
     $109 = $107;
     $110 = $108 - $109 | 0;
     $111 = ($110 | 0) < 0;
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114 >> 2] = $110;
     $115 = $113 + 4 | 0;
     $116 = $115;
     HEAP32[$116 >> 2] = $112;
    } else {
     $117 = $27 + 68 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119 >> 2] | 0;
     $121 = $120 + 24 | 0;
     $122 = HEAP32[$121 >> 2] | 0;
     $123 = (tempInt = FUNCTION_TABLE_ii[$122 & 1023]($119) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $__width = $123;
     $124 = $27 + 40 | 0;
     $125 = HEAP32[$124 >> 2] | 0;
     $126 = $27 + 36 | 0;
     $127 = HEAP32[$126 >> 2] | 0;
     $128 = $125;
     $129 = $127;
     $130 = $128 - $129 | 0;
     $131 = ($130 | 0) < 0;
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134 >> 2] = $130;
     $135 = $133 + 4 | 0;
     $136 = $135;
     HEAP32[$136 >> 2] = $132;
     $137 = $__width;
     $138 = ($137 | 0) > 0;
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = $140 + 16 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      $9 = $27;
      $143 = $9;
      $144 = $143 + 12 | 0;
      $145 = HEAP32[$144 >> 2] | 0;
      $146 = $142;
      $147 = $145;
      $148 = $146 - $147 | 0;
      $149 = Math_imul($139, $148) | 0;
      $150 = ($149 | 0) < 0;
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153 >> 2] | 0;
      $155 = $152 + 4 | 0;
      $156 = $155;
      $157 = HEAP32[$156 >> 2] | 0;
      $158 = (tempInt = _i64Add($154 | 0, $157 | 0, $149 | 0, $151 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161 >> 2] = $158;
      $162 = $160 + 4 | 0;
      $163 = $162;
      HEAP32[$163 >> 2] = $159;
      break;
     }
     $10 = $27;
     $164 = $10;
     $165 = $164 + 12 | 0;
     $166 = HEAP32[$165 >> 2] | 0;
     $11 = $27;
     $167 = $11;
     $168 = $167 + 16 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     $170 = ($166 | 0) != ($169 | 0);
     if ($170) {
      $171 = $27 + 68 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      $173 = $27 + 32 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      $175 = $27 + 36 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      $12 = $27;
      $177 = $12;
      $178 = $177 + 12 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      $13 = $27;
      $180 = $13;
      $181 = $180 + 8 | 0;
      $182 = HEAP32[$181 >> 2] | 0;
      $183 = $179;
      $184 = $182;
      $185 = $183 - $184 | 0;
      $15 = $172;
      $16 = $__state;
      $17 = $174;
      $18 = $176;
      $19 = $185;
      $186 = $15;
      $187 = HEAP32[$186 >> 2] | 0;
      $188 = $187 + 32 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      $190 = $16;
      $191 = $17;
      $192 = $18;
      $193 = $19;
      $194 = (tempInt = FUNCTION_TABLE_iiiiii[$189 & 1023]($186, $190, $191, $192, $193) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $__off = $194;
      $195 = $27 + 36 | 0;
      $196 = HEAP32[$195 >> 2] | 0;
      $197 = $27 + 32 | 0;
      $198 = HEAP32[$197 >> 2] | 0;
      $199 = $196;
      $200 = $198;
      $201 = $199 - $200 | 0;
      $202 = $__off;
      $203 = $201 - $202 | 0;
      $204 = ($203 | 0) < 0;
      $205 = $204 << 31 >> 31;
      $206 = $__c;
      $207 = $206;
      $208 = HEAP32[$207 >> 2] | 0;
      $209 = $206 + 4 | 0;
      $210 = $209;
      $211 = HEAP32[$210 >> 2] | 0;
      $212 = (tempInt = _i64Add($208 | 0, $211 | 0, $203 | 0, $205 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $213 = tempRet0;
      $214 = $__c;
      $215 = $214;
      HEAP32[$215 >> 2] = $212;
      $216 = $214 + 4 | 0;
      $217 = $216;
      HEAP32[$217 >> 2] = $213;
      $__update_st = 1;
     }
    }
   } while (0);
   $218 = $27 + 64 | 0;
   $219 = HEAP32[$218 >> 2] | 0;
   $220 = $__c;
   $221 = $220;
   $222 = HEAP32[$221 >> 2] | 0;
   $223 = $220 + 4 | 0;
   $224 = $223;
   $225 = HEAP32[$224 >> 2] | 0;
   $226 = (tempInt = _i64Subtract(0, 0, $222 | 0, $225 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $227 = tempRet0;
   $228 = (tempInt = ___fseeko($219, $226, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $229 = ($228 | 0) != 0;
   if ($229) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;
    return $245 | 0;
   }
   $230 = $__update_st;
   $231 = $230 & 1;
   if ($231) {
    $232 = $27 + 72 | 0;
    HEAP32[$232 >> 2] = HEAP32[$__state >> 2] | 0;
    HEAP32[$232 + 4 >> 2] = HEAP32[$__state + 4 >> 2] | 0;
   }
   $233 = $27 + 32 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   $235 = $27 + 40 | 0;
   HEAP32[$235 >> 2] = $234;
   $236 = $27 + 36 | 0;
   HEAP32[$236 >> 2] = $234;
   $20 = $27;
   $21 = 0;
   $22 = 0;
   $23 = 0;
   $237 = $20;
   $238 = $21;
   $239 = $237 + 8 | 0;
   HEAP32[$239 >> 2] = $238;
   $240 = $22;
   $241 = $237 + 12 | 0;
   HEAP32[$241 >> 2] = $240;
   $242 = $23;
   $243 = $237 + 16 | 0;
   HEAP32[$243 >> 2] = $242;
   $244 = $27 + 92 | 0;
   HEAP32[$244 >> 2] = 0;
  }
 }
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;
 return $245 | 0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__1buf = sp + 200 | 0;
 $__extbe = sp + 16 | 0;
 $__e = sp + 8 | 0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = $42 + 64 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 $45 = ($44 | 0) == (0 | 0);
 if ($45) {
  $46 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;
  return $225 | 0;
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42), asyncState ? abort(-12) | 0 : 0;
 $38 = $42;
 $47 = $38;
 $48 = $47 + 20 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = $50 + 28 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $55 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($53, $54) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if (!$55) {
  $33 = $42;
  $56 = $33;
  $57 = $56 + 24 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  $59 = ($58 | 0) == (0 | 0);
  if ($59) {
   $60 = $__1buf + 1 | 0;
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = $61 + 24 | 0;
   HEAP32[$63 >> 2] = $62;
   $64 = $61 + 20 | 0;
   HEAP32[$64 >> 2] = $62;
   $65 = $24;
   $66 = $61 + 28 | 0;
   HEAP32[$66 >> 2] = $65;
  }
  $67 = $41;
  $68 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($67) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $21 = $42;
  $69 = $21;
  $70 = $69 + 24 | 0;
  $71 = HEAP32[$70 >> 2] | 0;
  HEAP8[$71 >> 0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = $72 + 24 | 0;
  $75 = HEAP32[$74 >> 2] | 0;
  $76 = $75 + $73 | 0;
  HEAP32[$74 >> 2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = $77 + 24 | 0;
 $79 = HEAP32[$78 >> 2] | 0;
 $3 = $42;
 $80 = $3;
 $81 = $80 + 20 | 0;
 $82 = HEAP32[$81 >> 2] | 0;
 $83 = ($79 | 0) != ($82 | 0);
 if ($83) {
  $84 = $42 + 98 | 0;
  $85 = HEAP8[$84 >> 0] | 0;
  $86 = $85 & 1;
  L13 : do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = $87 + 24 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    $1 = $42;
    $90 = $1;
    $91 = $90 + 20 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = $89;
    $94 = $92;
    $95 = $93 - $94 | 0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = $96 + 20 | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = $__nmemb;
    $100 = $42 + 64 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = (tempInt = _fwrite($98, 1, $99, $101) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $103 = $__nmemb;
    $104 = ($102 | 0) != ($103 | 0);
    if ($104) {
     $105 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $39 = $105;
     $225 = $39;
     STACKTOP = sp;
     return $225 | 0;
    }
   } else {
    $106 = $42 + 32 | 0;
    $107 = HEAP32[$106 >> 2] | 0;
    HEAP32[$__extbe >> 2] = $107;
    while (1) {
     $108 = $42 + 68 | 0;
     $109 = HEAP32[$108 >> 2] | 0;
     $110 = ($109 | 0) != (0 | 0);
     if (!$110) {
      label = 13;
      break;
     }
     $112 = $42 + 68 | 0;
     $113 = HEAP32[$112 >> 2] | 0;
     $114 = $42 + 72 | 0;
     $4 = $42;
     $115 = $4;
     $116 = $115 + 20 | 0;
     $117 = HEAP32[$116 >> 2] | 0;
     $5 = $42;
     $118 = $5;
     $119 = $118 + 24 | 0;
     $120 = HEAP32[$119 >> 2] | 0;
     $121 = $42 + 32 | 0;
     $122 = HEAP32[$121 >> 2] | 0;
     $123 = $42 + 32 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     $125 = $42 + 52 | 0;
     $126 = HEAP32[$125 >> 2] | 0;
     $127 = $124 + $126 | 0;
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128 >> 2] | 0;
     $130 = $129 + 12 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (tempInt = FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128, $132, $133, $134, $135, $136, $137, $138) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $__r = $139;
     $140 = HEAP32[$__e >> 2] | 0;
     $15 = $42;
     $141 = $15;
     $142 = $141 + 20 | 0;
     $143 = HEAP32[$142 >> 2] | 0;
     $144 = ($140 | 0) == ($143 | 0);
     if ($144) {
      label = 15;
      break;
     }
     $146 = $__r;
     $147 = ($146 | 0) == 3;
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = $148 + 24 | 0;
      $150 = HEAP32[$149 >> 2] | 0;
      $19 = $42;
      $151 = $19;
      $152 = $151 + 20 | 0;
      $153 = HEAP32[$152 >> 2] | 0;
      $154 = $150;
      $155 = $153;
      $156 = $154 - $155 | 0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = $157 + 20 | 0;
      $159 = HEAP32[$158 >> 2] | 0;
      $160 = $__nmemb1;
      $161 = $42 + 64 | 0;
      $162 = HEAP32[$161 >> 2] | 0;
      $163 = (tempInt = _fwrite($159, 1, $160, $162) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $164 = $__nmemb1;
      $165 = ($163 | 0) != ($164 | 0);
      if ($165) {
       label = 18;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167 | 0) == 0;
      $169 = $__r;
      $170 = ($169 | 0) == 1;
      $or$cond = $168 | $170;
      if (!$or$cond) {
       label = 24;
       break;
      }
      $171 = HEAP32[$__extbe >> 2] | 0;
      $172 = $42 + 32 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      $174 = $171;
      $175 = $173;
      $176 = $174 - $175 | 0;
      $__nmemb2 = $176;
      $177 = $42 + 32 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      $179 = $__nmemb2;
      $180 = $42 + 64 | 0;
      $181 = HEAP32[$180 >> 2] | 0;
      $182 = (tempInt = _fwrite($178, 1, $179, $181) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $183 = $__nmemb2;
      $184 = ($182 | 0) != ($183 | 0);
      if ($184) {
       label = 21;
       break;
      }
      $186 = $__r;
      $187 = ($186 | 0) == 1;
      if ($187) {
       $188 = HEAP32[$__e >> 2] | 0;
       $25 = $42;
       $189 = $25;
       $190 = $189 + 24 | 0;
       $191 = HEAP32[$190 >> 2] | 0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = $192 + 24 | 0;
       HEAP32[$194 >> 2] = $193;
       $195 = $192 + 20 | 0;
       HEAP32[$195 >> 2] = $193;
       $196 = $28;
       $197 = $192 + 28 | 0;
       HEAP32[$197 >> 2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = $198 + 28 | 0;
       $200 = HEAP32[$199 >> 2] | 0;
       $30 = $42;
       $201 = $30;
       $202 = $201 + 20 | 0;
       $203 = HEAP32[$202 >> 2] | 0;
       $204 = $200;
       $205 = $203;
       $206 = $204 - $205 | 0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = $207 + 24 | 0;
       $210 = HEAP32[$209 >> 2] | 0;
       $211 = $210 + $208 | 0;
       HEAP32[$209 >> 2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213 | 0) == 1;
     if (!$214) {
      break L13;
     }
    }
    if ((label | 0) == 13) {
     $111 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     __ZNSt8bad_castC2Ev($111), asyncState ? abort(-12) | 0 : 0;
     ___cxa_throw($111 | 0, 232 | 0, 75 | 0), asyncState ? abort(-12) | 0 : 0;
    } else if ((label | 0) == 15) {
     $145 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;
     return $225 | 0;
    } else if ((label | 0) == 18) {
     $166 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;
     return $225 | 0;
    } else if ((label | 0) == 21) {
     $185 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;
     return $225 | 0;
    } else if ((label | 0) == 24) {
     $212 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;
     return $225 | 0;
    }
   }
  } while (0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = $217 + 24 | 0;
  HEAP32[$219 >> 2] = $218;
  $220 = $217 + 20 | 0;
  HEAP32[$220 >> 2] = $218;
  $221 = $36;
  $222 = $217 + 28 | 0;
  HEAP32[$222 >> 2] = $221;
 }
 $223 = $41;
 $224 = (tempInt = __ZNSt3__111char_traitsIcE7not_eofEi($223) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;
 return $225 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE16__construct_nodeIJRKNS_4pairIKS7_SC_EEEEENS_10unique_ptrINS_11__tree_nodeISD_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $15 = sp + 32 | 0;
 $20 = sp + 487 | 0;
 $35 = sp + 24 | 0;
 $38 = sp + 486 | 0;
 $61 = sp + 16 | 0;
 $64 = sp + 485 | 0;
 $85 = sp + 156 | 0;
 $86 = sp + 8 | 0;
 $89 = sp + 144 | 0;
 $90 = sp + 136 | 0;
 $91 = sp;
 $96 = sp + 112 | 0;
 $110 = sp + 484 | 0;
 $111 = sp + 48 | 0;
 $108 = $this;
 $109 = $__args;
 $115 = $108;
 $107 = $115;
 $116 = $107;
 $117 = $116 + 4 | 0;
 $106 = $117;
 $118 = $106;
 $105 = $118;
 $119 = $105;
 $__na = $119;
 $$expand_i1_val = 0;
 HEAP8[$110 >> 0] = $$expand_i1_val;
 $120 = $__na;
 $103 = $120;
 $104 = 1;
 $121 = $103;
 $122 = $104;
 $100 = $121;
 $101 = $122;
 $102 = 0;
 $123 = $101;
 $124 = $123 * 48 | 0;
 $99 = $124;
 $125 = $99;
 $126 = (tempInt = __Znwj($125) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $127 = $__na;
 $97 = $111;
 $98 = $127;
 $128 = $97;
 $129 = $98;
 HEAP32[$128 >> 2] = $129;
 $130 = $128 + 4 | 0;
 HEAP8[$130 >> 0] = 0;
 $93 = $agg$result;
 $94 = $126;
 $95 = $111;
 $131 = $93;
 $132 = $94;
 $133 = $95;
 $92 = $133;
 $134 = $92;
 HEAP32[$96 >> 2] = HEAP32[$134 >> 2] | 0;
 HEAP32[$96 + 4 >> 2] = HEAP32[$134 + 4 >> 2] | 0;
 HEAP8[$91 >> 0] = HEAP8[$96 >> 0] | 0;
 HEAP8[$91 + 1 >> 0] = HEAP8[$96 + 1 >> 0] | 0;
 HEAP8[$91 + 2 >> 0] = HEAP8[$96 + 2 >> 0] | 0;
 HEAP8[$91 + 3 >> 0] = HEAP8[$96 + 3 >> 0] | 0;
 HEAP8[$91 + 4 >> 0] = HEAP8[$96 + 4 >> 0] | 0;
 HEAP8[$91 + 5 >> 0] = HEAP8[$96 + 5 >> 0] | 0;
 HEAP8[$91 + 6 >> 0] = HEAP8[$96 + 6 >> 0] | 0;
 HEAP8[$91 + 7 >> 0] = HEAP8[$96 + 7 >> 0] | 0;
 $88 = $131;
 HEAP32[$89 >> 2] = $132;
 $135 = $88;
 $87 = $89;
 $136 = $87;
 $137 = HEAP32[$136 >> 2] | 0;
 $81 = $91;
 $138 = $81;
 HEAP32[$90 >> 2] = HEAP32[$138 >> 2] | 0;
 HEAP32[$90 + 4 >> 2] = HEAP32[$138 + 4 >> 2] | 0;
 HEAP8[$86 >> 0] = HEAP8[$90 >> 0] | 0;
 HEAP8[$86 + 1 >> 0] = HEAP8[$90 + 1 >> 0] | 0;
 HEAP8[$86 + 2 >> 0] = HEAP8[$90 + 2 >> 0] | 0;
 HEAP8[$86 + 3 >> 0] = HEAP8[$90 + 3 >> 0] | 0;
 HEAP8[$86 + 4 >> 0] = HEAP8[$90 + 4 >> 0] | 0;
 HEAP8[$86 + 5 >> 0] = HEAP8[$90 + 5 >> 0] | 0;
 HEAP8[$86 + 6 >> 0] = HEAP8[$90 + 6 >> 0] | 0;
 HEAP8[$86 + 7 >> 0] = HEAP8[$90 + 7 >> 0] | 0;
 $84 = $135;
 HEAP32[$85 >> 2] = $137;
 $139 = $84;
 $83 = $85;
 $140 = $83;
 $141 = HEAP32[$140 >> 2] | 0;
 HEAP32[$139 >> 2] = $141;
 $142 = $139 + 4 | 0;
 $82 = $86;
 $143 = $82;
 HEAP32[$142 >> 2] = HEAP32[$143 >> 2] | 0;
 HEAP32[$142 + 4 >> 2] = HEAP32[$143 + 4 >> 2] | 0;
 $144 = $__na;
 $80 = $agg$result;
 $145 = $80;
 $79 = $145;
 $146 = $79;
 $78 = $146;
 $147 = $78;
 $148 = HEAP32[$147 >> 2] | 0;
 $149 = $148 + 16 | 0;
 $77 = $149;
 $150 = $77;
 $151 = $109;
 $76 = $151;
 $152 = $76;
 $17 = $144;
 $18 = $150;
 $19 = $152;
 $153 = $17;
 $154 = $18;
 $155 = $19;
 $16 = $155;
 $156 = $16;
 HEAP8[$15 >> 0] = HEAP8[$20 >> 0] | 0;
 $12 = $153;
 $13 = $154;
 $14 = $156;
 $157 = $12;
 $158 = $13;
 $159 = $14;
 $11 = $159;
 $160 = $11;
 $8 = $157;
 $9 = $158;
 $10 = $160;
 $161 = $9;
 $162 = $10;
 $7 = $162;
 $163 = $7;
 $5 = $161;
 $6 = $163;
 $164 = $5;
 $165 = $6;
 $4 = $165;
 $166 = $4;
 $0 = $164;
 $1 = $166;
 $167 = $0;
 $168 = $1;
 __THREW__ = 0;
 invoke_vii(411, $167 | 0, $168 | 0), asyncState ? abort(-12) | 0 : 0;
 $169 = __THREW__;
 __THREW__ = 0;
 $170 = $169 & 1;
 do {
  if ($170) {
   $186 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $187 = tempRet0;
   $eh$lpad$body$index2Z2D = $187;
   $eh$lpad$body$indexZ2D = $186;
  } else {
   $171 = $167 + 16 | 0;
   $172 = $1;
   $173 = $172 + 16 | 0;
   __THREW__ = 0;
   invoke_vii(375, $171 | 0, $173 | 0), asyncState ? abort(-12) | 0 : 0;
   $174 = __THREW__;
   __THREW__ = 0;
   $175 = $174 & 1;
   if ($175) {
    $176 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $177 = tempRet0;
    $2 = $176;
    $3 = $177;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($167), asyncState ? abort(-12) | 0 : 0;
    $178 = $2;
    $179 = $3;
    $eh$lpad$body$index2Z2D = $179;
    $eh$lpad$body$indexZ2D = $178;
    break;
   }
   $75 = $agg$result;
   $180 = $75;
   $74 = $180;
   $181 = $74;
   $73 = $181;
   $182 = $73;
   $183 = $182 + 4 | 0;
   $184 = $183 + 4 | 0;
   HEAP8[$184 >> 0] = 1;
   $$expand_i1_val7 = 1;
   HEAP8[$110 >> 0] = $$expand_i1_val7;
   $114 = 1;
   $$pre_trunc = HEAP8[$110 >> 0] | 0;
   $185 = $$pre_trunc & 1;
   if ($185) {
    STACKTOP = sp;
    return;
   }
   $46 = $agg$result;
   $223 = $46;
   $44 = $223;
   $45 = 0;
   $224 = $44;
   $43 = $224;
   $225 = $43;
   $42 = $225;
   $226 = $42;
   $227 = HEAP32[$226 >> 2] | 0;
   $__tmp$i$i1 = $227;
   $228 = $45;
   $24 = $224;
   $229 = $24;
   $23 = $229;
   $230 = $23;
   HEAP32[$230 >> 2] = $228;
   $231 = $__tmp$i$i1;
   $232 = ($231 | 0) != (0 | 0);
   if (!$232) {
    STACKTOP = sp;
    return;
   }
   $22 = $224;
   $233 = $22;
   $21 = $233;
   $234 = $21;
   $235 = $234 + 4 | 0;
   $236 = $__tmp$i$i1;
   $40 = $235;
   $41 = $236;
   $237 = $40;
   $238 = $237 + 4 | 0;
   $239 = HEAP8[$238 >> 0] | 0;
   $240 = $239 & 1;
   if ($240) {
    $241 = HEAP32[$237 >> 2] | 0;
    $242 = $41;
    $243 = $242 + 16 | 0;
    $39 = $243;
    $244 = $39;
    $36 = $241;
    $37 = $244;
    $245 = $36;
    $246 = $37;
    HEAP8[$35 >> 0] = HEAP8[$38 >> 0] | 0;
    $33 = $245;
    $34 = $246;
    $247 = $34;
    $32 = $247;
    $248 = $32;
    __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($248), asyncState ? abort(-12) | 0 : 0;
   }
   $249 = $41;
   $250 = ($249 | 0) != (0 | 0);
   if (!$250) {
    STACKTOP = sp;
    return;
   }
   $251 = HEAP32[$237 >> 2] | 0;
   $252 = $41;
   $29 = $251;
   $30 = $252;
   $31 = 1;
   $253 = $29;
   $254 = $30;
   $255 = $31;
   $26 = $253;
   $27 = $254;
   $28 = $255;
   $256 = $27;
   $25 = $256;
   $257 = $25;
   __ZdlPv($257), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 $112 = $eh$lpad$body$indexZ2D;
 $113 = $eh$lpad$body$index2Z2D;
 $72 = $agg$result;
 $188 = $72;
 $70 = $188;
 $71 = 0;
 $189 = $70;
 $69 = $189;
 $190 = $69;
 $68 = $190;
 $191 = $68;
 $192 = HEAP32[$191 >> 2] | 0;
 $__tmp$i$i = $192;
 $193 = $71;
 $50 = $189;
 $194 = $50;
 $49 = $194;
 $195 = $49;
 HEAP32[$195 >> 2] = $193;
 $196 = $__tmp$i$i;
 $197 = ($196 | 0) != (0 | 0);
 if (!$197) {
  $258 = $112;
  $259 = $113;
  ___resumeException($258 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $48 = $189;
 $198 = $48;
 $47 = $198;
 $199 = $47;
 $200 = $199 + 4 | 0;
 $201 = $__tmp$i$i;
 $66 = $200;
 $67 = $201;
 $202 = $66;
 $203 = $202 + 4 | 0;
 $204 = HEAP8[$203 >> 0] | 0;
 $205 = $204 & 1;
 if ($205) {
  $206 = HEAP32[$202 >> 2] | 0;
  $207 = $67;
  $208 = $207 + 16 | 0;
  $65 = $208;
  $209 = $65;
  $62 = $206;
  $63 = $209;
  $210 = $62;
  $211 = $63;
  HEAP8[$61 >> 0] = HEAP8[$64 >> 0] | 0;
  $59 = $210;
  $60 = $211;
  $212 = $60;
  $58 = $212;
  $213 = $58;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($213), asyncState ? abort(-12) | 0 : 0;
 }
 $214 = $67;
 $215 = ($214 | 0) != (0 | 0);
 if (!$215) {
  $258 = $112;
  $259 = $113;
  ___resumeException($258 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $216 = HEAP32[$202 >> 2] | 0;
 $217 = $67;
 $55 = $216;
 $56 = $217;
 $57 = 1;
 $218 = $55;
 $219 = $56;
 $220 = $57;
 $52 = $218;
 $53 = $219;
 $54 = $220;
 $221 = $53;
 $51 = $221;
 $222 = $51;
 __ZdlPv($222), asyncState ? abort(-12) | 0 : 0;
 $258 = $112;
 $259 = $113;
 ___resumeException($258 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i413 = 0, $$01$i$i9 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$010 = 0, $__dc$1 = 0, $__dg$011 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$012 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__grouping = sp;
 $0 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8908) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9064) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping, $1), asyncState ? abort(-12) | 0 : 0;
 $5 = HEAP8[$__grouping >> 0] | 0;
 $6 = $5 & 1;
 $7 = $6 << 24 >> 24 == 0;
 $8 = $__grouping + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $5 & 255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12 | 0) == 0;
 L1 : do {
  if ($13) {
   $14 = HEAP32[$0 >> 2] | 0;
   $15 = $14 + 48 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   __THREW__ = 0;
   (tempInt = invoke_iiiii($16 | 0, $0 | 0, $__nb | 0, $__ne | 0, $__ob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = $19 - $20 | 0;
    $22 = $__ob + ($21 << 2) | 0;
    HEAP32[$__oe >> 2] = $22;
    $$pre$phiZ2D = $20;
    $133 = $22;
    label = 28;
   }
  } else {
   HEAP32[$__oe >> 2] = $__ob;
   $27 = HEAP8[$__nb >> 0] | 0;
   switch ($27 << 24 >> 24) {
   case 43:
   case 45:
    {
     $28 = HEAP32[$0 >> 2] | 0;
     $29 = $28 + 44 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     __THREW__ = 0;
     $31 = (tempInt = invoke_iii($30 | 0, $0 | 0, $27 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $32 = __THREW__;
     __THREW__ = 0;
     $33 = $32 & 1;
     if ($33) {
      label = 5;
      break L1;
     }
     $34 = $__nb + 1 | 0;
     $35 = HEAP32[$__oe >> 2] | 0;
     $36 = $35 + 4 | 0;
     HEAP32[$__oe >> 2] = $36;
     HEAP32[$35 >> 2] = $31;
     $__nf$0 = $34;
     break;
    }
   default:
    {
     $__nf$0 = $__nb;
    }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = $37 - $38 | 0;
   $40 = ($39 | 0) > 1;
   L9 : do {
    if ($40) {
     $41 = HEAP8[$__nf$0 >> 0] | 0;
     $42 = $41 << 24 >> 24 == 48;
     if ($42) {
      $43 = $__nf$0 + 1 | 0;
      $44 = HEAP8[$43 >> 0] | 0;
      switch ($44 << 24 >> 24) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $__nf$1 = $__nf$0;
        break L9;
       }
      }
      $45 = HEAP32[$0 >> 2] | 0;
      $46 = $45 + 44 | 0;
      $47 = HEAP32[$46 >> 2] | 0;
      __THREW__ = 0;
      $48 = (tempInt = invoke_iii($47 | 0, $0 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $49 = __THREW__;
      __THREW__ = 0;
      $50 = $49 & 1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe >> 2] | 0;
      $52 = $51 + 4 | 0;
      HEAP32[$__oe >> 2] = $52;
      HEAP32[$51 >> 2] = $48;
      $53 = HEAP8[$43 >> 0] | 0;
      $54 = HEAP32[$0 >> 2] | 0;
      $55 = $54 + 44 | 0;
      $56 = HEAP32[$55 >> 2] | 0;
      __THREW__ = 0;
      $57 = (tempInt = invoke_iii($56 | 0, $0 | 0, $53 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $58 = __THREW__;
      __THREW__ = 0;
      $59 = $58 & 1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = $__nf$0 + 2 | 0;
      $61 = HEAP32[$__oe >> 2] | 0;
      $62 = $61 + 4 | 0;
      HEAP32[$__oe >> 2] = $62;
      HEAP32[$61 >> 2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while (0);
   $63 = ($__nf$1 | 0) == ($__ne | 0);
   if (!$63) {
    $64 = $__ne + -1 | 0;
    $65 = $__nf$1 >>> 0 < $64 >>> 0;
    if ($65) {
     $$01$i$i413 = $__nf$1;
     $68 = $64;
     while (1) {
      $66 = HEAP8[$$01$i$i413 >> 0] | 0;
      $67 = HEAP8[$68 >> 0] | 0;
      HEAP8[$$01$i$i413 >> 0] = $67;
      HEAP8[$68 >> 0] = $66;
      $69 = $$01$i$i413 + 1 | 0;
      $70 = $68 + -1 | 0;
      $71 = $69 >>> 0 < $70 >>> 0;
      if ($71) {
       $$01$i$i413 = $69;
       $68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1 >> 2] | 0;
   $73 = $72 + 16 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   __THREW__ = 0;
   $75 = (tempInt = invoke_ii($74 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $76 = __THREW__;
   __THREW__ = 0;
   $77 = $76 & 1;
   if ($77) {
    label = 5;
   } else {
    $78 = $__grouping + 8 | 0;
    $79 = $__grouping + 1 | 0;
    $80 = $__nf$1 >>> 0 < $__ne >>> 0;
    L22 : do {
     if ($80) {
      $__dc$010 = 0;
      $__dg$011 = 0;
      $__p$012 = $__nf$1;
      while (1) {
       $81 = HEAP8[$__grouping >> 0] | 0;
       $82 = $81 & 1;
       $83 = $82 << 24 >> 24 == 0;
       $84 = HEAP32[$78 >> 2] | 0;
       $85 = $83 ? $79 : $84;
       $86 = $85 + $__dg$011 | 0;
       $87 = HEAP8[$86 >> 0] | 0;
       $88 = $87 << 24 >> 24 != 0;
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$010 | 0) == ($89 | 0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe >> 2] | 0;
        $92 = $91 + 4 | 0;
        HEAP32[$__oe >> 2] = $92;
        HEAP32[$91 >> 2] = $75;
        $93 = HEAP8[$__grouping >> 0] | 0;
        $94 = $93 & 1;
        $95 = $94 << 24 >> 24 == 0;
        $96 = HEAP32[$8 >> 2] | 0;
        $97 = $93 & 255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = $99 + -1 | 0;
        $101 = $__dg$011 >>> 0 < $100 >>> 0;
        $102 = $101 & 1;
        $$__dg$0 = $102 + $__dg$011 | 0;
        $__dc$1 = 0;
        $__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$010;
        $__dg$1 = $__dg$011;
       }
       $103 = HEAP8[$__p$012 >> 0] | 0;
       $104 = HEAP32[$0 >> 2] | 0;
       $105 = $104 + 44 | 0;
       $106 = HEAP32[$105 >> 2] | 0;
       __THREW__ = 0;
       $107 = (tempInt = invoke_iii($106 | 0, $0 | 0, $103 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $108 = __THREW__;
       __THREW__ = 0;
       $109 = $108 & 1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe >> 2] | 0;
       $111 = $110 + 4 | 0;
       HEAP32[$__oe >> 2] = $111;
       HEAP32[$110 >> 2] = $107;
       $112 = $__dc$1 + 1 | 0;
       $113 = $__p$012 + 1 | 0;
       $114 = $113 >>> 0 < $__ne >>> 0;
       if ($114) {
        $__dc$010 = $112;
        $__dg$011 = $__dg$1;
        $__p$012 = $113;
       } else {
        break L22;
       }
      }
      $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $24 = tempRet0;
      $lpad$phi$index = $23;
      $lpad$phi$index2 = $24;
      break L1;
     }
    } while (0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = $115 - $116 | 0;
    $118 = $__ob + ($117 << 2) | 0;
    $119 = HEAP32[$__oe >> 2] | 0;
    $120 = ($118 | 0) == ($119 | 0);
    if ($120) {
     $$pre$phiZ2D = $116;
     $133 = $118;
     label = 28;
    } else {
     $121 = $119 + -4 | 0;
     $122 = $118 >>> 0 < $121 >>> 0;
     if ($122) {
      $$01$i$i9 = $118;
      $125 = $121;
      while (1) {
       $123 = HEAP32[$$01$i$i9 >> 2] | 0;
       $124 = HEAP32[$125 >> 2] | 0;
       HEAP32[$$01$i$i9 >> 2] = $124;
       HEAP32[$125 >> 2] = $123;
       $126 = $$01$i$i9 + 4 | 0;
       $127 = $125 + -4 | 0;
       $128 = $126 >>> 0 < $127 >>> 0;
       if ($128) {
        $$01$i$i9 = $126;
        $125 = $127;
       } else {
        $$pre$phiZ2D = $116;
        $133 = $119;
        label = 28;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $116;
      $133 = $119;
      label = 28;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $25 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $26 = tempRet0;
  $lpad$phi$index = $25;
  $lpad$phi$index2 = $26;
 } else if ((label | 0) == 28) {
  $129 = ($__np | 0) == ($__ne | 0);
  $130 = $__np;
  $131 = $130 - $$pre$phiZ2D | 0;
  $132 = $__ob + ($131 << 2) | 0;
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($this, $__sb) {
 $this = $this | 0;
 $__sb = $__sb | 0;
 var $$0 = 0, $$0$i$i = 0, $$1 = 0, $$__sb9 = 0, $$pre$phi16Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0$lcssa = 0, $__c$024 = 0, $__s = 0, $__sb818 = 0, $__sb923 = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
 $0 = __THREW__;
 __THREW__ = 0;
 $1 = $0 & 1;
 L1 : do {
  if ($1) {
   $54 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $55 = tempRet0;
   $$1 = $54;
   $$pre$phi16Z2D = $this;
   $$pre$phiZ2D = $this;
   label = 32;
  } else {
   $2 = HEAP8[$__s >> 0] | 0;
   $3 = $2 << 24 >> 24 == 0;
   L4 : do {
    if (!$3) {
     $4 = ($__sb | 0) == (0 | 0);
     $5 = HEAP32[$this >> 2] | 0;
     $6 = $5 + -12 | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     do {
      if ($4) {
       $95 = $this + $7 | 0;
       $$sum12 = $7 + 16 | 0;
       $96 = $this + $$sum12 | 0;
       $97 = HEAP32[$96 >> 2] | 0;
       $98 = $97 | 1;
       __THREW__ = 0;
       invoke_vii(394, $95 | 0, $98 | 0), asyncState ? abort(-12) | 0 : 0;
       $99 = __THREW__;
       __THREW__ = 0;
       $100 = $99 & 1;
       if ($100) {
        label = 17;
       } else {
        break L4;
       }
      } else {
       $$sum$i = $7 + 24 | 0;
       $8 = $this + $$sum$i | 0;
       $9 = HEAP32[$8 >> 2] | 0;
       $10 = $9;
       $11 = ($9 | 0) == 0;
       $12 = $10 + 24 | 0;
       $13 = $10 + 28 | 0;
       $14 = $9;
       $__c$024 = 0;
       $__sb923 = $__sb;
       while (1) {
        $15 = $__sb923 + 12 | 0;
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = $__sb923 + 16 | 0;
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ($16 | 0) == ($18 | 0);
        if ($19) {
         $20 = HEAP32[$__sb923 >> 2] | 0;
         $21 = $20 + 36 | 0;
         $22 = HEAP32[$21 >> 2] | 0;
         __THREW__ = 0;
         $23 = (tempInt = invoke_ii($22 | 0, $__sb923 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $24 = __THREW__;
         __THREW__ = 0;
         $25 = $24 & 1;
         if ($25) {
          label = 18;
          break;
         }
         $26 = ($23 | 0) == -1;
         $$__sb9 = $26 ? 0 : $__sb923;
         $27 = ($$__sb9 | 0) == (0 | 0);
         if ($27) {
          $__c$0$lcssa = $__c$024;
          label = 26;
          break;
         } else {
          $__sb818 = $$__sb9;
         }
        } else {
         $__sb818 = $__sb923;
        }
        $28 = $__sb818 + 12 | 0;
        $29 = HEAP32[$28 >> 2] | 0;
        $30 = $__sb818 + 16 | 0;
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ($29 | 0) == ($31 | 0);
        if ($32) {
         $33 = HEAP32[$__sb818 >> 2] | 0;
         $34 = $33 + 36 | 0;
         $35 = HEAP32[$34 >> 2] | 0;
         __THREW__ = 0;
         $36 = (tempInt = invoke_ii($35 | 0, $__sb818 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $37 = __THREW__;
         __THREW__ = 0;
         $38 = $37 & 1;
         if ($38) {
          label = 18;
          break;
         } else {
          $$0$i$i = $36;
         }
        } else {
         $39 = HEAP8[$29 >> 0] | 0;
         $40 = $39 & 255;
         $$0$i$i = $40;
        }
        $41 = $$0$i$i & 255;
        if ($11) {
         $__c$0$lcssa = $__c$024;
         label = 26;
         break;
        }
        $42 = HEAP32[$12 >> 2] | 0;
        $43 = HEAP32[$13 >> 2] | 0;
        $44 = ($42 | 0) == ($43 | 0);
        if ($44) {
         $46 = HEAP32[$14 >> 2] | 0;
         $47 = $46 + 52 | 0;
         $48 = HEAP32[$47 >> 2] | 0;
         $49 = $$0$i$i & 255;
         __THREW__ = 0;
         $50 = (tempInt = invoke_iii($48 | 0, $10 | 0, $49 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $51 = __THREW__;
         __THREW__ = 0;
         $52 = $51 & 1;
         if ($52) {
          label = 18;
          break;
         }
         $53 = ($50 | 0) == -1;
         if ($53) {
          $__c$0$lcssa = $__c$024;
          label = 26;
          break;
         }
        } else {
         $45 = $42 + 1 | 0;
         HEAP32[$12 >> 2] = $45;
         HEAP8[$42 >> 0] = $41;
        }
        $70 = HEAP32[$28 >> 2] | 0;
        $71 = HEAP32[$30 >> 2] | 0;
        $72 = ($70 | 0) == ($71 | 0);
        if ($72) {
         $73 = HEAP32[$__sb818 >> 2] | 0;
         $74 = $73 + 40 | 0;
         $75 = HEAP32[$74 >> 2] | 0;
         __THREW__ = 0;
         (tempInt = invoke_ii($75 | 0, $__sb818 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $76 = __THREW__;
         __THREW__ = 0;
         $77 = $76 & 1;
         if ($77) {
          label = 18;
          break;
         }
        } else {
         $78 = $70 + 1 | 0;
         HEAP32[$28 >> 2] = $78;
        }
        $79 = $__c$024 + 1 | 0;
        $80 = ($__sb818 | 0) == (0 | 0);
        if ($80) {
         $__c$0$lcssa = $79;
         label = 26;
         break;
        } else {
         $__c$024 = $79;
         $__sb923 = $__sb818;
        }
       }
       if ((label | 0) == 18) {
        $58 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $59 = tempRet0;
        $lpad$phi$index = $58;
       } else if ((label | 0) == 26) {
        $81 = ($__c$0$lcssa | 0) == 0;
        if (!$81) {
         break L4;
        }
        $82 = HEAP32[$this >> 2] | 0;
        $83 = $82 + -12 | 0;
        $84 = HEAP32[$83 >> 2] | 0;
        $85 = $this + $84 | 0;
        $$sum = $84 + 16 | 0;
        $86 = $this + $$sum | 0;
        $87 = HEAP32[$86 >> 2] | 0;
        $88 = $87 | 4;
        __THREW__ = 0;
        invoke_vii(394, $85 | 0, $88 | 0), asyncState ? abort(-12) | 0 : 0;
        $89 = __THREW__;
        __THREW__ = 0;
        $90 = $89 & 1;
        if (!$90) {
         break L4;
        }
        $60 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $61 = tempRet0;
        $lpad$phi$index = $60;
       }
       (tempInt = ___cxa_begin_catch($lpad$phi$index | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $62 = HEAP32[$this >> 2] | 0;
       $63 = $62 + -12 | 0;
       $64 = HEAP32[$63 >> 2] | 0;
       $65 = $this + $64 | 0;
       __THREW__ = 0;
       invoke_vi(460, $65 | 0), asyncState ? abort(-12) | 0 : 0;
       $66 = __THREW__;
       __THREW__ = 0;
       $67 = $66 & 1;
       if ($67) {
        $91 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $92 = tempRet0;
        __THREW__ = 0;
        invoke_v(409), asyncState ? abort(-12) | 0 : 0;
        $93 = __THREW__;
        __THREW__ = 0;
        $94 = $93 & 1;
        if ($94) {
         label = 37;
         break L1;
        } else {
         $$0 = $91;
         break;
        }
       } else {
        __THREW__ = 0;
        invoke_v(409), asyncState ? abort(-12) | 0 : 0;
        $68 = __THREW__;
        __THREW__ = 0;
        $69 = $68 & 1;
        if ($69) {
         label = 17;
         break;
        } else {
         break L4;
        }
       }
      }
     } while (0);
     if ((label | 0) == 17) {
      $56 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $57 = tempRet0;
      $$0 = $56;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$pre$phi16Z2D = $this;
     $$pre$phiZ2D = $this;
     label = 32;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
   label = 34;
  }
 } while (0);
 do {
  if ((label | 0) == 32) {
   (tempInt = ___cxa_begin_catch($$1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $101 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $102 = $101 + -12 | 0;
   $103 = HEAP32[$102 >> 2] | 0;
   $104 = $$pre$phi16Z2D + $103 | 0;
   __THREW__ = 0;
   invoke_vi(420, $104 | 0), asyncState ? abort(-12) | 0 : 0;
   $105 = __THREW__;
   __THREW__ = 0;
   $106 = $105 & 1;
   if (!$106) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    label = 34;
    break;
   }
   $107 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $108 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $109 = __THREW__;
   __THREW__ = 0;
   $110 = $109 & 1;
   if ($110) {
    label = 37;
   } else {
    ___resumeException($107 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 if ((label | 0) == 34) {
  STACKTOP = sp;
  return $this | 0;
 } else if ((label | 0) == 37) {
  $111 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $112 = tempRet0;
  ___clang_call_terminate($111), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i10 = 0, $$01$i$i414 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$011 = 0, $__dc$1 = 0, $__dg$012 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$013 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__grouping = sp;
 $0 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8916) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9056) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping, $1), asyncState ? abort(-12) | 0 : 0;
 $5 = HEAP8[$__grouping >> 0] | 0;
 $6 = $5 & 1;
 $7 = $6 << 24 >> 24 == 0;
 $8 = $__grouping + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $5 & 255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12 | 0) == 0;
 L1 : do {
  if ($13) {
   $14 = HEAP32[$0 >> 2] | 0;
   $15 = $14 + 32 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   __THREW__ = 0;
   (tempInt = invoke_iiiii($16 | 0, $0 | 0, $__nb | 0, $__ne | 0, $__ob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = $19 - $20 | 0;
    $22 = $__ob + $21 | 0;
    HEAP32[$__oe >> 2] = $22;
    $$pre$phiZ2D = $20;
    $133 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe >> 2] = $__ob;
   $27 = HEAP8[$__nb >> 0] | 0;
   switch ($27 << 24 >> 24) {
   case 43:
   case 45:
    {
     $28 = HEAP32[$0 >> 2] | 0;
     $29 = $28 + 28 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     __THREW__ = 0;
     $31 = (tempInt = invoke_iii($30 | 0, $0 | 0, $27 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $32 = __THREW__;
     __THREW__ = 0;
     $33 = $32 & 1;
     if ($33) {
      label = 5;
      break L1;
     }
     $34 = $__nb + 1 | 0;
     $35 = HEAP32[$__oe >> 2] | 0;
     $36 = $35 + 1 | 0;
     HEAP32[$__oe >> 2] = $36;
     HEAP8[$35 >> 0] = $31;
     $__nf$0 = $34;
     break;
    }
   default:
    {
     $__nf$0 = $__nb;
    }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = $37 - $38 | 0;
   $40 = ($39 | 0) > 1;
   L9 : do {
    if ($40) {
     $41 = HEAP8[$__nf$0 >> 0] | 0;
     $42 = $41 << 24 >> 24 == 48;
     if ($42) {
      $43 = $__nf$0 + 1 | 0;
      $44 = HEAP8[$43 >> 0] | 0;
      switch ($44 << 24 >> 24) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $__nf$1 = $__nf$0;
        break L9;
       }
      }
      $45 = HEAP32[$0 >> 2] | 0;
      $46 = $45 + 28 | 0;
      $47 = HEAP32[$46 >> 2] | 0;
      __THREW__ = 0;
      $48 = (tempInt = invoke_iii($47 | 0, $0 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $49 = __THREW__;
      __THREW__ = 0;
      $50 = $49 & 1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe >> 2] | 0;
      $52 = $51 + 1 | 0;
      HEAP32[$__oe >> 2] = $52;
      HEAP8[$51 >> 0] = $48;
      $53 = HEAP8[$43 >> 0] | 0;
      $54 = HEAP32[$0 >> 2] | 0;
      $55 = $54 + 28 | 0;
      $56 = HEAP32[$55 >> 2] | 0;
      __THREW__ = 0;
      $57 = (tempInt = invoke_iii($56 | 0, $0 | 0, $53 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $58 = __THREW__;
      __THREW__ = 0;
      $59 = $58 & 1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = $__nf$0 + 2 | 0;
      $61 = HEAP32[$__oe >> 2] | 0;
      $62 = $61 + 1 | 0;
      HEAP32[$__oe >> 2] = $62;
      HEAP8[$61 >> 0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while (0);
   $63 = ($__nf$1 | 0) == ($__ne | 0);
   if (!$63) {
    $64 = $__ne + -1 | 0;
    $65 = $__nf$1 >>> 0 < $64 >>> 0;
    if ($65) {
     $$01$i$i414 = $__nf$1;
     $68 = $64;
     while (1) {
      $66 = HEAP8[$$01$i$i414 >> 0] | 0;
      $67 = HEAP8[$68 >> 0] | 0;
      HEAP8[$$01$i$i414 >> 0] = $67;
      HEAP8[$68 >> 0] = $66;
      $69 = $$01$i$i414 + 1 | 0;
      $70 = $68 + -1 | 0;
      $71 = $69 >>> 0 < $70 >>> 0;
      if ($71) {
       $$01$i$i414 = $69;
       $68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1 >> 2] | 0;
   $73 = $72 + 16 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   __THREW__ = 0;
   $75 = (tempInt = invoke_ii($74 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $76 = __THREW__;
   __THREW__ = 0;
   $77 = $76 & 1;
   if ($77) {
    label = 5;
   } else {
    $78 = $__grouping + 8 | 0;
    $79 = $__grouping + 1 | 0;
    $80 = $__nf$1 >>> 0 < $__ne >>> 0;
    L22 : do {
     if ($80) {
      $__dc$011 = 0;
      $__dg$012 = 0;
      $__p$013 = $__nf$1;
      while (1) {
       $81 = HEAP8[$__grouping >> 0] | 0;
       $82 = $81 & 1;
       $83 = $82 << 24 >> 24 == 0;
       $84 = HEAP32[$78 >> 2] | 0;
       $85 = $83 ? $79 : $84;
       $86 = $85 + $__dg$012 | 0;
       $87 = HEAP8[$86 >> 0] | 0;
       $88 = $87 << 24 >> 24 != 0;
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$011 | 0) == ($89 | 0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe >> 2] | 0;
        $92 = $91 + 1 | 0;
        HEAP32[$__oe >> 2] = $92;
        HEAP8[$91 >> 0] = $75;
        $93 = HEAP8[$__grouping >> 0] | 0;
        $94 = $93 & 1;
        $95 = $94 << 24 >> 24 == 0;
        $96 = HEAP32[$8 >> 2] | 0;
        $97 = $93 & 255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = $99 + -1 | 0;
        $101 = $__dg$012 >>> 0 < $100 >>> 0;
        $102 = $101 & 1;
        $$__dg$0 = $102 + $__dg$012 | 0;
        $__dc$1 = 0;
        $__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$011;
        $__dg$1 = $__dg$012;
       }
       $103 = HEAP8[$__p$013 >> 0] | 0;
       $104 = HEAP32[$0 >> 2] | 0;
       $105 = $104 + 28 | 0;
       $106 = HEAP32[$105 >> 2] | 0;
       __THREW__ = 0;
       $107 = (tempInt = invoke_iii($106 | 0, $0 | 0, $103 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $108 = __THREW__;
       __THREW__ = 0;
       $109 = $108 & 1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe >> 2] | 0;
       $111 = $110 + 1 | 0;
       HEAP32[$__oe >> 2] = $111;
       HEAP8[$110 >> 0] = $107;
       $112 = $__dc$1 + 1 | 0;
       $113 = $__p$013 + 1 | 0;
       $114 = $113 >>> 0 < $__ne >>> 0;
       if ($114) {
        $__dc$011 = $112;
        $__dg$012 = $__dg$1;
        $__p$013 = $113;
       } else {
        break L22;
       }
      }
      $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $24 = tempRet0;
      $lpad$phi$index = $23;
      $lpad$phi$index2 = $24;
      break L1;
     }
    } while (0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = $115 - $116 | 0;
    $118 = $__ob + $117 | 0;
    $119 = HEAP32[$__oe >> 2] | 0;
    $120 = ($118 | 0) == ($119 | 0);
    if ($120) {
     $$pre$phiZ2D = $116;
     $133 = $118;
     label = 29;
    } else {
     $121 = $119 + -1 | 0;
     $122 = $118 >>> 0 < $121 >>> 0;
     if ($122) {
      $$01$i$i10 = $118;
      $125 = $121;
      while (1) {
       $123 = HEAP8[$$01$i$i10 >> 0] | 0;
       $124 = HEAP8[$125 >> 0] | 0;
       HEAP8[$$01$i$i10 >> 0] = $124;
       HEAP8[$125 >> 0] = $123;
       $126 = $$01$i$i10 + 1 | 0;
       $127 = $125 + -1 | 0;
       $128 = $126 >>> 0 < $127 >>> 0;
       if ($128) {
        $$01$i$i10 = $126;
        $125 = $127;
       } else {
        break;
       }
      }
     }
     $$pre = HEAP32[$__oe >> 2] | 0;
     $$pre$phiZ2D = $116;
     $133 = $$pre;
     label = 29;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $25 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $26 = tempRet0;
  $lpad$phi$index = $25;
  $lpad$phi$index2 = $26;
 } else if ((label | 0) == 29) {
  $129 = ($__np | 0) == ($__ne | 0);
  $130 = $__np;
  $131 = $130 - $$pre$phiZ2D | 0;
  $132 = $__ob + $131 | 0;
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($lpad$phi$index | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 40 | 0;
 $__sym = sp + 28 | 0;
 $__sn = sp + 16 | 0;
 $__fd = sp + 12 | 0;
 $__mbuf = sp + 60 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $1;
 __THREW__ = 0;
 $2 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits >> 0] | 0;
   $6 = $5 & 1;
   $7 = $6 << 24 >> 24 == 0;
   $8 = $__digits + 4 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = $5 & 255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12 | 0) == 0;
   if ($13) {
    $32 = 0;
   } else {
    $14 = $__digits + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $__digits + 1 | 0;
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17 >> 0] | 0;
    $19 = HEAP32[$2 >> 2] | 0;
    $20 = $19 + 28 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    __THREW__ = 0;
    $22 = (tempInt = invoke_iii($21 | 0, $2 | 0, 45) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    $24 = $23 & 1;
    if ($24) {
     label = 13;
     break;
    }
    $25 = $18 << 24 >> 24 == $22 << 24 >> 24;
    $32 = $25;
   }
   HEAP32[$__grp >> 2] = 0;
   $26 = $__grp + 4 | 0;
   HEAP32[$26 >> 2] = 0;
   $27 = $__grp + 8 | 0;
   HEAP32[$27 >> 2] = 0;
   HEAP32[$__sym >> 2] = 0;
   $28 = $__sym + 4 | 0;
   HEAP32[$28 >> 2] = 0;
   $29 = $__sym + 8 | 0;
   HEAP32[$29 >> 2] = 0;
   HEAP32[$__sn >> 2] = 0;
   $30 = $__sn + 4 | 0;
   HEAP32[$30 >> 2] = 0;
   $31 = $__sn + 8 | 0;
   HEAP32[$31 >> 2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(492, $__intl | 0, $32 | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__sn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
   $33 = __THREW__;
   __THREW__ = 0;
   $34 = $33 & 1;
   if ($34) {
    $94 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $95 = tempRet0;
    $$0 = $94;
    $$01 = $95;
    $$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits >> 0] | 0;
    $36 = $35 & 1;
    $37 = $36 << 24 >> 24 == 0;
    $38 = HEAP32[$8 >> 2] | 0;
    $39 = $35 & 255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd >> 2] | 0;
    $43 = ($41 | 0) > ($42 | 0);
    if ($43) {
     $44 = $41 - $42 | 0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn >> 0] | 0;
     $47 = $46 & 1;
     $48 = $47 << 24 >> 24 == 0;
     $49 = $__sn + 4 | 0;
     $50 = HEAP32[$49 >> 2] | 0;
     $51 = $46 & 255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym >> 0] | 0;
     $55 = $54 & 1;
     $56 = $55 << 24 >> 24 == 0;
     $57 = $__sym + 4 | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     $59 = $54 & 255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = $62 + $42 | 0;
     $64 = $63 + $53 | 0;
     $65 = $64 + $61 | 0;
     $86 = $65;
    } else {
     $66 = HEAP8[$__sn >> 0] | 0;
     $67 = $66 & 1;
     $68 = $67 << 24 >> 24 == 0;
     $69 = $__sn + 4 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     $71 = $66 & 255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym >> 0] | 0;
     $75 = $74 & 1;
     $76 = $75 << 24 >> 24 == 0;
     $77 = $__sym + 4 | 0;
     $78 = HEAP32[$77 >> 2] | 0;
     $79 = $74 & 255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = $42 + 2 | 0;
     $83 = $82 + $73 | 0;
     $84 = $83 + $81 | 0;
     $86 = $84;
    }
    $85 = $86 >>> 0 > 100;
    if ($85) {
     $87 = (tempInt = _malloc($86) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = $87;
     $89 = ($87 | 0) == (0 | 0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $90 = __THREW__;
      __THREW__ = 0;
      $91 = $90 & 1;
      if ($91) {
       $99 = $88;
      } else {
       $$pre = HEAP8[$__digits >> 0] | 0;
       $$pre18 = HEAP32[$8 >> 2] | 0;
       $104 = $$pre;
       $113 = $$pre18;
       $126 = $88;
       $__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $35;
      $113 = $38;
      $126 = $88;
      $__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $35;
     $113 = $38;
     $126 = 0;
     $__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label | 0) == 17) {
     $101 = $__iob + 4 | 0;
     $102 = HEAP32[$101 >> 2] | 0;
     $103 = $104 & 1;
     $105 = $103 << 24 >> 24 == 0;
     $106 = $__digits + 8 | 0;
     $107 = HEAP32[$106 >> 2] | 0;
     $108 = $__digits + 1 | 0;
     $109 = $105 ? $108 : $107;
     $110 = $104 & 255;
     $111 = $110 >>> 1;
     $112 = $105 ? $111 : $113;
     $114 = $109 + $112 | 0;
     $115 = HEAP8[$__dp >> 0] | 0;
     $116 = HEAP8[$__ts >> 0] | 0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(493, $__mb$0 | 0, $__mi | 0, $__me | 0, $102 | 0, $109 | 0, $114 | 0, $2 | 0, $32 | 0, $__pat | 0, $115 | 0, $116 | 0, $__grp | 0, $__sym | 0, $__sn | 0, $42 | 0), asyncState ? abort(-12) | 0 : 0;
     $117 = __THREW__;
     __THREW__ = 0;
     $118 = $117 & 1;
     if ($118) {
      $99 = $126;
     } else {
      $119 = HEAP32[$__s >> 2] | 0;
      HEAP32[$0 >> 2] = $119;
      $120 = HEAP32[$__mi >> 2] | 0;
      $121 = HEAP32[$__me >> 2] | 0;
      __THREW__ = 0;
      HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
      $122 = (tempInt = invoke_iiiiiii(446, $$byval_copy | 0, $__mb$0 | 0, $120 | 0, $121 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $123 = __THREW__;
      __THREW__ = 0;
      $124 = $123 & 1;
      if ($124) {
       $99 = $126;
      } else {
       $125 = ($126 | 0) == 0;
       if ($125) {
        $128 = $1;
       } else {
        $127 = $126;
        _free($127), asyncState ? abort(-12) | 0 : 0;
        $$pre21 = HEAP32[$__loc >> 2] | 0;
        $128 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
       (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($128) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       STACKTOP = sp;
       return $122 | 0;
      }
     }
    }
    $96 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $97 = tempRet0;
    $98 = ($99 | 0) == 0;
    if ($98) {
     $$0 = $96;
     $$01 = $97;
     $$pre19 = $1;
    } else {
     $100 = $99;
     _free($100), asyncState ? abort(-12) | 0 : 0;
     $$pre19$pre = HEAP32[$__loc >> 2] | 0;
     $$0 = $96;
     $$01 = $97;
     $$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
   $$1 = $$0;
   $$12 = $$01;
   $129 = $$pre19;
  }
 } while (0);
 if ((label | 0) == 13) {
  $92 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $93 = tempRet0;
  $$1 = $92;
  $$12 = $93;
  $129 = $1;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($129) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($$1 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 468 | 0;
 $__loc = sp + 464 | 0;
 $__pat = sp + 472 | 0;
 $__dp = sp + 460 | 0;
 $__ts = sp + 456 | 0;
 $__grp = sp + 444 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $1;
 __THREW__ = 0;
 $2 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits >> 0] | 0;
   $6 = $5 & 1;
   $7 = $6 << 24 >> 24 == 0;
   $8 = $__digits + 4 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = $5 & 255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12 | 0) == 0;
   if ($13) {
    $31 = 0;
   } else {
    $14 = $__digits + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$2 >> 2] | 0;
    $19 = $18 + 44 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    __THREW__ = 0;
    $21 = (tempInt = invoke_iii($20 | 0, $2 | 0, 45) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $22 = __THREW__;
    __THREW__ = 0;
    $23 = $22 & 1;
    if ($23) {
     label = 13;
     break;
    }
    $24 = ($17 | 0) == ($21 | 0);
    $31 = $24;
   }
   HEAP32[$__grp >> 2] = 0;
   $25 = $__grp + 4 | 0;
   HEAP32[$25 >> 2] = 0;
   $26 = $__grp + 8 | 0;
   HEAP32[$26 >> 2] = 0;
   HEAP32[$__sym >> 2] = 0;
   $27 = $__sym + 4 | 0;
   HEAP32[$27 >> 2] = 0;
   $28 = $__sym + 8 | 0;
   HEAP32[$28 >> 2] = 0;
   HEAP32[$__sn >> 2] = 0;
   $29 = $__sn + 4 | 0;
   HEAP32[$29 >> 2] = 0;
   $30 = $__sn + 8 | 0;
   HEAP32[$30 >> 2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(494, $__intl | 0, $31 | 0, $__loc | 0, $__pat | 0, $__dp | 0, $__ts | 0, $__grp | 0, $__sym | 0, $__sn | 0, $__fd | 0), asyncState ? abort(-12) | 0 : 0;
   $32 = __THREW__;
   __THREW__ = 0;
   $33 = $32 & 1;
   if ($33) {
    $94 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $95 = tempRet0;
    $$0 = $94;
    $$01 = $95;
    $$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits >> 0] | 0;
    $35 = $34 & 1;
    $36 = $35 << 24 >> 24 == 0;
    $37 = HEAP32[$8 >> 2] | 0;
    $38 = $34 & 255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd >> 2] | 0;
    $42 = ($40 | 0) > ($41 | 0);
    if ($42) {
     $43 = $40 - $41 | 0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn >> 0] | 0;
     $46 = $45 & 1;
     $47 = $46 << 24 >> 24 == 0;
     $48 = $__sn + 4 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     $50 = $45 & 255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym >> 0] | 0;
     $54 = $53 & 1;
     $55 = $54 << 24 >> 24 == 0;
     $56 = $__sym + 4 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     $58 = $53 & 255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = $61 + $41 | 0;
     $63 = $62 + $52 | 0;
     $64 = $63 + $60 | 0;
     $85 = $64;
    } else {
     $65 = HEAP8[$__sn >> 0] | 0;
     $66 = $65 & 1;
     $67 = $66 << 24 >> 24 == 0;
     $68 = $__sn + 4 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     $70 = $65 & 255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym >> 0] | 0;
     $74 = $73 & 1;
     $75 = $74 << 24 >> 24 == 0;
     $76 = $__sym + 4 | 0;
     $77 = HEAP32[$76 >> 2] | 0;
     $78 = $73 & 255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = $41 + 2 | 0;
     $82 = $81 + $72 | 0;
     $83 = $82 + $80 | 0;
     $85 = $83;
    }
    $84 = $85 >>> 0 > 100;
    if ($84) {
     $86 = $85 << 2;
     $87 = (tempInt = _malloc($86) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $88 = $87;
     $89 = ($87 | 0) == (0 | 0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $90 = __THREW__;
      __THREW__ = 0;
      $91 = $90 & 1;
      if ($91) {
       $99 = $88;
      } else {
       $$pre = HEAP8[$__digits >> 0] | 0;
       $$pre17 = HEAP32[$8 >> 2] | 0;
       $104 = $$pre;
       $112 = $$pre17;
       $125 = $88;
       $__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $34;
      $112 = $37;
      $125 = $88;
      $__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $34;
     $112 = $37;
     $125 = 0;
     $__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label | 0) == 17) {
     $101 = $__iob + 4 | 0;
     $102 = HEAP32[$101 >> 2] | 0;
     $103 = $104 & 1;
     $105 = $103 << 24 >> 24 == 0;
     $106 = $__digits + 8 | 0;
     $107 = HEAP32[$106 >> 2] | 0;
     $108 = $105 ? $8 : $107;
     $109 = $104 & 255;
     $110 = $109 >>> 1;
     $111 = $105 ? $110 : $112;
     $113 = $108 + ($111 << 2) | 0;
     $114 = HEAP32[$__dp >> 2] | 0;
     $115 = HEAP32[$__ts >> 2] | 0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(495, $__mb$0 | 0, $__mi | 0, $__me | 0, $102 | 0, $108 | 0, $113 | 0, $2 | 0, $31 | 0, $__pat | 0, $114 | 0, $115 | 0, $__grp | 0, $__sym | 0, $__sn | 0, $41 | 0), asyncState ? abort(-12) | 0 : 0;
     $116 = __THREW__;
     __THREW__ = 0;
     $117 = $116 & 1;
     if ($117) {
      $99 = $125;
     } else {
      $118 = HEAP32[$__s >> 2] | 0;
      HEAP32[$0 >> 2] = $118;
      $119 = HEAP32[$__mi >> 2] | 0;
      $120 = HEAP32[$__me >> 2] | 0;
      __THREW__ = 0;
      HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
      $121 = (tempInt = invoke_iiiiiii(474, $$byval_copy | 0, $__mb$0 | 0, $119 | 0, $120 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $122 = __THREW__;
      __THREW__ = 0;
      $123 = $122 & 1;
      if ($123) {
       $99 = $125;
      } else {
       $124 = ($125 | 0) == 0;
       if ($124) {
        $127 = $1;
       } else {
        $126 = $125;
        _free($126), asyncState ? abort(-12) | 0 : 0;
        $$pre20 = HEAP32[$__loc >> 2] | 0;
        $127 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
       (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($127) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       STACKTOP = sp;
       return $121 | 0;
      }
     }
    }
    $96 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $97 = tempRet0;
    $98 = ($99 | 0) == 0;
    if ($98) {
     $$0 = $96;
     $$01 = $97;
     $$pre18 = $1;
    } else {
     $100 = $99;
     _free($100), asyncState ? abort(-12) | 0 : 0;
     $$pre18$pre = HEAP32[$__loc >> 2] | 0;
     $$0 = $96;
     $$01 = $97;
     $$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp), asyncState ? abort(-12) | 0 : 0;
   $$1 = $$0;
   $$12 = $$01;
   $128 = $$pre18;
  }
 } while (0);
 if ((label | 0) == 13) {
  $92 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $93 = tempRet0;
  $$1 = $92;
  $$12 = $93;
  $128 = $1;
 }
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($128) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($$1 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $type >>> 0 > 20;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if (!$0) {
   do {
    switch ($type | 0) {
    case 9:
     {
      $arglist_current = HEAP32[$ap >> 2] | 0;
      $1 = $arglist_current;
      $2 = 0 + 4 | 0;
      $expanded28 = $2;
      $expanded = $expanded28 - 1 | 0;
      $3 = $1 + $expanded | 0;
      $4 = 0 + 4 | 0;
      $expanded32 = $4;
      $expanded31 = $expanded32 - 1 | 0;
      $expanded30 = $expanded31 ^ -1;
      $5 = $3 & $expanded30;
      $6 = $5;
      $7 = HEAP32[$6 >> 2] | 0;
      $arglist_next = $6 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next;
      HEAP32[$arg >> 2] = $7;
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = HEAP32[$ap >> 2] | 0;
      $8 = $arglist_current2;
      $9 = 0 + 4 | 0;
      $expanded35 = $9;
      $expanded34 = $expanded35 - 1 | 0;
      $10 = $8 + $expanded34 | 0;
      $11 = 0 + 4 | 0;
      $expanded39 = $11;
      $expanded38 = $expanded39 - 1 | 0;
      $expanded37 = $expanded38 ^ -1;
      $12 = $10 & $expanded37;
      $13 = $12;
      $14 = HEAP32[$13 >> 2] | 0;
      $arglist_next3 = $13 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next3;
      $15 = ($14 | 0) < 0;
      $16 = $15 << 31 >> 31;
      $17 = $arg;
      $18 = $17;
      HEAP32[$18 >> 2] = $14;
      $19 = $17 + 4 | 0;
      $20 = $19;
      HEAP32[$20 >> 2] = $16;
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = HEAP32[$ap >> 2] | 0;
      $21 = $arglist_current5;
      $22 = 0 + 4 | 0;
      $expanded42 = $22;
      $expanded41 = $expanded42 - 1 | 0;
      $23 = $21 + $expanded41 | 0;
      $24 = 0 + 4 | 0;
      $expanded46 = $24;
      $expanded45 = $expanded46 - 1 | 0;
      $expanded44 = $expanded45 ^ -1;
      $25 = $23 & $expanded44;
      $26 = $25;
      $27 = HEAP32[$26 >> 2] | 0;
      $arglist_next6 = $26 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next6;
      $28 = $arg;
      $29 = $28;
      HEAP32[$29 >> 2] = $27;
      $30 = $28 + 4 | 0;
      $31 = $30;
      HEAP32[$31 >> 2] = 0;
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = HEAP32[$ap >> 2] | 0;
      $32 = $arglist_current8;
      $33 = 0 + 8 | 0;
      $expanded49 = $33;
      $expanded48 = $expanded49 - 1 | 0;
      $34 = $32 + $expanded48 | 0;
      $35 = 0 + 8 | 0;
      $expanded53 = $35;
      $expanded52 = $expanded53 - 1 | 0;
      $expanded51 = $expanded52 ^ -1;
      $36 = $34 & $expanded51;
      $37 = $36;
      $38 = $37;
      $39 = $38;
      $40 = HEAP32[$39 >> 2] | 0;
      $41 = $38 + 4 | 0;
      $42 = $41;
      $43 = HEAP32[$42 >> 2] | 0;
      $arglist_next9 = $37 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next9;
      $44 = $arg;
      $45 = $44;
      HEAP32[$45 >> 2] = $40;
      $46 = $44 + 4 | 0;
      $47 = $46;
      HEAP32[$47 >> 2] = $43;
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = HEAP32[$ap >> 2] | 0;
      $48 = $arglist_current11;
      $49 = 0 + 4 | 0;
      $expanded56 = $49;
      $expanded55 = $expanded56 - 1 | 0;
      $50 = $48 + $expanded55 | 0;
      $51 = 0 + 4 | 0;
      $expanded60 = $51;
      $expanded59 = $expanded60 - 1 | 0;
      $expanded58 = $expanded59 ^ -1;
      $52 = $50 & $expanded58;
      $53 = $52;
      $54 = HEAP32[$53 >> 2] | 0;
      $arglist_next12 = $53 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next12;
      $55 = $54 & 65535;
      $56 = $55 << 16 >> 16;
      $57 = ($56 | 0) < 0;
      $58 = $57 << 31 >> 31;
      $59 = $arg;
      $60 = $59;
      HEAP32[$60 >> 2] = $56;
      $61 = $59 + 4 | 0;
      $62 = $61;
      HEAP32[$62 >> 2] = $58;
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = HEAP32[$ap >> 2] | 0;
      $63 = $arglist_current14;
      $64 = 0 + 4 | 0;
      $expanded63 = $64;
      $expanded62 = $expanded63 - 1 | 0;
      $65 = $63 + $expanded62 | 0;
      $66 = 0 + 4 | 0;
      $expanded67 = $66;
      $expanded66 = $expanded67 - 1 | 0;
      $expanded65 = $expanded66 ^ -1;
      $67 = $65 & $expanded65;
      $68 = $67;
      $69 = HEAP32[$68 >> 2] | 0;
      $arglist_next15 = $68 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next15;
      $$mask1 = $69 & 65535;
      $70 = $arg;
      $71 = $70;
      HEAP32[$71 >> 2] = $$mask1;
      $72 = $70 + 4 | 0;
      $73 = $72;
      HEAP32[$73 >> 2] = 0;
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = HEAP32[$ap >> 2] | 0;
      $74 = $arglist_current17;
      $75 = 0 + 4 | 0;
      $expanded70 = $75;
      $expanded69 = $expanded70 - 1 | 0;
      $76 = $74 + $expanded69 | 0;
      $77 = 0 + 4 | 0;
      $expanded74 = $77;
      $expanded73 = $expanded74 - 1 | 0;
      $expanded72 = $expanded73 ^ -1;
      $78 = $76 & $expanded72;
      $79 = $78;
      $80 = HEAP32[$79 >> 2] | 0;
      $arglist_next18 = $79 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next18;
      $81 = $80 & 255;
      $82 = $81 << 24 >> 24;
      $83 = ($82 | 0) < 0;
      $84 = $83 << 31 >> 31;
      $85 = $arg;
      $86 = $85;
      HEAP32[$86 >> 2] = $82;
      $87 = $85 + 4 | 0;
      $88 = $87;
      HEAP32[$88 >> 2] = $84;
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = HEAP32[$ap >> 2] | 0;
      $89 = $arglist_current20;
      $90 = 0 + 4 | 0;
      $expanded77 = $90;
      $expanded76 = $expanded77 - 1 | 0;
      $91 = $89 + $expanded76 | 0;
      $92 = 0 + 4 | 0;
      $expanded81 = $92;
      $expanded80 = $expanded81 - 1 | 0;
      $expanded79 = $expanded80 ^ -1;
      $93 = $91 & $expanded79;
      $94 = $93;
      $95 = HEAP32[$94 >> 2] | 0;
      $arglist_next21 = $94 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next21;
      $$mask = $95 & 255;
      $96 = $arg;
      $97 = $96;
      HEAP32[$97 >> 2] = $$mask;
      $98 = $96 + 4 | 0;
      $99 = $98;
      HEAP32[$99 >> 2] = 0;
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = HEAP32[$ap >> 2] | 0;
      $100 = $arglist_current23;
      $101 = 0 + 8 | 0;
      $expanded84 = $101;
      $expanded83 = $expanded84 - 1 | 0;
      $102 = $100 + $expanded83 | 0;
      $103 = 0 + 8 | 0;
      $expanded88 = $103;
      $expanded87 = $expanded88 - 1 | 0;
      $expanded86 = $expanded87 ^ -1;
      $104 = $102 & $expanded86;
      $105 = $104;
      $106 = +HEAPF64[$105 >> 3];
      $arglist_next24 = $105 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next24;
      HEAPF64[$arg >> 3] = $106;
      break L1;
      break;
     }
    case 18:
     {
      $arglist_current26 = HEAP32[$ap >> 2] | 0;
      $107 = $arglist_current26;
      $108 = 0 + 8 | 0;
      $expanded91 = $108;
      $expanded90 = $expanded91 - 1 | 0;
      $109 = $107 + $expanded90 | 0;
      $110 = 0 + 8 | 0;
      $expanded95 = $110;
      $expanded94 = $expanded95 - 1 | 0;
      $expanded93 = $expanded94 ^ -1;
      $111 = $109 & $expanded93;
      $112 = $111;
      $113 = +HEAPF64[$112 >> 3];
      $arglist_next27 = $112 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next27;
      HEAPF64[$arg >> 3] = $113;
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpEi($agg$result, $this, $indent) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $indent = $indent | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $ss = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $27 = sp + 200 | 0;
 $ss = sp + 16 | 0;
 $36 = $this;
 $37 = $indent;
 $41 = $36;
 $32 = $ss;
 $33 = 24;
 $42 = $32;
 $43 = $42 + 64 | 0;
 $31 = $43;
 $44 = $31;
 $30 = $44;
 $45 = $30;
 $46 = 7764;
 HEAP32[$45 >> 2] = $46;
 $47 = 7664;
 HEAP32[$44 >> 2] = $47;
 $48 = 2892;
 HEAP32[$42 >> 2] = $48;
 $49 = $42 + 64 | 0;
 $50 = 2932;
 HEAP32[$49 >> 2] = $50;
 $51 = $42 + 8 | 0;
 $52 = 2912;
 HEAP32[$51 >> 2] = $52;
 $53 = $42 + 12 | 0;
 $8 = $42;
 $54 = 2944;
 $9 = $54;
 $10 = $53;
 $55 = $8;
 $56 = $9;
 $57 = $10;
 $58 = $56 + 4 | 0;
 $5 = $55;
 $6 = $58;
 $7 = $57;
 $59 = $5;
 $60 = $6;
 $61 = HEAP32[$60 >> 2] | 0;
 HEAP32[$59 >> 2] = $61;
 $62 = $60 + 4 | 0;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = HEAP32[$59 >> 2] | 0;
 $65 = $64 + -12 | 0;
 $66 = HEAP32[$65 >> 2] | 0;
 $67 = $59 + $66 | 0;
 HEAP32[$67 >> 2] = $63;
 $68 = $59 + 4 | 0;
 HEAP32[$68 >> 2] = 0;
 $69 = HEAP32[$59 >> 2] | 0;
 $70 = $69 + -12 | 0;
 $71 = HEAP32[$70 >> 2] | 0;
 $72 = $59 + $71 | 0;
 $73 = $7;
 $3 = $72;
 $4 = $73;
 $74 = $3;
 $75 = $4;
 __THREW__ = 0;
 invoke_vii(366, $74 | 0, $75 | 0), asyncState ? abort(-12) | 0 : 0;
 $76 = __THREW__;
 __THREW__ = 0;
 $77 = $76 & 1;
 if ($77) {
  $149 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $150 = tempRet0;
  $34 = $149;
  $35 = $150;
  $153 = $42 + 64 | 0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($153), asyncState ? abort(-12) | 0 : 0;
  $154 = $34;
  $155 = $35;
  ___resumeException($154 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $78 = $74 + 72 | 0;
 HEAP32[$78 >> 2] = 0;
 $79 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $80 = $74 + 76 | 0;
 HEAP32[$80 >> 2] = $79;
 $81 = $55 + 8 | 0;
 $82 = $56 + 12 | 0;
 $1 = $81;
 $2 = $82;
 $83 = $1;
 $84 = $2;
 $85 = HEAP32[$84 >> 2] | 0;
 HEAP32[$83 >> 2] = $85;
 $86 = $84 + 4 | 0;
 $87 = HEAP32[$86 >> 2] | 0;
 $88 = HEAP32[$83 >> 2] | 0;
 $89 = $88 + -12 | 0;
 $90 = HEAP32[$89 >> 2] | 0;
 $91 = $83 + $90 | 0;
 HEAP32[$91 >> 2] = $87;
 $92 = HEAP32[$56 >> 2] | 0;
 HEAP32[$55 >> 2] = $92;
 $93 = $56 + 20 | 0;
 $94 = HEAP32[$93 >> 2] | 0;
 $95 = HEAP32[$55 >> 2] | 0;
 $96 = $95 + -12 | 0;
 $97 = HEAP32[$96 >> 2] | 0;
 $98 = $55 + $97 | 0;
 HEAP32[$98 >> 2] = $94;
 $99 = $56 + 24 | 0;
 $100 = HEAP32[$99 >> 2] | 0;
 $101 = $55 + 8 | 0;
 HEAP32[$101 >> 2] = $100;
 $102 = 2892;
 HEAP32[$42 >> 2] = $102;
 $103 = $42 + 64 | 0;
 $104 = 2932;
 HEAP32[$103 >> 2] = $104;
 $105 = $42 + 8 | 0;
 $106 = 2912;
 HEAP32[$105 >> 2] = $106;
 $107 = $42 + 12 | 0;
 $108 = $33;
 $25 = $107;
 $26 = $108;
 $109 = $25;
 __THREW__ = 0;
 invoke_vi(367, $109 | 0), asyncState ? abort(-12) | 0 : 0;
 $110 = __THREW__;
 __THREW__ = 0;
 $111 = $110 & 1;
 do {
  if ($111) {
   $151 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $152 = tempRet0;
   $eh$lpad$body$i$index2Z2D = $152;
   $eh$lpad$body$i$indexZ2D = $151;
  } else {
   $112 = 2568;
   HEAP32[$109 >> 2] = $112;
   $113 = $109 + 32 | 0;
   $24 = $113;
   $114 = $24;
   $23 = $114;
   $115 = $23;
   $22 = $115;
   $116 = $22;
   $21 = $116;
   $20 = $114;
   $117 = $20;
   $19 = $117;
   $118 = $19;
   $18 = $118;
   $119 = $18;
   $__a$i$i$i$i = $119;
   $__i$i$i$i$i = 0;
   while (1) {
    $120 = $__i$i$i$i$i;
    $121 = $120 >>> 0 < 3;
    if (!$121) {
     break;
    }
    $122 = $__i$i$i$i$i;
    $123 = $__a$i$i$i$i;
    $124 = $123 + ($122 << 2) | 0;
    HEAP32[$124 >> 2] = 0;
    $125 = $__i$i$i$i$i;
    $126 = $125 + 1 | 0;
    $__i$i$i$i$i = $126;
   }
   $127 = $109 + 44 | 0;
   HEAP32[$127 >> 2] = 0;
   $128 = $109 + 48 | 0;
   $129 = $26;
   HEAP32[$128 >> 2] = $129;
   $17 = $27;
   $130 = $17;
   $16 = $130;
   $131 = $16;
   $15 = $131;
   $132 = $15;
   $14 = $132;
   $13 = $130;
   $133 = $13;
   $12 = $133;
   $134 = $12;
   $11 = $134;
   $135 = $11;
   $__a$i$i1$i$i = $135;
   $__i$i$i2$i$i = 0;
   while (1) {
    $136 = $__i$i$i2$i$i;
    $137 = $136 >>> 0 < 3;
    if (!$137) {
     break;
    }
    $138 = $__i$i$i2$i$i;
    $139 = $__a$i$i1$i$i;
    $140 = $139 + ($138 << 2) | 0;
    HEAP32[$140 >> 2] = 0;
    $141 = $__i$i$i2$i$i;
    $142 = $141 + 1 | 0;
    $__i$i$i2$i$i = $142;
   }
   __THREW__ = 0;
   invoke_vii(368, $109 | 0, $27 | 0), asyncState ? abort(-12) | 0 : 0;
   $143 = __THREW__;
   __THREW__ = 0;
   $144 = $143 & 1;
   if ($144) {
    $145 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $146 = tempRet0;
    $28 = $145;
    $29 = $146;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($113), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($109), asyncState ? abort(-12) | 0 : 0;
    $147 = $28;
    $148 = $29;
    $eh$lpad$body$i$index2Z2D = $148;
    $eh$lpad$body$i$indexZ2D = $147;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27), asyncState ? abort(-12) | 0 : 0;
   $156 = $37;
   $157 = ($156 | 0) >= 0;
   $158 = $ss + 8 | 0;
   if ($157) {
    $159 = $37;
    __THREW__ = 0;
    invoke_viiiii(395, $41 | 0, $158 | 0, 1, $159 | 0, 0), asyncState ? abort(-12) | 0 : 0;
    $160 = __THREW__;
    __THREW__ = 0;
    $161 = $160 & 1;
    if ($161) {
     $162 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $163 = tempRet0;
     $38 = $162;
     $39 = $163;
     __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss), asyncState ? abort(-12) | 0 : 0;
     $164 = $38;
     $165 = $39;
     ___resumeException($164 | 0), asyncState ? abort(-12) | 0 : 0;
    }
   } else {
    __THREW__ = 0;
    invoke_viiiii(395, $41 | 0, $158 | 0, 0, 0, 0), asyncState ? abort(-12) | 0 : 0;
    $166 = __THREW__;
    __THREW__ = 0;
    $167 = $166 & 1;
    if ($167) {
     $162 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $163 = tempRet0;
     $38 = $162;
     $39 = $163;
     __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss), asyncState ? abort(-12) | 0 : 0;
     $164 = $38;
     $165 = $39;
     ___resumeException($164 | 0), asyncState ? abort(-12) | 0 : 0;
    }
   }
   $0 = $ss;
   $168 = $0;
   $169 = $168 + 12 | 0;
   __THREW__ = 0;
   invoke_vii(390, $agg$result | 0, $169 | 0), asyncState ? abort(-12) | 0 : 0;
   $170 = __THREW__;
   __THREW__ = 0;
   $171 = $170 & 1;
   if ($171) {
    $162 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $163 = tempRet0;
    $38 = $162;
    $39 = $163;
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss), asyncState ? abort(-12) | 0 : 0;
    $164 = $38;
    $165 = $39;
    ___resumeException($164 | 0), asyncState ? abort(-12) | 0 : 0;
   } else {
    $40 = 1;
    __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $34 = $eh$lpad$body$i$indexZ2D;
 $35 = $eh$lpad$body$i$index2Z2D;
 $153 = $42 + 64 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($153), asyncState ? abort(-12) | 0 : 0;
 $154 = $34;
 $155 = $35;
 ___resumeException($154 | 0), asyncState ? abort(-12) | 0 : 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = (tempInt = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (tempInt = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (tempInt = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = tempRet0;
 $13 = ($11 | 0) == 0;
 $14 = ($12 | 0) == 0;
 $15 = $13 & $14;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = $16 >>> 0 > 2146435072;
   $18 = $2 >>> 0 > 0;
   $19 = ($16 | 0) == 2146435072;
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6 | 0) == 2047;
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (tempInt = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $26 = tempRet0;
    $27 = $26 >>> 0 > $12 >>> 0;
    $28 = $25 >>> 0 > $11 >>> 0;
    $29 = ($26 | 0) == ($12 | 0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!$31) {
     $32 = ($25 | 0) == ($11 | 0);
     $33 = ($26 | 0) == ($12 | 0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return +$$x;
    }
    $36 = ($6 | 0) == 0;
    if ($36) {
     $37 = (tempInt = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $38 = tempRet0;
     $39 = ($38 | 0) > -1;
     $40 = $37 >>> 0 > 4294967295;
     $41 = ($38 | 0) == -1;
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;
      $46 = $38;
      $ex$026 = 0;
      while (1) {
       $44 = $ex$026 + -1 | 0;
       $47 = (tempInt = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $48 = tempRet0;
       $49 = ($48 | 0) > -1;
       $50 = $47 >>> 0 > 4294967295;
       $51 = ($48 | 0) == -1;
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;
        $46 = $48;
        $ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = 1 - $ex$0$lcssa | 0;
     $55 = (tempInt = _bitshift64Shl($0 | 0, $1 | 0, $54 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $56 = tempRet0;
     $83 = $55;
     $84 = $56;
     $ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;
     $84 = $58;
     $ex$1 = $6;
    }
    $59 = ($9 | 0) == 0;
    if ($59) {
     $60 = (tempInt = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $61 = tempRet0;
     $62 = ($61 | 0) > -1;
     $63 = $60 >>> 0 > 4294967295;
     $64 = ($61 | 0) == -1;
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;
      $69 = $61;
      $ey$020 = 0;
      while (1) {
       $67 = $ey$020 + -1 | 0;
       $70 = (tempInt = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $71 = tempRet0;
       $72 = ($71 | 0) > -1;
       $73 = $70 >>> 0 > 4294967295;
       $74 = ($71 | 0) == -1;
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;
        $69 = $71;
        $ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = 1 - $ey$0$lcssa | 0;
     $78 = (tempInt = _bitshift64Shl($2 | 0, $3 | 0, $77 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $79 = tempRet0;
     $85 = $78;
     $86 = $79;
     $ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;
     $86 = $81;
     $ey$1$ph = $9;
    }
    $82 = ($ex$1 | 0) > ($ey$1$ph | 0);
    $87 = (tempInt = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $88 = tempRet0;
    $89 = ($88 | 0) > -1;
    $90 = $87 >>> 0 > 4294967295;
    $91 = ($88 | 0) == -1;
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23 : do {
     if ($82) {
      $152 = $93;
      $153 = $87;
      $154 = $88;
      $95 = $83;
      $97 = $84;
      $ex$212 = $ex$1;
      while (1) {
       if ($152) {
        $94 = ($95 | 0) == ($85 | 0);
        $96 = ($97 | 0) == ($86 | 0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;
         $101 = $154;
        }
       } else {
        $100 = $95;
        $101 = $97;
       }
       $102 = (tempInt = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $103 = tempRet0;
       $104 = $ex$212 + -1 | 0;
       $105 = ($104 | 0) > ($ey$1$ph | 0);
       $106 = (tempInt = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $107 = tempRet0;
       $108 = ($107 | 0) > -1;
       $109 = $106 >>> 0 > 4294967295;
       $110 = ($107 | 0) == -1;
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;
        $153 = $106;
        $154 = $107;
        $95 = $102;
        $97 = $103;
        $ex$212 = $104;
       } else {
        $$lcssa7 = $112;
        $114 = $102;
        $116 = $103;
        $155 = $106;
        $156 = $107;
        $ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;
      $114 = $83;
      $116 = $84;
      $155 = $87;
      $156 = $88;
      $ex$2$lcssa = $ex$1;
     }
    } while (0);
    if ($$lcssa7) {
     $113 = ($114 | 0) == ($85 | 0);
     $115 = ($116 | 0) == ($86 | 0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;
      $121 = $155;
     }
    } else {
     $119 = $116;
     $121 = $114;
    }
    $118 = $119 >>> 0 < 1048576;
    $120 = $121 >>> 0 < 0;
    $122 = ($119 | 0) == 1048576;
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;
     $127 = $119;
     $ex$39 = $ex$2$lcssa;
     while (1) {
      $128 = (tempInt = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $129 = tempRet0;
      $130 = $ex$39 + -1 | 0;
      $131 = $129 >>> 0 < 1048576;
      $132 = $128 >>> 0 < 0;
      $133 = ($129 | 0) == 1048576;
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;
       $127 = $129;
       $ex$39 = $130;
      } else {
       $137 = $128;
       $138 = $129;
       $ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;
     $138 = $119;
     $ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa | 0) > 0;
    if ($136) {
     $139 = (tempInt = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $140 = tempRet0;
     $141 = (tempInt = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;
     $150 = $143;
    } else {
     $145 = 1 - $ex$3$lcssa | 0;
     $146 = (tempInt = _bitshift64Lshr($137 | 0, $138 | 0, $145 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $147 = tempRet0;
     $149 = $147;
     $150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr >> 2] = $150;
    HEAP32[tempDoublePtr + 4 >> 2] = $148;
    $151 = +HEAPF64[tempDoublePtr >> 3];
    $$0 = $151;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return +$$0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     HEAP32[$6 >> 2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info >> 2] | 0;
   $10 = ($this | 0) == ($9 | 0);
   if (!$10) {
    $57 = $this + 16 | 0;
    $58 = $this + 12 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = ($this + 16 | 0) + ($59 << 3) | 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57, $info, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
    $61 = $this + 24 | 0;
    $62 = ($59 | 0) > 1;
    if (!$62) {
     break;
    }
    $63 = $this + 8 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = $64 & 2;
    $66 = ($65 | 0) == 0;
    if ($66) {
     $67 = $info + 36 | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = ($68 | 0) == 1;
     if (!$69) {
      $75 = $64 & 1;
      $76 = ($75 | 0) == 0;
      if ($76) {
       $79 = $info + 54 | 0;
       $p2$2 = $61;
       while (1) {
        $88 = HEAP8[$79 >> 0] | 0;
        $89 = $88 << 24 >> 24 == 0;
        if (!$89) {
         break L1;
        }
        $90 = HEAP32[$67 >> 2] | 0;
        $91 = ($90 | 0) == 1;
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
        $92 = $p2$2 + 8 | 0;
        $93 = $92 >>> 0 < $60 >>> 0;
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = $info + 24 | 0;
      $78 = $info + 54 | 0;
      $p2$1 = $61;
      while (1) {
       $80 = HEAP8[$78 >> 0] | 0;
       $81 = $80 << 24 >> 24 == 0;
       if (!$81) {
        break L1;
       }
       $82 = HEAP32[$67 >> 2] | 0;
       $83 = ($82 | 0) == 1;
       if ($83) {
        $84 = HEAP32[$77 >> 2] | 0;
        $85 = ($84 | 0) == 1;
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
       $86 = $p2$1 + 8 | 0;
       $87 = $86 >>> 0 < $60 >>> 0;
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = $info + 54 | 0;
    $p2$0 = $61;
    while (1) {
     $71 = HEAP8[$70 >> 0] | 0;
     $72 = $71 << 24 >> 24 == 0;
     if (!$72) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
     $73 = $p2$0 + 8 | 0;
     $74 = $73 >>> 0 < $60 >>> 0;
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = $info + 16 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   $13 = ($12 | 0) == ($current_ptr | 0);
   if (!$13) {
    $14 = $info + 20 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($15 | 0) == ($current_ptr | 0);
    if (!$16) {
     $19 = $info + 32 | 0;
     HEAP32[$19 >> 2] = $path_below;
     $20 = $info + 44 | 0;
     $21 = HEAP32[$20 >> 2] | 0;
     $22 = ($21 | 0) == 4;
     if ($22) {
      break;
     }
     $23 = $this + 12 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = ($this + 16 | 0) + ($24 << 3) | 0;
     $26 = $info + 52 | 0;
     $27 = $info + 53 | 0;
     $28 = $info + 54 | 0;
     $29 = $this + 8 | 0;
     $30 = $info + 24 | 0;
     $31 = ($24 | 0) > 0;
     L34 : do {
      if ($31) {
       $32 = $this + 16 | 0;
       $does_dst_type_point_to_our_static_type$0$off023 = 0;
       $is_dst_type_derived_from_static_type$0$off025 = 0;
       $p$024 = $32;
       while (1) {
        HEAP8[$26 >> 0] = 0;
        HEAP8[$27 >> 0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024, $info, $current_ptr, $current_ptr, 1, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
        $33 = HEAP8[$28 >> 0] | 0;
        $34 = $33 << 24 >> 24 == 0;
        if (!$34) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27 >> 0] | 0;
        $36 = $35 << 24 >> 24 == 0;
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;
          $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26 >> 0] | 0;
          $38 = $37 << 24 >> 24 == 0;
          if ($38) {
           $44 = HEAP32[$29 >> 2] | 0;
           $45 = $44 & 1;
           $46 = ($45 | 0) == 0;
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;
            $is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;
            $is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30 >> 2] | 0;
          $40 = ($39 | 0) == 1;
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29 >> 2] | 0;
          $42 = $41 & 2;
          $43 = ($42 | 0) == 0;
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;
           $is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while (0);
        $47 = $p$024 + 8 | 0;
        $48 = $47 >>> 0 < $25 >>> 0;
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;
         $is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;
         $p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;
       $is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while (0);
     do {
      if ((label | 0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14 >> 2] = $current_ptr;
        $49 = $info + 40 | 0;
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = $50 + 1 | 0;
        HEAP32[$49 >> 2] = $51;
        $52 = $info + 36 | 0;
        $53 = HEAP32[$52 >> 2] | 0;
        $54 = ($53 | 0) == 1;
        if ($54) {
         $55 = HEAP32[$30 >> 2] | 0;
         $56 = ($55 | 0) == 2;
         if ($56) {
          HEAP8[$28 >> 0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label | 0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20 >> 2] = 4;
       break L1;
      }
     } while (0);
     HEAP32[$20 >> 2] = 3;
     break;
    }
   }
   $17 = ($path_below | 0) == 1;
   if ($17) {
    $18 = $info + 32 | 0;
    HEAP32[$18 >> 2] = 1;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE25__construct_node_with_keyEOS6_($agg$result, $this, $__k) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0, $__na = 0, $__tmp$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $11 = sp + 40 | 0;
 $14 = sp + 464 | 0;
 $32 = sp + 32 | 0;
 $37 = sp + 463 | 0;
 $47 = sp + 276 | 0;
 $48 = sp + 24 | 0;
 $51 = sp + 264 | 0;
 $52 = sp + 256 | 0;
 $53 = sp + 16 | 0;
 $58 = sp + 232 | 0;
 $73 = sp + 8 | 0;
 $76 = sp + 462 | 0;
 $87 = sp;
 $90 = sp + 461 | 0;
 $104 = sp + 460 | 0;
 $105 = sp + 48 | 0;
 $102 = $this;
 $103 = $__k;
 $107 = $102;
 $101 = $107;
 $108 = $101;
 $109 = $108 + 4 | 0;
 $100 = $109;
 $110 = $100;
 $99 = $110;
 $111 = $99;
 $__na = $111;
 $$expand_i1_val = 0;
 HEAP8[$104 >> 0] = $$expand_i1_val;
 $112 = $__na;
 $65 = $112;
 $66 = 1;
 $113 = $65;
 $114 = $66;
 $62 = $113;
 $63 = $114;
 $64 = 0;
 $115 = $63;
 $116 = $115 * 48 | 0;
 $61 = $116;
 $117 = $61;
 $118 = (tempInt = __Znwj($117) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $119 = $__na;
 $59 = $105;
 $60 = $119;
 $120 = $59;
 $121 = $60;
 HEAP32[$120 >> 2] = $121;
 $122 = $120 + 4 | 0;
 HEAP8[$122 >> 0] = 0;
 $123 = $120 + 5 | 0;
 HEAP8[$123 >> 0] = 0;
 $55 = $agg$result;
 $56 = $118;
 $57 = $105;
 $124 = $55;
 $125 = $56;
 $126 = $57;
 $54 = $126;
 $127 = $54;
 HEAP32[$58 >> 2] = HEAP32[$127 >> 2] | 0;
 HEAP32[$58 + 4 >> 2] = HEAP32[$127 + 4 >> 2] | 0;
 HEAP8[$53 >> 0] = HEAP8[$58 >> 0] | 0;
 HEAP8[$53 + 1 >> 0] = HEAP8[$58 + 1 >> 0] | 0;
 HEAP8[$53 + 2 >> 0] = HEAP8[$58 + 2 >> 0] | 0;
 HEAP8[$53 + 3 >> 0] = HEAP8[$58 + 3 >> 0] | 0;
 HEAP8[$53 + 4 >> 0] = HEAP8[$58 + 4 >> 0] | 0;
 HEAP8[$53 + 5 >> 0] = HEAP8[$58 + 5 >> 0] | 0;
 HEAP8[$53 + 6 >> 0] = HEAP8[$58 + 6 >> 0] | 0;
 HEAP8[$53 + 7 >> 0] = HEAP8[$58 + 7 >> 0] | 0;
 $50 = $124;
 HEAP32[$51 >> 2] = $125;
 $128 = $50;
 $49 = $51;
 $129 = $49;
 $130 = HEAP32[$129 >> 2] | 0;
 $43 = $53;
 $131 = $43;
 HEAP32[$52 >> 2] = HEAP32[$131 >> 2] | 0;
 HEAP32[$52 + 4 >> 2] = HEAP32[$131 + 4 >> 2] | 0;
 HEAP8[$48 >> 0] = HEAP8[$52 >> 0] | 0;
 HEAP8[$48 + 1 >> 0] = HEAP8[$52 + 1 >> 0] | 0;
 HEAP8[$48 + 2 >> 0] = HEAP8[$52 + 2 >> 0] | 0;
 HEAP8[$48 + 3 >> 0] = HEAP8[$52 + 3 >> 0] | 0;
 HEAP8[$48 + 4 >> 0] = HEAP8[$52 + 4 >> 0] | 0;
 HEAP8[$48 + 5 >> 0] = HEAP8[$52 + 5 >> 0] | 0;
 HEAP8[$48 + 6 >> 0] = HEAP8[$52 + 6 >> 0] | 0;
 HEAP8[$48 + 7 >> 0] = HEAP8[$52 + 7 >> 0] | 0;
 $46 = $128;
 HEAP32[$47 >> 2] = $130;
 $132 = $46;
 $45 = $47;
 $133 = $45;
 $134 = HEAP32[$133 >> 2] | 0;
 HEAP32[$132 >> 2] = $134;
 $135 = $132 + 4 | 0;
 $44 = $48;
 $136 = $44;
 HEAP32[$135 >> 2] = HEAP32[$136 >> 2] | 0;
 HEAP32[$135 + 4 >> 2] = HEAP32[$136 + 4 >> 2] | 0;
 $137 = $__na;
 $42 = $agg$result;
 $138 = $42;
 $41 = $138;
 $139 = $41;
 $40 = $139;
 $140 = $40;
 $141 = HEAP32[$140 >> 2] | 0;
 $142 = $141 + 16 | 0;
 $39 = $142;
 $143 = $39;
 $144 = $103;
 $38 = $144;
 $145 = $38;
 $34 = $137;
 $35 = $143;
 $36 = $145;
 $146 = $34;
 $147 = $35;
 $148 = $36;
 $33 = $148;
 $149 = $33;
 HEAP8[$32 >> 0] = HEAP8[$37 >> 0] | 0;
 $29 = $146;
 $30 = $147;
 $31 = $149;
 $150 = $29;
 $151 = $30;
 $152 = $31;
 $28 = $152;
 $153 = $28;
 $25 = $150;
 $26 = $151;
 $27 = $153;
 $154 = $26;
 $155 = $27;
 $24 = $155;
 $156 = $24;
 $22 = $154;
 $23 = $156;
 $157 = $22;
 $158 = $23;
 $21 = $158;
 $159 = $21;
 HEAP32[$157 >> 2] = HEAP32[$159 >> 2] | 0;
 HEAP32[$157 + 4 >> 2] = HEAP32[$159 + 4 >> 2] | 0;
 HEAP32[$157 + 8 >> 2] = HEAP32[$159 + 8 >> 2] | 0;
 $160 = $23;
 $20 = $160;
 $161 = $20;
 $19 = $161;
 $162 = $19;
 $18 = $162;
 $163 = $18;
 $__a$i$i$i$i$i = $163;
 $__i$i$i$i$i$i = 0;
 while (1) {
  $164 = $__i$i$i$i$i$i;
  $165 = $164 >>> 0 < 3;
  if (!$165) {
   break;
  }
  $166 = $__i$i$i$i$i$i;
  $167 = $__a$i$i$i$i$i;
  $168 = $167 + ($166 << 2) | 0;
  HEAP32[$168 >> 2] = 0;
  $169 = $__i$i$i$i$i$i;
  $170 = $169 + 1 | 0;
  $__i$i$i$i$i$i = $170;
 }
 $6 = $agg$result;
 $171 = $6;
 $5 = $171;
 $172 = $5;
 $4 = $172;
 $173 = $4;
 $174 = $173 + 4 | 0;
 $175 = $174 + 4 | 0;
 HEAP8[$175 >> 0] = 1;
 $176 = $__na;
 $2 = $agg$result;
 $177 = $2;
 $1 = $177;
 $178 = $1;
 $0 = $178;
 $179 = $0;
 $180 = HEAP32[$179 >> 2] | 0;
 $181 = $180 + 16 | 0;
 $182 = $181 + 16 | 0;
 $3 = $182;
 $183 = $3;
 $12 = $176;
 $13 = $183;
 $184 = $12;
 $185 = $13;
 HEAP8[$11 >> 0] = HEAP8[$14 >> 0] | 0;
 $9 = $184;
 $10 = $185;
 $186 = $9;
 $187 = $10;
 $7 = $186;
 $8 = $187;
 $188 = $8;
 HEAP32[$188 >> 2] = 0 | 0;
 HEAP32[$188 + 4 >> 2] = 0 | 0;
 HEAP32[$188 + 8 >> 2] = 0 | 0;
 HEAP32[$188 + 12 >> 2] = 0 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev($188), asyncState ? abort(-12) | 0 : 0;
 $17 = $agg$result;
 $189 = $17;
 $16 = $189;
 $190 = $16;
 $15 = $190;
 $191 = $15;
 $192 = $191 + 4 | 0;
 $193 = $192 + 5 | 0;
 HEAP8[$193 >> 0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$104 >> 0] = $$expand_i1_val2;
 $106 = 1;
 $$pre_trunc = HEAP8[$104 >> 0] | 0;
 $194 = $$pre_trunc & 1;
 if ($194) {
  STACKTOP = sp;
  return;
 }
 $98 = $agg$result;
 $195 = $98;
 $96 = $195;
 $97 = 0;
 $196 = $96;
 $95 = $196;
 $197 = $95;
 $94 = $197;
 $198 = $94;
 $199 = HEAP32[$198 >> 2] | 0;
 $__tmp$i$i = $199;
 $200 = $97;
 $70 = $196;
 $201 = $70;
 $69 = $201;
 $202 = $69;
 HEAP32[$202 >> 2] = $200;
 $203 = $__tmp$i$i;
 $204 = ($203 | 0) != (0 | 0);
 if (!$204) {
  STACKTOP = sp;
  return;
 }
 $68 = $196;
 $205 = $68;
 $67 = $205;
 $206 = $67;
 $207 = $206 + 4 | 0;
 $208 = $__tmp$i$i;
 $92 = $207;
 $93 = $208;
 $209 = $92;
 $210 = $209 + 5 | 0;
 $211 = HEAP8[$210 >> 0] | 0;
 $212 = $211 & 1;
 if ($212) {
  $213 = HEAP32[$209 >> 2] | 0;
  $214 = $93;
  $215 = $214 + 16 | 0;
  $216 = $215 + 16 | 0;
  $91 = $216;
  $217 = $91;
  $88 = $213;
  $89 = $217;
  $218 = $88;
  $219 = $89;
  HEAP8[$87 >> 0] = HEAP8[$90 >> 0] | 0;
  $85 = $218;
  $86 = $219;
  $220 = $86;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($220), asyncState ? abort(-12) | 0 : 0;
 }
 $221 = $209 + 4 | 0;
 $222 = HEAP8[$221 >> 0] | 0;
 $223 = $222 & 1;
 if ($223) {
  $224 = HEAP32[$209 >> 2] | 0;
  $225 = $93;
  $226 = $225 + 16 | 0;
  $84 = $226;
  $227 = $84;
  $74 = $224;
  $75 = $227;
  $228 = $74;
  $229 = $75;
  HEAP8[$73 >> 0] = HEAP8[$76 >> 0] | 0;
  $71 = $228;
  $72 = $229;
  $230 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($230), asyncState ? abort(-12) | 0 : 0;
 }
 $231 = $93;
 $232 = ($231 | 0) != (0 | 0);
 if (!$232) {
  STACKTOP = sp;
  return;
 }
 $233 = HEAP32[$209 >> 2] | 0;
 $234 = $93;
 $81 = $233;
 $82 = $234;
 $83 = 1;
 $235 = $81;
 $236 = $82;
 $237 = $83;
 $78 = $235;
 $79 = $236;
 $80 = $237;
 $238 = $79;
 $77 = $238;
 $239 = $77;
 __ZdlPv($239), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10to_unicodeEjj($agg$result, $codepoint1, $codepoint2) {
 $agg$result = $agg$result | 0;
 $codepoint1 = $codepoint1 | 0;
 $codepoint2 = $codepoint2 | 0;
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $codepoint = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $13 = sp + 76 | 0;
 $11 = $codepoint1;
 $12 = $codepoint2;
 $$expand_i1_val = 0;
 HEAP8[$13 >> 0] = $$expand_i1_val;
 $10 = $agg$result;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 $6 = $17;
 $20 = $6;
 $5 = $20;
 $21 = $5;
 $4 = $21;
 $22 = $4;
 $__a$i$i = $22;
 $__i$i$i = 0;
 while (1) {
  $23 = $__i$i$i;
  $24 = $23 >>> 0 < 3;
  if (!$24) {
   break;
  }
  $25 = $__i$i$i;
  $26 = $__a$i$i;
  $27 = $26 + ($25 << 2) | 0;
  HEAP32[$27 >> 2] = 0;
  $28 = $__i$i$i;
  $29 = $28 + 1 | 0;
  $__i$i$i = $29;
 }
 $30 = $11;
 $codepoint = $30;
 $31 = $11;
 $32 = $31 >>> 0 >= 55296;
 $33 = $11;
 $34 = $33 >>> 0 <= 56319;
 $or$cond = $32 & $34;
 do {
  if ($or$cond) {
   $35 = $12;
   $36 = $35 >>> 0 >= 56320;
   $37 = $12;
   $38 = $37 >>> 0 <= 57343;
   $or$cond3 = $36 & $38;
   if ($or$cond3) {
    $39 = $11;
    $40 = $39 << 10;
    $41 = $12;
    $42 = $40 + $41 | 0;
    $43 = $42 - 56613888 | 0;
    $codepoint = $43;
    label = 11;
    break;
   }
   $44 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $0 = $44;
   $1 = 14717;
   $45 = $0;
   $46 = $1;
   __THREW__ = 0;
   invoke_vii(435, $45 | 0, $46 | 0), asyncState ? abort(-12) | 0 : 0;
   $47 = __THREW__;
   __THREW__ = 0;
   $48 = $47 & 1;
   if (!$48) {
    $49 = 3256;
    HEAP32[$45 >> 2] = $49;
    __THREW__ = 0;
    invoke_viii(387, $44 | 0, 176 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
    $50 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $51 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $52 = tempRet0;
   $14 = $51;
   $15 = $52;
   ___cxa_free_exception($44 | 0), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
   $134 = $14;
   $135 = $15;
   ___resumeException($134 | 0), asyncState ? abort(-12) | 0 : 0;
  } else {
   label = 11;
  }
 } while (0);
 L14 : do {
  if ((label | 0) == 11) {
   $55 = $codepoint;
   $56 = $55 >>> 0 < 128;
   $57 = $codepoint;
   do {
    if ($56) {
     $58 = $57 & 255;
     __THREW__ = 0;
     (tempInt = invoke_iiii(437, $agg$result | 0, 1, $58 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      break L14;
     }
    } else {
     $61 = $57 >>> 0 <= 2047;
     $62 = $codepoint;
     if ($61) {
      $63 = $62 >>> 6;
      $64 = $63 & 31;
      $65 = 192 | $64;
      $66 = $65 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $66 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $67 = __THREW__;
      __THREW__ = 0;
      $68 = $67 & 1;
      if ($68) {
       break L14;
      }
      $69 = $codepoint;
      $70 = $69 & 63;
      $71 = 128 | $70;
      $72 = $71 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $72 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $73 = __THREW__;
      __THREW__ = 0;
      $74 = $73 & 1;
      if ($74) {
       break L14;
      } else {
       break;
      }
     }
     $75 = $62 >>> 0 <= 65535;
     $76 = $codepoint;
     if ($75) {
      $77 = $76 >>> 12;
      $78 = $77 & 15;
      $79 = 224 | $78;
      $80 = $79 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $80 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $81 = __THREW__;
      __THREW__ = 0;
      $82 = $81 & 1;
      if ($82) {
       break L14;
      }
      $83 = $codepoint;
      $84 = $83 >>> 6;
      $85 = $84 & 63;
      $86 = 128 | $85;
      $87 = $86 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $87 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $88 = __THREW__;
      __THREW__ = 0;
      $89 = $88 & 1;
      if ($89) {
       break L14;
      }
      $90 = $codepoint;
      $91 = $90 & 63;
      $92 = 128 | $91;
      $93 = $92 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $93 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $94 = __THREW__;
      __THREW__ = 0;
      $95 = $94 & 1;
      if ($95) {
       break L14;
      } else {
       break;
      }
     }
     $96 = $76 >>> 0 <= 1114111;
     if ($96) {
      $97 = $codepoint;
      $98 = $97 >>> 18;
      $99 = $98 & 7;
      $100 = 240 | $99;
      $101 = $100 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $101 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $102 = __THREW__;
      __THREW__ = 0;
      $103 = $102 & 1;
      if ($103) {
       break L14;
      }
      $104 = $codepoint;
      $105 = $104 >>> 12;
      $106 = $105 & 63;
      $107 = 128 | $106;
      $108 = $107 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $108 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $109 = __THREW__;
      __THREW__ = 0;
      $110 = $109 & 1;
      if ($110) {
       break L14;
      }
      $111 = $codepoint;
      $112 = $111 >>> 6;
      $113 = $112 & 63;
      $114 = 128 | $113;
      $115 = $114 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $115 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $116 = __THREW__;
      __THREW__ = 0;
      $117 = $116 & 1;
      if ($117) {
       break L14;
      }
      $118 = $codepoint;
      $119 = $118 & 63;
      $120 = 128 | $119;
      $121 = $120 & 255;
      __THREW__ = 0;
      (tempInt = invoke_iiii(437, $agg$result | 0, 1, $121 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $122 = __THREW__;
      __THREW__ = 0;
      $123 = $122 & 1;
      if ($123) {
       break L14;
      } else {
       break;
      }
     } else {
      $124 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $2 = $124;
      $3 = 14748;
      $125 = $2;
      $126 = $3;
      __THREW__ = 0;
      invoke_vii(435, $125 | 0, $126 | 0), asyncState ? abort(-12) | 0 : 0;
      $127 = __THREW__;
      __THREW__ = 0;
      $128 = $127 & 1;
      if (!$128) {
       $129 = 3276;
       HEAP32[$125 >> 2] = $129;
       __THREW__ = 0;
       invoke_viii(387, $124 | 0, 192 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
       $130 = __THREW__;
       __THREW__ = 0;
       break L14;
      }
      $131 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $132 = tempRet0;
      $14 = $131;
      $15 = $132;
      ___cxa_free_exception($124 | 0), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
      $134 = $14;
      $135 = $15;
      ___resumeException($134 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
   } while (0);
   $$expand_i1_val5 = 1;
   HEAP8[$13 >> 0] = $$expand_i1_val5;
   $16 = 1;
   $$pre_trunc = HEAP8[$13 >> 0] | 0;
   $133 = $$pre_trunc & 1;
   if ($133) {
    STACKTOP = sp;
    return;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 $53 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $54 = tempRet0;
 $14 = $53;
 $15 = $54;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
 $134 = $14;
 $135 = $15;
 ___resumeException($134 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is, $__str, $__dlm) {
 $__is = $__is | 0;
 $__str = $__str | 0;
 $__dlm = $__dlm | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__ch = 0, $__err = 0, $__extr = 0, $__i = 0, $__m$i = 0, $__sen = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $6 = sp;
 $8 = sp + 229 | 0;
 $48 = sp + 228 | 0;
 $49 = sp + 227 | 0;
 $__sen = sp + 225 | 0;
 $51 = $__is;
 $52 = $__str;
 $53 = $__dlm;
 $56 = $51;
 __THREW__ = 0;
 invoke_viii(419, $__sen | 0, $56 | 0, 1), asyncState ? abort(-12) | 0 : 0;
 $57 = __THREW__;
 __THREW__ = 0;
 $58 = $57 & 1;
 L1 : do {
  if (!$58) {
   $50 = $__sen;
   $59 = $50;
   $60 = HEAP8[$59 >> 0] | 0;
   $61 = $60 & 1;
   if (!$61) {
    $135 = $51;
    STACKTOP = sp;
    return $135 | 0;
   }
   $62 = $52;
   $47 = $62;
   $63 = $47;
   $46 = $63;
   $45 = $63;
   $64 = $45;
   $44 = $64;
   $65 = $44;
   $43 = $65;
   $66 = $43;
   $67 = HEAP8[$66 >> 0] | 0;
   $68 = $67 & 255;
   $69 = $68 & 1;
   $70 = ($69 | 0) != 0;
   if ($70) {
    $38 = $63;
    $71 = $38;
    $37 = $71;
    $72 = $37;
    $36 = $72;
    $73 = $36;
    $74 = $73 + 8 | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    HEAP8[$48 >> 0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($75, $48), asyncState ? abort(-12) | 0 : 0;
    $29 = $63;
    $30 = 0;
    $76 = $29;
    $77 = $30;
    $28 = $76;
    $78 = $28;
    $27 = $78;
    $79 = $27;
    $80 = $79 + 4 | 0;
    HEAP32[$80 >> 2] = $77;
   } else {
    $35 = $63;
    $81 = $35;
    $34 = $81;
    $82 = $34;
    $33 = $82;
    $83 = $33;
    $84 = $83 + 1 | 0;
    $32 = $84;
    $85 = $32;
    $31 = $85;
    $86 = $31;
    HEAP8[$49 >> 0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($86, $49), asyncState ? abort(-12) | 0 : 0;
    $41 = $63;
    $42 = 0;
    $87 = $41;
    $88 = $42;
    $89 = $88 << 1;
    $90 = $89 & 255;
    $40 = $87;
    $91 = $40;
    $39 = $91;
    $92 = $39;
    HEAP8[$92 >> 0] = $90;
   }
   $__err = 0;
   $__extr = 0;
   while (1) {
    $93 = $51;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = $94 + -12 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = $93 + $96 | 0;
    $26 = $97;
    $98 = $26;
    $25 = $98;
    $99 = $25;
    $100 = $99 + 24 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $24 = $101;
    $102 = $24;
    $103 = $102 + 12 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $102 + 16 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    $107 = ($104 | 0) == ($106 | 0);
    if ($107) {
     $108 = HEAP32[$102 >> 2] | 0;
     $109 = $108 + 40 | 0;
     $110 = HEAP32[$109 >> 2] | 0;
     __THREW__ = 0;
     $111 = (tempInt = invoke_ii($110 | 0, $102 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $112 = __THREW__;
     __THREW__ = 0;
     $113 = $112 & 1;
     if ($113) {
      break L1;
     }
     $23 = $111;
    } else {
     $114 = $102 + 12 | 0;
     $115 = HEAP32[$114 >> 2] | 0;
     $116 = $115 + 1 | 0;
     HEAP32[$114 >> 2] = $116;
     $117 = HEAP8[$115 >> 0] | 0;
     $118 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($117) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $23 = $118;
    }
    $119 = $23;
    $__i = $119;
    $120 = $__i;
    $121 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $122 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($120, $121) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    if ($122) {
     label = 12;
     break;
    }
    $136 = $__extr;
    $137 = $136 + 1 | 0;
    $__extr = $137;
    $138 = $__i;
    $139 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($138) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $__ch = $139;
    $140 = $__ch;
    $141 = $53;
    $142 = (tempInt = __ZNSt3__111char_traitsIcE2eqEcc($140, $141) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    if ($142) {
     break;
    }
    $143 = $52;
    $144 = $__ch;
    __THREW__ = 0;
    invoke_vii(407, $143 | 0, $144 | 0), asyncState ? abort(-12) | 0 : 0;
    $145 = __THREW__;
    __THREW__ = 0;
    $146 = $145 & 1;
    if ($146) {
     break L1;
    }
    $147 = $52;
    $22 = $147;
    $148 = $22;
    $21 = $148;
    $149 = $21;
    $20 = $149;
    $150 = $20;
    $19 = $150;
    $151 = $19;
    $152 = HEAP8[$151 >> 0] | 0;
    $153 = $152 & 255;
    $154 = $153 & 1;
    $155 = ($154 | 0) != 0;
    if ($155) {
     $15 = $148;
     $156 = $15;
     $14 = $156;
     $157 = $14;
     $13 = $157;
     $158 = $13;
     $159 = $158 + 4 | 0;
     $160 = HEAP32[$159 >> 2] | 0;
     $177 = $160;
    } else {
     $18 = $148;
     $161 = $18;
     $17 = $161;
     $162 = $17;
     $16 = $162;
     $163 = $16;
     $164 = HEAP8[$163 >> 0] | 0;
     $165 = $164 & 255;
     $166 = $165 >> 1;
     $177 = $166;
    }
    $167 = $52;
    $12 = $167;
    $168 = $12;
    $11 = $168;
    $169 = $11;
    $10 = $169;
    $170 = $10;
    $9 = $170;
    $171 = $9;
    $7 = $171;
    $172 = $7;
    HEAP8[$6 >> 0] = HEAP8[$8 >> 0] | 0;
    $5 = $172;
    $173 = $5;
    $4 = $173;
    $__m$i = -1;
    $174 = $__m$i;
    $175 = $174 - 16 | 0;
    $176 = ($177 | 0) == ($175 | 0);
    if ($176) {
     label = 22;
     break;
    }
   }
   if ((label | 0) == 12) {
    $123 = $__err;
    $124 = $123 | 2;
    $__err = $124;
   } else if ((label | 0) == 22) {
    $178 = $__err;
    $179 = $178 | 4;
    $__err = $179;
   }
   $180 = $__extr;
   $181 = ($180 | 0) == 0;
   if ($181) {
    $182 = $__err;
    $183 = $182 | 4;
    $__err = $183;
   }
   $184 = $51;
   $185 = HEAP32[$184 >> 2] | 0;
   $186 = $185 + -12 | 0;
   $187 = HEAP32[$186 >> 2] | 0;
   $188 = $184 + $187 | 0;
   $189 = $__err;
   $2 = $188;
   $3 = $189;
   $190 = $2;
   $191 = $3;
   $0 = $190;
   $1 = $191;
   $192 = $0;
   $193 = $192 + 16 | 0;
   $194 = HEAP32[$193 >> 2] | 0;
   $195 = $1;
   $196 = $194 | $195;
   __THREW__ = 0;
   invoke_vii(394, $192 | 0, $196 | 0), asyncState ? abort(-12) | 0 : 0;
   $197 = __THREW__;
   __THREW__ = 0;
   $198 = $197 & 1;
   if (!$198) {
    $135 = $51;
    STACKTOP = sp;
    return $135 | 0;
   }
  }
 } while (0);
 $125 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $126 = tempRet0;
 $54 = $125;
 $55 = $126;
 $127 = $54;
 (tempInt = ___cxa_begin_catch($127 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $128 = $51;
 $129 = HEAP32[$128 >> 2] | 0;
 $130 = $129 + -12 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 $132 = $128 + $131 | 0;
 __THREW__ = 0;
 invoke_vi(420, $132 | 0), asyncState ? abort(-12) | 0 : 0;
 $133 = __THREW__;
 __THREW__ = 0;
 $134 = $133 & 1;
 if (!$134) {
  ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
  $135 = $51;
  STACKTOP = sp;
  return $135 | 0;
 }
 $199 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $200 = tempRet0;
 $54 = $199;
 $55 = $200;
 __THREW__ = 0;
 invoke_v(409), asyncState ? abort(-12) | 0 : 0;
 $201 = __THREW__;
 __THREW__ = 0;
 $202 = $201 & 1;
 if ($202) {
  $205 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $206 = tempRet0;
  ___clang_call_terminate($205), asyncState ? abort(-12) | 0 : 0;
 } else {
  $203 = $54;
  $204 = $55;
  ___resumeException($203 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 424 | 0;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 428 | 0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb >> 2] = $1;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 $3 = $__wbuf + 400 | 0;
 __THREW__ = 0;
 $4 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $33 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $34 = tempRet0;
  HEAP32[$__wb >> 2] = 0;
  $$011 = $33;
  $$019 = $34;
  $95 = $__wbuf;
  label = 38;
 } else {
  HEAP32[$__loc >> 2] = $4;
  __THREW__ = 0;
  $7 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = __THREW__;
  __THREW__ = 0;
  $9 = $8 & 1;
  L4 : do {
   if (!$9) {
    HEAP8[$__neg >> 0] = 0;
    $10 = HEAP32[$__e >> 2] | 0;
    HEAP32[$0 >> 2] = $10;
    $11 = $__iob + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $10;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
    $14 = (tempInt = invoke_iiiiiiiiiiii(486, $__b | 0, $$byval_copy | 0, $__intl | 0, $__loc | 0, $12 | 0, $__err | 0, $__neg | 0, $7 | 0, $__wb | 0, $__wn | 0, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = __THREW__;
    __THREW__ = 0;
    $16 = $15 & 1;
    if (!$16) {
     if ($14) {
      $17 = HEAP8[$__v >> 0] | 0;
      $18 = $17 & 1;
      $19 = $18 << 24 >> 24 == 0;
      if ($19) {
       HEAP8[$__v >> 0] = 0;
      } else {
       $20 = $__v + 8 | 0;
       $21 = HEAP32[$20 >> 2] | 0;
       HEAP32[$21 >> 2] = 0;
      }
      $22 = $__v + 4 | 0;
      HEAP32[$22 >> 2] = 0;
      $23 = HEAP8[$__neg >> 0] | 0;
      $24 = $23 << 24 >> 24 == 0;
      if (!$24) {
       $25 = HEAP32[$7 >> 2] | 0;
       $26 = $25 + 44 | 0;
       $27 = HEAP32[$26 >> 2] | 0;
       __THREW__ = 0;
       $28 = (tempInt = invoke_iii($27 | 0, $7 | 0, 45) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $29 = __THREW__;
       __THREW__ = 0;
       $30 = $29 & 1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(488, $__v | 0, $28 | 0), asyncState ? abort(-12) | 0 : 0;
       $31 = __THREW__;
       __THREW__ = 0;
       $32 = $31 & 1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7 >> 2] | 0;
      $36 = $35 + 44 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      __THREW__ = 0;
      $38 = (tempInt = invoke_iii($37 | 0, $7 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $39 = __THREW__;
      __THREW__ = 0;
      $40 = $39 & 1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb >> 2] | 0;
      $42 = HEAP32[$__wn >> 2] | 0;
      $43 = $42 + -4 | 0;
      $44 = $41 >>> 0 < $43 >>> 0;
      L18 : do {
       if ($44) {
        $__w$013 = $41;
        while (1) {
         $45 = HEAP32[$__w$013 >> 2] | 0;
         $46 = ($45 | 0) == ($38 | 0);
         if (!$46) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $47 = $__w$013 + 4 | 0;
         $48 = $47 >>> 0 < $43 >>> 0;
         if ($48) {
          $__w$013 = $47;
         } else {
          $__w$0$lcssa = $47;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $41;
       }
      } while (0);
      __THREW__ = 0;
      (tempInt = invoke_iiii(490, $__v | 0, $__w$0$lcssa | 0, $42 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $49 = __THREW__;
      __THREW__ = 0;
      $50 = $49 & 1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b >> 2] | 0;
     $52 = ($51 | 0) == (0 | 0);
     do {
      if ($52) {
       $100 = 1;
      } else {
       $53 = $51 + 12 | 0;
       $54 = HEAP32[$53 >> 2] | 0;
       $55 = $51 + 16 | 0;
       $56 = HEAP32[$55 >> 2] | 0;
       $57 = ($54 | 0) == ($56 | 0);
       if ($57) {
        $58 = HEAP32[$51 >> 2] | 0;
        $59 = $58 + 36 | 0;
        $60 = HEAP32[$59 >> 2] | 0;
        __THREW__ = 0;
        $61 = (tempInt = invoke_ii($60 | 0, $51 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $62 = __THREW__;
        __THREW__ = 0;
        $63 = $62 & 1;
        if ($63) {
         break L4;
        } else {
         $$0$i$i$i$i = $61;
        }
       } else {
        $64 = HEAP32[$54 >> 2] | 0;
        $$0$i$i$i$i = $64;
       }
       $65 = ($$0$i$i$i$i | 0) == -1;
       if ($65) {
        HEAP32[$__b >> 2] = 0;
        $100 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
        $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
        $100 = $phitmp$i$i$i;
        break;
       }
      }
     } while (0);
     $66 = ($10 | 0) == 0;
     do {
      if ($66) {
       label = 30;
      } else {
       $67 = $13 + 12 | 0;
       $68 = HEAP32[$67 >> 2] | 0;
       $69 = $13 + 16 | 0;
       $70 = HEAP32[$69 >> 2] | 0;
       $71 = ($68 | 0) == ($70 | 0);
       if ($71) {
        $72 = $10;
        $73 = HEAP32[$72 >> 2] | 0;
        $74 = $73 + 36 | 0;
        $75 = HEAP32[$74 >> 2] | 0;
        __THREW__ = 0;
        $76 = (tempInt = invoke_ii($75 | 0, $13 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $77 = __THREW__;
        __THREW__ = 0;
        $78 = $77 & 1;
        if ($78) {
         break L4;
        } else {
         $$0$i$i1$i$i = $76;
        }
       } else {
        $79 = HEAP32[$68 >> 2] | 0;
        $$0$i$i1$i$i = $79;
       }
       $80 = ($$0$i$i1$i$i | 0) == -1;
       if ($80) {
        HEAP32[$__e >> 2] = 0;
        label = 30;
        break;
       } else {
        if ($100) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 30) {
      if ($100) {
       label = 32;
      }
     }
     if ((label | 0) == 32) {
      $81 = HEAP32[$__err >> 2] | 0;
      $82 = $81 | 2;
      HEAP32[$__err >> 2] = $82;
     }
     $83 = HEAP32[$__b >> 2] | 0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $84 = HEAP32[$__wb >> 2] | 0;
     HEAP32[$__wb >> 2] = 0;
     $85 = ($84 | 0) == (0 | 0);
     if (!$85) {
      $86 = HEAP32[$2 >> 2] | 0;
      __THREW__ = 0;
      invoke_vi($86 | 0, $84 | 0), asyncState ? abort(-12) | 0 : 0;
      $87 = __THREW__;
      __THREW__ = 0;
      $88 = $87 & 1;
      if ($88) {
       $89 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $90 = tempRet0;
       ___clang_call_terminate($89), asyncState ? abort(-12) | 0 : 0;
      }
     }
     STACKTOP = sp;
     return $83 | 0;
    }
   }
  } while (0);
  $91 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $92 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$pre = HEAP32[$__wb >> 2] | 0;
  HEAP32[$__wb >> 2] = 0;
  $93 = ($$pre | 0) == (0 | 0);
  if ($93) {
   $$0110 = $92;
   $$012 = $91;
  } else {
   $$011 = $91;
   $$019 = $92;
   $95 = $$pre;
   label = 38;
  }
 }
 if ((label | 0) == 38) {
  $94 = HEAP32[$2 >> 2] | 0;
  __THREW__ = 0;
  invoke_vi($94 | 0, $95 | 0), asyncState ? abort(-12) | 0 : 0;
  $96 = __THREW__;
  __THREW__ = 0;
  $97 = $96 & 1;
  if ($97) {
   $98 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $99 = tempRet0;
   ___clang_call_terminate($98), asyncState ? abort(-12) | 0 : 0;
  } else {
   $$0110 = $$019;
   $$012 = $$011;
  }
 }
 ___resumeException($$012 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 asyncState ? abort(-12) | 0 : 0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0 | $a$0 & -1;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> (((tempInt = _llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = 0 | $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = (tempInt = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = (tempInt = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   (tempInt = _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = (tempInt = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1936 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1936 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1944 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1944 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 10420;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (10708 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(546 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1944 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(543, 10420 | 0, 21841 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    do {
     if (!$14) {
      __THREW__ = 0;
      (tempInt = invoke_iii(543, 10432 | 0, 21849 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $15 = __THREW__;
      __THREW__ = 0;
      $16 = $15 & 1;
      if (!$16) {
       __THREW__ = 0;
       (tempInt = invoke_iii(543, 10444 | 0, 21858 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $17 = __THREW__;
       __THREW__ = 0;
       $18 = $17 & 1;
       if (!$18) {
        __THREW__ = 0;
        (tempInt = invoke_iii(543, 10456 | 0, 21864 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $19 = __THREW__;
        __THREW__ = 0;
        $20 = $19 & 1;
        if (!$20) {
         __THREW__ = 0;
         (tempInt = invoke_iii(543, 10468 | 0, 21870 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $21 = __THREW__;
         __THREW__ = 0;
         $22 = $21 & 1;
         if (!$22) {
          __THREW__ = 0;
          (tempInt = invoke_iii(543, 10480 | 0, 21874 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $23 = __THREW__;
          __THREW__ = 0;
          $24 = $23 & 1;
          if (!$24) {
           __THREW__ = 0;
           (tempInt = invoke_iii(543, 10492 | 0, 21879 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $25 = __THREW__;
           __THREW__ = 0;
           $26 = $25 & 1;
           if (!$26) {
            __THREW__ = 0;
            (tempInt = invoke_iii(543, 10504 | 0, 21884 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $27 = __THREW__;
            __THREW__ = 0;
            $28 = $27 & 1;
            if (!$28) {
             __THREW__ = 0;
             (tempInt = invoke_iii(543, 10516 | 0, 21891 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $29 = __THREW__;
             __THREW__ = 0;
             $30 = $29 & 1;
             if (!$30) {
              __THREW__ = 0;
              (tempInt = invoke_iii(543, 10528 | 0, 21901 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $31 = __THREW__;
              __THREW__ = 0;
              $32 = $31 & 1;
              if (!$32) {
               __THREW__ = 0;
               (tempInt = invoke_iii(543, 10540 | 0, 21909 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
               $33 = __THREW__;
               __THREW__ = 0;
               $34 = $33 & 1;
               if (!$34) {
                __THREW__ = 0;
                (tempInt = invoke_iii(543, 10552 | 0, 21918 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $35 = __THREW__;
                __THREW__ = 0;
                $36 = $35 & 1;
                if (!$36) {
                 __THREW__ = 0;
                 (tempInt = invoke_iii(543, 10564 | 0, 21927 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $37 = __THREW__;
                 __THREW__ = 0;
                 $38 = $37 & 1;
                 if (!$38) {
                  __THREW__ = 0;
                  (tempInt = invoke_iii(543, 10576 | 0, 21931 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                  $39 = __THREW__;
                  __THREW__ = 0;
                  $40 = $39 & 1;
                  if (!$40) {
                   __THREW__ = 0;
                   (tempInt = invoke_iii(543, 10588 | 0, 21935 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                   $41 = __THREW__;
                   __THREW__ = 0;
                   $42 = $41 & 1;
                   if (!$42) {
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10600 | 0, 21939 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $43 = __THREW__;
                    __THREW__ = 0;
                    $44 = $43 & 1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10612 | 0, 21870 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $45 = __THREW__;
                    __THREW__ = 0;
                    $46 = $45 & 1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10624 | 0, 21943 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $47 = __THREW__;
                    __THREW__ = 0;
                    $48 = $47 & 1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10636 | 0, 21947 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $49 = __THREW__;
                    __THREW__ = 0;
                    $50 = $49 & 1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10648 | 0, 21951 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $51 = __THREW__;
                    __THREW__ = 0;
                    $52 = $51 & 1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10660 | 0, 21955 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $53 = __THREW__;
                    __THREW__ = 0;
                    $54 = $53 & 1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10672 | 0, 21959 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $55 = __THREW__;
                    __THREW__ = 0;
                    $56 = $55 & 1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10684 | 0, 21963 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $57 = __THREW__;
                    __THREW__ = 0;
                    $58 = $57 & 1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(543, 10696 | 0, 21967 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $59 = __THREW__;
                    __THREW__ = 0;
                    $60 = $59 & 1;
                    if ($60) {
                     break;
                    }
                    HEAP32[10708 >> 2] = 10420;
                    ___cxa_guard_release(1936 | 0), asyncState ? abort(-12) | 0 : 0;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while (0);
    $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $63 = tempRet0;
    ___cxa_guard_abort(1936 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($62 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $61 = HEAP32[10708 >> 2] | 0;
 return $61 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1952 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1952 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1960 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1960 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 10712;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (11e3 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(547 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1960 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(545, 10712 | 0, 11e3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    do {
     if (!$14) {
      __THREW__ = 0;
      (tempInt = invoke_iii(545, 10724 | 0, 11032 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $15 = __THREW__;
      __THREW__ = 0;
      $16 = $15 & 1;
      if (!$16) {
       __THREW__ = 0;
       (tempInt = invoke_iii(545, 10736 | 0, 11068 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $17 = __THREW__;
       __THREW__ = 0;
       $18 = $17 & 1;
       if (!$18) {
        __THREW__ = 0;
        (tempInt = invoke_iii(545, 10748 | 0, 11092 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $19 = __THREW__;
        __THREW__ = 0;
        $20 = $19 & 1;
        if (!$20) {
         __THREW__ = 0;
         (tempInt = invoke_iii(545, 10760 | 0, 11116 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $21 = __THREW__;
         __THREW__ = 0;
         $22 = $21 & 1;
         if (!$22) {
          __THREW__ = 0;
          (tempInt = invoke_iii(545, 10772 | 0, 11132 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $23 = __THREW__;
          __THREW__ = 0;
          $24 = $23 & 1;
          if (!$24) {
           __THREW__ = 0;
           (tempInt = invoke_iii(545, 10784 | 0, 11152 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $25 = __THREW__;
           __THREW__ = 0;
           $26 = $25 & 1;
           if (!$26) {
            __THREW__ = 0;
            (tempInt = invoke_iii(545, 10796 | 0, 11172 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $27 = __THREW__;
            __THREW__ = 0;
            $28 = $27 & 1;
            if (!$28) {
             __THREW__ = 0;
             (tempInt = invoke_iii(545, 10808 | 0, 11200 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $29 = __THREW__;
             __THREW__ = 0;
             $30 = $29 & 1;
             if (!$30) {
              __THREW__ = 0;
              (tempInt = invoke_iii(545, 10820 | 0, 11240 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $31 = __THREW__;
              __THREW__ = 0;
              $32 = $31 & 1;
              if (!$32) {
               __THREW__ = 0;
               (tempInt = invoke_iii(545, 10832 | 0, 11272 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
               $33 = __THREW__;
               __THREW__ = 0;
               $34 = $33 & 1;
               if (!$34) {
                __THREW__ = 0;
                (tempInt = invoke_iii(545, 10844 | 0, 11308 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $35 = __THREW__;
                __THREW__ = 0;
                $36 = $35 & 1;
                if (!$36) {
                 __THREW__ = 0;
                 (tempInt = invoke_iii(545, 10856 | 0, 11344 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $37 = __THREW__;
                 __THREW__ = 0;
                 $38 = $37 & 1;
                 if (!$38) {
                  __THREW__ = 0;
                  (tempInt = invoke_iii(545, 10868 | 0, 11360 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                  $39 = __THREW__;
                  __THREW__ = 0;
                  $40 = $39 & 1;
                  if (!$40) {
                   __THREW__ = 0;
                   (tempInt = invoke_iii(545, 10880 | 0, 11376 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                   $41 = __THREW__;
                   __THREW__ = 0;
                   $42 = $41 & 1;
                   if (!$42) {
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10892 | 0, 11392 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $43 = __THREW__;
                    __THREW__ = 0;
                    $44 = $43 & 1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10904 | 0, 11116 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $45 = __THREW__;
                    __THREW__ = 0;
                    $46 = $45 & 1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10916 | 0, 11408 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $47 = __THREW__;
                    __THREW__ = 0;
                    $48 = $47 & 1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10928 | 0, 11424 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $49 = __THREW__;
                    __THREW__ = 0;
                    $50 = $49 & 1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10940 | 0, 11440 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $51 = __THREW__;
                    __THREW__ = 0;
                    $52 = $51 & 1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10952 | 0, 11456 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $53 = __THREW__;
                    __THREW__ = 0;
                    $54 = $53 & 1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10964 | 0, 11472 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $55 = __THREW__;
                    __THREW__ = 0;
                    $56 = $55 & 1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10976 | 0, 11488 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $57 = __THREW__;
                    __THREW__ = 0;
                    $58 = $57 & 1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (tempInt = invoke_iii(545, 10988 | 0, 11504 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                    $59 = __THREW__;
                    __THREW__ = 0;
                    $60 = $59 & 1;
                    if ($60) {
                     break;
                    }
                    HEAP32[11520 >> 2] = 10712;
                    ___cxa_guard_release(1952 | 0), asyncState ? abort(-12) | 0 : 0;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while (0);
    $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $63 = tempRet0;
    ___cxa_guard_abort(1952 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($62 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $61 = HEAP32[11520 >> 2] | 0;
 return $61 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i1440 = 0, $$0$i35 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i1638 = 0, $__p$0$i34 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__mb$i10 = sp + 184 | 0;
 $__buf$i11 = sp + 192 | 0;
 $__bn$i12 = sp + 180 | 0;
 $__wn$i = sp + 176 | 0;
 $__mb$i = sp + 168 | 0;
 $__buf$i = sp + 40 | 0;
 $__bn$i = sp + 32 | 0;
 $__nn$i = sp + 28 | 0;
 $__ndflt = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAP32[$__ndflt >> 2] = 0;
 $2 = $__ndflt + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $__ndflt + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 >> 2] = 9392;
 $5 = HEAP8[$__dflt >> 0] | 0;
 $6 = $5 & 1;
 $7 = $6 << 24 >> 24 == 0;
 $8 = $__dflt + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $__dflt + 4 | 0;
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10 >> 2] | 0;
 $13 = $5 & 255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = $11 + ($15 << 2) | 0;
 $17 = $__buf$i11 + 32 | 0;
 $18 = ($15 | 0) > 0;
 L1 : do {
  if ($18) {
   $$0$i1440 = $11;
   L2 : while (1) {
    HEAP32[$__wn$i >> 2] = $$0$i1440;
    $19 = HEAP32[$0 >> 2] | 0;
    $20 = $19 + 12 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    __THREW__ = 0;
    $22 = (tempInt = invoke_iiiiiiiii($21 | 0, $0 | 0, $__mb$i10 | 0, $$0$i1440 | 0, $16 | 0, $__wn$i | 0, $__buf$i11 | 0, $17 | 0, $__bn$i12 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    $24 = $23 & 1;
    if ($24) {
     label = 12;
     break;
    }
    $25 = ($22 | 0) == 2;
    $26 = HEAP32[$__wn$i >> 2] | 0;
    $27 = ($26 | 0) == ($$0$i1440 | 0);
    $or$cond$i15 = $25 | $27;
    if ($or$cond$i15) {
     label = 5;
     break;
    }
    $28 = HEAP32[$__bn$i12 >> 2] | 0;
    $29 = $__buf$i11 >>> 0 < $28 >>> 0;
    if ($29) {
     $__p$0$i1638 = $__buf$i11;
     while (1) {
      $33 = HEAP8[$__p$0$i1638 >> 0] | 0;
      __THREW__ = 0;
      invoke_vii(407, $__ndflt | 0, $33 | 0), asyncState ? abort(-12) | 0 : 0;
      $34 = __THREW__;
      __THREW__ = 0;
      $35 = $34 & 1;
      if ($35) {
       label = 11;
       break L2;
      }
      $36 = $__p$0$i1638 + 1 | 0;
      $37 = HEAP32[$__bn$i12 >> 2] | 0;
      $38 = $36 >>> 0 < $37 >>> 0;
      if ($38) {
       $__p$0$i1638 = $36;
      } else {
       break;
      }
     }
    }
    $39 = HEAP32[$__wn$i >> 2] | 0;
    $40 = $39 >>> 0 < $16 >>> 0;
    $41 = ($22 | 0) != 2;
    $42 = $41 & $40;
    if ($42) {
     $$0$i1440 = $39;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label | 0) == 5) {
    __THREW__ = 0;
    invoke_vi(480, 21676 | 0), asyncState ? abort(-12) | 0 : 0;
    $30 = __THREW__;
    __THREW__ = 0;
    $31 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $32 = tempRet0;
    $lpad$phi30$index = $31;
    $lpad$phi30$index3 = $32;
   } else if ((label | 0) == 11) {
    $59 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $60 = tempRet0;
    $lpad$phi30$index = $59;
    $lpad$phi30$index3 = $60;
   } else if ((label | 0) == 12) {
    $61 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $62 = tempRet0;
    $lpad$phi30$index = $61;
    $lpad$phi30$index3 = $62;
   }
   $$1 = $lpad$phi30$index;
   $$14 = $lpad$phi30$index3;
  } else {
   label = 9;
  }
 } while (0);
 L16 : do {
  if ((label | 0) == 9) {
   $43 = ($__c | 0) == -1;
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? -1 : $45;
   $47 = HEAP8[$__ndflt >> 0] | 0;
   $48 = $47 & 1;
   $49 = $48 << 24 >> 24 == 0;
   $50 = $__ndflt + 8 | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   $52 = $__ndflt + 1 | 0;
   $53 = $49 ? $52 : $51;
   __THREW__ = 0;
   $54 = (tempInt = invoke_iiiii(496, $46 | 0, $__set | 0, $__msgid | 0, $53 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $55 = __THREW__;
   __THREW__ = 0;
   $56 = $55 & 1;
   if ($56) {
    $57 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $58 = tempRet0;
    $$1 = $57;
    $$14 = $58;
    break;
   }
   HEAP32[$agg$result >> 2] = 0;
   $63 = $agg$result + 4 | 0;
   HEAP32[$63 >> 2] = 0;
   $64 = $agg$result + 8 | 0;
   HEAP32[$64 >> 2] = 0;
   $65 = $1 + 4 | 0;
   HEAP32[$65 >> 2] = 0;
   HEAP32[$1 >> 2] = 9440;
   $66 = (tempInt = _strlen($54) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $67 = $54 + $66 | 0;
   $68 = $67;
   $69 = $__buf$i + 128 | 0;
   $70 = ($66 | 0) > 0;
   L21 : do {
    if ($70) {
     $$0$i35 = $54;
     L22 : while (1) {
      HEAP32[$__nn$i >> 2] = $$0$i35;
      $71 = HEAP32[$1 >> 2] | 0;
      $72 = $71 + 16 | 0;
      $73 = HEAP32[$72 >> 2] | 0;
      $74 = $$0$i35;
      $75 = $68 - $74 | 0;
      $76 = ($75 | 0) > 32;
      $77 = $$0$i35 + 32 | 0;
      $78 = $76 ? $77 : $67;
      __THREW__ = 0;
      $79 = (tempInt = invoke_iiiiiiiii($73 | 0, $1 | 0, $__mb$i | 0, $$0$i35 | 0, $78 | 0, $__nn$i | 0, $__buf$i | 0, $69 | 0, $__bn$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $80 = __THREW__;
      __THREW__ = 0;
      $81 = $80 & 1;
      if ($81) {
       label = 24;
       break;
      }
      $82 = ($79 | 0) == 2;
      $83 = HEAP32[$__nn$i >> 2] | 0;
      $84 = ($83 | 0) == ($$0$i35 | 0);
      $or$cond$i = $82 | $84;
      if ($or$cond$i) {
       label = 18;
       break;
      }
      $85 = HEAP32[$__bn$i >> 2] | 0;
      $86 = $__buf$i >>> 0 < $85 >>> 0;
      if ($86) {
       $__p$0$i34 = $__buf$i;
       while (1) {
        $90 = HEAP32[$__p$0$i34 >> 2] | 0;
        __THREW__ = 0;
        invoke_vii(488, $agg$result | 0, $90 | 0), asyncState ? abort(-12) | 0 : 0;
        $91 = __THREW__;
        __THREW__ = 0;
        $92 = $91 & 1;
        if ($92) {
         label = 23;
         break L22;
        }
        $93 = $__p$0$i34 + 4 | 0;
        $94 = HEAP32[$__bn$i >> 2] | 0;
        $95 = $93 >>> 0 < $94 >>> 0;
        if ($95) {
         $__p$0$i34 = $93;
        } else {
         break;
        }
       }
      }
      $96 = HEAP32[$__nn$i >> 2] | 0;
      $97 = $96 >>> 0 < $67 >>> 0;
      $98 = ($79 | 0) != 2;
      $99 = $98 & $97;
      if ($99) {
       $$0$i35 = $96;
      } else {
       break L21;
      }
     }
     if ((label | 0) == 18) {
      __THREW__ = 0;
      invoke_vi(480, 21676 | 0), asyncState ? abort(-12) | 0 : 0;
      $87 = __THREW__;
      __THREW__ = 0;
      $88 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $89 = tempRet0;
      $lpad$phi$index = $88;
      $lpad$phi$index10 = $89;
     } else if ((label | 0) == 23) {
      $100 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $101 = tempRet0;
      $lpad$phi$index = $100;
      $lpad$phi$index10 = $101;
     } else if ((label | 0) == 24) {
      $102 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $103 = tempRet0;
      $lpad$phi$index = $102;
      $lpad$phi$index10 = $103;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
     $$1 = $lpad$phi$index;
     $$14 = $lpad$phi$index10;
     break L16;
    }
   } while (0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($$1 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 24 | 0;
 $__wbuf = sp + 32 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 28 | 0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb >> 2] = $1;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 478;
 $3 = $__wbuf + 100 | 0;
 __THREW__ = 0;
 $4 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $34 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $35 = tempRet0;
  HEAP32[$__wb >> 2] = 0;
  $$011 = $34;
  $$019 = $35;
  $96 = $__wbuf;
  label = 36;
 } else {
  HEAP32[$__loc >> 2] = $4;
  __THREW__ = 0;
  $7 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = __THREW__;
  __THREW__ = 0;
  $9 = $8 & 1;
  L4 : do {
   if (!$9) {
    HEAP8[$__neg >> 0] = 0;
    $10 = HEAP32[$__e >> 2] | 0;
    HEAP32[$0 >> 2] = $10;
    $11 = $__iob + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $10;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
    $14 = (tempInt = invoke_iiiiiiiiiiii(479, $__b | 0, $$byval_copy | 0, $__intl | 0, $__loc | 0, $12 | 0, $__err | 0, $__neg | 0, $7 | 0, $__wb | 0, $__wn | 0, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = __THREW__;
    __THREW__ = 0;
    $16 = $15 & 1;
    if (!$16) {
     if ($14) {
      $17 = HEAP8[$__v >> 0] | 0;
      $18 = $17 & 1;
      $19 = $18 << 24 >> 24 == 0;
      if ($19) {
       $23 = $__v + 1 | 0;
       HEAP8[$23 >> 0] = 0;
       HEAP8[$__v >> 0] = 0;
      } else {
       $20 = $__v + 8 | 0;
       $21 = HEAP32[$20 >> 2] | 0;
       HEAP8[$21 >> 0] = 0;
       $22 = $__v + 4 | 0;
       HEAP32[$22 >> 2] = 0;
      }
      $24 = HEAP8[$__neg >> 0] | 0;
      $25 = $24 << 24 >> 24 == 0;
      if (!$25) {
       $26 = HEAP32[$7 >> 2] | 0;
       $27 = $26 + 28 | 0;
       $28 = HEAP32[$27 >> 2] | 0;
       __THREW__ = 0;
       $29 = (tempInt = invoke_iii($28 | 0, $7 | 0, 45) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $30 = __THREW__;
       __THREW__ = 0;
       $31 = $30 & 1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(407, $__v | 0, $29 | 0), asyncState ? abort(-12) | 0 : 0;
       $32 = __THREW__;
       __THREW__ = 0;
       $33 = $32 & 1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7 >> 2] | 0;
      $37 = $36 + 28 | 0;
      $38 = HEAP32[$37 >> 2] | 0;
      __THREW__ = 0;
      $39 = (tempInt = invoke_iii($38 | 0, $7 | 0, 48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $40 = __THREW__;
      __THREW__ = 0;
      $41 = $40 & 1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb >> 2] | 0;
      $43 = HEAP32[$__wn >> 2] | 0;
      $44 = $43 + -1 | 0;
      $45 = $42 >>> 0 < $44 >>> 0;
      L18 : do {
       if ($45) {
        $__w$013 = $42;
        while (1) {
         $46 = HEAP8[$__w$013 >> 0] | 0;
         $47 = $46 << 24 >> 24 == $39 << 24 >> 24;
         if (!$47) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $48 = $__w$013 + 1 | 0;
         $49 = $48 >>> 0 < $44 >>> 0;
         if ($49) {
          $__w$013 = $48;
         } else {
          $__w$0$lcssa = $48;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $42;
       }
      } while (0);
      __THREW__ = 0;
      (tempInt = invoke_iiii(485, $__v | 0, $__w$0$lcssa | 0, $43 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $50 = __THREW__;
      __THREW__ = 0;
      $51 = $50 & 1;
      if ($51) {
       break;
      }
     }
     $52 = HEAP32[$__b >> 2] | 0;
     $53 = ($52 | 0) == (0 | 0);
     do {
      if ($53) {
       $67 = 0;
      } else {
       $54 = $52 + 12 | 0;
       $55 = HEAP32[$54 >> 2] | 0;
       $56 = $52 + 16 | 0;
       $57 = HEAP32[$56 >> 2] | 0;
       $58 = ($55 | 0) == ($57 | 0);
       if ($58) {
        $59 = HEAP32[$52 >> 2] | 0;
        $60 = $59 + 36 | 0;
        $61 = HEAP32[$60 >> 2] | 0;
        __THREW__ = 0;
        $62 = (tempInt = invoke_ii($61 | 0, $52 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $63 = __THREW__;
        __THREW__ = 0;
        $64 = $63 & 1;
        if ($64) {
         break L4;
        }
        $65 = ($62 | 0) == -1;
        if ($65) {
         HEAP32[$__b >> 2] = 0;
         $67 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
         $67 = $$pre$i$i$i;
         break;
        }
       } else {
        $67 = $52;
       }
      }
     } while (0);
     $66 = ($67 | 0) == (0 | 0);
     $68 = ($10 | 0) == 0;
     do {
      if ($68) {
       label = 29;
      } else {
       $69 = $13 + 12 | 0;
       $70 = HEAP32[$69 >> 2] | 0;
       $71 = $13 + 16 | 0;
       $72 = HEAP32[$71 >> 2] | 0;
       $73 = ($70 | 0) == ($72 | 0);
       if ($73) {
        $74 = $10;
        $75 = HEAP32[$74 >> 2] | 0;
        $76 = $75 + 36 | 0;
        $77 = HEAP32[$76 >> 2] | 0;
        __THREW__ = 0;
        $78 = (tempInt = invoke_ii($77 | 0, $13 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $79 = __THREW__;
        __THREW__ = 0;
        $80 = $79 & 1;
        if ($80) {
         break L4;
        }
        $81 = ($78 | 0) == -1;
        if ($81) {
         HEAP32[$__e >> 2] = 0;
         label = 29;
         break;
        }
       }
       if (!$66) {
        label = 30;
       }
      }
     } while (0);
     if ((label | 0) == 29) {
      if ($66) {
       label = 30;
      }
     }
     if ((label | 0) == 30) {
      $82 = HEAP32[$__err >> 2] | 0;
      $83 = $82 | 2;
      HEAP32[$__err >> 2] = $83;
     }
     $84 = HEAP32[$__b >> 2] | 0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $85 = HEAP32[$__wb >> 2] | 0;
     HEAP32[$__wb >> 2] = 0;
     $86 = ($85 | 0) == (0 | 0);
     if (!$86) {
      $87 = HEAP32[$2 >> 2] | 0;
      __THREW__ = 0;
      invoke_vi($87 | 0, $85 | 0), asyncState ? abort(-12) | 0 : 0;
      $88 = __THREW__;
      __THREW__ = 0;
      $89 = $88 & 1;
      if ($89) {
       $90 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $91 = tempRet0;
       ___clang_call_terminate($90), asyncState ? abort(-12) | 0 : 0;
      }
     }
     STACKTOP = sp;
     return $84 | 0;
    }
   }
  } while (0);
  $92 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $93 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$pre = HEAP32[$__wb >> 2] | 0;
  HEAP32[$__wb >> 2] = 0;
  $94 = ($$pre | 0) == (0 | 0);
  if ($94) {
   $$0110 = $93;
   $$012 = $92;
  } else {
   $$011 = $92;
   $$019 = $93;
   $96 = $$pre;
   label = 36;
  }
 }
 if ((label | 0) == 36) {
  $95 = HEAP32[$2 >> 2] | 0;
  __THREW__ = 0;
  invoke_vi($95 | 0, $96 | 0), asyncState ? abort(-12) | 0 : 0;
  $97 = __THREW__;
  __THREW__ = 0;
  $98 = $97 & 1;
  if ($98) {
   $99 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $100 = tempRet0;
   ___clang_call_terminate($99), asyncState ? abort(-12) | 0 : 0;
  } else {
   $$0110 = $$019;
   $$012 = $$011;
  }
 }
 ___resumeException($$012 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$150 = 0, $frm_nxt$2 = 0, $nchar16_t$049 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond48 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0 | 0) == 0;
 $$pre = $frm_end;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = $$pre - $2 | 0;
  $4 = ($3 | 0) > 2;
  if ($4) {
   $5 = HEAP8[$frm >> 0] | 0;
   $6 = $5 << 24 >> 24 == -17;
   if ($6) {
    $7 = $frm + 1 | 0;
    $8 = HEAP8[$7 >> 0] | 0;
    $9 = $8 << 24 >> 24 == -69;
    if ($9) {
     $10 = $frm + 2 | 0;
     $11 = HEAP8[$10 >> 0] | 0;
     $12 = $11 << 24 >> 24 == -65;
     $13 = $frm + 3 | 0;
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = $frm_nxt$1$ph >>> 0 < $frm_end >>> 0;
 $15 = ($mx | 0) != 0;
 $or$cond48 = $15 & $14;
 L7 : do {
  if ($or$cond48) {
   $frm_nxt$150 = $frm_nxt$1$ph;
   $nchar16_t$049 = 0;
   L8 : while (1) {
    $16 = HEAP8[$frm_nxt$150 >> 0] | 0;
    $17 = $16 & 255;
    $18 = $17 >>> 0 > $Maxcode >>> 0;
    if ($18) {
     $frm_nxt$1$lcssa = $frm_nxt$150;
     label = 42;
     break L7;
    }
    $19 = $16 << 24 >> 24 > -1;
    do {
     if ($19) {
      $20 = $frm_nxt$150 + 1 | 0;
      $frm_nxt$2 = $20;
      $nchar16_t$1 = $nchar16_t$049;
     } else {
      $21 = ($16 & 255) < 194;
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $22 = ($16 & 255) < 224;
      if ($22) {
       $23 = $frm_nxt$150;
       $24 = $$pre - $23 | 0;
       $25 = ($24 | 0) < 2;
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $26 = $frm_nxt$150 + 1 | 0;
       $27 = HEAP8[$26 >> 0] | 0;
       $28 = $27 & 255;
       $29 = $28 & 192;
       $30 = ($29 | 0) == 128;
       if (!$30) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = $34 >>> 0 > $Maxcode >>> 0;
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $36 = $frm_nxt$150 + 2 | 0;
       $frm_nxt$2 = $36;
       $nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $37 = ($16 & 255) < 240;
      if ($37) {
       $38 = $frm_nxt$150;
       $39 = $$pre - $38 | 0;
       $40 = ($39 | 0) < 3;
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $41 = $frm_nxt$150 + 1 | 0;
       $42 = HEAP8[$41 >> 0] | 0;
       $43 = $frm_nxt$150 + 2 | 0;
       $44 = HEAP8[$43 >> 0] | 0;
       switch ($17 | 0) {
       case 224:
        {
         $45 = $42 & -32;
         $46 = $45 << 24 >> 24 == -96;
         if (!$46) {
          $$lcssa85 = $38;
          label = 20;
          break L8;
         }
         break;
        }
       case 237:
        {
         $49 = $42 & -32;
         $50 = $49 << 24 >> 24 == -128;
         if (!$50) {
          $$lcssa84 = $38;
          label = 22;
          break L8;
         }
         break;
        }
       default:
        {
         $53 = $42 & -64;
         $54 = $53 << 24 >> 24 == -128;
         if (!$54) {
          $$lcssa86 = $38;
          label = 24;
          break L8;
         }
        }
       }
       $57 = $44 & 255;
       $58 = $57 & 192;
       $59 = ($58 | 0) == 128;
       if (!$59) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42 & 255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = $67 >>> 0 > $Maxcode >>> 0;
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $69 = $frm_nxt$150 + 3 | 0;
       $frm_nxt$2 = $69;
       $nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $70 = ($16 & 255) < 245;
      if (!$70) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$150;
      $72 = $$pre - $71 | 0;
      $73 = ($72 | 0) < 4;
      $74 = $mx - $nchar16_t$049 | 0;
      $75 = $74 >>> 0 < 2;
      $or$cond2 = $75 | $73;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $76 = $frm_nxt$150 + 1 | 0;
      $77 = HEAP8[$76 >> 0] | 0;
      $78 = $frm_nxt$150 + 2 | 0;
      $79 = HEAP8[$78 >> 0] | 0;
      $80 = $frm_nxt$150 + 3 | 0;
      $81 = HEAP8[$80 >> 0] | 0;
      switch ($17 | 0) {
      case 240:
       {
        $$off = $77 + 112 << 24 >> 24;
        $82 = ($$off & 255) < 48;
        if (!$82) {
         $$lcssa82 = $71;
         label = 32;
         break L8;
        }
        break;
       }
      case 244:
       {
        $85 = $77 & -16;
        $86 = $85 << 24 >> 24 == -128;
        if (!$86) {
         $$lcssa = $71;
         label = 34;
         break L8;
        }
        break;
       }
      default:
       {
        $89 = $77 & -64;
        $90 = $89 << 24 >> 24 == -128;
        if (!$90) {
         $$lcssa83 = $71;
         label = 36;
         break L8;
        }
       }
      }
      $93 = $79 & 255;
      $94 = $93 & 192;
      $95 = ($94 | 0) == 128;
      if (!$95) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $96 = $81 & 255;
      $97 = $96 & 192;
      $98 = ($97 | 0) == 128;
      if (!$98) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $99 = $17 << 18;
      $100 = $99 & 1835008;
      $101 = $77 & 255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = $109 >>> 0 > $Maxcode >>> 0;
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $111 = $nchar16_t$049 + 1 | 0;
      $112 = $frm_nxt$150 + 4 | 0;
      $frm_nxt$2 = $112;
      $nchar16_t$1 = $111;
     }
    } while (0);
    $113 = $nchar16_t$1 + 1 | 0;
    $114 = $frm_nxt$2 >>> 0 < $frm_end >>> 0;
    $115 = $113 >>> 0 < $mx >>> 0;
    $or$cond = $115 & $114;
    if ($or$cond) {
     $frm_nxt$150 = $frm_nxt$2;
     $nchar16_t$049 = $113;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label | 0) == 20) {
    $47 = $frm;
    $48 = $$lcssa85 - $47 | 0;
    $$0 = $48;
    break;
   } else if ((label | 0) == 22) {
    $51 = $frm;
    $52 = $$lcssa84 - $51 | 0;
    $$0 = $52;
    break;
   } else if ((label | 0) == 24) {
    $55 = $frm;
    $56 = $$lcssa86 - $55 | 0;
    $$0 = $56;
    break;
   } else if ((label | 0) == 32) {
    $83 = $frm;
    $84 = $$lcssa82 - $83 | 0;
    $$0 = $84;
    break;
   } else if ((label | 0) == 34) {
    $87 = $frm;
    $88 = $$lcssa - $87 | 0;
    $$0 = $88;
    break;
   } else if ((label | 0) == 36) {
    $91 = $frm;
    $92 = $$lcssa83 - $91 | 0;
    $$0 = $92;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while (0);
 if ((label | 0) == 42) {
  $116 = $frm_nxt$1$lcssa;
  $117 = $frm;
  $118 = $116 - $117 | 0;
  $$0 = $118;
 }
 return $$0 | 0;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$148 = 0, $frm_nxt$2 = 0, $nchar32_t$047 = 0, $or$cond = 0, $or$cond46 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0 | 0) == 0;
 $$pre = $frm_end;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = $$pre - $2 | 0;
  $4 = ($3 | 0) > 2;
  if ($4) {
   $5 = HEAP8[$frm >> 0] | 0;
   $6 = $5 << 24 >> 24 == -17;
   if ($6) {
    $7 = $frm + 1 | 0;
    $8 = HEAP8[$7 >> 0] | 0;
    $9 = $8 << 24 >> 24 == -69;
    if ($9) {
     $10 = $frm + 2 | 0;
     $11 = HEAP8[$10 >> 0] | 0;
     $12 = $11 << 24 >> 24 == -65;
     $13 = $frm + 3 | 0;
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = $frm_nxt$1$ph >>> 0 < $frm_end >>> 0;
 $15 = ($mx | 0) != 0;
 $or$cond46 = $15 & $14;
 L7 : do {
  if ($or$cond46) {
   $frm_nxt$148 = $frm_nxt$1$ph;
   $nchar32_t$047 = 0;
   L8 : while (1) {
    $16 = HEAP8[$frm_nxt$148 >> 0] | 0;
    $17 = $16 & 255;
    $18 = $16 << 24 >> 24 > -1;
    do {
     if ($18) {
      $19 = $17 >>> 0 > $Maxcode >>> 0;
      if ($19) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $20 = $frm_nxt$148 + 1 | 0;
      $frm_nxt$2 = $20;
     } else {
      $21 = ($16 & 255) < 194;
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $22 = ($16 & 255) < 224;
      if ($22) {
       $23 = $frm_nxt$148;
       $24 = $$pre - $23 | 0;
       $25 = ($24 | 0) < 2;
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $26 = $frm_nxt$148 + 1 | 0;
       $27 = HEAP8[$26 >> 0] | 0;
       $28 = $27 & 255;
       $29 = $28 & 192;
       $30 = ($29 | 0) == 128;
       if (!$30) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = $34 >>> 0 > $Maxcode >>> 0;
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $36 = $frm_nxt$148 + 2 | 0;
       $frm_nxt$2 = $36;
       break;
      }
      $37 = ($16 & 255) < 240;
      if ($37) {
       $38 = $frm_nxt$148;
       $39 = $$pre - $38 | 0;
       $40 = ($39 | 0) < 3;
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $41 = $frm_nxt$148 + 1 | 0;
       $42 = HEAP8[$41 >> 0] | 0;
       $43 = $frm_nxt$148 + 2 | 0;
       $44 = HEAP8[$43 >> 0] | 0;
       switch ($17 | 0) {
       case 224:
        {
         $45 = $42 & -32;
         $46 = $45 << 24 >> 24 == -96;
         if (!$46) {
          $$lcssa83 = $38;
          label = 20;
          break L8;
         }
         break;
        }
       case 237:
        {
         $49 = $42 & -32;
         $50 = $49 << 24 >> 24 == -128;
         if (!$50) {
          $$lcssa82 = $38;
          label = 22;
          break L8;
         }
         break;
        }
       default:
        {
         $53 = $42 & -64;
         $54 = $53 << 24 >> 24 == -128;
         if (!$54) {
          $$lcssa84 = $38;
          label = 24;
          break L8;
         }
        }
       }
       $57 = $44 & 255;
       $58 = $57 & 192;
       $59 = ($58 | 0) == 128;
       if (!$59) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42 & 255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = $67 >>> 0 > $Maxcode >>> 0;
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $69 = $frm_nxt$148 + 3 | 0;
       $frm_nxt$2 = $69;
       break;
      }
      $70 = ($16 & 255) < 245;
      if (!$70) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$148;
      $72 = $$pre - $71 | 0;
      $73 = ($72 | 0) < 4;
      if ($73) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $74 = $frm_nxt$148 + 1 | 0;
      $75 = HEAP8[$74 >> 0] | 0;
      $76 = $frm_nxt$148 + 2 | 0;
      $77 = HEAP8[$76 >> 0] | 0;
      $78 = $frm_nxt$148 + 3 | 0;
      $79 = HEAP8[$78 >> 0] | 0;
      switch ($17 | 0) {
      case 240:
       {
        $$off = $75 + 112 << 24 >> 24;
        $80 = ($$off & 255) < 48;
        if (!$80) {
         $$lcssa80 = $71;
         label = 32;
         break L8;
        }
        break;
       }
      case 244:
       {
        $83 = $75 & -16;
        $84 = $83 << 24 >> 24 == -128;
        if (!$84) {
         $$lcssa = $71;
         label = 34;
         break L8;
        }
        break;
       }
      default:
       {
        $87 = $75 & -64;
        $88 = $87 << 24 >> 24 == -128;
        if (!$88) {
         $$lcssa81 = $71;
         label = 36;
         break L8;
        }
       }
      }
      $91 = $77 & 255;
      $92 = $91 & 192;
      $93 = ($92 | 0) == 128;
      if (!$93) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $94 = $79 & 255;
      $95 = $94 & 192;
      $96 = ($95 | 0) == 128;
      if (!$96) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $97 = $17 << 18;
      $98 = $97 & 1835008;
      $99 = $75 & 255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $91 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $94 & 63;
      $107 = $105 | $106;
      $108 = $107 >>> 0 > $Maxcode >>> 0;
      if ($108) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $109 = $frm_nxt$148 + 4 | 0;
      $frm_nxt$2 = $109;
     }
    } while (0);
    $110 = $nchar32_t$047 + 1 | 0;
    $111 = $frm_nxt$2 >>> 0 < $frm_end >>> 0;
    $112 = $110 >>> 0 < $mx >>> 0;
    $or$cond = $112 & $111;
    if ($or$cond) {
     $frm_nxt$148 = $frm_nxt$2;
     $nchar32_t$047 = $110;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label | 0) == 20) {
    $47 = $frm;
    $48 = $$lcssa83 - $47 | 0;
    $$0 = $48;
    break;
   } else if ((label | 0) == 22) {
    $51 = $frm;
    $52 = $$lcssa82 - $51 | 0;
    $$0 = $52;
    break;
   } else if ((label | 0) == 24) {
    $55 = $frm;
    $56 = $$lcssa84 - $55 | 0;
    $$0 = $56;
    break;
   } else if ((label | 0) == 32) {
    $81 = $frm;
    $82 = $$lcssa80 - $81 | 0;
    $$0 = $82;
    break;
   } else if ((label | 0) == 34) {
    $85 = $frm;
    $86 = $$lcssa - $85 | 0;
    $$0 = $86;
    break;
   } else if ((label | 0) == 36) {
    $89 = $frm;
    $90 = $$lcssa81 - $89 | 0;
    $$0 = $90;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while (0);
 if ((label | 0) == 42) {
  $113 = $frm_nxt$1$lcssa;
  $114 = $frm;
  $115 = $113 - $114 | 0;
  $$0 = $115;
 }
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer15token_type_nameENSB_10token_typeE($agg$result, $t) {
 $agg$result = $agg$result | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $70 = $t;
 $71 = $70;
 do {
  switch ($71 | 0) {
  case 0:
   {
    $68 = $agg$result;
    $69 = 14566;
    $72 = $68;
    $67 = $72;
    $73 = $67;
    $66 = $73;
    $74 = $66;
    $65 = $74;
    $75 = $69;
    $76 = $69;
    $77 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($76) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($72, $75, $77), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 1:
   {
    $63 = $agg$result;
    $64 = 14582;
    $78 = $63;
    $62 = $78;
    $79 = $62;
    $61 = $79;
    $80 = $61;
    $60 = $80;
    $81 = $64;
    $82 = $64;
    $83 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($82) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($78, $81, $83), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 2:
   {
    $58 = $agg$result;
    $59 = 14595;
    $84 = $58;
    $57 = $84;
    $85 = $57;
    $56 = $85;
    $86 = $56;
    $55 = $86;
    $87 = $59;
    $88 = $59;
    $89 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($84, $87, $89), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 3:
   {
    $53 = $agg$result;
    $54 = 14609;
    $90 = $53;
    $52 = $90;
    $91 = $52;
    $51 = $91;
    $92 = $51;
    $50 = $92;
    $93 = $54;
    $94 = $54;
    $95 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($94) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($90, $93, $95), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 4:
   {
    $48 = $agg$result;
    $49 = 14622;
    $96 = $48;
    $47 = $96;
    $97 = $47;
    $46 = $97;
    $98 = $46;
    $45 = $98;
    $99 = $49;
    $100 = $49;
    $101 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($100) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($96, $99, $101), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 5:
   {
    $43 = $agg$result;
    $44 = 14637;
    $102 = $43;
    $42 = $102;
    $103 = $42;
    $41 = $103;
    $104 = $41;
    $40 = $104;
    $105 = $44;
    $106 = $44;
    $107 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($106) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($102, $105, $107), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 6:
   {
    $38 = $agg$result;
    $39 = 14192;
    $108 = $38;
    $37 = $108;
    $109 = $37;
    $36 = $109;
    $110 = $36;
    $35 = $110;
    $111 = $39;
    $112 = $39;
    $113 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($112) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($108, $111, $113), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 7:
   {
    $33 = $agg$result;
    $34 = 14171;
    $114 = $33;
    $32 = $114;
    $115 = $32;
    $31 = $115;
    $116 = $31;
    $30 = $116;
    $117 = $34;
    $118 = $34;
    $119 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($118) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($114, $117, $119), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 8:
   {
    $28 = $agg$result;
    $29 = 14194;
    $120 = $28;
    $27 = $120;
    $121 = $27;
    $26 = $121;
    $122 = $26;
    $25 = $122;
    $123 = $29;
    $124 = $29;
    $125 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($124) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($120, $123, $125), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 9:
   {
    $23 = $agg$result;
    $24 = 14187;
    $126 = $23;
    $22 = $126;
    $127 = $22;
    $21 = $127;
    $128 = $21;
    $20 = $128;
    $129 = $24;
    $130 = $24;
    $131 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($130) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($126, $129, $131), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 10:
   {
    $18 = $agg$result;
    $19 = 14652;
    $132 = $18;
    $17 = $132;
    $133 = $17;
    $16 = $133;
    $134 = $16;
    $15 = $134;
    $135 = $19;
    $136 = $19;
    $137 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($136) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($132, $135, $137), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 11:
   {
    $13 = $agg$result;
    $14 = 14178;
    $138 = $13;
    $12 = $138;
    $139 = $12;
    $11 = $139;
    $140 = $11;
    $10 = $140;
    $141 = $14;
    $142 = $14;
    $143 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($142) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($138, $141, $143), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 13:
   {
    $8 = $agg$result;
    $9 = 14654;
    $144 = $8;
    $7 = $144;
    $145 = $7;
    $6 = $145;
    $146 = $6;
    $5 = $146;
    $147 = $9;
    $148 = $9;
    $149 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($148) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($144, $147, $149), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
    break;
   }
  default:
   {
    $3 = $agg$result;
    $4 = 14669;
    $150 = $3;
    $2 = $150;
    $151 = $2;
    $1 = $151;
    $152 = $1;
    $0 = $152;
    $153 = $4;
    $154 = $4;
    $155 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($154) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($150, $153, $155), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $0 = $mode & 4;
 $1 = ($0 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;
  $$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  $4 = $2;
  $5 = $3 - $4 | 0;
  $6 = ($5 | 0) > 2;
  if ($6) {
   $7 = HEAP8[$2 >> 0] | 0;
   $8 = $7 << 24 >> 24 == -17;
   if ($8) {
    $9 = $2 + 1 | 0;
    $10 = HEAP8[$9 >> 0] | 0;
    $11 = $10 << 24 >> 24 == -69;
    if ($11) {
     $12 = $2 + 2 | 0;
     $13 = HEAP8[$12 >> 0] | 0;
     $14 = $13 << 24 >> 24 == -65;
     if ($14) {
      $15 = $2 + 3 | 0;
      HEAP32[$frm_nxt >> 2] = $15;
      $$pre$pre = HEAP32[$to_nxt >> 2] | 0;
      $$pre = $$pre$pre;
      $$pre$phiZ2D = $3;
     } else {
      $$pre = $to;
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;
   $$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 $17 = HEAP32[$frm_nxt >> 2] | 0;
 $18 = $17 >>> 0 < $frm_end >>> 0;
 $19 = $$pre >>> 0 < $to_end >>> 0;
 $20 = $18 & $19;
 L9 : do {
  if ($20) {
   $22 = $17;
   $27 = $$pre;
   while (1) {
    $21 = HEAP8[$22 >> 0] | 0;
    $23 = $21 & 255;
    $24 = $23 >>> 0 > $Maxcode >>> 0;
    if ($24) {
     $$0 = 2;
     break L9;
    }
    $25 = $21 << 24 >> 24 > -1;
    do {
     if ($25) {
      $26 = $21 & 255;
      HEAP16[$27 >> 1] = $26;
      $28 = $22 + 1 | 0;
      HEAP32[$frm_nxt >> 2] = $28;
     } else {
      $29 = ($21 & 255) < 194;
      if ($29) {
       $$0 = 2;
       break L9;
      }
      $30 = ($21 & 255) < 224;
      if ($30) {
       $31 = $22;
       $32 = $$pre$phiZ2D - $31 | 0;
       $33 = ($32 | 0) < 2;
       if ($33) {
        $$0 = 1;
        break L9;
       }
       $34 = $22 + 1 | 0;
       $35 = HEAP8[$34 >> 0] | 0;
       $36 = $35 & 255;
       $37 = $36 & 192;
       $38 = ($37 | 0) == 128;
       if (!$38) {
        $$0 = 2;
        break L9;
       }
       $39 = $23 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = $42 >>> 0 > $Maxcode >>> 0;
       if ($43) {
        $$0 = 2;
        break L9;
       }
       $44 = $42 & 65535;
       HEAP16[$27 >> 1] = $44;
       $45 = $22 + 2 | 0;
       HEAP32[$frm_nxt >> 2] = $45;
       break;
      }
      $46 = ($21 & 255) < 240;
      if ($46) {
       $47 = $22;
       $48 = $$pre$phiZ2D - $47 | 0;
       $49 = ($48 | 0) < 3;
       if ($49) {
        $$0 = 1;
        break L9;
       }
       $50 = $22 + 1 | 0;
       $51 = HEAP8[$50 >> 0] | 0;
       $52 = $22 + 2 | 0;
       $53 = HEAP8[$52 >> 0] | 0;
       switch ($23 | 0) {
       case 224:
        {
         $54 = $51 & -32;
         $55 = $54 << 24 >> 24 == -96;
         if (!$55) {
          $$0 = 2;
          break L9;
         }
         break;
        }
       case 237:
        {
         $56 = $51 & -32;
         $57 = $56 << 24 >> 24 == -128;
         if (!$57) {
          $$0 = 2;
          break L9;
         }
         break;
        }
       default:
        {
         $58 = $51 & -64;
         $59 = $58 << 24 >> 24 == -128;
         if (!$59) {
          $$0 = 2;
          break L9;
         }
        }
       }
       $60 = $53 & 255;
       $61 = $60 & 192;
       $62 = ($61 | 0) == 128;
       if (!$62) {
        $$0 = 2;
        break L9;
       }
       $63 = $23 << 12;
       $64 = $51 & 255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = $70 >>> 0 > $Maxcode >>> 0;
       if ($71) {
        $$0 = 2;
        break L9;
       }
       $72 = $69 & 65535;
       HEAP16[$27 >> 1] = $72;
       $73 = $22 + 3 | 0;
       HEAP32[$frm_nxt >> 2] = $73;
       break;
      }
      $74 = ($21 & 255) < 245;
      if (!$74) {
       $$0 = 2;
       break L9;
      }
      $75 = $22;
      $76 = $$pre$phiZ2D - $75 | 0;
      $77 = ($76 | 0) < 4;
      if ($77) {
       $$0 = 1;
       break L9;
      }
      $78 = $22 + 1 | 0;
      $79 = HEAP8[$78 >> 0] | 0;
      $80 = $22 + 2 | 0;
      $81 = HEAP8[$80 >> 0] | 0;
      $82 = $22 + 3 | 0;
      $83 = HEAP8[$82 >> 0] | 0;
      switch ($23 | 0) {
      case 240:
       {
        $$off = $79 + 112 << 24 >> 24;
        $84 = ($$off & 255) < 48;
        if (!$84) {
         $$0 = 2;
         break L9;
        }
        break;
       }
      case 244:
       {
        $85 = $79 & -16;
        $86 = $85 << 24 >> 24 == -128;
        if (!$86) {
         $$0 = 2;
         break L9;
        }
        break;
       }
      default:
       {
        $87 = $79 & -64;
        $88 = $87 << 24 >> 24 == -128;
        if (!$88) {
         $$0 = 2;
         break L9;
        }
       }
      }
      $89 = $81 & 255;
      $90 = $89 & 192;
      $91 = ($90 | 0) == 128;
      if (!$91) {
       $$0 = 2;
       break L9;
      }
      $92 = $83 & 255;
      $93 = $92 & 192;
      $94 = ($93 | 0) == 128;
      if (!$94) {
       $$0 = 2;
       break L9;
      }
      $95 = $27;
      $96 = $16 - $95 | 0;
      $97 = ($96 | 0) < 4;
      if ($97) {
       $$0 = 1;
       break L9;
      }
      $98 = $23 & 7;
      $99 = $98 << 18;
      $100 = $79 & 255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = $108 >>> 0 > $Maxcode >>> 0;
      if ($109) {
       $$0 = 2;
       break L9;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = $114 + 16320 | 0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122 & 65535;
      HEAP16[$27 >> 1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126 & 65535;
      $128 = $27 + 2 | 0;
      HEAP32[$to_nxt >> 2] = $128;
      HEAP16[$128 >> 1] = $127;
      $129 = HEAP32[$frm_nxt >> 2] | 0;
      $130 = $129 + 4 | 0;
      HEAP32[$frm_nxt >> 2] = $130;
     }
    } while (0);
    $131 = HEAP32[$to_nxt >> 2] | 0;
    $132 = $131 + 2 | 0;
    HEAP32[$to_nxt >> 2] = $132;
    $133 = HEAP32[$frm_nxt >> 2] | 0;
    $134 = $133 >>> 0 < $frm_end >>> 0;
    $135 = $132 >>> 0 < $to_end >>> 0;
    $136 = $134 & $135;
    if ($136) {
     $22 = $133;
     $27 = $132;
    } else {
     $$lcssa = $134;
     label = 39;
     break;
    }
   }
  } else {
   $$lcssa = $18;
   label = 39;
  }
 } while (0);
 if ((label | 0) == 39) {
  $137 = $$lcssa & 1;
  $$0 = $137;
 }
 return $$0 | 0;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os, $__str, $__len) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 $__len = $__len | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 108 | 0;
 $5 = sp + 92 | 0;
 $__s = sp + 16 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $27 | 0), asyncState ? abort(-12) | 0 : 0;
 $28 = __THREW__;
 __THREW__ = 0;
 $29 = $28 & 1;
 L1 : do {
  if ($29) {
   $123 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $124 = tempRet0;
   $23 = $123;
   $24 = $124;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30 >> 0] | 0;
   $32 = $31 & 1;
   do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35 >> 2] | 0;
     $37 = $36 + -12 | 0;
     $38 = HEAP32[$37 >> 2] | 0;
     $39 = $35 + $38 | 0;
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = $41 + 24 | 0;
     $43 = HEAP32[$42 >> 2] | 0;
     HEAP32[$34 >> 2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45 >> 2] | 0;
     $47 = $46 + -12 | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     $49 = $45 + $48 | 0;
     $10 = $49;
     $50 = $10;
     $51 = $50 + 4 | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = $52 & 176;
     $54 = ($53 | 0) == 32;
     $55 = $21;
     $56 = $22;
     $57 = $55 + $56 | 0;
     $58 = $54 ? $57 : $55;
     $59 = $21;
     $60 = $22;
     $61 = $59 + $60 | 0;
     $62 = $20;
     $63 = HEAP32[$62 >> 2] | 0;
     $64 = $63 + -12 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     $66 = $62 + $65 | 0;
     $67 = $20;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = $68 + -12 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     $71 = $67 + $70 | 0;
     $8 = $71;
     $72 = $8;
     $73 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $74 = $72 + 76 | 0;
     $75 = HEAP32[$74 >> 2] | 0;
     $76 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($73, $75) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       $78 = (tempInt = invoke_ii(417, $77 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $79 = __THREW__;
       __THREW__ = 0;
       $80 = $79 & 1;
       if ($80) {
        label = 13;
       } else {
        HEAP32[$5 >> 2] = $78;
        $2 = $5;
        $81 = $2;
        __THREW__ = 0;
        $82 = (tempInt = invoke_iii(398, $81 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $83 = __THREW__;
        __THREW__ = 0;
        $84 = $83 & 1;
        if (!$84) {
         $85 = $4;
         $0 = $82;
         $1 = $85;
         $86 = $0;
         $87 = HEAP32[$86 >> 2] | 0;
         $88 = $87 + 28 | 0;
         $89 = HEAP32[$88 >> 2] | 0;
         $90 = $1;
         __THREW__ = 0;
         $91 = (tempInt = invoke_iii($89 | 0, $86 | 0, $90 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $92 = __THREW__;
         __THREW__ = 0;
         $93 = $92 & 1;
         if (!$93) {
          __ZNSt3__16localeD2Ev($5), asyncState ? abort(-12) | 0 : 0;
          $98 = $91 << 24 >> 24;
          $99 = $72 + 76 | 0;
          HEAP32[$99 >> 2] = $98;
          label = 9;
          break;
         }
        }
        $94 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $95 = tempRet0;
        $6 = $94;
        $7 = $95;
        __ZNSt3__16localeD2Ev($5), asyncState ? abort(-12) | 0 : 0;
        $96 = $6;
        $97 = $7;
        $eh$lpad$body$index2Z2D = $97;
        $eh$lpad$body$indexZ2D = $96;
       }
      } else {
       label = 9;
      }
     } while (0);
     if ((label | 0) == 9) {
      $100 = $72 + 76 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      $102 = $101 & 255;
      __THREW__ = 0;
      HEAP32[$$byval_copy >> 2] = HEAP32[$25 >> 2] | 0;
      $103 = (tempInt = invoke_iiiiiii(446, $$byval_copy | 0, $44 | 0, $58 | 0, $61 | 0, $66 | 0, $102 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $104 = __THREW__;
      __THREW__ = 0;
      $105 = $104 & 1;
      if ($105) {
       label = 13;
      } else {
       HEAP32[$26 >> 2] = $103;
       $9 = $26;
       $106 = $9;
       $107 = HEAP32[$106 >> 2] | 0;
       $108 = ($107 | 0) == (0 | 0);
       if (!$108) {
        break;
       }
       $109 = $20;
       $110 = HEAP32[$109 >> 2] | 0;
       $111 = $110 + -12 | 0;
       $112 = HEAP32[$111 >> 2] | 0;
       $113 = $109 + $112 | 0;
       $13 = $113;
       $14 = 5;
       $114 = $13;
       $115 = $14;
       $11 = $114;
       $12 = $115;
       $116 = $11;
       $117 = $116 + 16 | 0;
       $118 = HEAP32[$117 >> 2] | 0;
       $119 = $12;
       $120 = $118 | $119;
       __THREW__ = 0;
       invoke_vii(394, $116 | 0, $120 | 0), asyncState ? abort(-12) | 0 : 0;
       $121 = __THREW__;
       __THREW__ = 0;
       $122 = $121 & 1;
       if ($122) {
        label = 13;
       } else {
        break;
       }
      }
     }
     if ((label | 0) == 13) {
      $125 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $126 = tempRet0;
      $eh$lpad$body$index2Z2D = $126;
      $eh$lpad$body$indexZ2D = $125;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
   $135 = $20;
   STACKTOP = sp;
   return $135 | 0;
  }
 } while (0);
 $127 = $23;
 (tempInt = ___cxa_begin_catch($127 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $128 = $20;
 $129 = HEAP32[$128 >> 2] | 0;
 $130 = $129 + -12 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 $132 = $128 + $131 | 0;
 __THREW__ = 0;
 invoke_vi(420, $132 | 0), asyncState ? abort(-12) | 0 : 0;
 $133 = __THREW__;
 __THREW__ = 0;
 $134 = $133 & 1;
 if (!$134) {
  ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
  $135 = $20;
  STACKTOP = sp;
  return $135 | 0;
 }
 $136 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $137 = tempRet0;
 $23 = $136;
 $24 = $137;
 __THREW__ = 0;
 invoke_v(409), asyncState ? abort(-12) | 0 : 0;
 $138 = __THREW__;
 __THREW__ = 0;
 $139 = $138 & 1;
 if ($139) {
  $142 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $143 = tempRet0;
  ___clang_call_terminate($142), asyncState ? abort(-12) | 0 : 0;
 } else {
  $140 = $23;
  $141 = $24;
  ___resumeException($140 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEEixEOS6_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $6 = sp + 24 | 0;
 $9 = sp + 343 | 0;
 $20 = sp + 16 | 0;
 $23 = sp + 342 | 0;
 $46 = sp + 8 | 0;
 $49 = sp + 341 | 0;
 $60 = sp;
 $63 = sp + 340 | 0;
 $__parent = sp + 56 | 0;
 $__h = sp + 36 | 0;
 $73 = $this;
 $74 = $__k;
 $77 = $73;
 $78 = $74;
 $79 = (tempInt = __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSE_($77, $__parent, $78) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__child = $79;
 $80 = $__child;
 $81 = HEAP32[$80 >> 2] | 0;
 $__r = $81;
 $82 = $__child;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = ($83 | 0) == (0 | 0);
 if (!$84) {
  $194 = $__r;
  $195 = $194 + 16 | 0;
  $196 = $195 + 16 | 0;
  STACKTOP = sp;
  return $196 | 0;
 }
 $85 = $74;
 $72 = $85;
 $86 = $72;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE25__construct_node_with_keyEOS6_($__h, $77, $86), asyncState ? abort(-12) | 0 : 0;
 $87 = HEAP32[$__parent >> 2] | 0;
 $88 = $__child;
 $39 = $__h;
 $89 = $39;
 $38 = $89;
 $90 = $38;
 $37 = $90;
 $91 = $37;
 $92 = HEAP32[$91 >> 2] | 0;
 __THREW__ = 0;
 invoke_viiii(438, $77 | 0, $87 | 0, $88 | 0, $92 | 0), asyncState ? abort(-12) | 0 : 0;
 $93 = __THREW__;
 __THREW__ = 0;
 $94 = $93 & 1;
 if ($94) {
  $147 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $148 = tempRet0;
  $75 = $147;
  $76 = $148;
  $71 = $__h;
  $149 = $71;
  $69 = $149;
  $70 = 0;
  $150 = $69;
  $68 = $150;
  $151 = $68;
  $67 = $151;
  $152 = $67;
  $153 = HEAP32[$152 >> 2] | 0;
  $__tmp$i$i = $153;
  $154 = $70;
  $43 = $150;
  $155 = $43;
  $42 = $155;
  $156 = $42;
  HEAP32[$156 >> 2] = $154;
  $157 = $__tmp$i$i;
  $158 = ($157 | 0) != (0 | 0);
  if (!$158) {
   $197 = $75;
   $198 = $76;
   ___resumeException($197 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $41 = $150;
  $159 = $41;
  $40 = $159;
  $160 = $40;
  $161 = $160 + 4 | 0;
  $162 = $__tmp$i$i;
  $65 = $161;
  $66 = $162;
  $163 = $65;
  $164 = $163 + 5 | 0;
  $165 = HEAP8[$164 >> 0] | 0;
  $166 = $165 & 1;
  if ($166) {
   $167 = HEAP32[$163 >> 2] | 0;
   $168 = $66;
   $169 = $168 + 16 | 0;
   $170 = $169 + 16 | 0;
   $64 = $170;
   $171 = $64;
   $61 = $167;
   $62 = $171;
   $172 = $61;
   $173 = $62;
   HEAP8[$60 >> 0] = HEAP8[$63 >> 0] | 0;
   $58 = $172;
   $59 = $173;
   $174 = $59;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($174), asyncState ? abort(-12) | 0 : 0;
  }
  $175 = $163 + 4 | 0;
  $176 = HEAP8[$175 >> 0] | 0;
  $177 = $176 & 1;
  if ($177) {
   $178 = HEAP32[$163 >> 2] | 0;
   $179 = $66;
   $180 = $179 + 16 | 0;
   $57 = $180;
   $181 = $57;
   $47 = $178;
   $48 = $181;
   $182 = $47;
   $183 = $48;
   HEAP8[$46 >> 0] = HEAP8[$49 >> 0] | 0;
   $44 = $182;
   $45 = $183;
   $184 = $45;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($184), asyncState ? abort(-12) | 0 : 0;
  }
  $185 = $66;
  $186 = ($185 | 0) != (0 | 0);
  if (!$186) {
   $197 = $75;
   $198 = $76;
   ___resumeException($197 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $187 = HEAP32[$163 >> 2] | 0;
  $188 = $66;
  $54 = $187;
  $55 = $188;
  $56 = 1;
  $189 = $54;
  $190 = $55;
  $191 = $56;
  $51 = $189;
  $52 = $190;
  $53 = $191;
  $192 = $52;
  $50 = $192;
  $193 = $50;
  __ZdlPv($193), asyncState ? abort(-12) | 0 : 0;
  $197 = $75;
  $198 = $76;
  ___resumeException($197 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $36 = $__h;
  $95 = $36;
  $35 = $95;
  $96 = $35;
  $34 = $96;
  $97 = $34;
  $98 = HEAP32[$97 >> 2] | 0;
  $__t$i = $98;
  $33 = $95;
  $99 = $33;
  $32 = $99;
  $100 = $32;
  HEAP32[$100 >> 2] = 0;
  $101 = $__t$i;
  $__r = $101;
  $31 = $__h;
  $102 = $31;
  $29 = $102;
  $30 = 0;
  $103 = $29;
  $28 = $103;
  $104 = $28;
  $27 = $104;
  $105 = $27;
  $106 = HEAP32[$105 >> 2] | 0;
  $__tmp$i$i1 = $106;
  $107 = $30;
  $3 = $103;
  $108 = $3;
  $2 = $108;
  $109 = $2;
  HEAP32[$109 >> 2] = $107;
  $110 = $__tmp$i$i1;
  $111 = ($110 | 0) != (0 | 0);
  if (!$111) {
   $194 = $__r;
   $195 = $194 + 16 | 0;
   $196 = $195 + 16 | 0;
   STACKTOP = sp;
   return $196 | 0;
  }
  $1 = $103;
  $112 = $1;
  $0 = $112;
  $113 = $0;
  $114 = $113 + 4 | 0;
  $115 = $__tmp$i$i1;
  $25 = $114;
  $26 = $115;
  $116 = $25;
  $117 = $116 + 5 | 0;
  $118 = HEAP8[$117 >> 0] | 0;
  $119 = $118 & 1;
  if ($119) {
   $120 = HEAP32[$116 >> 2] | 0;
   $121 = $26;
   $122 = $121 + 16 | 0;
   $123 = $122 + 16 | 0;
   $24 = $123;
   $124 = $24;
   $21 = $120;
   $22 = $124;
   $125 = $21;
   $126 = $22;
   HEAP8[$20 >> 0] = HEAP8[$23 >> 0] | 0;
   $18 = $125;
   $19 = $126;
   $127 = $19;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($127), asyncState ? abort(-12) | 0 : 0;
  }
  $128 = $116 + 4 | 0;
  $129 = HEAP8[$128 >> 0] | 0;
  $130 = $129 & 1;
  if ($130) {
   $131 = HEAP32[$116 >> 2] | 0;
   $132 = $26;
   $133 = $132 + 16 | 0;
   $17 = $133;
   $134 = $17;
   $7 = $131;
   $8 = $134;
   $135 = $7;
   $136 = $8;
   HEAP8[$6 >> 0] = HEAP8[$9 >> 0] | 0;
   $4 = $135;
   $5 = $136;
   $137 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($137), asyncState ? abort(-12) | 0 : 0;
  }
  $138 = $26;
  $139 = ($138 | 0) != (0 | 0);
  if (!$139) {
   $194 = $__r;
   $195 = $194 + 16 | 0;
   $196 = $195 + 16 | 0;
   STACKTOP = sp;
   return $196 | 0;
  }
  $140 = HEAP32[$116 >> 2] | 0;
  $141 = $26;
  $14 = $140;
  $15 = $141;
  $16 = 1;
  $142 = $14;
  $143 = $15;
  $144 = $16;
  $11 = $142;
  $12 = $143;
  $13 = $144;
  $145 = $12;
  $10 = $145;
  $146 = $10;
  __ZdlPv($146), asyncState ? abort(-12) | 0 : 0;
  $194 = $__r;
  $195 = $194 + 16 | 0;
  $196 = $195 + 16 | 0;
  STACKTOP = sp;
  return $196 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSE_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $6 = sp + 24 | 0;
 $9 = sp + 339 | 0;
 $20 = sp + 16 | 0;
 $23 = sp + 338 | 0;
 $43 = sp + 8 | 0;
 $46 = sp + 337 | 0;
 $57 = sp;
 $60 = sp + 336 | 0;
 $__parent = sp + 56 | 0;
 $__h = sp + 36 | 0;
 $72 = $this;
 $73 = $__k;
 $76 = $72;
 $77 = $73;
 $78 = (tempInt = __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSE_($76, $__parent, $77) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__child = $78;
 $79 = $__child;
 $80 = HEAP32[$79 >> 2] | 0;
 $__r = $80;
 $81 = $__child;
 $82 = HEAP32[$81 >> 2] | 0;
 $83 = ($82 | 0) == (0 | 0);
 if (!$83) {
  $192 = $__r;
  $193 = $192 + 16 | 0;
  $194 = $193 + 16 | 0;
  STACKTOP = sp;
  return $194 | 0;
 }
 $84 = $73;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEE25__construct_node_with_keyERSE_($__h, $76, $84), asyncState ? abort(-12) | 0 : 0;
 $85 = HEAP32[$__parent >> 2] | 0;
 $86 = $__child;
 $71 = $__h;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $69;
 $90 = HEAP32[$89 >> 2] | 0;
 __THREW__ = 0;
 invoke_viiii(438, $76 | 0, $85 | 0, $86 | 0, $90 | 0), asyncState ? abort(-12) | 0 : 0;
 $91 = __THREW__;
 __THREW__ = 0;
 $92 = $91 & 1;
 if ($92) {
  $145 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $146 = tempRet0;
  $74 = $145;
  $75 = $146;
  $68 = $__h;
  $147 = $68;
  $66 = $147;
  $67 = 0;
  $148 = $66;
  $65 = $148;
  $149 = $65;
  $64 = $149;
  $150 = $64;
  $151 = HEAP32[$150 >> 2] | 0;
  $__tmp$i$i = $151;
  $152 = $67;
  $40 = $148;
  $153 = $40;
  $39 = $153;
  $154 = $39;
  HEAP32[$154 >> 2] = $152;
  $155 = $__tmp$i$i;
  $156 = ($155 | 0) != (0 | 0);
  if (!$156) {
   $195 = $74;
   $196 = $75;
   ___resumeException($195 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $38 = $148;
  $157 = $38;
  $37 = $157;
  $158 = $37;
  $159 = $158 + 4 | 0;
  $160 = $__tmp$i$i;
  $62 = $159;
  $63 = $160;
  $161 = $62;
  $162 = $161 + 5 | 0;
  $163 = HEAP8[$162 >> 0] | 0;
  $164 = $163 & 1;
  if ($164) {
   $165 = HEAP32[$161 >> 2] | 0;
   $166 = $63;
   $167 = $166 + 16 | 0;
   $168 = $167 + 16 | 0;
   $61 = $168;
   $169 = $61;
   $58 = $165;
   $59 = $169;
   $170 = $58;
   $171 = $59;
   HEAP8[$57 >> 0] = HEAP8[$60 >> 0] | 0;
   $55 = $170;
   $56 = $171;
   $172 = $56;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($172), asyncState ? abort(-12) | 0 : 0;
  }
  $173 = $161 + 4 | 0;
  $174 = HEAP8[$173 >> 0] | 0;
  $175 = $174 & 1;
  if ($175) {
   $176 = HEAP32[$161 >> 2] | 0;
   $177 = $63;
   $178 = $177 + 16 | 0;
   $54 = $178;
   $179 = $54;
   $44 = $176;
   $45 = $179;
   $180 = $44;
   $181 = $45;
   HEAP8[$43 >> 0] = HEAP8[$46 >> 0] | 0;
   $41 = $180;
   $42 = $181;
   $182 = $42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($182), asyncState ? abort(-12) | 0 : 0;
  }
  $183 = $63;
  $184 = ($183 | 0) != (0 | 0);
  if (!$184) {
   $195 = $74;
   $196 = $75;
   ___resumeException($195 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $185 = HEAP32[$161 >> 2] | 0;
  $186 = $63;
  $51 = $185;
  $52 = $186;
  $53 = 1;
  $187 = $51;
  $188 = $52;
  $189 = $53;
  $48 = $187;
  $49 = $188;
  $50 = $189;
  $190 = $49;
  $47 = $190;
  $191 = $47;
  __ZdlPv($191), asyncState ? abort(-12) | 0 : 0;
  $195 = $74;
  $196 = $75;
  ___resumeException($195 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $36 = $__h;
  $93 = $36;
  $35 = $93;
  $94 = $35;
  $34 = $94;
  $95 = $34;
  $96 = HEAP32[$95 >> 2] | 0;
  $__t$i = $96;
  $33 = $93;
  $97 = $33;
  $32 = $97;
  $98 = $32;
  HEAP32[$98 >> 2] = 0;
  $99 = $__t$i;
  $__r = $99;
  $31 = $__h;
  $100 = $31;
  $29 = $100;
  $30 = 0;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  $27 = $102;
  $103 = $27;
  $104 = HEAP32[$103 >> 2] | 0;
  $__tmp$i$i1 = $104;
  $105 = $30;
  $3 = $101;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  HEAP32[$107 >> 2] = $105;
  $108 = $__tmp$i$i1;
  $109 = ($108 | 0) != (0 | 0);
  if (!$109) {
   $192 = $__r;
   $193 = $192 + 16 | 0;
   $194 = $193 + 16 | 0;
   STACKTOP = sp;
   return $194 | 0;
  }
  $1 = $101;
  $110 = $1;
  $0 = $110;
  $111 = $0;
  $112 = $111 + 4 | 0;
  $113 = $__tmp$i$i1;
  $25 = $112;
  $26 = $113;
  $114 = $25;
  $115 = $114 + 5 | 0;
  $116 = HEAP8[$115 >> 0] | 0;
  $117 = $116 & 1;
  if ($117) {
   $118 = HEAP32[$114 >> 2] | 0;
   $119 = $26;
   $120 = $119 + 16 | 0;
   $121 = $120 + 16 | 0;
   $24 = $121;
   $122 = $24;
   $21 = $118;
   $22 = $122;
   $123 = $21;
   $124 = $22;
   HEAP8[$20 >> 0] = HEAP8[$23 >> 0] | 0;
   $18 = $123;
   $19 = $124;
   $125 = $19;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($125), asyncState ? abort(-12) | 0 : 0;
  }
  $126 = $114 + 4 | 0;
  $127 = HEAP8[$126 >> 0] | 0;
  $128 = $127 & 1;
  if ($128) {
   $129 = HEAP32[$114 >> 2] | 0;
   $130 = $26;
   $131 = $130 + 16 | 0;
   $17 = $131;
   $132 = $17;
   $7 = $129;
   $8 = $132;
   $133 = $7;
   $134 = $8;
   HEAP8[$6 >> 0] = HEAP8[$9 >> 0] | 0;
   $4 = $133;
   $5 = $134;
   $135 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($135), asyncState ? abort(-12) | 0 : 0;
  }
  $136 = $26;
  $137 = ($136 | 0) != (0 | 0);
  if (!$137) {
   $192 = $__r;
   $193 = $192 + 16 | 0;
   $194 = $193 + 16 | 0;
   STACKTOP = sp;
   return $194 | 0;
  }
  $138 = HEAP32[$114 >> 2] | 0;
  $139 = $26;
  $14 = $138;
  $15 = $139;
  $16 = 1;
  $140 = $14;
  $141 = $15;
  $142 = $16;
  $11 = $140;
  $12 = $141;
  $13 = $142;
  $143 = $12;
  $10 = $143;
  $144 = $10;
  __ZdlPv($144), asyncState ? abort(-12) | 0 : 0;
  $192 = $__r;
  $193 = $192 + 16 | 0;
  $194 = $193 + 16 | 0;
  STACKTOP = sp;
  return $194 | 0;
 }
 return 0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKNS2_IS9_SA_NS1_4lessIS9_EENS7_INS1_4pairIKS9_SA_EEEEEE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__e$i$i$i = 0, $alloc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 372 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 364 | 0;
 $5 = sp + 352 | 0;
 $6 = sp + 348 | 0;
 $7 = sp + 48 | 0;
 $9 = sp + 40 | 0;
 $17 = sp + 312 | 0;
 $19 = sp + 304 | 0;
 $21 = sp + 296 | 0;
 $22 = sp + 292 | 0;
 $31 = sp + 32 | 0;
 $__e$i$i$i = sp + 228 | 0;
 $39 = sp + 224 | 0;
 $40 = sp + 220 | 0;
 $41 = sp + 216 | 0;
 $42 = sp + 24 | 0;
 $43 = sp + 16 | 0;
 $45 = sp + 8 | 0;
 $49 = sp + 196 | 0;
 $51 = sp + 188 | 0;
 $53 = sp + 180 | 0;
 $55 = sp;
 $63 = sp + 144 | 0;
 $65 = sp + 136 | 0;
 $67 = sp + 128 | 0;
 $70 = sp + 116 | 0;
 $71 = sp + 112 | 0;
 $alloc = sp + 376 | 0;
 $83 = $this;
 $84 = $value;
 $85 = $83;
 $78 = $alloc;
 $80 = $alloc;
 $81 = 1;
 $82 = 0;
 $86 = $81;
 $87 = $86 * 12 | 0;
 $79 = $87;
 $88 = $79;
 $89 = (tempInt = __Znwj($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$85 >> 2] = $89;
 $90 = HEAP32[$85 >> 2] | 0;
 $91 = $84;
 $75 = $alloc;
 $76 = $90;
 $77 = $91;
 $92 = $76;
 $93 = $77;
 $74 = $93;
 $94 = $74;
 $68 = $92;
 $69 = $94;
 $95 = $68;
 $96 = $69;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEEC2ERKSJ_($95, $96), asyncState ? abort(-12) | 0 : 0;
 $97 = $69;
 $52 = $97;
 $98 = $52;
 $50 = $98;
 $99 = $50;
 $48 = $99;
 $100 = $48;
 $101 = HEAP32[$100 >> 2] | 0;
 $46 = $49;
 $47 = $101;
 $102 = $46;
 $103 = $47;
 HEAP32[$102 >> 2] = $103;
 $104 = HEAP32[$49 >> 2] | 0;
 HEAP32[$53 >> 2] = $104;
 HEAP8[$45 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$45 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 HEAP8[$45 + 2 >> 0] = HEAP8[$53 + 2 >> 0] | 0;
 HEAP8[$45 + 3 >> 0] = HEAP8[$53 + 3 >> 0] | 0;
 $44 = $51;
 $105 = $44;
 HEAP32[$105 >> 2] = HEAP32[$45 >> 2] | 0;
 $106 = HEAP32[$51 >> 2] | 0;
 HEAP32[$70 >> 2] = $106;
 $107 = $69;
 $66 = $107;
 $108 = $66;
 $64 = $108;
 $109 = $64;
 $62 = $109;
 $110 = $62;
 $111 = $110 + 4 | 0;
 $61 = $111;
 $112 = $61;
 $60 = $112;
 $113 = $60;
 $59 = $113;
 $114 = $59;
 $58 = $114;
 $115 = $58;
 $56 = $63;
 $57 = $115;
 $116 = $56;
 $117 = $57;
 HEAP32[$116 >> 2] = $117;
 $118 = HEAP32[$63 >> 2] | 0;
 HEAP32[$67 >> 2] = $118;
 HEAP8[$55 >> 0] = HEAP8[$67 >> 0] | 0;
 HEAP8[$55 + 1 >> 0] = HEAP8[$67 + 1 >> 0] | 0;
 HEAP8[$55 + 2 >> 0] = HEAP8[$67 + 2 >> 0] | 0;
 HEAP8[$55 + 3 >> 0] = HEAP8[$67 + 3 >> 0] | 0;
 $54 = $65;
 $119 = $54;
 HEAP32[$119 >> 2] = HEAP32[$55 >> 2] | 0;
 $120 = HEAP32[$65 >> 2] | 0;
 HEAP32[$71 >> 2] = $120;
 HEAP8[$42 >> 0] = HEAP8[$71 >> 0] | 0;
 HEAP8[$42 + 1 >> 0] = HEAP8[$71 + 1 >> 0] | 0;
 HEAP8[$42 + 2 >> 0] = HEAP8[$71 + 2 >> 0] | 0;
 HEAP8[$42 + 3 >> 0] = HEAP8[$71 + 3 >> 0] | 0;
 HEAP8[$43 >> 0] = HEAP8[$70 >> 0] | 0;
 HEAP8[$43 + 1 >> 0] = HEAP8[$70 + 1 >> 0] | 0;
 HEAP8[$43 + 2 >> 0] = HEAP8[$70 + 2 >> 0] | 0;
 HEAP8[$43 + 3 >> 0] = HEAP8[$70 + 3 >> 0] | 0;
 $38 = $95;
 $121 = $38;
 $23 = $121;
 $122 = $23;
 $20 = $122;
 $123 = $20;
 $18 = $123;
 $124 = $18;
 $16 = $124;
 $125 = $16;
 $126 = $125 + 4 | 0;
 $15 = $126;
 $127 = $15;
 $14 = $127;
 $128 = $14;
 $13 = $128;
 $129 = $13;
 $12 = $129;
 $130 = $12;
 $10 = $17;
 $11 = $130;
 $131 = $10;
 $132 = $11;
 HEAP32[$131 >> 2] = $132;
 $133 = HEAP32[$17 >> 2] | 0;
 HEAP32[$21 >> 2] = $133;
 HEAP8[$9 >> 0] = HEAP8[$21 >> 0] | 0;
 HEAP8[$9 + 1 >> 0] = HEAP8[$21 + 1 >> 0] | 0;
 HEAP8[$9 + 2 >> 0] = HEAP8[$21 + 2 >> 0] | 0;
 HEAP8[$9 + 3 >> 0] = HEAP8[$21 + 3 >> 0] | 0;
 $8 = $19;
 $134 = $8;
 HEAP32[$134 >> 2] = HEAP32[$9 >> 2] | 0;
 $135 = HEAP32[$19 >> 2] | 0;
 HEAP32[$22 >> 2] = $135;
 $136 = HEAP32[$22 >> 2] | 0;
 HEAP32[$__e$i$i$i >> 2] = $136;
 while (1) {
  $28 = $43;
  $29 = $42;
  $137 = $28;
  $138 = $29;
  $26 = $137;
  $27 = $138;
  $139 = $26;
  $140 = $27;
  $24 = $139;
  $25 = $140;
  $141 = $24;
  $142 = HEAP32[$141 >> 2] | 0;
  $143 = $25;
  $144 = HEAP32[$143 >> 2] | 0;
  $145 = ($142 | 0) == ($144 | 0);
  $146 = $145 ^ 1;
  if (!$146) {
   label = 6;
   break;
  }
  HEAP32[$40 >> 2] = HEAP32[$__e$i$i$i >> 2] | 0;
  HEAP8[$31 >> 0] = HEAP8[$40 >> 0] | 0;
  HEAP8[$31 + 1 >> 0] = HEAP8[$40 + 1 >> 0] | 0;
  HEAP8[$31 + 2 >> 0] = HEAP8[$40 + 2 >> 0] | 0;
  HEAP8[$31 + 3 >> 0] = HEAP8[$40 + 3 >> 0] | 0;
  $30 = $39;
  $147 = $30;
  HEAP32[$147 >> 2] = HEAP32[$31 >> 2] | 0;
  $35 = $43;
  $148 = $35;
  $34 = $148;
  $149 = $34;
  $150 = HEAP32[$149 >> 2] | 0;
  $151 = $150 + 16 | 0;
  $33 = $151;
  $152 = $33;
  $32 = $152;
  $153 = $32;
  HEAP8[$7 >> 0] = HEAP8[$39 >> 0] | 0;
  HEAP8[$7 + 1 >> 0] = HEAP8[$39 + 1 >> 0] | 0;
  HEAP8[$7 + 2 >> 0] = HEAP8[$39 + 2 >> 0] | 0;
  HEAP8[$7 + 3 >> 0] = HEAP8[$39 + 3 >> 0] | 0;
  $3 = $121;
  $4 = $153;
  $154 = $3;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2] | 0;
  $155 = $4;
  __THREW__ = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2] | 0;
  $156 = (tempInt = invoke_iiii(441, $154 | 0, $$byval_copy | 0, $155 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $157 = __THREW__;
  __THREW__ = 0;
  $158 = $157 & 1;
  if ($158) {
   label = 5;
   break;
  }
  HEAP32[$5 >> 2] = $156;
  HEAP8[$1 >> 0] = HEAP8[$5 >> 0] | 0;
  HEAP8[$1 + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
  HEAP8[$1 + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
  HEAP8[$1 + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
  $0 = $2;
  $159 = $0;
  HEAP32[$159 >> 2] = HEAP32[$1 >> 2] | 0;
  $160 = HEAP32[$2 >> 2] | 0;
  HEAP32[$41 >> 2] = $160;
  $37 = $43;
  $161 = $37;
  $36 = $161;
  $162 = $36;
  $163 = HEAP32[$162 >> 2] | 0;
  $164 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($163) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$162 >> 2] = $164;
 }
 if ((label | 0) == 5) {
  $165 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $166 = tempRet0;
  $72 = $165;
  $73 = $166;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEED2Ev($95), asyncState ? abort(-12) | 0 : 0;
  $167 = $72;
  $168 = $73;
  ___resumeException($167 | 0), asyncState ? abort(-12) | 0 : 0;
 } else if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function __Z13CheckMessagesv() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $msg = 0, $msg_buf = 0, $msgs = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $msgs = sp + 72 | 0;
 $7 = sp + 132 | 0;
 $8 = sp + 48 | 0;
 $__begin = sp + 104 | 0;
 $__end = sp + 88 | 0;
 $msg = sp + 32 | 0;
 $11 = sp + 16 | 0;
 $12 = sp;
 $13 = sp + 176 | 0;
 $14 = (tempInt = _emscripten_asm_const_0(0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $msg_buf = $14;
 $15 = $msg_buf;
 $16 = $15;
 $5 = $7;
 $6 = $16;
 $17 = $5;
 $4 = $17;
 $18 = $4;
 $3 = $18;
 $19 = $3;
 $2 = $19;
 $20 = $6;
 $21 = $6;
 $22 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($21) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $20, $22), asyncState ? abort(-12) | 0 : 0;
 $0 = $8;
 $1 = 0;
 $23 = $0;
 $24 = $23 + 16 | 0;
 HEAP32[$24 >> 2] = 0;
 __THREW__ = 0;
 invoke_viii(369, $msgs | 0, $7 | 0, $8 | 0), asyncState ? abort(-12) | 0 : 0;
 $25 = __THREW__;
 __THREW__ = 0;
 $26 = $25 & 1;
 if ($26) {
  $58 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $59 = tempRet0;
  $9 = $58;
  $10 = $59;
  __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($8), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
  $68 = $9;
  $69 = $10;
  ___resumeException($68 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($8), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
 $27 = $msg_buf;
 $28 = $27;
 __THREW__ = 0;
 invoke_vi(370, $28 | 0), asyncState ? abort(-12) | 0 : 0;
 $29 = __THREW__;
 __THREW__ = 0;
 $30 = $29 & 1;
 L5 : do {
  if ($30) {
   label = 20;
  } else {
   $__range = $msgs;
   $31 = $__range;
   __THREW__ = 0;
   invoke_vii(371, $__begin | 0, $31 | 0), asyncState ? abort(-12) | 0 : 0;
   $32 = __THREW__;
   __THREW__ = 0;
   $33 = $32 & 1;
   if ($33) {
    label = 20;
   } else {
    $34 = $__range;
    __THREW__ = 0;
    invoke_vii(372, $__end | 0, $34 | 0), asyncState ? abort(-12) | 0 : 0;
    $35 = __THREW__;
    __THREW__ = 0;
    $36 = $35 & 1;
    if ($36) {
     label = 20;
    } else {
     while (1) {
      __THREW__ = 0;
      $37 = (tempInt = invoke_iii(373, $__begin | 0, $__end | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $38 = __THREW__;
      __THREW__ = 0;
      $39 = $38 & 1;
      if ($39) {
       label = 20;
       break L5;
      }
      if (!$37) {
       label = 25;
       break;
      }
      __THREW__ = 0;
      $40 = (tempInt = invoke_ii(374, $__begin | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $41 = __THREW__;
      __THREW__ = 0;
      $42 = $41 & 1;
      if ($42) {
       label = 20;
       break L5;
      }
      __THREW__ = 0;
      invoke_vii(375, $msg | 0, $40 | 0), asyncState ? abort(-12) | 0 : 0;
      $43 = __THREW__;
      __THREW__ = 0;
      $44 = $43 & 1;
      if ($44) {
       label = 20;
       break L5;
      }
      $$expand_i1_val = 0;
      HEAP8[$13 >> 0] = $$expand_i1_val;
      __THREW__ = 0;
      $45 = (tempInt = invoke_iii(376, $msg | 0, 13404 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $46 = __THREW__;
      __THREW__ = 0;
      $47 = $46 & 1;
      if ($47) {
       label = 21;
       break;
      }
      __THREW__ = 0;
      invoke_vii(377, $11 | 0, 13409 | 0), asyncState ? abort(-12) | 0 : 0;
      $48 = __THREW__;
      __THREW__ = 0;
      $49 = $48 & 1;
      if ($49) {
       label = 21;
       break;
      }
      $50 = (tempInt = __ZN8nlohmanneqERKNS_10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EESC_($45, $11) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      if ($50) {
       __THREW__ = 0;
       $51 = (tempInt = invoke_iii(378, $msg | 0, 13416 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $52 = __THREW__;
       __THREW__ = 0;
       $53 = $52 & 1;
       if ($53) {
        label = 22;
        break;
       }
       __THREW__ = 0;
       invoke_vii(377, $12 | 0, 13420 | 0), asyncState ? abort(-12) | 0 : 0;
       $54 = __THREW__;
       __THREW__ = 0;
       $55 = $54 & 1;
       if ($55) {
        label = 22;
        break;
       }
       $$expand_i1_val2 = 1;
       HEAP8[$13 >> 0] = $$expand_i1_val2;
       $56 = (tempInt = __ZN8nlohmanneqERKNS_10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EESC_($51, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $70 = $56;
      } else {
       $70 = 0;
      }
      $$pre_trunc = HEAP8[$13 >> 0] | 0;
      $57 = $$pre_trunc & 1;
      if ($57) {
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($12), asyncState ? abort(-12) | 0 : 0;
      }
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($11), asyncState ? abort(-12) | 0 : 0;
      if ($70) {
       HEAP8[13296 >> 0] = 1;
      }
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
      __THREW__ = 0;
      (tempInt = invoke_ii(379, $__begin | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $66 = __THREW__;
      __THREW__ = 0;
      $67 = $66 & 1;
      if ($67) {
       label = 20;
       break L5;
      }
     }
     if ((label | 0) == 21) {
      $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $63 = tempRet0;
      $9 = $62;
      $10 = $63;
     } else if ((label | 0) == 22) {
      $64 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $65 = tempRet0;
      $9 = $64;
      $10 = $65;
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($11), asyncState ? abort(-12) | 0 : 0;
     } else if ((label | 0) == 25) {
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msgs), asyncState ? abort(-12) | 0 : 0;
      STACKTOP = sp;
      return;
     }
     __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
    }
   }
  }
 } while (0);
 if ((label | 0) == 20) {
  $60 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $61 = tempRet0;
  $9 = $60;
  $10 = $61;
 }
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msgs), asyncState ? abort(-12) | 0 : 0;
 $68 = $9;
 $69 = $10;
 ___resumeException($68 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 84 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 146 | 0;
 $__nb = sp + 80 | 0;
 $__o = sp + 88 | 0;
 $__op = sp + 76 | 0;
 $__oe = sp + 72 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 64 | 0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3 >> 2] = 37;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $__fmt + 1 | 0;
 $7 = $__iob + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = (tempInt = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($6, 21619, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($9) {
  $11 = $__iob + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $12;
  $vararg_ptr1 = $vararg_buffer + 8 | 0;
  HEAPF64[$vararg_ptr1 >> 3] = $__v;
  $13 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $14 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $14;
 }
 $15 = ($__nc$0 | 0) > 29;
 L5 : do {
  if ($15) {
   __THREW__ = 0;
   $16 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($9) {
    if (!$18) {
     $19 = $__iob + 8 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5 >> 2] = $20;
     $vararg_ptr8 = $vararg_buffer5 + 8 | 0;
     HEAPF64[$vararg_ptr8 >> 3] = $__v;
     $21 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!$18) {
     $26 = $__iob + 8 | 0;
     $27 = HEAP32[$26 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9 >> 2] = $27;
     $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
     HEAPF64[$vararg_ptr12 >> 3] = $__v;
     $28 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $29 = __THREW__;
     __THREW__ = 0;
     $30 = $29 & 1;
     if (!$30) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $31 = HEAP32[$__nb >> 2] | 0;
     $32 = ($31 | 0) == (0 | 0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb >> 2] | 0;
      $36 = $$pre;
     } else {
      $36 = $31;
     }
     $35 = $36;
     $38 = $36;
     $65 = $35;
     $__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while (0);
   $24 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $25 = tempRet0;
   $$112 = $24;
   $$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb >> 2] | 0;
   $38 = $$pre8;
   $65 = 0;
   $__nc$2 = $__nc$0;
   label = 16;
  }
 } while (0);
 if ((label | 0) == 16) {
  $37 = $38 + $__nc$2 | 0;
  $39 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38, $37, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $40 = ($38 | 0) == ($__nar | 0);
  do {
   if ($40) {
    $52 = $__nar;
    $62 = 0;
    $__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (tempInt = _malloc($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $43 = ($42 | 0) == (0 | 0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(468), asyncState ? abort(-12) | 0 : 0;
     $44 = __THREW__;
     __THREW__ = 0;
     $45 = $44 & 1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb >> 2] | 0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $38;
    }
    $48 = $42;
    $52 = $$pre9;
    $62 = $48;
    $__ob$0 = $42;
    label = 22;
   }
  } while (0);
  do {
   if ((label | 0) == 22) {
    __THREW__ = 0;
    $49 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $50 = __THREW__;
    __THREW__ = 0;
    $51 = $50 & 1;
    if ($51) {
     $74 = $62;
     label = 20;
    } else {
     HEAP32[$0 >> 2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(469, $52 | 0, $39 | 0, $37 | 0, $__ob$0 | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
     $53 = __THREW__;
     __THREW__ = 0;
     $54 = $53 & 1;
     if ($54) {
      $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $68 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $67;
      $$02 = $68;
      $70 = $62;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $55 = HEAP32[$__s >> 2] | 0;
     HEAP32[$1 >> 2] = $55;
     $56 = HEAP32[$__op >> 2] | 0;
     $57 = HEAP32[$__oe >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
     $58 = (tempInt = invoke_iiiiiii(446, $$byval_copy | 0, $__ob$0 | 0, $56 | 0, $57 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      $74 = $62;
      label = 20;
     } else {
      HEAP32[$__s >> 2] = $58;
      $61 = ($62 | 0) == 0;
      if (!$61) {
       $63 = $62;
       _free($63), asyncState ? abort(-12) | 0 : 0;
      }
      $64 = ($65 | 0) == 0;
      if (!$64) {
       $66 = $65;
       _free($66), asyncState ? abort(-12) | 0 : 0;
      }
      STACKTOP = sp;
      return $58 | 0;
     }
    }
   }
  } while (0);
  if ((label | 0) == 20) {
   $46 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $47 = tempRet0;
   $$0 = $46;
   $$02 = $47;
   $70 = $74;
  }
  $69 = ($70 | 0) == 0;
  if (!$69) {
   $71 = $70;
   _free($71), asyncState ? abort(-12) | 0 : 0;
  }
  $72 = ($65 | 0) == 0;
  if ($72) {
   $$112 = $$0;
   $$1311 = $$02;
  } else {
   $73 = $65;
   _free($73), asyncState ? abort(-12) | 0 : 0;
   $$112 = $$0;
   $$1311 = $$02;
  }
 }
 ___resumeException($$112 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 312 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 316 | 0;
 $__nb = sp + 308 | 0;
 $__o = sp + 80 | 0;
 $__op = sp + 76 | 0;
 $__oe = sp + 72 | 0;
 $0 = sp + 68 | 0;
 $1 = sp + 64 | 0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3 >> 2] = 37;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $__fmt + 1 | 0;
 $7 = $__iob + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = (tempInt = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($6, 21619, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($9) {
  $11 = $__iob + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $12;
  $vararg_ptr1 = $vararg_buffer + 8 | 0;
  HEAPF64[$vararg_ptr1 >> 3] = $__v;
  $13 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $14 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $14;
 }
 $15 = ($__nc$0 | 0) > 29;
 L5 : do {
  if ($15) {
   __THREW__ = 0;
   $16 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($9) {
    if (!$18) {
     $19 = $__iob + 8 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5 >> 2] = $20;
     $vararg_ptr8 = $vararg_buffer5 + 8 | 0;
     HEAPF64[$vararg_ptr8 >> 3] = $__v;
     $21 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!$18) {
     $26 = $__iob + 8 | 0;
     $27 = HEAP32[$26 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9 >> 2] = $27;
     $vararg_ptr12 = $vararg_buffer9 + 8 | 0;
     HEAPF64[$vararg_ptr12 >> 3] = $__v;
     $28 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $29 = __THREW__;
     __THREW__ = 0;
     $30 = $29 & 1;
     if (!$30) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $31 = HEAP32[$__nb >> 2] | 0;
     $32 = ($31 | 0) == (0 | 0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb >> 2] | 0;
      $36 = $$pre;
     } else {
      $36 = $31;
     }
     $35 = $36;
     $38 = $36;
     $65 = $35;
     $__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while (0);
   $24 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $25 = tempRet0;
   $$110 = $24;
   $$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb >> 2] | 0;
   $38 = $$pre6;
   $65 = 0;
   $__nc$2 = $__nc$0;
   label = 16;
  }
 } while (0);
 if ((label | 0) == 16) {
  $37 = $38 + $__nc$2 | 0;
  $39 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38, $37, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $40 = ($38 | 0) == ($__nar | 0);
  do {
   if ($40) {
    $52 = $__nar;
    $62 = 0;
    $__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (tempInt = _malloc($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $43 = ($42 | 0) == (0 | 0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(468), asyncState ? abort(-12) | 0 : 0;
     $44 = __THREW__;
     __THREW__ = 0;
     $45 = $44 & 1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb >> 2] | 0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $38;
    }
    $48 = $42;
    $52 = $$pre7;
    $62 = $48;
    $__ob$0 = $42;
    label = 22;
   }
  } while (0);
  do {
   if ((label | 0) == 22) {
    __THREW__ = 0;
    $49 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $50 = __THREW__;
    __THREW__ = 0;
    $51 = $50 & 1;
    if ($51) {
     $74 = $62;
     label = 20;
    } else {
     HEAP32[$0 >> 2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(473, $52 | 0, $39 | 0, $37 | 0, $__ob$0 | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
     $53 = __THREW__;
     __THREW__ = 0;
     $54 = $53 & 1;
     if ($54) {
      $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $68 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $67;
      $$02 = $68;
      $70 = $62;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $55 = HEAP32[$__s >> 2] | 0;
     HEAP32[$1 >> 2] = $55;
     $56 = HEAP32[$__op >> 2] | 0;
     $57 = HEAP32[$__oe >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
     $58 = (tempInt = invoke_iiiiiii(474, $$byval_copy | 0, $__ob$0 | 0, $56 | 0, $57 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $59 = __THREW__;
     __THREW__ = 0;
     $60 = $59 & 1;
     if ($60) {
      $74 = $62;
      label = 20;
     } else {
      HEAP32[$__s >> 2] = $58;
      $61 = ($62 | 0) == 0;
      if (!$61) {
       $63 = $62;
       _free($63), asyncState ? abort(-12) | 0 : 0;
      }
      $64 = ($65 | 0) == 0;
      if (!$64) {
       $66 = $65;
       _free($66), asyncState ? abort(-12) | 0 : 0;
      }
      STACKTOP = sp;
      return $58 | 0;
     }
    }
   }
  } while (0);
  if ((label | 0) == 20) {
   $46 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $47 = tempRet0;
   $$0 = $46;
   $$02 = $47;
   $70 = $74;
  }
  $69 = ($70 | 0) == 0;
  if (!$69) {
   $71 = $70;
   _free($71), asyncState ? abort(-12) | 0 : 0;
  }
  $72 = ($65 | 0) == 0;
  if ($72) {
   $$110 = $$0;
   $$139 = $$02;
  } else {
   $73 = $65;
   _free($73), asyncState ? abort(-12) | 0 : 0;
   $$110 = $$0;
   $$139 = $$02;
  }
 }
 ___resumeException($$110 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 76 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 138 | 0;
 $__nb = sp + 72 | 0;
 $__o = sp + 80 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3 >> 2] = 37;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $__fmt + 1 | 0;
 $7 = $__iob + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = (tempInt = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($6, 21620, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($9) {
  $11 = $__iob + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $12;
  $vararg_ptr1 = $vararg_buffer + 8 | 0;
  HEAPF64[$vararg_ptr1 >> 3] = $__v;
  $13 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $14 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $14;
 }
 $15 = ($__nc$0 | 0) > 29;
 L5 : do {
  if ($15) {
   __THREW__ = 0;
   $16 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($9) {
    if (!$18) {
     $19 = $__iob + 8 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5 >> 2] = $20;
     $vararg_ptr8 = $vararg_buffer5 + 8 | 0;
     HEAPF64[$vararg_ptr8 >> 3] = $__v;
     $21 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!$18) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9 >> 3] = $__v;
     $26 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $29 = HEAP32[$__nb >> 2] | 0;
     $30 = ($29 | 0) == (0 | 0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $31 = __THREW__;
      __THREW__ = 0;
      $32 = $31 & 1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb >> 2] | 0;
      $34 = $$pre;
     } else {
      $34 = $29;
     }
     $33 = $34;
     $36 = $34;
     $63 = $33;
     $__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while (0);
   $24 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $25 = tempRet0;
   $$112 = $24;
   $$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb >> 2] | 0;
   $36 = $$pre8;
   $63 = 0;
   $__nc$2 = $__nc$0;
   label = 16;
  }
 } while (0);
 if ((label | 0) == 16) {
  $35 = $36 + $__nc$2 | 0;
  $37 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36, $35, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $38 = ($36 | 0) == ($__nar | 0);
  do {
   if ($38) {
    $50 = $__nar;
    $60 = 0;
    $__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 1;
    $40 = (tempInt = _malloc($39) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $41 = ($40 | 0) == (0 | 0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(468), asyncState ? abort(-12) | 0 : 0;
     $42 = __THREW__;
     __THREW__ = 0;
     $43 = $42 & 1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb >> 2] | 0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $36;
    }
    $46 = $40;
    $50 = $$pre9;
    $60 = $46;
    $__ob$0 = $40;
    label = 22;
   }
  } while (0);
  do {
   if ((label | 0) == 22) {
    __THREW__ = 0;
    $47 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $48 = __THREW__;
    __THREW__ = 0;
    $49 = $48 & 1;
    if ($49) {
     $72 = $60;
     label = 20;
    } else {
     HEAP32[$0 >> 2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(469, $50 | 0, $37 | 0, $35 | 0, $__ob$0 | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
     $51 = __THREW__;
     __THREW__ = 0;
     $52 = $51 & 1;
     if ($52) {
      $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $66 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($47) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $65;
      $$02 = $66;
      $68 = $60;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($47) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $53 = HEAP32[$__s >> 2] | 0;
     HEAP32[$1 >> 2] = $53;
     $54 = HEAP32[$__op >> 2] | 0;
     $55 = HEAP32[$__oe >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
     $56 = (tempInt = invoke_iiiiiii(446, $$byval_copy | 0, $__ob$0 | 0, $54 | 0, $55 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $57 = __THREW__;
     __THREW__ = 0;
     $58 = $57 & 1;
     if ($58) {
      $72 = $60;
      label = 20;
     } else {
      HEAP32[$__s >> 2] = $56;
      $59 = ($60 | 0) == 0;
      if (!$59) {
       $61 = $60;
       _free($61), asyncState ? abort(-12) | 0 : 0;
      }
      $62 = ($63 | 0) == 0;
      if (!$62) {
       $64 = $63;
       _free($64), asyncState ? abort(-12) | 0 : 0;
      }
      STACKTOP = sp;
      return $56 | 0;
     }
    }
   }
  } while (0);
  if ((label | 0) == 20) {
   $44 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $45 = tempRet0;
   $$0 = $44;
   $$02 = $45;
   $68 = $72;
  }
  $67 = ($68 | 0) == 0;
  if (!$67) {
   $69 = $68;
   _free($69), asyncState ? abort(-12) | 0 : 0;
  }
  $70 = ($63 | 0) == 0;
  if ($70) {
   $$112 = $$0;
   $$1311 = $$02;
  } else {
   $71 = $63;
   _free($71), asyncState ? abort(-12) | 0 : 0;
   $$112 = $$0;
   $$1311 = $$02;
  }
 }
 ___resumeException($$112 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 304 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 308 | 0;
 $__nb = sp + 300 | 0;
 $__o = sp + 72 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3 >> 2] = 37;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $__fmt + 1 | 0;
 $7 = $__iob + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = (tempInt = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($6, 21620, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($9) {
  $11 = $__iob + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $12;
  $vararg_ptr1 = $vararg_buffer + 8 | 0;
  HEAPF64[$vararg_ptr1 >> 3] = $__v;
  $13 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $14 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__nc$0 = $14;
 }
 $15 = ($__nc$0 | 0) > 29;
 L5 : do {
  if ($15) {
   __THREW__ = 0;
   $16 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = __THREW__;
   __THREW__ = 0;
   $18 = $17 & 1;
   if ($9) {
    if (!$18) {
     $19 = $__iob + 8 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5 >> 2] = $20;
     $vararg_ptr8 = $vararg_buffer5 + 8 | 0;
     HEAPF64[$vararg_ptr8 >> 3] = $__v;
     $21 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!$18) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9 >> 3] = $__v;
     $26 = (tempInt = invoke_iiiii(467, $__nb | 0, $16 | 0, $__fmt | 0, $vararg_buffer9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $29 = HEAP32[$__nb >> 2] | 0;
     $30 = ($29 | 0) == (0 | 0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(468), asyncState ? abort(-12) | 0 : 0;
      $31 = __THREW__;
      __THREW__ = 0;
      $32 = $31 & 1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb >> 2] | 0;
      $34 = $$pre;
     } else {
      $34 = $29;
     }
     $33 = $34;
     $36 = $34;
     $63 = $33;
     $__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while (0);
   $24 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $25 = tempRet0;
   $$110 = $24;
   $$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb >> 2] | 0;
   $36 = $$pre6;
   $63 = 0;
   $__nc$2 = $__nc$0;
   label = 16;
  }
 } while (0);
 if ((label | 0) == 16) {
  $35 = $36 + $__nc$2 | 0;
  $37 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36, $35, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $38 = ($36 | 0) == ($__nar | 0);
  do {
   if ($38) {
    $50 = $__nar;
    $60 = 0;
    $__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 3;
    $40 = (tempInt = _malloc($39) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $41 = ($40 | 0) == (0 | 0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(468), asyncState ? abort(-12) | 0 : 0;
     $42 = __THREW__;
     __THREW__ = 0;
     $43 = $42 & 1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb >> 2] | 0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $36;
    }
    $46 = $40;
    $50 = $$pre7;
    $60 = $46;
    $__ob$0 = $40;
    label = 22;
   }
  } while (0);
  do {
   if ((label | 0) == 22) {
    __THREW__ = 0;
    $47 = (tempInt = invoke_ii(417, $__iob | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $48 = __THREW__;
    __THREW__ = 0;
    $49 = $48 & 1;
    if ($49) {
     $72 = $60;
     label = 20;
    } else {
     HEAP32[$0 >> 2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(473, $50 | 0, $37 | 0, $35 | 0, $__ob$0 | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
     $51 = __THREW__;
     __THREW__ = 0;
     $52 = $51 & 1;
     if ($52) {
      $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $66 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($47) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $65;
      $$02 = $66;
      $68 = $60;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($47) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $53 = HEAP32[$__s >> 2] | 0;
     HEAP32[$1 >> 2] = $53;
     $54 = HEAP32[$__op >> 2] | 0;
     $55 = HEAP32[$__oe >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
     $56 = (tempInt = invoke_iiiiiii(474, $$byval_copy | 0, $__ob$0 | 0, $54 | 0, $55 | 0, $__iob | 0, $__fl | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $57 = __THREW__;
     __THREW__ = 0;
     $58 = $57 & 1;
     if ($58) {
      $72 = $60;
      label = 20;
     } else {
      HEAP32[$__s >> 2] = $56;
      $59 = ($60 | 0) == 0;
      if (!$59) {
       $61 = $60;
       _free($61), asyncState ? abort(-12) | 0 : 0;
      }
      $62 = ($63 | 0) == 0;
      if (!$62) {
       $64 = $63;
       _free($64), asyncState ? abort(-12) | 0 : 0;
      }
      STACKTOP = sp;
      return $56 | 0;
     }
    }
   }
  } while (0);
  if ((label | 0) == 20) {
   $44 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $45 = tempRet0;
   $$0 = $44;
   $$02 = $45;
   $68 = $72;
  }
  $67 = ($68 | 0) == 0;
  if (!$67) {
   $69 = $68;
   _free($69), asyncState ? abort(-12) | 0 : 0;
  }
  $70 = ($63 | 0) == 0;
  if ($70) {
   $$110 = $$0;
   $$139 = $$02;
  } else {
   $71 = $63;
   _free($71), asyncState ? abort(-12) | 0 : 0;
   $$110 = $$0;
   $$139 = $$02;
  }
 }
 ___resumeException($$110 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $0 = $mode & 2;
 $1 = ($0 | 0) == 0;
 $$pre1 = $to_end;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = $$pre1 - $2 | 0;
  $4 = ($3 | 0) < 3;
  if ($4) {
   $$0 = 1;
  } else {
   $5 = $to + 1 | 0;
   HEAP32[$to_nxt >> 2] = $5;
   HEAP8[$to >> 0] = -17;
   $6 = HEAP32[$to_nxt >> 2] | 0;
   $7 = $6 + 1 | 0;
   HEAP32[$to_nxt >> 2] = $7;
   HEAP8[$6 >> 0] = -69;
   $8 = HEAP32[$to_nxt >> 2] | 0;
   $9 = $8 + 1 | 0;
   HEAP32[$to_nxt >> 2] = $9;
   HEAP8[$8 >> 0] = -65;
   label = 4;
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt >> 2] | 0;
   $11 = $$pre >>> 0 < $frm_end >>> 0;
   if ($11) {
    $13 = $$pre;
    while (1) {
     $12 = HEAP16[$13 >> 1] | 0;
     $14 = $12 & 65535;
     $15 = $14 >>> 0 > $Maxcode >>> 0;
     if ($15) {
      $$0 = 2;
      break L4;
     }
     $16 = ($12 & 65535) < 128;
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt >> 2] | 0;
       $18 = $17;
       $19 = $$pre1 - $18 | 0;
       $20 = ($19 | 0) < 1;
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $12 & 255;
       $22 = $17 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $22;
       HEAP8[$17 >> 0] = $21;
      } else {
       $23 = ($12 & 65535) < 2048;
       if ($23) {
        $24 = HEAP32[$to_nxt >> 2] | 0;
        $25 = $24;
        $26 = $$pre1 - $25 | 0;
        $27 = ($26 | 0) < 2;
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $14 >>> 6;
        $29 = $28 | 192;
        $30 = $29 & 255;
        $31 = $24 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $31;
        HEAP8[$24 >> 0] = $30;
        $32 = $14 & 63;
        $33 = $32 | 128;
        $34 = $33 & 255;
        $35 = HEAP32[$to_nxt >> 2] | 0;
        $36 = $35 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $36;
        HEAP8[$35 >> 0] = $34;
        break;
       }
       $37 = ($12 & 65535) < 55296;
       if ($37) {
        $38 = HEAP32[$to_nxt >> 2] | 0;
        $39 = $38;
        $40 = $$pre1 - $39 | 0;
        $41 = ($40 | 0) < 3;
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $14 >>> 12;
        $43 = $42 | 224;
        $44 = $43 & 255;
        $45 = $38 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $45;
        HEAP8[$38 >> 0] = $44;
        $46 = $14 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48 & 255;
        $50 = HEAP32[$to_nxt >> 2] | 0;
        $51 = $50 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $51;
        HEAP8[$50 >> 0] = $49;
        $52 = $14 & 63;
        $53 = $52 | 128;
        $54 = $53 & 255;
        $55 = HEAP32[$to_nxt >> 2] | 0;
        $56 = $55 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $56;
        HEAP8[$55 >> 0] = $54;
        break;
       }
       $57 = ($12 & 65535) < 56320;
       if (!$57) {
        $109 = ($12 & 65535) < 57344;
        if ($109) {
         $$0 = 2;
         break L4;
        }
        $110 = HEAP32[$to_nxt >> 2] | 0;
        $111 = $110;
        $112 = $$pre1 - $111 | 0;
        $113 = ($112 | 0) < 3;
        if ($113) {
         $$0 = 1;
         break L4;
        }
        $114 = $14 >>> 12;
        $115 = $114 | 224;
        $116 = $115 & 255;
        $117 = $110 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $117;
        HEAP8[$110 >> 0] = $116;
        $118 = $14 >>> 6;
        $119 = $118 & 63;
        $120 = $119 | 128;
        $121 = $120 & 255;
        $122 = HEAP32[$to_nxt >> 2] | 0;
        $123 = $122 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $123;
        HEAP8[$122 >> 0] = $121;
        $124 = $14 & 63;
        $125 = $124 | 128;
        $126 = $125 & 255;
        $127 = HEAP32[$to_nxt >> 2] | 0;
        $128 = $127 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $128;
        HEAP8[$127 >> 0] = $126;
        break;
       }
       $58 = $13;
       $59 = $10 - $58 | 0;
       $60 = ($59 | 0) < 4;
       if ($60) {
        $$0 = 1;
        break L4;
       }
       $61 = $13 + 2 | 0;
       $62 = HEAP16[$61 >> 1] | 0;
       $63 = $62 & 65535;
       $64 = $63 & 64512;
       $65 = ($64 | 0) == 56320;
       if (!$65) {
        $$0 = 2;
        break L4;
       }
       $66 = HEAP32[$to_nxt >> 2] | 0;
       $67 = $66;
       $68 = $$pre1 - $67 | 0;
       $69 = ($68 | 0) < 4;
       if ($69) {
        $$0 = 1;
        break L4;
       }
       $70 = $14 & 960;
       $71 = $70 << 10;
       $72 = $71 + 65536 | 0;
       $73 = $14 << 10;
       $74 = $73 & 64512;
       $75 = $72 | $74;
       $76 = $63 & 1023;
       $77 = $75 | $76;
       $78 = $77 >>> 0 > $Maxcode >>> 0;
       if ($78) {
        $$0 = 2;
        break L4;
       }
       HEAP32[$frm_nxt >> 2] = $61;
       $79 = $70 >>> 6;
       $80 = $79 + 1 | 0;
       $81 = $80 >>> 2;
       $82 = $81 | 240;
       $83 = $82 & 255;
       $84 = HEAP32[$to_nxt >> 2] | 0;
       $85 = $84 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $85;
       HEAP8[$84 >> 0] = $83;
       $86 = $80 << 4;
       $87 = $86 & 48;
       $88 = $14 >>> 2;
       $89 = $88 & 15;
       $90 = $89 | $87;
       $91 = $90 | 128;
       $92 = $91 & 255;
       $93 = HEAP32[$to_nxt >> 2] | 0;
       $94 = $93 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $94;
       HEAP8[$93 >> 0] = $92;
       $95 = $14 << 4;
       $96 = $95 & 48;
       $97 = $63 >>> 6;
       $98 = $97 & 15;
       $99 = $96 | $98;
       $100 = $99 | 128;
       $101 = $100 & 255;
       $102 = HEAP32[$to_nxt >> 2] | 0;
       $103 = $102 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $103;
       HEAP8[$102 >> 0] = $101;
       $104 = $63 & 63;
       $105 = $104 | 128;
       $106 = $105 & 255;
       $107 = HEAP32[$to_nxt >> 2] | 0;
       $108 = $107 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $108;
       HEAP8[$107 >> 0] = $106;
      }
     } while (0);
     $129 = HEAP32[$frm_nxt >> 2] | 0;
     $130 = $129 + 2 | 0;
     HEAP32[$frm_nxt >> 2] = $130;
     $131 = $130 >>> 0 < $frm_end >>> 0;
     if ($131) {
      $13 = $130;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $__way, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__way = $__way | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $4 = sp + 56 | 0;
 $6 = sp + 48 | 0;
 $8 = sp + 40 | 0;
 $10 = sp + 32 | 0;
 $12 = sp + 24 | 0;
 $15 = sp + 16 | 0;
 $__r = sp;
 $18 = sp + 64 | 0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20 >> 2] = $0;
 $21 = $19 + 4 | 0;
 $22 = $21;
 HEAP32[$22 >> 2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = $23 + 68 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = ($25 | 0) != (0 | 0);
 if (!$26) {
  $27 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __ZNSt8bad_castC2Ev($27), asyncState ? abort(-12) | 0 : 0;
  ___cxa_throw($27 | 0, 232 | 0, 75 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $28 = $23 + 68 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $31 + 24 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = (tempInt = FUNCTION_TABLE_ii[$33 & 1023]($30) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__width = $34;
 $35 = $23 + 64 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 $37 = ($36 | 0) == (0 | 0);
 if (!$37) {
  $38 = $__width;
  $39 = ($38 | 0) <= 0;
  $40 = $15;
  $41 = $40;
  $42 = HEAP32[$41 >> 2] | 0;
  $43 = $40 + 4 | 0;
  $44 = $43;
  $45 = HEAP32[$44 >> 2] | 0;
  $46 = ($42 | 0) != 0;
  $47 = ($45 | 0) != 0;
  $48 = $46 | $47;
  $or$cond = $39 & $48;
  if (!$or$cond) {
   $49 = HEAP32[$23 >> 2] | 0;
   $50 = $49 + 24 | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   $52 = (tempInt = FUNCTION_TABLE_ii[$51 & 1023]($23) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $53 = ($52 | 0) != 0;
   if (!$53) {
    $70 = $16;
    switch ($70 | 0) {
    case 0:
     {
      $__whence = 0;
      break;
     }
    case 1:
     {
      $__whence = 1;
      break;
     }
    case 2:
     {
      $__whence = 2;
      break;
     }
    default:
     {
      $3 = $agg$result;
      $71 = $4;
      $72 = $71;
      HEAP32[$72 >> 2] = -1;
      $73 = $71 + 4 | 0;
      $74 = $73;
      HEAP32[$74 >> 2] = -1;
      $75 = $3;
      HEAP32[$75 >> 2] = 0 | 0;
      HEAP32[$75 + 4 >> 2] = 0 | 0;
      $76 = $75 + 8 | 0;
      $77 = $4;
      $78 = $77;
      $79 = HEAP32[$78 >> 2] | 0;
      $80 = $77 + 4 | 0;
      $81 = $80;
      $82 = HEAP32[$81 >> 2] | 0;
      $83 = $76;
      $84 = $83;
      HEAP32[$84 >> 2] = $79;
      $85 = $83 + 4 | 0;
      $86 = $85;
      HEAP32[$86 >> 2] = $82;
      STACKTOP = sp;
      return;
     }
    }
    $87 = $23 + 64 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = $__width;
    $90 = ($89 | 0) > 0;
    if ($90) {
     $91 = $__width;
     $92 = ($91 | 0) < 0;
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95 >> 2] | 0;
     $97 = $94 + 4 | 0;
     $98 = $97;
     $99 = HEAP32[$98 >> 2] | 0;
     $100 = (tempInt = ___muldi3($91 | 0, $93 | 0, $96 | 0, $99 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $101 = tempRet0;
     $103 = $100;
     $145 = $101;
    } else {
     $103 = 0;
     $145 = 0;
    }
    $102 = $__whence;
    $104 = (tempInt = ___fseeko($88, $103, $102) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $105 = ($104 | 0) != 0;
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107 >> 2] = -1;
     $108 = $106 + 4 | 0;
     $109 = $108;
     HEAP32[$109 >> 2] = -1;
     $110 = $5;
     HEAP32[$110 >> 2] = 0 | 0;
     HEAP32[$110 + 4 >> 2] = 0 | 0;
     $111 = $110 + 8 | 0;
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113 >> 2] | 0;
     $115 = $112 + 4 | 0;
     $116 = $115;
     $117 = HEAP32[$116 >> 2] | 0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119 >> 2] = $114;
     $120 = $118 + 4 | 0;
     $121 = $120;
     HEAP32[$121 >> 2] = $117;
     STACKTOP = sp;
     return;
    } else {
     $122 = $23 + 64 | 0;
     $123 = HEAP32[$122 >> 2] | 0;
     $124 = (tempInt = ___ftello($123) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $125 = ($124 | 0) < 0;
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128 >> 2] = $124;
     $129 = $127 + 4 | 0;
     $130 = $129;
     HEAP32[$130 >> 2] = $126;
     $131 = $7;
     HEAP32[$131 >> 2] = 0 | 0;
     HEAP32[$131 + 4 >> 2] = 0 | 0;
     $132 = $131 + 8 | 0;
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134 >> 2] | 0;
     $136 = $133 + 4 | 0;
     $137 = $136;
     $138 = HEAP32[$137 >> 2] | 0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140 >> 2] = $135;
     $141 = $139 + 4 | 0;
     $142 = $141;
     HEAP32[$142 >> 2] = $138;
     $143 = $23 + 72 | 0;
     HEAP32[$18 >> 2] = HEAP32[$143 >> 2] | 0;
     HEAP32[$18 + 4 >> 2] = HEAP32[$143 + 4 >> 2] | 0;
     HEAP8[$10 >> 0] = HEAP8[$18 >> 0] | 0;
     HEAP8[$10 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
     HEAP8[$10 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
     HEAP8[$10 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
     HEAP8[$10 + 4 >> 0] = HEAP8[$18 + 4 >> 0] | 0;
     HEAP8[$10 + 5 >> 0] = HEAP8[$18 + 5 >> 0] | 0;
     HEAP8[$10 + 6 >> 0] = HEAP8[$18 + 6 >> 0] | 0;
     HEAP8[$10 + 7 >> 0] = HEAP8[$18 + 7 >> 0] | 0;
     $9 = $__r;
     $144 = $9;
     HEAP32[$144 >> 2] = HEAP32[$10 >> 2] | 0;
     HEAP32[$144 + 4 >> 2] = HEAP32[$10 + 4 >> 2] | 0;
     HEAP32[$agg$result >> 2] = HEAP32[$__r >> 2] | 0;
     HEAP32[$agg$result + 4 >> 2] = HEAP32[$__r + 4 >> 2] | 0;
     HEAP32[$agg$result + 8 >> 2] = HEAP32[$__r + 8 >> 2] | 0;
     HEAP32[$agg$result + 12 >> 2] = HEAP32[$__r + 12 >> 2] | 0;
     STACKTOP = sp;
     return;
    }
   }
  }
 }
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55 >> 2] = -1;
 $56 = $54 + 4 | 0;
 $57 = $56;
 HEAP32[$57 >> 2] = -1;
 $58 = $11;
 HEAP32[$58 >> 2] = 0 | 0;
 HEAP32[$58 + 4 >> 2] = 0 | 0;
 $59 = $58 + 8 | 0;
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $60 + 4 | 0;
 $64 = $63;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67 >> 2] = $62;
 $68 = $66 + 4 | 0;
 $69 = $68;
 HEAP32[$69 >> 2] = $65;
 STACKTOP = sp;
 return;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $0 = $mode & 4;
 $1 = ($0 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;
  $$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  $4 = $2;
  $5 = $3 - $4 | 0;
  $6 = ($5 | 0) > 2;
  if ($6) {
   $7 = HEAP8[$2 >> 0] | 0;
   $8 = $7 << 24 >> 24 == -17;
   if ($8) {
    $9 = $2 + 1 | 0;
    $10 = HEAP8[$9 >> 0] | 0;
    $11 = $10 << 24 >> 24 == -69;
    if ($11) {
     $12 = $2 + 2 | 0;
     $13 = HEAP8[$12 >> 0] | 0;
     $14 = $13 << 24 >> 24 == -65;
     if ($14) {
      $15 = $2 + 3 | 0;
      HEAP32[$frm_nxt >> 2] = $15;
      $$pre$pre = HEAP32[$to_nxt >> 2] | 0;
      $$pre = $$pre$pre;
      $$pre$phiZ2D = $3;
     } else {
      $$pre = $to;
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;
   $$pre$phiZ2D = $3;
  }
 }
 $16 = HEAP32[$frm_nxt >> 2] | 0;
 $17 = $16 >>> 0 < $frm_end >>> 0;
 $18 = $$pre >>> 0 < $to_end >>> 0;
 $19 = $17 & $18;
 L9 : do {
  if ($19) {
   $21 = $16;
   $25 = $$pre;
   while (1) {
    $20 = HEAP8[$21 >> 0] | 0;
    $22 = $20 & 255;
    $23 = $20 << 24 >> 24 > -1;
    do {
     if ($23) {
      $24 = $22 >>> 0 > $Maxcode >>> 0;
      if ($24) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25 >> 2] = $22;
      $26 = $21 + 1 | 0;
      HEAP32[$frm_nxt >> 2] = $26;
     } else {
      $27 = ($20 & 255) < 194;
      if ($27) {
       $$0 = 2;
       break L9;
      }
      $28 = ($20 & 255) < 224;
      if ($28) {
       $29 = $21;
       $30 = $$pre$phiZ2D - $29 | 0;
       $31 = ($30 | 0) < 2;
       if ($31) {
        $$0 = 1;
        break L9;
       }
       $32 = $21 + 1 | 0;
       $33 = HEAP8[$32 >> 0] | 0;
       $34 = $33 & 255;
       $35 = $34 & 192;
       $36 = ($35 | 0) == 128;
       if (!$36) {
        $$0 = 2;
        break L9;
       }
       $37 = $22 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = $40 >>> 0 > $Maxcode >>> 0;
       if ($41) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25 >> 2] = $40;
       $42 = $21 + 2 | 0;
       HEAP32[$frm_nxt >> 2] = $42;
       break;
      }
      $43 = ($20 & 255) < 240;
      if ($43) {
       $44 = $21;
       $45 = $$pre$phiZ2D - $44 | 0;
       $46 = ($45 | 0) < 3;
       if ($46) {
        $$0 = 1;
        break L9;
       }
       $47 = $21 + 1 | 0;
       $48 = HEAP8[$47 >> 0] | 0;
       $49 = $21 + 2 | 0;
       $50 = HEAP8[$49 >> 0] | 0;
       switch ($22 | 0) {
       case 224:
        {
         $51 = $48 & -32;
         $52 = $51 << 24 >> 24 == -96;
         if (!$52) {
          $$0 = 2;
          break L9;
         }
         break;
        }
       case 237:
        {
         $53 = $48 & -32;
         $54 = $53 << 24 >> 24 == -128;
         if (!$54) {
          $$0 = 2;
          break L9;
         }
         break;
        }
       default:
        {
         $55 = $48 & -64;
         $56 = $55 << 24 >> 24 == -128;
         if (!$56) {
          $$0 = 2;
          break L9;
         }
        }
       }
       $57 = $50 & 255;
       $58 = $57 & 192;
       $59 = ($58 | 0) == 128;
       if (!$59) {
        $$0 = 2;
        break L9;
       }
       $60 = $22 << 12;
       $61 = $60 & 61440;
       $62 = $48 & 255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = $67 >>> 0 > $Maxcode >>> 0;
       if ($68) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25 >> 2] = $67;
       $69 = $21 + 3 | 0;
       HEAP32[$frm_nxt >> 2] = $69;
       break;
      }
      $70 = ($20 & 255) < 245;
      if (!$70) {
       $$0 = 2;
       break L9;
      }
      $71 = $21;
      $72 = $$pre$phiZ2D - $71 | 0;
      $73 = ($72 | 0) < 4;
      if ($73) {
       $$0 = 1;
       break L9;
      }
      $74 = $21 + 1 | 0;
      $75 = HEAP8[$74 >> 0] | 0;
      $76 = $21 + 2 | 0;
      $77 = HEAP8[$76 >> 0] | 0;
      $78 = $21 + 3 | 0;
      $79 = HEAP8[$78 >> 0] | 0;
      switch ($22 | 0) {
      case 240:
       {
        $$off = $75 + 112 << 24 >> 24;
        $80 = ($$off & 255) < 48;
        if (!$80) {
         $$0 = 2;
         break L9;
        }
        break;
       }
      case 244:
       {
        $81 = $75 & -16;
        $82 = $81 << 24 >> 24 == -128;
        if (!$82) {
         $$0 = 2;
         break L9;
        }
        break;
       }
      default:
       {
        $83 = $75 & -64;
        $84 = $83 << 24 >> 24 == -128;
        if (!$84) {
         $$0 = 2;
         break L9;
        }
       }
      }
      $85 = $77 & 255;
      $86 = $85 & 192;
      $87 = ($86 | 0) == 128;
      if (!$87) {
       $$0 = 2;
       break L9;
      }
      $88 = $79 & 255;
      $89 = $88 & 192;
      $90 = ($89 | 0) == 128;
      if (!$90) {
       $$0 = 2;
       break L9;
      }
      $91 = $22 << 18;
      $92 = $91 & 1835008;
      $93 = $75 & 255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = $101 >>> 0 > $Maxcode >>> 0;
      if ($102) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25 >> 2] = $101;
      $103 = $21 + 4 | 0;
      HEAP32[$frm_nxt >> 2] = $103;
     }
    } while (0);
    $104 = HEAP32[$to_nxt >> 2] | 0;
    $105 = $104 + 4 | 0;
    HEAP32[$to_nxt >> 2] = $105;
    $106 = HEAP32[$frm_nxt >> 2] | 0;
    $107 = $106 >>> 0 < $frm_end >>> 0;
    $108 = $105 >>> 0 < $to_end >>> 0;
    $109 = $107 & $108;
    if ($109) {
     $21 = $106;
     $25 = $105;
    } else {
     $$lcssa = $107;
     label = 38;
     break;
    }
   }
  } else {
   $$lcssa = $17;
   label = 38;
  }
 } while (0);
 if ((label | 0) == 38) {
  $110 = $$lcssa & 1;
  $$0 = $110;
 }
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E9push_backEOSA_($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__annotator$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $9 = sp + 8 | 0;
 $14 = sp + 202 | 0;
 $__annotator$i = sp + 201 | 0;
 $39 = sp + 32 | 0;
 $40 = sp + 20 | 0;
 $43 = sp + 200 | 0;
 $44 = sp;
 $37 = $this;
 $38 = $value;
 $45 = $37;
 $46 = HEAP8[$45 >> 0] | 0;
 $47 = $46 << 24 >> 24 == 0;
 if (!$47) {
  $48 = HEAP8[$45 >> 0] | 0;
  $49 = $48 << 24 >> 24 == 2;
  if (!$49) {
   $50 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$expand_i1_val = 1;
   HEAP8[$43 >> 0] = $$expand_i1_val;
   __THREW__ = 0;
   invoke_vii(384, $40 | 0, $45 | 0), asyncState ? abort(-12) | 0 : 0;
   $51 = __THREW__;
   __THREW__ = 0;
   $52 = $51 & 1;
   if ($52) {
    $79 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $80 = tempRet0;
    $41 = $79;
    $42 = $80;
   } else {
    $35 = 14860;
    $36 = $40;
    $53 = $36;
    $54 = $35;
    __THREW__ = 0;
    $55 = (tempInt = invoke_iiii(385, $53 | 0, 0, $54 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $56 = __THREW__;
    __THREW__ = 0;
    $57 = $56 & 1;
    if ($57) {
     $81 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $82 = tempRet0;
     $41 = $81;
     $42 = $82;
    } else {
     $34 = $55;
     $58 = $34;
     $32 = $39;
     $33 = $58;
     $59 = $32;
     $60 = $33;
     $31 = $60;
     $61 = $31;
     HEAP32[$59 >> 2] = HEAP32[$61 >> 2] | 0;
     HEAP32[$59 + 4 >> 2] = HEAP32[$61 + 4 >> 2] | 0;
     HEAP32[$59 + 8 >> 2] = HEAP32[$61 + 8 >> 2] | 0;
     $62 = $33;
     $30 = $62;
     $63 = $30;
     $29 = $63;
     $64 = $29;
     $28 = $64;
     $65 = $28;
     $__a$i$i$i = $65;
     $__i$i$i$i = 0;
     while (1) {
      $66 = $__i$i$i$i;
      $67 = $66 >>> 0 < 3;
      if (!$67) {
       break;
      }
      $68 = $__i$i$i$i;
      $69 = $__a$i$i$i;
      $70 = $69 + ($68 << 2) | 0;
      HEAP32[$70 >> 2] = 0;
      $71 = $__i$i$i$i;
      $72 = $71 + 1 | 0;
      $__i$i$i$i = $72;
     }
     $26 = $50;
     $27 = $39;
     $73 = $26;
     $74 = $27;
     __THREW__ = 0;
     invoke_vii(386, $73 | 0, $74 | 0), asyncState ? abort(-12) | 0 : 0;
     $75 = __THREW__;
     __THREW__ = 0;
     $76 = $75 & 1;
     if (!$76) {
      $77 = 3236;
      HEAP32[$73 >> 2] = $77;
      $$expand_i1_val2 = 0;
      HEAP8[$43 >> 0] = $$expand_i1_val2;
      __THREW__ = 0;
      invoke_viii(387, $50 | 0, 160 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
      $78 = __THREW__;
      __THREW__ = 0;
     }
     $83 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $84 = tempRet0;
     $41 = $83;
     $42 = $84;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($39), asyncState ? abort(-12) | 0 : 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($40), asyncState ? abort(-12) | 0 : 0;
   }
   $$pre_trunc = HEAP8[$43 >> 0] | 0;
   $85 = $$pre_trunc & 1;
   if (!$85) {
    $128 = $41;
    $129 = $42;
    ___resumeException($128 | 0), asyncState ? abort(-12) | 0 : 0;
   }
   ___cxa_free_exception($50 | 0), asyncState ? abort(-12) | 0 : 0;
   $128 = $41;
   $129 = $42;
   ___resumeException($128 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $86 = HEAP8[$45 >> 0] | 0;
 $87 = $86 << 24 >> 24 == 0;
 if ($87) {
  HEAP8[$45 >> 0] = 2;
  $88 = $45 + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE($44, 2), asyncState ? abort(-12) | 0 : 0;
  HEAP32[$88 >> 2] = HEAP32[$44 >> 2] | 0;
  HEAP32[$88 + 4 >> 2] = HEAP32[$44 + 4 >> 2] | 0;
 }
 $89 = $45 + 8 | 0;
 $90 = HEAP32[$89 >> 2] | 0;
 $91 = $38;
 $25 = $91;
 $92 = $25;
 $23 = $90;
 $24 = $92;
 $93 = $23;
 $94 = $93 + 4 | 0;
 $95 = HEAP32[$94 >> 2] | 0;
 $22 = $93;
 $96 = $22;
 $97 = $96 + 8 | 0;
 $21 = $97;
 $98 = $21;
 $20 = $98;
 $99 = $20;
 $100 = HEAP32[$99 >> 2] | 0;
 $101 = $95 >>> 0 < $100 >>> 0;
 if ($101) {
  __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($__annotator$i, $93, 1), asyncState ? abort(-12) | 0 : 0;
  $19 = $93;
  $102 = $19;
  $103 = $102 + 8 | 0;
  $18 = $103;
  $104 = $18;
  $17 = $104;
  $105 = $17;
  $106 = $93 + 4 | 0;
  $107 = HEAP32[$106 >> 2] | 0;
  $15 = $107;
  $108 = $15;
  $109 = $24;
  $0 = $109;
  $110 = $0;
  $11 = $105;
  $12 = $108;
  $13 = $110;
  $111 = $11;
  $112 = $12;
  $113 = $13;
  $10 = $113;
  $114 = $10;
  HEAP8[$9 >> 0] = HEAP8[$14 >> 0] | 0;
  $6 = $111;
  $7 = $112;
  $8 = $114;
  $115 = $6;
  $116 = $7;
  $117 = $8;
  $5 = $117;
  $118 = $5;
  $2 = $115;
  $3 = $116;
  $4 = $118;
  $119 = $3;
  $120 = $4;
  $1 = $120;
  $121 = $1;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EOSA_($119, $121), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i), asyncState ? abort(-12) | 0 : 0;
  $122 = $93 + 4 | 0;
  $123 = HEAP32[$122 >> 2] | 0;
  $124 = $123 + 16 | 0;
  HEAP32[$122 >> 2] = $124;
  $127 = $38;
  HEAP8[$127 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  $125 = $24;
  $16 = $125;
  $126 = $16;
  __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE21__push_back_slow_pathISA_EEvOT_($93, $126), asyncState ? abort(-12) | 0 : 0;
  $127 = $38;
  HEAP8[$127 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function __Z10SendStatusv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $msg = sp + 32 | 0;
 $12 = sp + 16 | 0;
 $13 = sp;
 $14 = sp + 72 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 48 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev($msg), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 $17 = (tempInt = invoke_iii(376, $msg | 0, 13404 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $18 = __THREW__;
 __THREW__ = 0;
 $19 = $18 & 1;
 do {
  if (!$19) {
   __THREW__ = 0;
   invoke_vii(377, $12 | 0, 13475 | 0), asyncState ? abort(-12) | 0 : 0;
   $20 = __THREW__;
   __THREW__ = 0;
   $21 = $20 & 1;
   if (!$21) {
    (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($17, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($12), asyncState ? abort(-12) | 0 : 0;
    __THREW__ = 0;
    $22 = (tempInt = invoke_iii(378, $msg | 0, 13416 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    $24 = $23 & 1;
    if (!$24) {
     $9 = 2368;
     $25 = $9;
     $26 = $25 + 4 | 0;
     __THREW__ = 0;
     invoke_vii(390, $14 | 0, $26 | 0), asyncState ? abort(-12) | 0 : 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __THREW__ = 0;
      invoke_vii(389, $13 | 0, $14 | 0), asyncState ? abort(-12) | 0 : 0;
      $29 = __THREW__;
      __THREW__ = 0;
      $30 = $29 & 1;
      if ($30) {
       $60 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $61 = tempRet0;
       $10 = $60;
       $11 = $61;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14), asyncState ? abort(-12) | 0 : 0;
       __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
       $66 = $10;
       $67 = $11;
       ___resumeException($66 | 0), asyncState ? abort(-12) | 0 : 0;
      }
      (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($22, $13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($13), asyncState ? abort(-12) | 0 : 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14), asyncState ? abort(-12) | 0 : 0;
      __THREW__ = 0;
      invoke_viii(391, $15 | 0, $msg | 0, -1), asyncState ? abort(-12) | 0 : 0;
      $31 = __THREW__;
      __THREW__ = 0;
      $32 = $31 & 1;
      if (!$32) {
       __THREW__ = 0;
       invoke_vi(392, $15 | 0), asyncState ? abort(-12) | 0 : 0;
       $33 = __THREW__;
       __THREW__ = 0;
       $34 = $33 & 1;
       if ($34) {
        $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $63 = tempRet0;
        $10 = $62;
        $11 = $63;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15), asyncState ? abort(-12) | 0 : 0;
        __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
        $66 = $10;
        $67 = $11;
        ___resumeException($66 | 0), asyncState ? abort(-12) | 0 : 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15), asyncState ? abort(-12) | 0 : 0;
       $7 = $16;
       $8 = 21619;
       $35 = $7;
       $6 = $35;
       $36 = $6;
       $5 = $36;
       $37 = $5;
       $4 = $37;
       $38 = $8;
       $39 = $8;
       __THREW__ = 0;
       $40 = (tempInt = invoke_ii(363, $39 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $41 = __THREW__;
       __THREW__ = 0;
       $42 = $41 & 1;
       if (!$42) {
        __THREW__ = 0;
        invoke_viii(393, $35 | 0, $38 | 0, $40 | 0), asyncState ? abort(-12) | 0 : 0;
        $43 = __THREW__;
        __THREW__ = 0;
        $44 = $43 & 1;
        if (!$44) {
         $2 = 2368;
         $3 = $16;
         $45 = $2;
         $46 = $45 + 4 | 0;
         $47 = $3;
         __THREW__ = 0;
         invoke_vii(368, $46 | 0, $47 | 0), asyncState ? abort(-12) | 0 : 0;
         $48 = __THREW__;
         __THREW__ = 0;
         $49 = $48 & 1;
         if ($49) {
          $64 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $65 = tempRet0;
          $10 = $64;
          $11 = $65;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16), asyncState ? abort(-12) | 0 : 0;
          __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
          $66 = $10;
          $67 = $11;
          ___resumeException($66 | 0), asyncState ? abort(-12) | 0 : 0;
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16), asyncState ? abort(-12) | 0 : 0;
          $50 = HEAP32[2368 >> 2] | 0;
          $51 = $50 + -12 | 0;
          $52 = HEAP32[$51 >> 2] | 0;
          $53 = 2368 + $52 | 0;
          $0 = $53;
          $1 = 0;
          $54 = $0;
          $55 = $1;
          __THREW__ = 0;
          invoke_vii(394, $54 | 0, $55 | 0), asyncState ? abort(-12) | 0 : 0;
          $56 = __THREW__;
          __THREW__ = 0;
          $57 = $56 & 1;
          if ($57) {
           break;
          }
          __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
          STACKTOP = sp;
          return;
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $58 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $59 = tempRet0;
 $10 = $58;
 $11 = $59;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($msg), asyncState ? abort(-12) | 0 : 0;
 $66 = $10;
 $67 = $11;
 ___resumeException($66 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this, $__is, $__noskipws) {
 $this = $this | 0;
 $__is = $__is | 0;
 $__noskipws = $__noskipws | 0;
 var $$ = 0, $$0$i$i = 0, $$in = 0, $$ph = 0, $$ph18 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp;
 HEAP8[$this >> 0] = 0;
 $1 = HEAP32[$__is >> 2] | 0;
 $2 = $1 + -12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $$sum = $3 + 16 | 0;
 $4 = $__is + $$sum | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) == 0;
 if ($6) {
  $$sum13 = $3 + 72 | 0;
  $7 = $__is + $$sum13 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = ($8 | 0) == (0 | 0);
  if (!$9) {
   (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
  do {
   if (!$__noskipws) {
    $10 = HEAP32[$__is >> 2] | 0;
    $11 = $10 + -12 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $$sum14 = $12 + 4 | 0;
    $13 = $__is + $$sum14 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 & 4096;
    $16 = ($15 | 0) == 0;
    if (!$16) {
     $17 = $__is + $12 | 0;
     $18 = (tempInt = __ZNKSt3__18ios_base6getlocEv($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$0 >> 2] = $18;
     __THREW__ = 0;
     $19 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $20 = __THREW__;
     __THREW__ = 0;
     $21 = $20 & 1;
     if ($21) {
      $61 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $62 = tempRet0;
      __ZNSt3__16localeD2Ev($0), asyncState ? abort(-12) | 0 : 0;
      ___resumeException($61 | 0), asyncState ? abort(-12) | 0 : 0;
     }
     __ZNSt3__16localeD2Ev($0), asyncState ? abort(-12) | 0 : 0;
     $22 = HEAP32[$__is >> 2] | 0;
     $23 = $22 + -12 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $$sum$i = $24 + 24 | 0;
     $25 = $__is + $$sum$i | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $27 = $19 + 8 | 0;
     $28 = ($26 | 0) == 0;
     L12 : do {
      if ($28) {
       $$ph = 0;
       label = 10;
      } else {
       $$in = $26;
       while (1) {
        $29 = $$in;
        $30 = $29 + 12 | 0;
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = $29 + 16 | 0;
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = ($31 | 0) == ($33 | 0);
        if ($34) {
         $35 = $$in;
         $36 = HEAP32[$35 >> 2] | 0;
         $37 = $36 + 36 | 0;
         $38 = HEAP32[$37 >> 2] | 0;
         $39 = (tempInt = FUNCTION_TABLE_ii[$38 & 1023]($29) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $40 = ($39 | 0) == -1;
         $$ = $40 ? 0 : $$in;
         if ($40) {
          $$ph = $$;
          label = 10;
          break L12;
         } else {
          $$ph18 = $$;
         }
        } else {
         $$ph18 = $$in;
        }
        $41 = $$ph18;
        $42 = $41 + 12 | 0;
        $43 = HEAP32[$42 >> 2] | 0;
        $44 = $41 + 16 | 0;
        $45 = HEAP32[$44 >> 2] | 0;
        $46 = ($43 | 0) == ($45 | 0);
        if ($46) {
         $47 = $$ph18;
         $48 = HEAP32[$47 >> 2] | 0;
         $49 = $48 + 36 | 0;
         $50 = HEAP32[$49 >> 2] | 0;
         $51 = (tempInt = FUNCTION_TABLE_ii[$50 & 1023]($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $$0$i$i = $51;
        } else {
         $52 = HEAP8[$43 >> 0] | 0;
         $53 = $52 & 255;
         $$0$i$i = $53;
        }
        $54 = $$0$i$i & 255;
        $isascii1$i = $54 << 24 >> 24 > -1;
        if (!$isascii1$i) {
         $$pre$phiZ2D = $41;
         $73 = $$ph18;
         break L12;
        }
        $sext = $$0$i$i << 24;
        $55 = $sext >> 24;
        $56 = HEAP32[$27 >> 2] | 0;
        $57 = $56 + ($55 << 1) | 0;
        $58 = HEAP16[$57 >> 1] | 0;
        $59 = $58 & 8192;
        $60 = $59 << 16 >> 16 == 0;
        if ($60) {
         $$pre$phiZ2D = $41;
         $73 = $$ph18;
         break L12;
        }
        $63 = HEAP32[$42 >> 2] | 0;
        $64 = HEAP32[$44 >> 2] | 0;
        $65 = ($63 | 0) == ($64 | 0);
        if ($65) {
         $66 = $$ph18;
         $67 = HEAP32[$66 >> 2] | 0;
         $68 = $67 + 40 | 0;
         $69 = HEAP32[$68 >> 2] | 0;
         (tempInt = FUNCTION_TABLE_ii[$69 & 1023]($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        } else {
         $71 = $63 + 1 | 0;
         HEAP32[$42 >> 2] = $71;
        }
        $70 = ($$ph18 | 0) == 0;
        if ($70) {
         $$ph = 0;
         label = 10;
         break;
        } else {
         $$in = $$ph18;
        }
       }
      }
     } while (0);
     if ((label | 0) == 10) {
      $$pre = $$ph;
      $$pre$phiZ2D = $$pre;
      $73 = $$ph;
     }
     $72 = ($73 | 0) == 0;
     if (!$72) {
      $74 = $$pre$phiZ2D + 12 | 0;
      $75 = HEAP32[$74 >> 2] | 0;
      $76 = $$pre$phiZ2D + 16 | 0;
      $77 = HEAP32[$76 >> 2] | 0;
      $78 = ($75 | 0) == ($77 | 0);
      if (!$78) {
       break;
      }
      $79 = $73;
      $80 = HEAP32[$79 >> 2] | 0;
      $81 = $80 + 36 | 0;
      $82 = HEAP32[$81 >> 2] | 0;
      $83 = (tempInt = FUNCTION_TABLE_ii[$82 & 1023]($$pre$phiZ2D) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $84 = ($83 | 0) == -1;
      if (!$84) {
       break;
      }
     }
     $85 = HEAP32[$__is >> 2] | 0;
     $86 = $85 + -12 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     $88 = $__is + $87 | 0;
     $$sum16 = $87 + 16 | 0;
     $89 = $__is + $$sum16 | 0;
     $90 = HEAP32[$89 >> 2] | 0;
     $91 = $90 | 6;
     __ZNSt3__18ios_base5clearEj($88, $91), asyncState ? abort(-12) | 0 : 0;
    }
   }
  } while (0);
  $92 = HEAP32[$__is >> 2] | 0;
  $93 = $92 + -12 | 0;
  $94 = HEAP32[$93 >> 2] | 0;
  $$sum15 = $94 + 16 | 0;
  $95 = $__is + $$sum15 | 0;
  $96 = HEAP32[$95 >> 2] | 0;
  $97 = ($96 | 0) == 0;
  $98 = $97 & 1;
  HEAP8[$this >> 0] = $98;
 } else {
  $99 = $__is + $3 | 0;
  $100 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($99, $100), asyncState ? abort(-12) | 0 : 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE15__insert_uniqueIRKNS_4pairIKS7_SC_EEEENS_15__tree_iteratorISD_PNS_11__tree_nodeISD_PvEEiEENS_21__tree_const_iteratorISD_SU_iEEOT_($this, $__p, $__v) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 304 | 0;
 $14 = sp + 8 | 0;
 $17 = sp + 309 | 0;
 $40 = sp;
 $43 = sp + 308 | 0;
 $64 = sp + 48 | 0;
 $__h = sp + 28 | 0;
 $67 = sp + 24 | 0;
 $65 = $this;
 $66 = $__v;
 $71 = $65;
 $72 = $66;
 $63 = $72;
 $73 = $63;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE16__construct_nodeIJRKNS_4pairIKS7_SC_EEEEENS_10unique_ptrINS_11__tree_nodeISD_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_($__h, $71, $73), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$67 >> 2] = HEAP32[$__p >> 2] | 0;
 $62 = $__h;
 $74 = $62;
 $61 = $74;
 $75 = $61;
 $60 = $75;
 $76 = $60;
 $77 = HEAP32[$76 >> 2] | 0;
 __THREW__ = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$67 >> 2] | 0;
 $78 = (tempInt = invoke_iiii(442, $71 | 0, $$byval_copy | 0, $77 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $79 = __THREW__;
 __THREW__ = 0;
 $80 = $79 & 1;
 if ($80) {
  $93 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $94 = tempRet0;
  $68 = $93;
  $69 = $94;
  $51 = $__h;
  $95 = $51;
  $49 = $95;
  $50 = 0;
  $96 = $49;
  $48 = $96;
  $97 = $48;
  $47 = $97;
  $98 = $47;
  $99 = HEAP32[$98 >> 2] | 0;
  $__tmp$i$i = $99;
  $100 = $50;
  $29 = $96;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  HEAP32[$102 >> 2] = $100;
  $103 = $__tmp$i$i;
  $104 = ($103 | 0) != (0 | 0);
  if (!$104) {
   $166 = $68;
   $167 = $69;
   ___resumeException($166 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $27 = $96;
  $105 = $27;
  $26 = $105;
  $106 = $26;
  $107 = $106 + 4 | 0;
  $108 = $__tmp$i$i;
  $45 = $107;
  $46 = $108;
  $109 = $45;
  $110 = $109 + 4 | 0;
  $111 = HEAP8[$110 >> 0] | 0;
  $112 = $111 & 1;
  if ($112) {
   $113 = HEAP32[$109 >> 2] | 0;
   $114 = $46;
   $115 = $114 + 16 | 0;
   $44 = $115;
   $116 = $44;
   $41 = $113;
   $42 = $116;
   $117 = $41;
   $118 = $42;
   HEAP8[$40 >> 0] = HEAP8[$43 >> 0] | 0;
   $38 = $117;
   $39 = $118;
   $119 = $39;
   $37 = $119;
   $120 = $37;
   __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($120), asyncState ? abort(-12) | 0 : 0;
  }
  $121 = $46;
  $122 = ($121 | 0) != (0 | 0);
  if (!$122) {
   $166 = $68;
   $167 = $69;
   ___resumeException($166 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $123 = HEAP32[$109 >> 2] | 0;
  $124 = $46;
  $34 = $123;
  $35 = $124;
  $36 = 1;
  $125 = $34;
  $126 = $35;
  $127 = $36;
  $31 = $125;
  $32 = $126;
  $33 = $127;
  $128 = $32;
  $30 = $128;
  $129 = $30;
  __ZdlPv($129), asyncState ? abort(-12) | 0 : 0;
  $166 = $68;
  $167 = $69;
  ___resumeException($166 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 HEAP32[$64 >> 2] = $78;
 $81 = HEAP32[$64 >> 2] | 0;
 $59 = $__h;
 $82 = $59;
 $58 = $82;
 $83 = $58;
 $57 = $83;
 $84 = $57;
 $85 = HEAP32[$84 >> 2] | 0;
 $86 = ($81 | 0) == ($85 | 0);
 if ($86) {
  $56 = $__h;
  $87 = $56;
  $55 = $87;
  $88 = $55;
  $54 = $88;
  $89 = $54;
  $90 = HEAP32[$89 >> 2] | 0;
  $__t$i = $90;
  $53 = $87;
  $91 = $53;
  $52 = $91;
  $92 = $52;
  HEAP32[$92 >> 2] = 0;
 }
 $70 = 1;
 $25 = $__h;
 $130 = $25;
 $23 = $130;
 $24 = 0;
 $131 = $23;
 $22 = $131;
 $132 = $22;
 $21 = $132;
 $133 = $21;
 $134 = HEAP32[$133 >> 2] | 0;
 $__tmp$i$i1 = $134;
 $135 = $24;
 $3 = $131;
 $136 = $3;
 $2 = $136;
 $137 = $2;
 HEAP32[$137 >> 2] = $135;
 $138 = $__tmp$i$i1;
 $139 = ($138 | 0) != (0 | 0);
 if (!$139) {
  $165 = HEAP32[$64 >> 2] | 0;
  STACKTOP = sp;
  return $165 | 0;
 }
 $1 = $131;
 $140 = $1;
 $0 = $140;
 $141 = $0;
 $142 = $141 + 4 | 0;
 $143 = $__tmp$i$i1;
 $19 = $142;
 $20 = $143;
 $144 = $19;
 $145 = $144 + 4 | 0;
 $146 = HEAP8[$145 >> 0] | 0;
 $147 = $146 & 1;
 if ($147) {
  $148 = HEAP32[$144 >> 2] | 0;
  $149 = $20;
  $150 = $149 + 16 | 0;
  $18 = $150;
  $151 = $18;
  $15 = $148;
  $16 = $151;
  $152 = $15;
  $153 = $16;
  HEAP8[$14 >> 0] = HEAP8[$17 >> 0] | 0;
  $12 = $152;
  $13 = $153;
  $154 = $13;
  $11 = $154;
  $155 = $11;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($155), asyncState ? abort(-12) | 0 : 0;
 }
 $156 = $20;
 $157 = ($156 | 0) != (0 | 0);
 if (!$157) {
  $165 = HEAP32[$64 >> 2] | 0;
  STACKTOP = sp;
  return $165 | 0;
 }
 $158 = HEAP32[$144 >> 2] | 0;
 $159 = $20;
 $8 = $158;
 $9 = $159;
 $10 = 1;
 $160 = $8;
 $161 = $9;
 $162 = $10;
 $5 = $160;
 $6 = $161;
 $7 = $162;
 $163 = $6;
 $4 = $163;
 $164 = $4;
 __ZdlPv($164), asyncState ? abort(-12) | 0 : 0;
 $165 = HEAP32[$64 >> 2] | 0;
 STACKTOP = sp;
 return $165 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEx($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $__s = sp + 8 | 0;
 $4 = sp;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 L1 : do {
  if ($6) {
   $57 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $58 = tempRet0;
   $$1 = $57;
   $$pre$phi5Z2D = $this;
   $$pre$phiZ2D = $this;
   label = 19;
  } else {
   $7 = HEAP8[$__s >> 0] | 0;
   $8 = $7 << 24 >> 24 == 0;
   do {
    if (!$8) {
     $9 = HEAP32[$this >> 2] | 0;
     $10 = $9 + -12 | 0;
     $11 = HEAP32[$10 >> 2] | 0;
     $12 = $this + $11 | 0;
     $13 = (tempInt = __ZNKSt3__18ios_base6getlocEv($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$4 >> 2] = $13;
     __THREW__ = 0;
     $14 = (tempInt = invoke_iii(398, $4 | 0, 8088 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $15 = __THREW__;
     __THREW__ = 0;
     $16 = $15 & 1;
     if ($16) {
      $61 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $62 = tempRet0;
      __ZNSt3__16localeD2Ev($4), asyncState ? abort(-12) | 0 : 0;
      $$0 = $61;
     } else {
      __ZNSt3__16localeD2Ev($4), asyncState ? abort(-12) | 0 : 0;
      $17 = HEAP32[$this >> 2] | 0;
      $18 = $17 + -12 | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $$sum$i = $19 + 24 | 0;
      $20 = $this + $$sum$i | 0;
      $21 = HEAP32[$20 >> 2] | 0;
      $22 = $this + $19 | 0;
      $$sum = $19 + 76 | 0;
      $23 = $this + $$sum | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      $25 = ($24 | 0) == -1;
      do {
       if ($25) {
        $26 = (tempInt = __ZNKSt3__18ios_base6getlocEv($22) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        HEAP32[$3 >> 2] = $26;
        __THREW__ = 0;
        $27 = (tempInt = invoke_iii(398, $3 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $28 = __THREW__;
        __THREW__ = 0;
        $29 = $28 & 1;
        if (!$29) {
         $30 = HEAP32[$27 >> 2] | 0;
         $31 = $30 + 28 | 0;
         $32 = HEAP32[$31 >> 2] | 0;
         __THREW__ = 0;
         $33 = (tempInt = invoke_iii($32 | 0, $27 | 0, 32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $34 = __THREW__;
         __THREW__ = 0;
         $35 = $34 & 1;
         if (!$35) {
          __ZNSt3__16localeD2Ev($3), asyncState ? abort(-12) | 0 : 0;
          $38 = $33 << 24 >> 24;
          HEAP32[$23 >> 2] = $38;
          $$pre$phi7Z2D = $22;
          $40 = $38;
          label = 10;
          break;
         }
        }
        $36 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $37 = tempRet0;
        __ZNSt3__16localeD2Ev($3), asyncState ? abort(-12) | 0 : 0;
        $eh$lpad$body$indexZ2D = $36;
       } else {
        $$pre$phi7Z2D = $22;
        $40 = $24;
        label = 10;
       }
      } while (0);
      if ((label | 0) == 10) {
       $39 = $40 & 255;
       $41 = HEAP32[$14 >> 2] | 0;
       $42 = $41 + 20 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       HEAP32[$2 >> 2] = $21;
       __THREW__ = 0;
       HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2] | 0;
       $44 = (tempInt = invoke_iiiiiii($43 | 0, $14 | 0, $$byval_copy | 0, $$pre$phi7Z2D | 0, $39 | 0, $0 | 0, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $45 = __THREW__;
       __THREW__ = 0;
       $46 = $45 & 1;
       if (!$46) {
        $47 = ($44 | 0) == (0 | 0);
        if (!$47) {
         break;
        }
        $48 = HEAP32[$this >> 2] | 0;
        $49 = $48 + -12 | 0;
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = $this + $50 | 0;
        $$sum3 = $50 + 16 | 0;
        $52 = $this + $$sum3 | 0;
        $53 = HEAP32[$52 >> 2] | 0;
        $54 = $53 | 5;
        __THREW__ = 0;
        invoke_vii(394, $51 | 0, $54 | 0), asyncState ? abort(-12) | 0 : 0;
        $55 = __THREW__;
        __THREW__ = 0;
        $56 = $55 & 1;
        if (!$56) {
         break;
        }
       }
       $59 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $60 = tempRet0;
       $eh$lpad$body$indexZ2D = $59;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$pre$phi5Z2D = $this;
     $$pre$phiZ2D = $this;
     label = 19;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   (tempInt = ___cxa_begin_catch($$1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $63 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $64 = $63 + -12 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   $66 = $$pre$phi5Z2D + $65 | 0;
   __THREW__ = 0;
   invoke_vi(420, $66 | 0), asyncState ? abort(-12) | 0 : 0;
   $67 = __THREW__;
   __THREW__ = 0;
   $68 = $67 & 1;
   if (!$68) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $69 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $70 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $71 = __THREW__;
   __THREW__ = 0;
   $72 = $71 & 1;
   if ($72) {
    $73 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $74 = tempRet0;
    ___clang_call_terminate($73), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($69 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEb($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $__s = sp + 8 | 0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 L1 : do {
  if ($4) {
   $55 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $56 = tempRet0;
   $$1 = $55;
   $$pre$phi5Z2D = $this;
   $$pre$phiZ2D = $this;
   label = 19;
  } else {
   $5 = HEAP8[$__s >> 0] | 0;
   $6 = $5 << 24 >> 24 == 0;
   do {
    if (!$6) {
     $7 = HEAP32[$this >> 2] | 0;
     $8 = $7 + -12 | 0;
     $9 = HEAP32[$8 >> 2] | 0;
     $10 = $this + $9 | 0;
     $11 = (tempInt = __ZNKSt3__18ios_base6getlocEv($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$2 >> 2] = $11;
     __THREW__ = 0;
     $12 = (tempInt = invoke_iii(398, $2 | 0, 8088 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $13 = __THREW__;
     __THREW__ = 0;
     $14 = $13 & 1;
     if ($14) {
      $59 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $60 = tempRet0;
      __ZNSt3__16localeD2Ev($2), asyncState ? abort(-12) | 0 : 0;
      $$0 = $59;
     } else {
      __ZNSt3__16localeD2Ev($2), asyncState ? abort(-12) | 0 : 0;
      $15 = HEAP32[$this >> 2] | 0;
      $16 = $15 + -12 | 0;
      $17 = HEAP32[$16 >> 2] | 0;
      $$sum$i = $17 + 24 | 0;
      $18 = $this + $$sum$i | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $this + $17 | 0;
      $$sum = $17 + 76 | 0;
      $21 = $this + $$sum | 0;
      $22 = HEAP32[$21 >> 2] | 0;
      $23 = ($22 | 0) == -1;
      do {
       if ($23) {
        $24 = (tempInt = __ZNKSt3__18ios_base6getlocEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        HEAP32[$1 >> 2] = $24;
        __THREW__ = 0;
        $25 = (tempInt = invoke_iii(398, $1 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $26 = __THREW__;
        __THREW__ = 0;
        $27 = $26 & 1;
        if (!$27) {
         $28 = HEAP32[$25 >> 2] | 0;
         $29 = $28 + 28 | 0;
         $30 = HEAP32[$29 >> 2] | 0;
         __THREW__ = 0;
         $31 = (tempInt = invoke_iii($30 | 0, $25 | 0, 32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $32 = __THREW__;
         __THREW__ = 0;
         $33 = $32 & 1;
         if (!$33) {
          __ZNSt3__16localeD2Ev($1), asyncState ? abort(-12) | 0 : 0;
          $36 = $31 << 24 >> 24;
          HEAP32[$21 >> 2] = $36;
          $$pre$phi7Z2D = $20;
          $38 = $36;
          label = 10;
          break;
         }
        }
        $34 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $35 = tempRet0;
        __ZNSt3__16localeD2Ev($1), asyncState ? abort(-12) | 0 : 0;
        $eh$lpad$body$indexZ2D = $34;
       } else {
        $$pre$phi7Z2D = $20;
        $38 = $22;
        label = 10;
       }
      } while (0);
      if ((label | 0) == 10) {
       $37 = $38 & 255;
       $39 = HEAP32[$12 >> 2] | 0;
       $40 = $39 + 12 | 0;
       $41 = HEAP32[$40 >> 2] | 0;
       HEAP32[$0 >> 2] = $19;
       __THREW__ = 0;
       HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
       $42 = (tempInt = invoke_iiiiii($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phi7Z2D | 0, $37 | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $43 = __THREW__;
       __THREW__ = 0;
       $44 = $43 & 1;
       if (!$44) {
        $45 = ($42 | 0) == (0 | 0);
        if (!$45) {
         break;
        }
        $46 = HEAP32[$this >> 2] | 0;
        $47 = $46 + -12 | 0;
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = $this + $48 | 0;
        $$sum3 = $48 + 16 | 0;
        $50 = $this + $$sum3 | 0;
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = $51 | 5;
        __THREW__ = 0;
        invoke_vii(394, $49 | 0, $52 | 0), asyncState ? abort(-12) | 0 : 0;
        $53 = __THREW__;
        __THREW__ = 0;
        $54 = $53 & 1;
        if (!$54) {
         break;
        }
       }
       $57 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $58 = tempRet0;
       $eh$lpad$body$indexZ2D = $57;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$pre$phi5Z2D = $this;
     $$pre$phiZ2D = $this;
     label = 19;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   (tempInt = ___cxa_begin_catch($$1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $61 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $62 = $61 + -12 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $64 = $$pre$phi5Z2D + $63 | 0;
   __THREW__ = 0;
   invoke_vi(420, $64 | 0), asyncState ? abort(-12) | 0 : 0;
   $65 = __THREW__;
   __THREW__ = 0;
   $66 = $65 & 1;
   if (!$66) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $68 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $69 = __THREW__;
   __THREW__ = 0;
   $70 = $69 & 1;
   if ($70) {
    $71 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $72 = tempRet0;
    ___clang_call_terminate($71), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($67 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd($this, $__n) {
 $this = $this | 0;
 $__n = +$__n;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $__s = sp + 8 | 0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 L1 : do {
  if ($4) {
   $55 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $56 = tempRet0;
   $$1 = $55;
   $$pre$phi5Z2D = $this;
   $$pre$phiZ2D = $this;
   label = 19;
  } else {
   $5 = HEAP8[$__s >> 0] | 0;
   $6 = $5 << 24 >> 24 == 0;
   do {
    if (!$6) {
     $7 = HEAP32[$this >> 2] | 0;
     $8 = $7 + -12 | 0;
     $9 = HEAP32[$8 >> 2] | 0;
     $10 = $this + $9 | 0;
     $11 = (tempInt = __ZNKSt3__18ios_base6getlocEv($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$2 >> 2] = $11;
     __THREW__ = 0;
     $12 = (tempInt = invoke_iii(398, $2 | 0, 8088 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $13 = __THREW__;
     __THREW__ = 0;
     $14 = $13 & 1;
     if ($14) {
      $59 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $60 = tempRet0;
      __ZNSt3__16localeD2Ev($2), asyncState ? abort(-12) | 0 : 0;
      $$0 = $59;
     } else {
      __ZNSt3__16localeD2Ev($2), asyncState ? abort(-12) | 0 : 0;
      $15 = HEAP32[$this >> 2] | 0;
      $16 = $15 + -12 | 0;
      $17 = HEAP32[$16 >> 2] | 0;
      $$sum$i = $17 + 24 | 0;
      $18 = $this + $$sum$i | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $this + $17 | 0;
      $$sum = $17 + 76 | 0;
      $21 = $this + $$sum | 0;
      $22 = HEAP32[$21 >> 2] | 0;
      $23 = ($22 | 0) == -1;
      do {
       if ($23) {
        $24 = (tempInt = __ZNKSt3__18ios_base6getlocEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        HEAP32[$1 >> 2] = $24;
        __THREW__ = 0;
        $25 = (tempInt = invoke_iii(398, $1 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $26 = __THREW__;
        __THREW__ = 0;
        $27 = $26 & 1;
        if (!$27) {
         $28 = HEAP32[$25 >> 2] | 0;
         $29 = $28 + 28 | 0;
         $30 = HEAP32[$29 >> 2] | 0;
         __THREW__ = 0;
         $31 = (tempInt = invoke_iii($30 | 0, $25 | 0, 32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $32 = __THREW__;
         __THREW__ = 0;
         $33 = $32 & 1;
         if (!$33) {
          __ZNSt3__16localeD2Ev($1), asyncState ? abort(-12) | 0 : 0;
          $36 = $31 << 24 >> 24;
          HEAP32[$21 >> 2] = $36;
          $$pre$phi7Z2D = $20;
          $38 = $36;
          label = 10;
          break;
         }
        }
        $34 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $35 = tempRet0;
        __ZNSt3__16localeD2Ev($1), asyncState ? abort(-12) | 0 : 0;
        $eh$lpad$body$indexZ2D = $34;
       } else {
        $$pre$phi7Z2D = $20;
        $38 = $22;
        label = 10;
       }
      } while (0);
      if ((label | 0) == 10) {
       $37 = $38 & 255;
       $39 = HEAP32[$12 >> 2] | 0;
       $40 = $39 + 32 | 0;
       $41 = HEAP32[$40 >> 2] | 0;
       HEAP32[$0 >> 2] = $19;
       __THREW__ = 0;
       HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
       $42 = (tempInt = invoke_iiiiid($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phi7Z2D | 0, $37 | 0, +$__n) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $43 = __THREW__;
       __THREW__ = 0;
       $44 = $43 & 1;
       if (!$44) {
        $45 = ($42 | 0) == (0 | 0);
        if (!$45) {
         break;
        }
        $46 = HEAP32[$this >> 2] | 0;
        $47 = $46 + -12 | 0;
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = $this + $48 | 0;
        $$sum3 = $48 + 16 | 0;
        $50 = $this + $$sum3 | 0;
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = $51 | 5;
        __THREW__ = 0;
        invoke_vii(394, $49 | 0, $52 | 0), asyncState ? abort(-12) | 0 : 0;
        $53 = __THREW__;
        __THREW__ = 0;
        $54 = $53 & 1;
        if (!$54) {
         break;
        }
       }
       $57 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $58 = tempRet0;
       $eh$lpad$body$indexZ2D = $57;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     $$1 = $$0;
     $$pre$phi5Z2D = $this;
     $$pre$phiZ2D = $this;
     label = 19;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   (tempInt = ___cxa_begin_catch($$1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $61 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $62 = $61 + -12 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $64 = $$pre$phi5Z2D + $63 | 0;
   __THREW__ = 0;
   invoke_vi(420, $64 | 0), asyncState ? abort(-12) | 0 : 0;
   $65 = __THREW__;
   __THREW__ = 0;
   $66 = $65 & 1;
   if (!$66) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $68 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $69 = __THREW__;
   __THREW__ = 0;
   $70 = $69 & 1;
   if ($70) {
    $71 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $72 = tempRet0;
    ___clang_call_terminate($71), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($67 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy2 = sp + 60 | 0;
 $$byval_copy1 = sp + 56 | 0;
 $$byval_copy = sp + 52 | 0;
 $__lv = sp + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $__names = sp + 8 | 0;
 $4 = sp;
 $5 = $__iob + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 & 1;
 $8 = ($7 | 0) == 0;
 L1 : do {
  if ($8) {
   HEAP32[$__lv >> 2] = -1;
   $9 = HEAP32[$this >> 2] | 0;
   $10 = $9 + 16 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = HEAP32[$__b >> 2] | 0;
   HEAP32[$0 >> 2] = $12;
   $13 = HEAP32[$__e >> 2] | 0;
   HEAP32[$1 >> 2] = $13;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
   $14 = (tempInt = FUNCTION_TABLE_iiiiiii[$11 & 511]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__b >> 2] = $14;
   $15 = HEAP32[$__lv >> 2] | 0;
   switch ($15 | 0) {
   case 0:
    {
     HEAP8[$__v >> 0] = 0;
     $$sroa$01$0 = $14;
     break L1;
     break;
    }
   case 1:
    {
     HEAP8[$__v >> 0] = 1;
     $$sroa$01$0 = $14;
     break L1;
     break;
    }
   default:
    {
     HEAP8[$__v >> 0] = 1;
     HEAP32[$__err >> 2] = 4;
     $$sroa$01$0 = $14;
     break L1;
    }
   }
  } else {
   $16 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$2 >> 2] = $16;
   __THREW__ = 0;
   $17 = (tempInt = invoke_iii(398, $2 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $18 = __THREW__;
   __THREW__ = 0;
   $19 = $18 & 1;
   do {
    if ($19) {
     $44 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $45 = tempRet0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0 = $44;
     $$03 = $45;
    } else {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $20 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$3 >> 2] = $20;
     __THREW__ = 0;
     $21 = (tempInt = invoke_iii(398, $3 | 0, 9064 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if ($23) {
      $46 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $47 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $46;
      $$03 = $47;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $24 = HEAP32[$21 >> 2] | 0;
     $25 = $24 + 24 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     __THREW__ = 0;
     invoke_vii($26 | 0, $__names | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = $__names + 12 | 0;
      $30 = HEAP32[$21 >> 2] | 0;
      $31 = $30 + 28 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      __THREW__ = 0;
      invoke_vii($32 | 0, $29 | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e >> 2] | 0;
       HEAP32[$4 >> 2] = $35;
       $36 = $__names + 24 | 0;
       __THREW__ = 0;
       HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2] | 0;
       $37 = (tempInt = invoke_iiiiiiii(465, $__b | 0, $$byval_copy2 | 0, $__names | 0, $36 | 0, $17 | 0, $__err | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $38 = __THREW__;
       __THREW__ = 0;
       $39 = $38 & 1;
       if ($39) {
        $54 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $55 = tempRet0;
        $56 = $__names + 12 | 0;
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56), asyncState ? abort(-12) | 0 : 0;
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names), asyncState ? abort(-12) | 0 : 0;
        $$0 = $54;
        $$03 = $55;
        break;
       } else {
        $40 = ($37 | 0) == ($__names | 0);
        $41 = $40 & 1;
        HEAP8[$__v >> 0] = $41;
        $42 = HEAP32[$__b >> 2] | 0;
        $43 = $__names + 12 | 0;
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43), asyncState ? abort(-12) | 0 : 0;
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names), asyncState ? abort(-12) | 0 : 0;
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $49 = tempRet0;
     $50 = ($__names | 0) == ($$02 | 0);
     if ($50) {
      $$0 = $48;
      $$03 = $49;
     } else {
      $52 = $$02;
      while (1) {
       $51 = $52 + -12 | 0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51), asyncState ? abort(-12) | 0 : 0;
       $53 = ($51 | 0) == ($__names | 0);
       if ($53) {
        $$0 = $48;
        $$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while (0);
   ___resumeException($$0 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy2 = sp + 60 | 0;
 $$byval_copy1 = sp + 56 | 0;
 $$byval_copy = sp + 52 | 0;
 $__lv = sp + 48 | 0;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $__names = sp + 8 | 0;
 $4 = sp;
 $5 = $__iob + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 & 1;
 $8 = ($7 | 0) == 0;
 L1 : do {
  if ($8) {
   HEAP32[$__lv >> 2] = -1;
   $9 = HEAP32[$this >> 2] | 0;
   $10 = $9 + 16 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = HEAP32[$__b >> 2] | 0;
   HEAP32[$0 >> 2] = $12;
   $13 = HEAP32[$__e >> 2] | 0;
   HEAP32[$1 >> 2] = $13;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
   $14 = (tempInt = FUNCTION_TABLE_iiiiiii[$11 & 511]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__lv) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$__b >> 2] = $14;
   $15 = HEAP32[$__lv >> 2] | 0;
   switch ($15 | 0) {
   case 0:
    {
     HEAP8[$__v >> 0] = 0;
     $$sroa$01$0 = $14;
     break L1;
     break;
    }
   case 1:
    {
     HEAP8[$__v >> 0] = 1;
     $$sroa$01$0 = $14;
     break L1;
     break;
    }
   default:
    {
     HEAP8[$__v >> 0] = 1;
     HEAP32[$__err >> 2] = 4;
     $$sroa$01$0 = $14;
     break L1;
    }
   }
  } else {
   $16 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$2 >> 2] = $16;
   __THREW__ = 0;
   $17 = (tempInt = invoke_iii(398, $2 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $18 = __THREW__;
   __THREW__ = 0;
   $19 = $18 & 1;
   do {
    if ($19) {
     $44 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $45 = tempRet0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0 = $44;
     $$03 = $45;
    } else {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $20 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     HEAP32[$3 >> 2] = $20;
     __THREW__ = 0;
     $21 = (tempInt = invoke_iii(398, $3 | 0, 9056 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if ($23) {
      $46 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $47 = tempRet0;
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0 = $46;
      $$03 = $47;
      break;
     }
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $24 = HEAP32[$21 >> 2] | 0;
     $25 = $24 + 24 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     __THREW__ = 0;
     invoke_vii($26 | 0, $__names | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = $__names + 12 | 0;
      $30 = HEAP32[$21 >> 2] | 0;
      $31 = $30 + 28 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      __THREW__ = 0;
      invoke_vii($32 | 0, $29 | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e >> 2] | 0;
       HEAP32[$4 >> 2] = $35;
       $36 = $__names + 24 | 0;
       __THREW__ = 0;
       HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2] | 0;
       $37 = (tempInt = invoke_iiiiiiii(461, $__b | 0, $$byval_copy2 | 0, $__names | 0, $36 | 0, $17 | 0, $__err | 0, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $38 = __THREW__;
       __THREW__ = 0;
       $39 = $38 & 1;
       if ($39) {
        $54 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $55 = tempRet0;
        $56 = $__names + 12 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56), asyncState ? abort(-12) | 0 : 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names), asyncState ? abort(-12) | 0 : 0;
        $$0 = $54;
        $$03 = $55;
        break;
       } else {
        $40 = ($37 | 0) == ($__names | 0);
        $41 = $40 & 1;
        HEAP8[$__v >> 0] = $41;
        $42 = HEAP32[$__b >> 2] | 0;
        $43 = $__names + 12 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43), asyncState ? abort(-12) | 0 : 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names), asyncState ? abort(-12) | 0 : 0;
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $49 = tempRet0;
     $50 = ($__names | 0) == ($$02 | 0);
     if ($50) {
      $$0 = $48;
      $$03 = $49;
     } else {
      $52 = $$02;
      while (1) {
       $51 = $52 + -12 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51), asyncState ? abort(-12) | 0 : 0;
       $53 = ($51 | 0) == ($__names | 0);
       if ($53) {
        $$0 = $48;
        $$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while (0);
   ___resumeException($$0 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, $switch = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $32 = sp + 52 | 0;
 $__sp = sp + 12 | 0;
 $33 = $__ob;
 $34 = $__op;
 $35 = $__oe;
 $36 = $__iob;
 $37 = $__fl;
 $41 = HEAP32[$__s >> 2] | 0;
 $42 = ($41 | 0) == (0 | 0);
 if ($42) {
  HEAP32[$32 >> 2] = HEAP32[$__s >> 2] | 0;
  $150 = HEAP32[$32 >> 2] | 0;
  STACKTOP = sp;
  return $150 | 0;
 }
 $43 = $35;
 $44 = $33;
 $45 = $43;
 $46 = $44;
 $47 = $45 - $46 | 0;
 $__sz = $47;
 $48 = $36;
 $31 = $48;
 $49 = $31;
 $50 = $49 + 12 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 $__ns = $51;
 $52 = $__ns;
 $53 = $__sz;
 $54 = ($52 | 0) > ($53 | 0);
 if ($54) {
  $55 = $__sz;
  $56 = $__ns;
  $57 = $56 - $55 | 0;
  $__ns = $57;
 } else {
  $__ns = 0;
 }
 $58 = $34;
 $59 = $33;
 $60 = $58;
 $61 = $59;
 $62 = $60 - $61 | 0;
 $__np = $62;
 $63 = $__np;
 $64 = ($63 | 0) > 0;
 if ($64) {
  $65 = HEAP32[$__s >> 2] | 0;
  $66 = $33;
  $67 = $__np;
  $23 = $65;
  $24 = $66;
  $25 = $67;
  $68 = $23;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $69 + 48 | 0;
  $71 = HEAP32[$70 >> 2] | 0;
  $72 = $24;
  $73 = $25;
  $74 = (tempInt = FUNCTION_TABLE_iiii[$71 & 1023]($68, $72, $73) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $75 = $__np;
  $76 = ($74 | 0) != ($75 | 0);
  if ($76) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$32 >> 2] = HEAP32[$__s >> 2] | 0;
   $150 = HEAP32[$32 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
 }
 $77 = $__ns;
 $78 = ($77 | 0) > 0;
 if ($78) {
  $79 = $__ns;
  $80 = $37;
  $20 = $__sp;
  $21 = $79;
  $22 = $80;
  $81 = $20;
  $19 = $81;
  $82 = $19;
  $18 = $82;
  $83 = $18;
  $17 = $83;
  $84 = $21;
  $85 = $22;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($81, $84, $85), asyncState ? abort(-12) | 0 : 0;
  $86 = HEAP32[$__s >> 2] | 0;
  $16 = $__sp;
  $87 = $16;
  $15 = $87;
  $88 = $15;
  $14 = $88;
  $89 = $14;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $92 = HEAP8[$91 >> 0] | 0;
  $93 = $92 & 255;
  $94 = $93 & 1;
  $95 = ($94 | 0) != 0;
  if ($95) {
   $6 = $88;
   $96 = $6;
   $5 = $96;
   $97 = $5;
   $4 = $97;
   $98 = $4;
   $99 = $98 + 8 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   $107 = $100;
  } else {
   $11 = $88;
   $101 = $11;
   $10 = $101;
   $102 = $10;
   $9 = $102;
   $103 = $9;
   $104 = $103 + 1 | 0;
   $8 = $104;
   $105 = $8;
   $7 = $105;
   $106 = $7;
   $107 = $106;
  }
  $3 = $107;
  $108 = $3;
  $109 = $__ns;
  $0 = $86;
  $1 = $108;
  $2 = $109;
  $110 = $0;
  $111 = HEAP32[$110 >> 2] | 0;
  $112 = $111 + 48 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  $114 = $1;
  $115 = $2;
  __THREW__ = 0;
  $116 = (tempInt = invoke_iiii($113 | 0, $110 | 0, $114 | 0, $115 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $117 = __THREW__;
  __THREW__ = 0;
  $118 = $117 & 1;
  if ($118) {
   $121 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $122 = tempRet0;
   $38 = $121;
   $39 = $122;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp), asyncState ? abort(-12) | 0 : 0;
   $123 = $38;
   $124 = $39;
   ___resumeException($123 | 0), asyncState ? abort(-12) | 0 : 0;
  }
  $119 = $__ns;
  $120 = ($116 | 0) != ($119 | 0);
  if ($120) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$32 >> 2] = HEAP32[$__s >> 2] | 0;
   $40 = 1;
  } else {
   $40 = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp), asyncState ? abort(-12) | 0 : 0;
  $cleanup$dest = $40;
  $switch = $cleanup$dest >>> 0 < 1;
  if (!$switch) {
   $150 = HEAP32[$32 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
 }
 $125 = $35;
 $126 = $34;
 $127 = $125;
 $128 = $126;
 $129 = $127 - $128 | 0;
 $__np = $129;
 $130 = $__np;
 $131 = ($130 | 0) > 0;
 if ($131) {
  $132 = HEAP32[$__s >> 2] | 0;
  $133 = $34;
  $134 = $__np;
  $26 = $132;
  $27 = $133;
  $28 = $134;
  $135 = $26;
  $136 = HEAP32[$135 >> 2] | 0;
  $137 = $136 + 48 | 0;
  $138 = HEAP32[$137 >> 2] | 0;
  $139 = $27;
  $140 = $28;
  $141 = (tempInt = FUNCTION_TABLE_iiii[$138 & 1023]($135, $139, $140) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $142 = $__np;
  $143 = ($141 | 0) != ($142 | 0);
  if ($143) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$32 >> 2] = HEAP32[$__s >> 2] | 0;
   $150 = HEAP32[$32 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
 }
 $144 = $36;
 $29 = $144;
 $30 = 0;
 $145 = $29;
 $146 = $145 + 12 | 0;
 $147 = HEAP32[$146 >> 2] | 0;
 $__r$i = $147;
 $148 = $30;
 $149 = $145 + 12 | 0;
 HEAP32[$149 >> 2] = $148;
 HEAP32[$32 >> 2] = HEAP32[$__s >> 2] | 0;
 $150 = HEAP32[$32 >> 2] | 0;
 STACKTOP = sp;
 return $150 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = $0 + 12 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = $0 + 16 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = ($3 | 0) == ($5 | 0);
   if ($6) {
    $7 = HEAP32[$0 >> 2] | 0;
    $8 = $7 + 36 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (tempInt = FUNCTION_TABLE_ii[$9 & 1023]($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3 >> 2] | 0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i | 0) == -1;
   if ($12) {
    HEAP32[$__b >> 2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
    $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 $14 = ($13 | 0) == (0 | 0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = $13 + 12 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $13 + 16 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = ($16 | 0) == ($18 | 0);
   if ($19) {
    $20 = HEAP32[$13 >> 2] | 0;
    $21 = $20 + 36 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = (tempInt = FUNCTION_TABLE_ii[$22 & 1023]($13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16 >> 2] | 0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i | 0) == -1;
   if ($25) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   $26 = HEAP32[$__err >> 2] | 0;
   $27 = $26 | 6;
   HEAP32[$__err >> 2] = $27;
  } else if ((label | 0) == 17) {
   $28 = HEAP32[$__b >> 2] | 0;
   $29 = $28 + 12 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $31 = $28 + 16 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   $33 = ($30 | 0) == ($32 | 0);
   if ($33) {
    $34 = HEAP32[$28 >> 2] | 0;
    $35 = $34 + 36 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = (tempInt = FUNCTION_TABLE_ii[$36 & 1023]($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30 >> 2] | 0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct >> 2] | 0;
   $40 = $39 + 52 | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $42 = (tempInt = FUNCTION_TABLE_iiii[$41 & 1023]($__ct, $$0$i$i, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $43 = $42 << 24 >> 24 == 37;
   if (!$43) {
    $44 = HEAP32[$__err >> 2] | 0;
    $45 = $44 | 4;
    HEAP32[$__err >> 2] = $45;
    break;
   }
   $46 = HEAP32[$__b >> 2] | 0;
   $47 = $46 + 12 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   $49 = $46 + 16 | 0;
   $50 = HEAP32[$49 >> 2] | 0;
   $51 = ($48 | 0) == ($50 | 0);
   if ($51) {
    $53 = HEAP32[$46 >> 2] | 0;
    $54 = $53 + 40 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    (tempInt = FUNCTION_TABLE_ii[$55 & 1023]($46) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$pre = HEAP32[$__b >> 2] | 0;
    $56 = ($$pre | 0) == (0 | 0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = $48 + 4 | 0;
    HEAP32[$47 >> 2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label | 0) == 25) {
     $57 = $58 + 12 | 0;
     $59 = HEAP32[$57 >> 2] | 0;
     $60 = $58 + 16 | 0;
     $61 = HEAP32[$60 >> 2] | 0;
     $62 = ($59 | 0) == ($61 | 0);
     if ($62) {
      $63 = HEAP32[$58 >> 2] | 0;
      $64 = $63 + 36 | 0;
      $65 = HEAP32[$64 >> 2] | 0;
      $66 = (tempInt = FUNCTION_TABLE_ii[$65 & 1023]($58) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59 >> 2] | 0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1 | 0) == -1;
     if ($68) {
      HEAP32[$__b >> 2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3 | 0) == (0 | 0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while (0);
   $69 = ($$pre$i3$i$i915 | 0) == (0 | 0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = $$pre$i3$i$i915 + 12 | 0;
     $71 = HEAP32[$70 >> 2] | 0;
     $72 = $$pre$i3$i$i915 + 16 | 0;
     $73 = HEAP32[$72 >> 2] | 0;
     $74 = ($71 | 0) == ($73 | 0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915 >> 2] | 0;
      $76 = $75 + 36 | 0;
      $77 = HEAP32[$76 >> 2] | 0;
      $78 = (tempInt = FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71 >> 2] | 0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7 | 0) == -1;
     if ($80) {
      HEAP32[$__e >> 2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 37) {
    if (!$84) {
     break;
    }
   }
   $81 = HEAP32[$__err >> 2] | 0;
   $82 = $81 | 2;
   HEAP32[$__err >> 2] = $82;
  }
 } while (0);
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__ct << 24 >> 24 == $__decimal_point << 24 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $1 = HEAP8[$__in_units >> 0] | 0;
   $2 = $1 << 24 >> 24 == 0;
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units >> 0] = 0;
    $3 = HEAP32[$__a_end >> 2] | 0;
    $4 = $3 + 1 | 0;
    HEAP32[$__a_end >> 2] = $4;
    HEAP8[$3 >> 0] = 46;
    $5 = HEAP8[$__grouping >> 0] | 0;
    $6 = $5 & 1;
    $7 = $6 << 24 >> 24 == 0;
    $8 = $__grouping + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $5 & 255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12 | 0) == 0;
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end >> 2] | 0;
     $15 = $14;
     $16 = $__g;
     $17 = $15 - $16 | 0;
     $18 = ($17 | 0) < 160;
     if ($18) {
      $19 = HEAP32[$__dc >> 2] | 0;
      $20 = $14 + 4 | 0;
      HEAP32[$__g_end >> 2] = $20;
      HEAP32[$14 >> 2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24;
   if ($21) {
    $22 = HEAP8[$__grouping >> 0] | 0;
    $23 = $22 & 1;
    $24 = $23 << 24 >> 24 == 0;
    $25 = $__grouping + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $22 & 255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29 | 0) == 0;
    if (!$30) {
     $31 = HEAP8[$__in_units >> 0] | 0;
     $32 = $31 << 24 >> 24 == 0;
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end >> 2] | 0;
     $34 = $33;
     $35 = $__g;
     $36 = $34 - $35 | 0;
     $37 = ($36 | 0) < 160;
     if (!$37) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc >> 2] | 0;
     $39 = $33 + 4 | 0;
     HEAP32[$__g_end >> 2] = $39;
     HEAP32[$33 >> 2] = $38;
     HEAP32[$__dc >> 2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = $__atoms + 32 | 0;
   $$0$i3 = $__atoms;
   while (1) {
    $41 = HEAP8[$$0$i3 >> 0] | 0;
    $42 = $41 << 24 >> 24 == $__ct << 24 >> 24;
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = $$0$i3 + 1 | 0;
    $44 = ($43 | 0) == ($40 | 0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = $45 - $46 | 0;
   $48 = ($47 | 0) > 31;
   if ($48) {
    $$0 = -1;
   } else {
    $49 = 20219 + $47 | 0;
    $50 = HEAP8[$49 >> 0] | 0;
    switch ($47 | 0) {
    case 24:
    case 25:
     {
      $51 = HEAP32[$__a_end >> 2] | 0;
      $52 = ($51 | 0) == ($__a | 0);
      if (!$52) {
       $53 = $51 + -1 | 0;
       $54 = HEAP8[$53 >> 0] | 0;
       $55 = $54 & 255;
       $56 = $55 & 95;
       $57 = HEAP8[$__exp >> 0] | 0;
       $58 = $57 & 255;
       $59 = $58 & 127;
       $60 = ($56 | 0) == ($59 | 0);
       if (!$60) {
        $$0 = -1;
        break L1;
       }
      }
      $61 = $51 + 1 | 0;
      HEAP32[$__a_end >> 2] = $61;
      HEAP8[$51 >> 0] = $50;
      $$0 = 0;
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$__exp >> 0] = 80;
      $62 = HEAP32[$__a_end >> 2] | 0;
      $63 = $62 + 1 | 0;
      HEAP32[$__a_end >> 2] = $63;
      HEAP8[$62 >> 0] = $50;
      $$0 = 0;
      break L1;
      break;
     }
    default:
     {
      $64 = $50 & 255;
      $65 = $64 & 95;
      $66 = HEAP8[$__exp >> 0] | 0;
      $67 = $66 << 24 >> 24;
      $68 = ($65 | 0) == ($67 | 0);
      if ($68) {
       $69 = $65 | 128;
       $70 = $69 & 255;
       HEAP8[$__exp >> 0] = $70;
       $71 = HEAP8[$__in_units >> 0] | 0;
       $72 = $71 << 24 >> 24 == 0;
       if (!$72) {
        HEAP8[$__in_units >> 0] = 0;
        $73 = HEAP8[$__grouping >> 0] | 0;
        $74 = $73 & 1;
        $75 = $74 << 24 >> 24 == 0;
        $76 = $__grouping + 4 | 0;
        $77 = HEAP32[$76 >> 2] | 0;
        $78 = $73 & 255;
        $79 = $78 >>> 1;
        $80 = $75 ? $79 : $77;
        $81 = ($80 | 0) == 0;
        if (!$81) {
         $82 = HEAP32[$__g_end >> 2] | 0;
         $83 = $82;
         $84 = $__g;
         $85 = $83 - $84 | 0;
         $86 = ($85 | 0) < 160;
         if ($86) {
          $87 = HEAP32[$__dc >> 2] | 0;
          $88 = $82 + 4 | 0;
          HEAP32[$__g_end >> 2] = $88;
          HEAP32[$82 >> 2] = $87;
         }
        }
       }
      }
      $89 = HEAP32[$__a_end >> 2] | 0;
      $90 = $89 + 1 | 0;
      HEAP32[$__a_end >> 2] = $90;
      HEAP8[$89 >> 0] = $50;
      $91 = ($47 | 0) > 21;
      if ($91) {
       $$0 = 0;
       break L1;
      }
      $92 = HEAP32[$__dc >> 2] | 0;
      $93 = $92 + 1 | 0;
      HEAP32[$__dc >> 2] = $93;
      $$0 = 0;
      break L1;
     }
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  $1 = ($0 | 0) == (0 | 0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = $0 + 12 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $0 + 16 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($3 | 0) == ($5 | 0);
    if ($6) {
     $7 = HEAP32[$0 >> 2] | 0;
     $8 = $7 + 36 | 0;
     $9 = HEAP32[$8 >> 2] | 0;
     $10 = (tempInt = FUNCTION_TABLE_ii[$9 & 1023]($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3 >> 2] | 0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i | 0) == -1;
    if ($12) {
     HEAP32[$__b >> 2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
     $phitmp$i$i$i = ($$pre$i$i$i | 0) == (0 | 0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0;
  $14 = ($13 | 0) == (0 | 0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = $13 + 12 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $13 + 16 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($16 | 0) == ($18 | 0);
    if ($19) {
     $20 = HEAP32[$13 >> 2] | 0;
     $21 = $20 + 36 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = (tempInt = FUNCTION_TABLE_ii[$22 & 1023]($13) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16 >> 2] | 0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i | 0) == -1;
    if ($25) {
     HEAP32[$__e >> 2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b >> 2] | 0;
  $27 = $26 + 12 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = $26 + 16 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  $31 = ($28 | 0) == ($30 | 0);
  if ($31) {
   $32 = HEAP32[$26 >> 2] | 0;
   $33 = $32 + 36 | 0;
   $34 = HEAP32[$33 >> 2] | 0;
   $35 = (tempInt = FUNCTION_TABLE_ii[$34 & 1023]($26) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28 >> 2] | 0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct >> 2] | 0;
  $38 = $37 + 12 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $40 = (tempInt = FUNCTION_TABLE_iiii[$39 & 1023]($__ct, 8192, $$0$i$i) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  if (!$40) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0;
  $42 = $41 + 12 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  $44 = $41 + 16 | 0;
  $45 = HEAP32[$44 >> 2] | 0;
  $46 = ($43 | 0) == ($45 | 0);
  if ($46) {
   $47 = HEAP32[$41 >> 2] | 0;
   $48 = $47 + 40 | 0;
   $49 = HEAP32[$48 >> 2] | 0;
   (tempInt = FUNCTION_TABLE_ii[$49 & 1023]($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   continue;
  } else {
   $50 = $43 + 4 | 0;
   HEAP32[$42 >> 2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0;
 $52 = ($51 | 0) == (0 | 0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = $51 + 12 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   $55 = $51 + 16 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   $57 = ($54 | 0) == ($56 | 0);
   if ($57) {
    $58 = HEAP32[$51 >> 2] | 0;
    $59 = $58 + 36 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = (tempInt = FUNCTION_TABLE_ii[$60 & 1023]($51) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54 >> 2] | 0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1 | 0) == -1;
   if ($63) {
    HEAP32[$__b >> 2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3 | 0) == (0 | 0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while (0);
 $64 = ($$pre$i3$i$i9 | 0) == (0 | 0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = $$pre$i3$i$i9 + 12 | 0;
   $66 = HEAP32[$65 >> 2] | 0;
   $67 = $$pre$i3$i$i9 + 16 | 0;
   $68 = HEAP32[$67 >> 2] | 0;
   $69 = ($66 | 0) == ($68 | 0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9 >> 2] | 0;
    $71 = $70 + 36 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = (tempInt = FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66 >> 2] | 0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7 | 0) == -1;
   if ($75) {
    HEAP32[$__e >> 2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label | 0) == 39) {
  $76 = HEAP32[$__err >> 2] | 0;
  $77 = $76 | 2;
  HEAP32[$__err >> 2] = $77;
 }
 return;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__ct | 0) == ($__decimal_point | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $1 = HEAP8[$__in_units >> 0] | 0;
   $2 = $1 << 24 >> 24 == 0;
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units >> 0] = 0;
    $3 = HEAP32[$__a_end >> 2] | 0;
    $4 = $3 + 1 | 0;
    HEAP32[$__a_end >> 2] = $4;
    HEAP8[$3 >> 0] = 46;
    $5 = HEAP8[$__grouping >> 0] | 0;
    $6 = $5 & 1;
    $7 = $6 << 24 >> 24 == 0;
    $8 = $__grouping + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $5 & 255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12 | 0) == 0;
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end >> 2] | 0;
     $15 = $14;
     $16 = $__g;
     $17 = $15 - $16 | 0;
     $18 = ($17 | 0) < 160;
     if ($18) {
      $19 = HEAP32[$__dc >> 2] | 0;
      $20 = $14 + 4 | 0;
      HEAP32[$__g_end >> 2] = $20;
      HEAP32[$14 >> 2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct | 0) == ($__thousands_sep | 0);
   if ($21) {
    $22 = HEAP8[$__grouping >> 0] | 0;
    $23 = $22 & 1;
    $24 = $23 << 24 >> 24 == 0;
    $25 = $__grouping + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $22 & 255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29 | 0) == 0;
    if (!$30) {
     $31 = HEAP8[$__in_units >> 0] | 0;
     $32 = $31 << 24 >> 24 == 0;
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end >> 2] | 0;
     $34 = $33;
     $35 = $__g;
     $36 = $34 - $35 | 0;
     $37 = ($36 | 0) < 160;
     if (!$37) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc >> 2] | 0;
     $39 = $33 + 4 | 0;
     HEAP32[$__g_end >> 2] = $39;
     HEAP32[$33 >> 2] = $38;
     HEAP32[$__dc >> 2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = $__atoms + 128 | 0;
   $$0$i3 = $__atoms;
   while (1) {
    $41 = HEAP32[$$0$i3 >> 2] | 0;
    $42 = ($41 | 0) == ($__ct | 0);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = $$0$i3 + 4 | 0;
    $44 = ($43 | 0) == ($40 | 0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = $45 - $46 | 0;
   $48 = $47 >> 2;
   $49 = ($47 | 0) > 124;
   if ($49) {
    $$0 = -1;
   } else {
    $50 = 20219 + $48 | 0;
    $51 = HEAP8[$50 >> 0] | 0;
    switch ($48 | 0) {
    case 24:
    case 25:
     {
      $52 = HEAP32[$__a_end >> 2] | 0;
      $53 = ($52 | 0) == ($__a | 0);
      if (!$53) {
       $54 = $52 + -1 | 0;
       $55 = HEAP8[$54 >> 0] | 0;
       $56 = $55 & 255;
       $57 = $56 & 95;
       $58 = HEAP8[$__exp >> 0] | 0;
       $59 = $58 & 255;
       $60 = $59 & 127;
       $61 = ($57 | 0) == ($60 | 0);
       if (!$61) {
        $$0 = -1;
        break L1;
       }
      }
      $62 = $52 + 1 | 0;
      HEAP32[$__a_end >> 2] = $62;
      HEAP8[$52 >> 0] = $51;
      $$0 = 0;
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$__exp >> 0] = 80;
      break;
     }
    default:
     {
      $63 = $51 & 255;
      $64 = $63 & 95;
      $65 = HEAP8[$__exp >> 0] | 0;
      $66 = $65 << 24 >> 24;
      $67 = ($64 | 0) == ($66 | 0);
      if ($67) {
       $68 = $64 | 128;
       $69 = $68 & 255;
       HEAP8[$__exp >> 0] = $69;
       $70 = HEAP8[$__in_units >> 0] | 0;
       $71 = $70 << 24 >> 24 == 0;
       if (!$71) {
        HEAP8[$__in_units >> 0] = 0;
        $72 = HEAP8[$__grouping >> 0] | 0;
        $73 = $72 & 1;
        $74 = $73 << 24 >> 24 == 0;
        $75 = $__grouping + 4 | 0;
        $76 = HEAP32[$75 >> 2] | 0;
        $77 = $72 & 255;
        $78 = $77 >>> 1;
        $79 = $74 ? $78 : $76;
        $80 = ($79 | 0) == 0;
        if (!$80) {
         $81 = HEAP32[$__g_end >> 2] | 0;
         $82 = $81;
         $83 = $__g;
         $84 = $82 - $83 | 0;
         $85 = ($84 | 0) < 160;
         if ($85) {
          $86 = HEAP32[$__dc >> 2] | 0;
          $87 = $81 + 4 | 0;
          HEAP32[$__g_end >> 2] = $87;
          HEAP32[$81 >> 2] = $86;
         }
        }
       }
      }
     }
    }
    $88 = HEAP32[$__a_end >> 2] | 0;
    $89 = $88 + 1 | 0;
    HEAP32[$__a_end >> 2] = $89;
    HEAP8[$88 >> 0] = $51;
    $90 = ($47 | 0) > 84;
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc >> 2] | 0;
     $92 = $91 + 1 | 0;
     HEAP32[$__dc >> 2] = $92;
     $$0 = 0;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function ___cxx_global_var_init7() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $21 = sp + 32 | 0;
 $26 = 2368;
 $27 = 16;
 $30 = $26;
 $31 = $30 + 56 | 0;
 $25 = $31;
 $32 = $25;
 $24 = $32;
 $33 = $24;
 $34 = 7764;
 HEAP32[$33 >> 2] = $34;
 $35 = 7664;
 HEAP32[$32 >> 2] = $35;
 $36 = 2516;
 HEAP32[$30 >> 2] = $36;
 $37 = $30 + 56 | 0;
 $38 = 2536;
 HEAP32[$37 >> 2] = $38;
 $39 = $30 + 4 | 0;
 $2 = $30;
 $40 = 2548;
 $3 = $40;
 $4 = $39;
 $41 = $2;
 $42 = $3;
 $43 = HEAP32[$42 >> 2] | 0;
 HEAP32[$41 >> 2] = $43;
 $44 = $42 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = HEAP32[$41 >> 2] | 0;
 $47 = $46 + -12 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 $49 = $41 + $48 | 0;
 HEAP32[$49 >> 2] = $45;
 $50 = HEAP32[$41 >> 2] | 0;
 $51 = $50 + -12 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 $53 = $41 + $52 | 0;
 $54 = $4;
 $0 = $53;
 $1 = $54;
 $55 = $0;
 $56 = $1;
 __THREW__ = 0;
 invoke_vii(366, $55 | 0, $56 | 0), asyncState ? abort(-12) | 0 : 0;
 $57 = __THREW__;
 __THREW__ = 0;
 $58 = $57 & 1;
 if ($58) {
  $108 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $109 = tempRet0;
  $28 = $108;
  $29 = $109;
  $112 = $30 + 56 | 0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($112), asyncState ? abort(-12) | 0 : 0;
  $113 = $28;
  $114 = $29;
  ___resumeException($113 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $59 = $55 + 72 | 0;
 HEAP32[$59 >> 2] = 0;
 $60 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $61 = $55 + 76 | 0;
 HEAP32[$61 >> 2] = $60;
 $62 = 2516;
 HEAP32[$30 >> 2] = $62;
 $63 = $30 + 56 | 0;
 $64 = 2536;
 HEAP32[$63 >> 2] = $64;
 $65 = $30 + 4 | 0;
 $66 = $27;
 $67 = $66 | 16;
 $19 = $65;
 $20 = $67;
 $68 = $19;
 __THREW__ = 0;
 invoke_vi(367, $68 | 0), asyncState ? abort(-12) | 0 : 0;
 $69 = __THREW__;
 __THREW__ = 0;
 $70 = $69 & 1;
 do {
  if ($70) {
   $110 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $111 = tempRet0;
   $eh$lpad$body$i$index2Z2D = $111;
   $eh$lpad$body$i$indexZ2D = $110;
  } else {
   $71 = 2568;
   HEAP32[$68 >> 2] = $71;
   $72 = $68 + 32 | 0;
   $18 = $72;
   $73 = $18;
   $17 = $73;
   $74 = $17;
   $16 = $74;
   $75 = $16;
   $15 = $75;
   $14 = $73;
   $76 = $14;
   $13 = $76;
   $77 = $13;
   $12 = $77;
   $78 = $12;
   $__a$i$i$i$i = $78;
   $__i$i$i$i$i = 0;
   while (1) {
    $79 = $__i$i$i$i$i;
    $80 = $79 >>> 0 < 3;
    if (!$80) {
     break;
    }
    $81 = $__i$i$i$i$i;
    $82 = $__a$i$i$i$i;
    $83 = $82 + ($81 << 2) | 0;
    HEAP32[$83 >> 2] = 0;
    $84 = $__i$i$i$i$i;
    $85 = $84 + 1 | 0;
    $__i$i$i$i$i = $85;
   }
   $86 = $68 + 44 | 0;
   HEAP32[$86 >> 2] = 0;
   $87 = $68 + 48 | 0;
   $88 = $20;
   HEAP32[$87 >> 2] = $88;
   $11 = $21;
   $89 = $11;
   $10 = $89;
   $90 = $10;
   $9 = $90;
   $91 = $9;
   $8 = $91;
   $7 = $89;
   $92 = $7;
   $6 = $92;
   $93 = $6;
   $5 = $93;
   $94 = $5;
   $__a$i$i1$i$i = $94;
   $__i$i$i2$i$i = 0;
   while (1) {
    $95 = $__i$i$i2$i$i;
    $96 = $95 >>> 0 < 3;
    if (!$96) {
     break;
    }
    $97 = $__i$i$i2$i$i;
    $98 = $__a$i$i1$i$i;
    $99 = $98 + ($97 << 2) | 0;
    HEAP32[$99 >> 2] = 0;
    $100 = $__i$i$i2$i$i;
    $101 = $100 + 1 | 0;
    $__i$i$i2$i$i = $101;
   }
   __THREW__ = 0;
   invoke_vii(368, $68 | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
   $102 = __THREW__;
   __THREW__ = 0;
   $103 = $102 & 1;
   if ($103) {
    $104 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $105 = tempRet0;
    $22 = $104;
    $23 = $105;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($72), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($68), asyncState ? abort(-12) | 0 : 0;
    $106 = $22;
    $107 = $23;
    $eh$lpad$body$i$index2Z2D = $107;
    $eh$lpad$body$i$indexZ2D = $106;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21), asyncState ? abort(-12) | 0 : 0;
    (tempInt = ___cxa_atexit(1 | 0, 2368 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $28 = $eh$lpad$body$i$indexZ2D;
 $29 = $eh$lpad$body$i$index2Z2D;
 $112 = $30 + 56 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($112), asyncState ? abort(-12) | 0 : 0;
 $113 = $28;
 $114 = $29;
 ___resumeException($113 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = $0 + 12 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = $0 + 16 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = ($3 | 0) == ($5 | 0);
   if ($6) {
    $7 = HEAP32[$0 >> 2] | 0;
    $8 = $7 + 36 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (tempInt = FUNCTION_TABLE_ii[$9 & 1023]($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $11 = ($10 | 0) == -1;
    if ($11) {
     HEAP32[$__b >> 2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while (0);
 $12 = ($13 | 0) == (0 | 0);
 $14 = HEAP32[$__e >> 2] | 0;
 $15 = ($14 | 0) == (0 | 0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = $14 + 12 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $18 = $14 + 16 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   $20 = ($17 | 0) == ($19 | 0);
   if ($20) {
    $21 = HEAP32[$14 >> 2] | 0;
    $22 = $21 + 36 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = (tempInt = FUNCTION_TABLE_ii[$23 & 1023]($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $25 = ($24 | 0) == -1;
    if ($25) {
     HEAP32[$__e >> 2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16 : do {
  if ((label | 0) == 12) {
   $26 = HEAP32[$__err >> 2] | 0;
   $27 = $26 | 6;
   HEAP32[$__err >> 2] = $27;
  } else if ((label | 0) == 13) {
   $28 = HEAP32[$__b >> 2] | 0;
   $29 = $28 + 12 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $31 = $28 + 16 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   $33 = ($30 | 0) == ($32 | 0);
   if ($33) {
    $34 = HEAP32[$28 >> 2] | 0;
    $35 = $34 + 36 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = (tempInt = FUNCTION_TABLE_ii[$36 & 1023]($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30 >> 0] | 0;
    $39 = $38 & 255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i & 255;
   $41 = HEAP32[$__ct >> 2] | 0;
   $42 = $41 + 36 | 0;
   $43 = HEAP32[$42 >> 2] | 0;
   $44 = (tempInt = FUNCTION_TABLE_iiii[$43 & 1023]($__ct, $40, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $45 = $44 << 24 >> 24 == 37;
   if (!$45) {
    $46 = HEAP32[$__err >> 2] | 0;
    $47 = $46 | 4;
    HEAP32[$__err >> 2] = $47;
    break;
   }
   $48 = HEAP32[$__b >> 2] | 0;
   $49 = $48 + 12 | 0;
   $50 = HEAP32[$49 >> 2] | 0;
   $51 = $48 + 16 | 0;
   $52 = HEAP32[$51 >> 2] | 0;
   $53 = ($50 | 0) == ($52 | 0);
   if ($53) {
    $55 = HEAP32[$48 >> 2] | 0;
    $56 = $55 + 40 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    (tempInt = FUNCTION_TABLE_ii[$57 & 1023]($48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$pre = HEAP32[$__b >> 2] | 0;
    $58 = ($$pre | 0) == (0 | 0);
    if ($58) {
     $71 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = $50 + 1 | 0;
    HEAP32[$49 >> 2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label | 0) == 21) {
     $59 = $60 + 12 | 0;
     $61 = HEAP32[$59 >> 2] | 0;
     $62 = $60 + 16 | 0;
     $63 = HEAP32[$62 >> 2] | 0;
     $64 = ($61 | 0) == ($63 | 0);
     if ($64) {
      $65 = HEAP32[$60 >> 2] | 0;
      $66 = $65 + 36 | 0;
      $67 = HEAP32[$66 >> 2] | 0;
      $68 = (tempInt = FUNCTION_TABLE_ii[$67 & 1023]($60) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $69 = ($68 | 0) == -1;
      if ($69) {
       HEAP32[$__b >> 2] = 0;
       $71 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
       $71 = $$pre$i$i$i2;
       break;
      }
     } else {
      $71 = $60;
     }
    }
   } while (0);
   $70 = ($71 | 0) == (0 | 0);
   $72 = ($$pre$i2$i$i611 | 0) == (0 | 0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = $$pre$i2$i$i611 + 12 | 0;
     $74 = HEAP32[$73 >> 2] | 0;
     $75 = $$pre$i2$i$i611 + 16 | 0;
     $76 = HEAP32[$75 >> 2] | 0;
     $77 = ($74 | 0) == ($76 | 0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611 >> 2] | 0;
      $79 = $78 + 36 | 0;
      $80 = HEAP32[$79 >> 2] | 0;
      $81 = (tempInt = FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $82 = ($81 | 0) == -1;
      if ($82) {
       HEAP32[$__e >> 2] = 0;
       label = 30;
       break;
      }
     }
     if ($70) {
      break L16;
     }
    }
   } while (0);
   if ((label | 0) == 30) {
    if (!$70) {
     break;
    }
   }
   $83 = HEAP32[$__err >> 2] | 0;
   $84 = $83 | 2;
   HEAP32[$__err >> 2] = $84;
  }
 } while (0);
 return;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 >>> 0 < $3 >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $5 = $1 + 1 | 0;
  HEAP32[$0 >> 2] = $5;
  $6 = HEAP8[$1 >> 0] | 0;
  $7 = $6 & 255;
  $10 = $7;
 } else {
  $8 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = $8;
 }
 $9 = ($10 | 0) == 45;
 switch ($10 | 0) {
 case 43:
 case 45:
  {
   $11 = $9 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   $13 = HEAP32[$2 >> 2] | 0;
   $14 = $12 >>> 0 < $13 >>> 0;
   if ($14) {
    $15 = $12 + 1 | 0;
    HEAP32[$0 >> 2] = $15;
    $16 = HEAP8[$12 >> 0] | 0;
    $17 = $16 & 255;
    $20 = $17;
   } else {
    $18 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $20 = $18;
   }
   $19 = $20 + -48 | 0;
   $21 = $19 >>> 0 > 9;
   $22 = ($pok | 0) != 0;
   $or$cond3 = $22 & $21;
   if ($or$cond3) {
    $23 = HEAP32[$2 >> 2] | 0;
    $24 = ($23 | 0) == (0 | 0);
    if ($24) {
     $c$0 = $20;
     $neg$0 = $11;
    } else {
     $25 = HEAP32[$0 >> 2] | 0;
     $26 = $25 + -1 | 0;
     HEAP32[$0 >> 2] = $26;
     $c$0 = $20;
     $neg$0 = $11;
    }
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $10;
   $neg$0 = 0;
  }
 }
 $27 = $c$0 + -48 | 0;
 $28 = $27 >>> 0 > 9;
 if ($28) {
  $29 = HEAP32[$2 >> 2] | 0;
  $30 = ($29 | 0) == (0 | 0);
  if ($30) {
   $98 = -2147483648;
   $99 = 0;
  } else {
   $31 = HEAP32[$0 >> 2] | 0;
   $32 = $31 + -1 | 0;
   HEAP32[$0 >> 2] = $32;
   $98 = -2147483648;
   $99 = 0;
  }
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $33 = $x$013 * 10 | 0;
   $34 = $c$112 + -48 | 0;
   $35 = $34 + $33 | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   $37 = HEAP32[$2 >> 2] | 0;
   $38 = $36 >>> 0 < $37 >>> 0;
   if ($38) {
    $39 = $36 + 1 | 0;
    HEAP32[$0 >> 2] = $39;
    $40 = HEAP8[$36 >> 0] | 0;
    $41 = $40 & 255;
    $c$1$be = $41;
   } else {
    $42 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $c$1$be = $42;
   }
   $43 = $c$1$be + -48 | 0;
   $44 = $43 >>> 0 < 10;
   $45 = ($35 | 0) < 214748364;
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22 | 0) < 0;
  $48 = $47 << 31 >> 31;
  $49 = $c$1$be$lcssa + -48 | 0;
  $50 = $49 >>> 0 < 10;
  if ($50) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = (tempInt = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $56 = tempRet0;
    $57 = ($c$27 | 0) < 0;
    $58 = $57 << 31 >> 31;
    $59 = (tempInt = _i64Add($c$27 | 0, $58 | 0, -48, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $60 = tempRet0;
    $61 = (tempInt = _i64Add($59 | 0, $60 | 0, $55 | 0, $56 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $62 = tempRet0;
    $63 = HEAP32[$0 >> 2] | 0;
    $64 = HEAP32[$2 >> 2] | 0;
    $65 = $63 >>> 0 < $64 >>> 0;
    if ($65) {
     $66 = $63 + 1 | 0;
     HEAP32[$0 >> 2] = $66;
     $67 = HEAP8[$63 >> 0] | 0;
     $68 = $67 & 255;
     $c$2$be = $68;
    } else {
     $69 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $c$2$be = $69;
    }
    $70 = $c$2$be + -48 | 0;
    $71 = $70 >>> 0 < 10;
    $72 = ($62 | 0) < 21474836;
    $73 = $61 >>> 0 < 2061584302;
    $74 = ($62 | 0) == 21474836;
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = $c$2$lcssa + -48 | 0;
  $52 = $51 >>> 0 < 10;
  if ($52) {
   while (1) {
    $78 = HEAP32[$0 >> 2] | 0;
    $79 = HEAP32[$2 >> 2] | 0;
    $80 = $78 >>> 0 < $79 >>> 0;
    if ($80) {
     $81 = $78 + 1 | 0;
     HEAP32[$0 >> 2] = $81;
     $82 = HEAP8[$78 >> 0] | 0;
     $83 = $82 & 255;
     $c$3$be = $83;
    } else {
     $84 = (tempInt = ___shgetc($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $c$3$be = $84;
    }
    $85 = $c$3$be + -48 | 0;
    $86 = $85 >>> 0 < 10;
    if (!$86) {
     break;
    }
   }
  }
  $87 = HEAP32[$2 >> 2] | 0;
  $88 = ($87 | 0) == (0 | 0);
  if (!$88) {
   $89 = HEAP32[$0 >> 2] | 0;
   $90 = $89 + -1 | 0;
   HEAP32[$0 >> 2] = $90;
  }
  $91 = ($neg$0 | 0) != 0;
  $94 = (tempInt = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;
  $99 = $96;
 }
 tempRet0 = $98;
 return $99 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val7 = 0, $$pre5 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 20 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp;
 $2 = $__iob + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & 1;
 $5 = ($4 | 0) == 0;
 L1 : do {
  if ($5) {
   $6 = HEAP32[$this >> 2] | 0;
   $7 = $6 + 24 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = HEAP32[$__s >> 2] | 0;
   HEAP32[$0 >> 2] = $9;
   $10 = $__v & 1;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   $11 = (tempInt = FUNCTION_TABLE_iiiiii[$8 & 1023]($this, $$byval_copy, $__iob, $__fl, $10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$sroa$0$0 = $11;
  } else {
   $12 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$1 >> 2] = $12;
   __THREW__ = 0;
   $13 = (tempInt = invoke_iii(398, $1 | 0, 9056 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $14 = __THREW__;
   __THREW__ = 0;
   $15 = $14 & 1;
   L4 : do {
    if ($15) {
     $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $66 = tempRet0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0 = $66;
     $$01 = $65;
    } else {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $16 = HEAP32[$13 >> 2] | 0;
     if ($__v) {
      $17 = $16 + 24 | 0;
      $18 = HEAP32[$17 >> 2] | 0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm, $13), asyncState ? abort(-12) | 0 : 0;
     } else {
      $19 = $16 + 28 | 0;
      $20 = HEAP32[$19 >> 2] | 0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm, $13), asyncState ? abort(-12) | 0 : 0;
     }
     $21 = HEAP8[$__nm >> 0] | 0;
     $22 = $21 & 1;
     $23 = $22 << 24 >> 24 == 0;
     $24 = $__nm + 8 | 0;
     $25 = HEAP32[$24 >> 2] | 0;
     $$pre5 = $__nm + 1 | 0;
     $26 = $__nm + 1 | 0;
     $$pre2 = $__nm + 8 | 0;
     $$pre$phi6Z2D = $23 ? $26 : $$pre5;
     $$ph = $23 ? $26 : $25;
     $27 = $__nm + 4 | 0;
     $28 = $21 & 1;
     $29 = $28 << 24 >> 24 == 0;
     $$pre2$val7 = HEAP32[$$pre2 >> 2] | 0;
     $30 = HEAP32[$27 >> 2] | 0;
     $31 = $21 & 255;
     $32 = $31 >>> 1;
     $33 = $29 ? $$pre$phi6Z2D : $$pre2$val7;
     $34 = $29 ? $32 : $30;
     $35 = $33 + $34 | 0;
     $36 = ($$ph | 0) == ($35 | 0);
     L11 : do {
      if (!$36) {
       $38 = $$ph;
       L12 : while (1) {
        $37 = HEAP8[$38 >> 0] | 0;
        $39 = HEAP32[$__s >> 2] | 0;
        $40 = ($39 | 0) == (0 | 0);
        do {
         if (!$40) {
          $41 = $39 + 24 | 0;
          $42 = HEAP32[$41 >> 2] | 0;
          $43 = $39 + 28 | 0;
          $44 = HEAP32[$43 >> 2] | 0;
          $45 = ($42 | 0) == ($44 | 0);
          if (!$45) {
           $46 = $42 + 1 | 0;
           HEAP32[$41 >> 2] = $46;
           HEAP8[$42 >> 0] = $37;
           break;
          }
          $47 = HEAP32[$39 >> 2] | 0;
          $48 = $47 + 52 | 0;
          $49 = HEAP32[$48 >> 2] | 0;
          $50 = $37 & 255;
          __THREW__ = 0;
          $51 = (tempInt = invoke_iii($49 | 0, $39 | 0, $50 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $52 = __THREW__;
          __THREW__ = 0;
          $53 = $52 & 1;
          if ($53) {
           break L12;
          }
          $54 = ($51 | 0) == -1;
          if ($54) {
           HEAP32[$__s >> 2] = 0;
          }
         }
        } while (0);
        $55 = $38 + 1 | 0;
        $$pre = HEAP8[$__nm >> 0] | 0;
        $56 = $$pre & 1;
        $57 = $56 << 24 >> 24 == 0;
        $$pre2$val = HEAP32[$$pre2 >> 2] | 0;
        $58 = HEAP32[$27 >> 2] | 0;
        $59 = $$pre & 255;
        $60 = $59 >>> 1;
        $61 = $57 ? $$pre$phi6Z2D : $$pre2$val;
        $62 = $57 ? $60 : $58;
        $63 = $61 + $62 | 0;
        $64 = ($55 | 0) == ($63 | 0);
        if ($64) {
         break L11;
        } else {
         $38 = $55;
        }
       }
       $67 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $68 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm), asyncState ? abort(-12) | 0 : 0;
       $$0 = $68;
       $$01 = $67;
       break L4;
      }
     } while (0);
     $69 = HEAP32[$__s >> 2] | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm), asyncState ? abort(-12) | 0 : 0;
     $$sroa$0$0 = $69;
     break L1;
    }
   } while (0);
   ___resumeException($$01 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val5 = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 20 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp;
 $2 = $__iob + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & 1;
 $5 = ($4 | 0) == 0;
 L1 : do {
  if ($5) {
   $6 = HEAP32[$this >> 2] | 0;
   $7 = $6 + 24 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = HEAP32[$__s >> 2] | 0;
   HEAP32[$0 >> 2] = $9;
   $10 = $__v & 1;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   $11 = (tempInt = FUNCTION_TABLE_iiiiii[$8 & 1023]($this, $$byval_copy, $__iob, $__fl, $10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$sroa$0$0 = $11;
  } else {
   $12 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$1 >> 2] = $12;
   __THREW__ = 0;
   $13 = (tempInt = invoke_iii(398, $1 | 0, 9064 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $14 = __THREW__;
   __THREW__ = 0;
   $15 = $14 & 1;
   L4 : do {
    if ($15) {
     $63 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $64 = tempRet0;
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0 = $64;
     $$01 = $63;
    } else {
     (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $16 = HEAP32[$13 >> 2] | 0;
     if ($__v) {
      $17 = $16 + 24 | 0;
      $18 = HEAP32[$17 >> 2] | 0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm, $13), asyncState ? abort(-12) | 0 : 0;
     } else {
      $19 = $16 + 28 | 0;
      $20 = HEAP32[$19 >> 2] | 0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm, $13), asyncState ? abort(-12) | 0 : 0;
     }
     $21 = HEAP8[$__nm >> 0] | 0;
     $22 = $21 & 1;
     $23 = $22 << 24 >> 24 == 0;
     $24 = $__nm + 8 | 0;
     $25 = HEAP32[$24 >> 2] | 0;
     $$pre3 = $__nm + 4 | 0;
     $26 = $__nm + 4 | 0;
     $$pre2 = $__nm + 8 | 0;
     $$pre$phi4Z2D = $23 ? $26 : $$pre3;
     $$ph = $23 ? $26 : $25;
     $27 = $21 & 1;
     $28 = $27 << 24 >> 24 == 0;
     $$pre2$val5 = HEAP32[$$pre2 >> 2] | 0;
     $29 = HEAP32[$$pre$phi4Z2D >> 2] | 0;
     $30 = $21 & 255;
     $31 = $30 >>> 1;
     $32 = $28 ? $$pre$phi4Z2D : $$pre2$val5;
     $33 = $28 ? $31 : $29;
     $34 = $32 + ($33 << 2) | 0;
     $35 = ($$ph | 0) == ($34 | 0);
     L11 : do {
      if (!$35) {
       $37 = $$ph;
       while (1) {
        $36 = HEAP32[$37 >> 2] | 0;
        $38 = HEAP32[$__s >> 2] | 0;
        $39 = ($38 | 0) == (0 | 0);
        if (!$39) {
         $40 = $38 + 24 | 0;
         $41 = HEAP32[$40 >> 2] | 0;
         $42 = $38 + 28 | 0;
         $43 = HEAP32[$42 >> 2] | 0;
         $44 = ($41 | 0) == ($43 | 0);
         if ($44) {
          $45 = HEAP32[$38 >> 2] | 0;
          $46 = $45 + 52 | 0;
          $47 = HEAP32[$46 >> 2] | 0;
          __THREW__ = 0;
          $48 = (tempInt = invoke_iii($47 | 0, $38 | 0, $36 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $49 = __THREW__;
          __THREW__ = 0;
          $50 = $49 & 1;
          if ($50) {
           break;
          } else {
           $$0$i$i = $48;
          }
         } else {
          $51 = $41 + 4 | 0;
          HEAP32[$40 >> 2] = $51;
          HEAP32[$41 >> 2] = $36;
          $$0$i$i = $36;
         }
         $52 = ($$0$i$i | 0) == -1;
         if ($52) {
          HEAP32[$__s >> 2] = 0;
         }
        }
        $53 = $37 + 4 | 0;
        $$pre = HEAP8[$__nm >> 0] | 0;
        $54 = $$pre & 1;
        $55 = $54 << 24 >> 24 == 0;
        $$pre2$val = HEAP32[$$pre2 >> 2] | 0;
        $56 = HEAP32[$$pre$phi4Z2D >> 2] | 0;
        $57 = $$pre & 255;
        $58 = $57 >>> 1;
        $59 = $55 ? $$pre$phi4Z2D : $$pre2$val;
        $60 = $55 ? $58 : $56;
        $61 = $59 + ($60 << 2) | 0;
        $62 = ($53 | 0) == ($61 | 0);
        if ($62) {
         break L11;
        } else {
         $37 = $53;
        }
       }
       $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $66 = tempRet0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm), asyncState ? abort(-12) | 0 : 0;
       $$0 = $66;
       $$01 = $65;
       break L4;
      }
     } while (0);
     $67 = HEAP32[$__s >> 2] | 0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm), asyncState ? abort(-12) | 0 : 0;
     $$sroa$0$0 = $67;
     break L1;
    }
   } while (0);
   ___resumeException($$01 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__ct + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  $2 = ($1 | 0) == (0 | 0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = $1 + 12 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $1 + 16 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($4 | 0) == ($6 | 0);
    if ($7) {
     $8 = HEAP32[$1 >> 2] | 0;
     $9 = $8 + 36 | 0;
     $10 = HEAP32[$9 >> 2] | 0;
     $11 = (tempInt = FUNCTION_TABLE_ii[$10 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $12 = ($11 | 0) == -1;
     if ($12) {
      HEAP32[$__b >> 2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b >> 2] | 0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while (0);
  $13 = ($14 | 0) == (0 | 0);
  $15 = HEAP32[$__e >> 2] | 0;
  $16 = ($15 | 0) == (0 | 0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = $15 + 12 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $15 + 16 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ($18 | 0) == ($20 | 0);
    if (!$21) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15 >> 2] | 0;
    $23 = $22 + 36 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = (tempInt = FUNCTION_TABLE_ii[$24 & 1023]($15) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $26 = ($25 | 0) == -1;
    if ($26) {
     HEAP32[$__e >> 2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b >> 2] | 0;
  $28 = $27 + 12 | 0;
  $29 = HEAP32[$28 >> 2] | 0;
  $30 = $27 + 16 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  $32 = ($29 | 0) == ($31 | 0);
  if ($32) {
   $33 = HEAP32[$27 >> 2] | 0;
   $34 = $33 + 36 | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   $36 = (tempInt = FUNCTION_TABLE_ii[$35 & 1023]($27) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29 >> 0] | 0;
   $38 = $37 & 255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i & 255;
  $isascii1$i = $39 << 24 >> 24 > -1;
  if (!$isascii1$i) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0 >> 2] | 0;
  $42 = $41 + ($40 << 1) | 0;
  $43 = HEAP16[$42 >> 1] | 0;
  $44 = $43 & 8192;
  $45 = $44 << 16 >> 16 == 0;
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  $49 = $46 + 16 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  $51 = ($48 | 0) == ($50 | 0);
  if ($51) {
   $52 = HEAP32[$46 >> 2] | 0;
   $53 = $52 + 40 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   (tempInt = FUNCTION_TABLE_ii[$54 & 1023]($46) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   continue;
  } else {
   $55 = $48 + 1 | 0;
   HEAP32[$47 >> 2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0;
 $57 = ($56 | 0) == (0 | 0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = $56 + 12 | 0;
   $59 = HEAP32[$58 >> 2] | 0;
   $60 = $56 + 16 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   $62 = ($59 | 0) == ($61 | 0);
   if ($62) {
    $63 = HEAP32[$56 >> 2] | 0;
    $64 = $63 + 36 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = (tempInt = FUNCTION_TABLE_ii[$65 & 1023]($56) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $67 = ($66 | 0) == -1;
    if ($67) {
     HEAP32[$__b >> 2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while (0);
 $68 = ($69 | 0) == (0 | 0);
 $70 = ($$pre$i2$i$i6 | 0) == (0 | 0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = $$pre$i2$i$i6 + 12 | 0;
   $72 = HEAP32[$71 >> 2] | 0;
   $73 = $$pre$i2$i$i6 + 16 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   $75 = ($72 | 0) == ($74 | 0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6 >> 2] | 0;
    $77 = $76 + 36 | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = (tempInt = FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $80 = ($79 | 0) == -1;
    if ($80) {
     HEAP32[$__e >> 2] = 0;
     label = 32;
     break;
    }
   }
   if (!$68) {
    label = 33;
   }
  }
 } while (0);
 if ((label | 0) == 32) {
  if ($68) {
   label = 33;
  }
 }
 if ((label | 0) == 33) {
  $81 = HEAP32[$__err >> 2] | 0;
  $82 = $81 | 2;
  HEAP32[$__err >> 2] = $82;
 }
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 8 | 0;
 $8 = sp + 199 | 0;
 $9 = sp;
 $12 = sp + 198 | 0;
 $43 = sp + 197 | 0;
 $44 = sp + 196 | 0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43 >> 0] = $$expand_i1_val;
 $48 = $42;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $38 = $50;
 $51 = $38;
 $37 = $51;
 $10 = $agg$result;
 $11 = $44;
 $52 = $10;
 HEAP8[$9 >> 0] = HEAP8[$12 >> 0] | 0;
 $7 = $52;
 $53 = $7;
 $6 = $9;
 HEAP8[$5 >> 0] = HEAP8[$8 >> 0] | 0;
 $4 = $53;
 $3 = $5;
 $2 = $52;
 $54 = $2;
 $1 = $54;
 $55 = $1;
 $0 = $55;
 $56 = $0;
 $__a$i$i = $56;
 $__i$i$i = 0;
 while (1) {
  $57 = $__i$i$i;
  $58 = $57 >>> 0 < 3;
  if (!$58) {
   break;
  }
  $59 = $__i$i$i;
  $60 = $__a$i$i;
  $61 = $60 + ($59 << 2) | 0;
  HEAP32[$61 >> 2] = 0;
  $62 = $__i$i$i;
  $63 = $62 + 1 | 0;
  $__i$i$i = $63;
 }
 $64 = $41;
 __THREW__ = 0;
 $65 = (tempInt = invoke_ii(363, $64 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $66 = __THREW__;
 __THREW__ = 0;
 $67 = $66 & 1;
 if ($67) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $__lhs_sz = $65;
 $68 = $42;
 $22 = $68;
 $69 = $22;
 $21 = $69;
 $70 = $21;
 $20 = $70;
 $71 = $20;
 $19 = $71;
 $72 = $19;
 $73 = HEAP8[$72 >> 0] | 0;
 $74 = $73 & 255;
 $75 = $74 & 1;
 $76 = ($75 | 0) != 0;
 if ($76) {
  $15 = $69;
  $77 = $15;
  $14 = $77;
  $78 = $14;
  $13 = $78;
  $79 = $13;
  $80 = $79 + 4 | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  $88 = $81;
 } else {
  $18 = $69;
  $82 = $18;
  $17 = $82;
  $83 = $17;
  $16 = $83;
  $84 = $16;
  $85 = HEAP8[$84 >> 0] | 0;
  $86 = $85 & 255;
  $87 = $86 >> 1;
  $88 = $87;
 }
 $__rhs_sz = $88;
 $89 = $41;
 $90 = $__lhs_sz;
 $91 = $__lhs_sz;
 $92 = $__rhs_sz;
 $93 = $91 + $92 | 0;
 __THREW__ = 0;
 invoke_viiii(364, $agg$result | 0, $89 | 0, $90 | 0, $93 | 0), asyncState ? abort(-12) | 0 : 0;
 $94 = __THREW__;
 __THREW__ = 0;
 $95 = $94 & 1;
 if ($95) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $96 = $42;
 $36 = $96;
 $97 = $36;
 $35 = $97;
 $98 = $35;
 $34 = $98;
 $99 = $34;
 $33 = $99;
 $100 = $33;
 $32 = $100;
 $101 = $32;
 $102 = HEAP8[$101 >> 0] | 0;
 $103 = $102 & 255;
 $104 = $103 & 1;
 $105 = ($104 | 0) != 0;
 if ($105) {
  $26 = $98;
  $106 = $26;
  $25 = $106;
  $107 = $25;
  $24 = $107;
  $108 = $24;
  $109 = $108 + 8 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $117 = $110;
 } else {
  $31 = $98;
  $111 = $31;
  $30 = $111;
  $112 = $30;
  $29 = $112;
  $113 = $29;
  $114 = $113 + 1 | 0;
  $28 = $114;
  $115 = $28;
  $27 = $115;
  $116 = $27;
  $117 = $116;
 }
 $23 = $117;
 $118 = $23;
 $119 = $__rhs_sz;
 __THREW__ = 0;
 (tempInt = invoke_iiii(365, $agg$result | 0, $118 | 0, $119 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $120 = __THREW__;
 __THREW__ = 0;
 $121 = $120 & 1;
 if ($121) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43 >> 0] = $$expand_i1_val2;
 $47 = 1;
 $$pre_trunc = HEAP8[$43 >> 0] | 0;
 $122 = $$pre_trunc & 1;
 if ($122) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $15 = sp + 8 | 0;
 $18 = sp + 199 | 0;
 $19 = sp;
 $22 = sp + 198 | 0;
 $43 = sp + 197 | 0;
 $44 = sp + 196 | 0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43 >> 0] = $$expand_i1_val;
 $48 = $41;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $38 = $50;
 $51 = $38;
 $37 = $51;
 $20 = $agg$result;
 $21 = $44;
 $52 = $20;
 HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
 $17 = $52;
 $53 = $17;
 $16 = $19;
 HEAP8[$15 >> 0] = HEAP8[$18 >> 0] | 0;
 $14 = $53;
 $13 = $15;
 $12 = $52;
 $54 = $12;
 $11 = $54;
 $55 = $11;
 $10 = $55;
 $56 = $10;
 $__a$i$i = $56;
 $__i$i$i = 0;
 while (1) {
  $57 = $__i$i$i;
  $58 = $57 >>> 0 < 3;
  if (!$58) {
   break;
  }
  $59 = $__i$i$i;
  $60 = $__a$i$i;
  $61 = $60 + ($59 << 2) | 0;
  HEAP32[$61 >> 2] = 0;
  $62 = $__i$i$i;
  $63 = $62 + 1 | 0;
  $__i$i$i = $63;
 }
 $64 = $41;
 $9 = $64;
 $65 = $9;
 $8 = $65;
 $66 = $8;
 $7 = $66;
 $67 = $7;
 $6 = $67;
 $68 = $6;
 $69 = HEAP8[$68 >> 0] | 0;
 $70 = $69 & 255;
 $71 = $70 & 1;
 $72 = ($71 | 0) != 0;
 if ($72) {
  $2 = $65;
  $73 = $2;
  $1 = $73;
  $74 = $1;
  $0 = $74;
  $75 = $0;
  $76 = $75 + 4 | 0;
  $77 = HEAP32[$76 >> 2] | 0;
  $84 = $77;
 } else {
  $5 = $65;
  $78 = $5;
  $4 = $78;
  $79 = $4;
  $3 = $79;
  $80 = $3;
  $81 = HEAP8[$80 >> 0] | 0;
  $82 = $81 & 255;
  $83 = $82 >> 1;
  $84 = $83;
 }
 $__lhs_sz = $84;
 $85 = $42;
 __THREW__ = 0;
 $86 = (tempInt = invoke_ii(363, $85 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $87 = __THREW__;
 __THREW__ = 0;
 $88 = $87 & 1;
 if ($88) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $__rhs_sz = $86;
 $89 = $41;
 $36 = $89;
 $90 = $36;
 $35 = $90;
 $91 = $35;
 $34 = $91;
 $92 = $34;
 $33 = $92;
 $93 = $33;
 $32 = $93;
 $94 = $32;
 $95 = HEAP8[$94 >> 0] | 0;
 $96 = $95 & 255;
 $97 = $96 & 1;
 $98 = ($97 | 0) != 0;
 if ($98) {
  $26 = $91;
  $99 = $26;
  $25 = $99;
  $100 = $25;
  $24 = $100;
  $101 = $24;
  $102 = $101 + 8 | 0;
  $103 = HEAP32[$102 >> 2] | 0;
  $110 = $103;
 } else {
  $31 = $91;
  $104 = $31;
  $30 = $104;
  $105 = $30;
  $29 = $105;
  $106 = $29;
  $107 = $106 + 1 | 0;
  $28 = $107;
  $108 = $28;
  $27 = $108;
  $109 = $27;
  $110 = $109;
 }
 $23 = $110;
 $111 = $23;
 $112 = $__lhs_sz;
 $113 = $__lhs_sz;
 $114 = $__rhs_sz;
 $115 = $113 + $114 | 0;
 __THREW__ = 0;
 invoke_viiii(364, $agg$result | 0, $111 | 0, $112 | 0, $115 | 0), asyncState ? abort(-12) | 0 : 0;
 $116 = __THREW__;
 __THREW__ = 0;
 $117 = $116 & 1;
 if ($117) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $118 = $42;
 $119 = $__rhs_sz;
 __THREW__ = 0;
 (tempInt = invoke_iiii(365, $agg$result | 0, $118 | 0, $119 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $120 = __THREW__;
 __THREW__ = 0;
 $121 = $120 & 1;
 if ($121) {
  $123 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
  $125 = $45;
  $126 = $46;
  ___resumeException($125 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43 >> 0] = $$expand_i1_val2;
 $47 = 1;
 $$pre_trunc = HEAP8[$43 >> 0] | 0;
 $122 = $$pre_trunc & 1;
 if ($122) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixIcLj5EEERSA_RAT0__KT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $18 = sp;
 $19 = sp + 40 | 0;
 $20 = sp + 28 | 0;
 $23 = sp + 132 | 0;
 $24 = sp + 8 | 0;
 $16 = $this;
 $17 = $key;
 $25 = $16;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 << 24 >> 24 == 0;
 if ($27) {
  HEAP8[$25 >> 0] = 1;
  $28 = $25 + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE($18, 1), asyncState ? abort(-12) | 0 : 0;
  HEAP32[$28 >> 2] = HEAP32[$18 >> 2] | 0;
  HEAP32[$28 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
 }
 $29 = HEAP8[$25 >> 0] | 0;
 $30 = $29 << 24 >> 24 != 1;
 if (!$30) {
  $67 = $25 + 8 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $17;
  $3 = $24;
  $4 = $69;
  $70 = $3;
  $2 = $70;
  $71 = $2;
  $1 = $71;
  $72 = $1;
  $0 = $72;
  $73 = $4;
  $74 = $4;
  $75 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($74) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($70, $73, $75), asyncState ? abort(-12) | 0 : 0;
  __THREW__ = 0;
  $76 = (tempInt = invoke_iii(388, $68 | 0, $24 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $77 = __THREW__;
  __THREW__ = 0;
  $78 = $77 & 1;
  if (!$78) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return $76 | 0;
  }
  $79 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $80 = tempRet0;
  $21 = $79;
  $22 = $80;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24), asyncState ? abort(-12) | 0 : 0;
  $81 = $21;
  $82 = $22;
  ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $31 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $$expand_i1_val = 1;
 HEAP8[$23 >> 0] = $$expand_i1_val;
 __THREW__ = 0;
 invoke_vii(384, $20 | 0, $25 | 0), asyncState ? abort(-12) | 0 : 0;
 $32 = __THREW__;
 __THREW__ = 0;
 $33 = $32 & 1;
 if ($33) {
  $60 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $61 = tempRet0;
  $21 = $60;
  $22 = $61;
 } else {
  $14 = 14787;
  $15 = $20;
  $34 = $15;
  $35 = $14;
  __THREW__ = 0;
  $36 = (tempInt = invoke_iiii(385, $34 | 0, 0, $35 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $37 = __THREW__;
  __THREW__ = 0;
  $38 = $37 & 1;
  if ($38) {
   $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $63 = tempRet0;
   $21 = $62;
   $22 = $63;
  } else {
   $13 = $36;
   $39 = $13;
   $11 = $19;
   $12 = $39;
   $40 = $11;
   $41 = $12;
   $10 = $41;
   $42 = $10;
   HEAP32[$40 >> 2] = HEAP32[$42 >> 2] | 0;
   HEAP32[$40 + 4 >> 2] = HEAP32[$42 + 4 >> 2] | 0;
   HEAP32[$40 + 8 >> 2] = HEAP32[$42 + 8 >> 2] | 0;
   $43 = $12;
   $9 = $43;
   $44 = $9;
   $8 = $44;
   $45 = $8;
   $7 = $45;
   $46 = $7;
   $__a$i$i$i = $46;
   $__i$i$i$i = 0;
   while (1) {
    $47 = $__i$i$i$i;
    $48 = $47 >>> 0 < 3;
    if (!$48) {
     break;
    }
    $49 = $__i$i$i$i;
    $50 = $__a$i$i$i;
    $51 = $50 + ($49 << 2) | 0;
    HEAP32[$51 >> 2] = 0;
    $52 = $__i$i$i$i;
    $53 = $52 + 1 | 0;
    $__i$i$i$i = $53;
   }
   $5 = $31;
   $6 = $19;
   $54 = $5;
   $55 = $6;
   __THREW__ = 0;
   invoke_vii(386, $54 | 0, $55 | 0), asyncState ? abort(-12) | 0 : 0;
   $56 = __THREW__;
   __THREW__ = 0;
   $57 = $56 & 1;
   if (!$57) {
    $58 = 3236;
    HEAP32[$54 >> 2] = $58;
    $$expand_i1_val2 = 0;
    HEAP8[$23 >> 0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(387, $31 | 0, 160 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
    $59 = __THREW__;
    __THREW__ = 0;
   }
   $64 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $65 = tempRet0;
   $21 = $64;
   $22 = $65;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19), asyncState ? abort(-12) | 0 : 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20), asyncState ? abort(-12) | 0 : 0;
 }
 $$pre_trunc = HEAP8[$23 >> 0] | 0;
 $66 = $$pre_trunc & 1;
 if (!$66) {
  $81 = $21;
  $82 = $22;
  ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 ___cxa_free_exception($31 | 0), asyncState ? abort(-12) | 0 : 0;
 $81 = $21;
 $82 = $22;
 ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixIcLj4EEERSA_RAT0__KT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $18 = sp;
 $19 = sp + 40 | 0;
 $20 = sp + 28 | 0;
 $23 = sp + 132 | 0;
 $24 = sp + 8 | 0;
 $16 = $this;
 $17 = $key;
 $25 = $16;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 << 24 >> 24 == 0;
 if ($27) {
  HEAP8[$25 >> 0] = 1;
  $28 = $25 + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE($18, 1), asyncState ? abort(-12) | 0 : 0;
  HEAP32[$28 >> 2] = HEAP32[$18 >> 2] | 0;
  HEAP32[$28 + 4 >> 2] = HEAP32[$18 + 4 >> 2] | 0;
 }
 $29 = HEAP8[$25 >> 0] | 0;
 $30 = $29 << 24 >> 24 != 1;
 if (!$30) {
  $67 = $25 + 8 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $17;
  $3 = $24;
  $4 = $69;
  $70 = $3;
  $2 = $70;
  $71 = $2;
  $1 = $71;
  $72 = $1;
  $0 = $72;
  $73 = $4;
  $74 = $4;
  $75 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($74) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($70, $73, $75), asyncState ? abort(-12) | 0 : 0;
  __THREW__ = 0;
  $76 = (tempInt = invoke_iii(388, $68 | 0, $24 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $77 = __THREW__;
  __THREW__ = 0;
  $78 = $77 & 1;
  if (!$78) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return $76 | 0;
  }
  $79 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $80 = tempRet0;
  $21 = $79;
  $22 = $80;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24), asyncState ? abort(-12) | 0 : 0;
  $81 = $21;
  $82 = $22;
  ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $31 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $$expand_i1_val = 1;
 HEAP8[$23 >> 0] = $$expand_i1_val;
 __THREW__ = 0;
 invoke_vii(384, $20 | 0, $25 | 0), asyncState ? abort(-12) | 0 : 0;
 $32 = __THREW__;
 __THREW__ = 0;
 $33 = $32 & 1;
 if ($33) {
  $60 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $61 = tempRet0;
  $21 = $60;
  $22 = $61;
 } else {
  $14 = 14787;
  $15 = $20;
  $34 = $15;
  $35 = $14;
  __THREW__ = 0;
  $36 = (tempInt = invoke_iiii(385, $34 | 0, 0, $35 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $37 = __THREW__;
  __THREW__ = 0;
  $38 = $37 & 1;
  if ($38) {
   $62 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $63 = tempRet0;
   $21 = $62;
   $22 = $63;
  } else {
   $13 = $36;
   $39 = $13;
   $11 = $19;
   $12 = $39;
   $40 = $11;
   $41 = $12;
   $10 = $41;
   $42 = $10;
   HEAP32[$40 >> 2] = HEAP32[$42 >> 2] | 0;
   HEAP32[$40 + 4 >> 2] = HEAP32[$42 + 4 >> 2] | 0;
   HEAP32[$40 + 8 >> 2] = HEAP32[$42 + 8 >> 2] | 0;
   $43 = $12;
   $9 = $43;
   $44 = $9;
   $8 = $44;
   $45 = $8;
   $7 = $45;
   $46 = $7;
   $__a$i$i$i = $46;
   $__i$i$i$i = 0;
   while (1) {
    $47 = $__i$i$i$i;
    $48 = $47 >>> 0 < 3;
    if (!$48) {
     break;
    }
    $49 = $__i$i$i$i;
    $50 = $__a$i$i$i;
    $51 = $50 + ($49 << 2) | 0;
    HEAP32[$51 >> 2] = 0;
    $52 = $__i$i$i$i;
    $53 = $52 + 1 | 0;
    $__i$i$i$i = $53;
   }
   $5 = $31;
   $6 = $19;
   $54 = $5;
   $55 = $6;
   __THREW__ = 0;
   invoke_vii(386, $54 | 0, $55 | 0), asyncState ? abort(-12) | 0 : 0;
   $56 = __THREW__;
   __THREW__ = 0;
   $57 = $56 & 1;
   if (!$57) {
    $58 = 3236;
    HEAP32[$54 >> 2] = $58;
    $$expand_i1_val2 = 0;
    HEAP8[$23 >> 0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(387, $31 | 0, 160 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
    $59 = __THREW__;
    __THREW__ = 0;
   }
   $64 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $65 = tempRet0;
   $21 = $64;
   $22 = $65;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19), asyncState ? abort(-12) | 0 : 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20), asyncState ? abort(-12) | 0 : 0;
 }
 $$pre_trunc = HEAP8[$23 >> 0] | 0;
 $66 = $$pre_trunc & 1;
 if (!$66) {
  $81 = $21;
  $82 = $22;
  ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 ___cxa_free_exception($31 | 0), asyncState ? abort(-12) | 0 : 0;
 $81 = $21;
 $82 = $22;
 ___resumeException($81 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__x) {
 $__root = $__root | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = $__root;
 $4 = $__x;
 $5 = $4;
 $6 = $3;
 $7 = ($5 | 0) == ($6 | 0);
 $8 = $4;
 $9 = $8 + 12 | 0;
 $10 = $7 & 1;
 HEAP8[$9 >> 0] = $10;
 while (1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11 | 0) != ($12 | 0);
  if (!$13) {
   label = 17;
   break;
  }
  $14 = $4;
  $15 = $14 + 8 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = $16 + 12 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  $19 = $18 & 1;
  $20 = $19 ^ 1;
  if (!$20) {
   label = 17;
   break;
  }
  $21 = $4;
  $22 = $21 + 8 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $2 = $23;
  $24 = $2;
  $25 = $2;
  $26 = $25 + 8 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = ($24 | 0) == ($28 | 0);
  $30 = $4;
  $31 = $30 + 8 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $32 + 8 | 0;
  $34 = HEAP32[$33 >> 2] | 0;
  if ($29) {
   $35 = $34 + 4 | 0;
   $36 = HEAP32[$35 >> 2] | 0;
   $__y = $36;
   $37 = $__y;
   $38 = ($37 | 0) != (0 | 0);
   if (!$38) {
    label = 8;
    break;
   }
   $39 = $__y;
   $40 = $39 + 12 | 0;
   $41 = HEAP8[$40 >> 0] | 0;
   $42 = $41 & 1;
   if ($42) {
    label = 8;
    break;
   }
   $43 = $4;
   $44 = $43 + 8 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   $4 = $45;
   $46 = $4;
   $47 = $46 + 12 | 0;
   HEAP8[$47 >> 0] = 1;
   $48 = $4;
   $49 = $48 + 8 | 0;
   $50 = HEAP32[$49 >> 2] | 0;
   $4 = $50;
   $51 = $4;
   $52 = $3;
   $53 = ($51 | 0) == ($52 | 0);
   $54 = $4;
   $55 = $54 + 12 | 0;
   $56 = $53 & 1;
   HEAP8[$55 >> 0] = $56;
   $57 = $__y;
   $58 = $57 + 12 | 0;
   HEAP8[$58 >> 0] = 1;
   continue;
  } else {
   $81 = HEAP32[$34 >> 2] | 0;
   $__y1 = $81;
   $82 = $__y1;
   $83 = ($82 | 0) != (0 | 0);
   if (!$83) {
    label = 14;
    break;
   }
   $84 = $__y1;
   $85 = $84 + 12 | 0;
   $86 = HEAP8[$85 >> 0] | 0;
   $87 = $86 & 1;
   if ($87) {
    label = 14;
    break;
   }
   $88 = $4;
   $89 = $88 + 8 | 0;
   $90 = HEAP32[$89 >> 2] | 0;
   $4 = $90;
   $91 = $4;
   $92 = $91 + 12 | 0;
   HEAP8[$92 >> 0] = 1;
   $93 = $4;
   $94 = $93 + 8 | 0;
   $95 = HEAP32[$94 >> 2] | 0;
   $4 = $95;
   $96 = $4;
   $97 = $3;
   $98 = ($96 | 0) == ($97 | 0);
   $99 = $4;
   $100 = $99 + 12 | 0;
   $101 = $98 & 1;
   HEAP8[$100 >> 0] = $101;
   $102 = $__y1;
   $103 = $102 + 12 | 0;
   HEAP8[$103 >> 0] = 1;
   continue;
  }
 }
 if ((label | 0) == 8) {
  $59 = $4;
  $1 = $59;
  $60 = $1;
  $61 = $1;
  $62 = $61 + 8 | 0;
  $63 = HEAP32[$62 >> 2] | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = ($60 | 0) == ($64 | 0);
  if (!$65) {
   $66 = $4;
   $67 = $66 + 8 | 0;
   $68 = HEAP32[$67 >> 2] | 0;
   $4 = $68;
   $69 = $4;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($69), asyncState ? abort(-12) | 0 : 0;
  }
  $70 = $4;
  $71 = $70 + 8 | 0;
  $72 = HEAP32[$71 >> 2] | 0;
  $4 = $72;
  $73 = $4;
  $74 = $73 + 12 | 0;
  HEAP8[$74 >> 0] = 1;
  $75 = $4;
  $76 = $75 + 8 | 0;
  $77 = HEAP32[$76 >> 2] | 0;
  $4 = $77;
  $78 = $4;
  $79 = $78 + 12 | 0;
  HEAP8[$79 >> 0] = 0;
  $80 = $4;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($80), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 14) {
  $104 = $4;
  $0 = $104;
  $105 = $0;
  $106 = $0;
  $107 = $106 + 8 | 0;
  $108 = HEAP32[$107 >> 2] | 0;
  $109 = HEAP32[$108 >> 2] | 0;
  $110 = ($105 | 0) == ($109 | 0);
  if ($110) {
   $111 = $4;
   $112 = $111 + 8 | 0;
   $113 = HEAP32[$112 >> 2] | 0;
   $4 = $113;
   $114 = $4;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($114), asyncState ? abort(-12) | 0 : 0;
  }
  $115 = $4;
  $116 = $115 + 8 | 0;
  $117 = HEAP32[$116 >> 2] | 0;
  $4 = $117;
  $118 = $4;
  $119 = $118 + 12 | 0;
  HEAP8[$119 >> 0] = 1;
  $120 = $4;
  $121 = $120 + 8 | 0;
  $122 = HEAP32[$121 >> 2] | 0;
  $4 = $122;
  $123 = $4;
  $124 = $123 + 12 | 0;
  HEAP8[$124 >> 0] = 0;
  $125 = $4;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($125), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 17) {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE21__push_back_slow_pathISA_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $8 = sp + 8 | 0;
 $13 = sp + 201 | 0;
 $22 = sp;
 $25 = sp + 200 | 0;
 $33 = sp + 80 | 0;
 $34 = sp + 68 | 0;
 $__v = sp + 20 | 0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = $44 + 8 | 0;
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = $48 + 4 | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = HEAP32[$48 >> 2] | 0;
 $52 = $50;
 $53 = $51;
 $54 = $52 - $53 | 0;
 $55 = ($54 | 0) / 16 & -1;
 $56 = $55 + 1 | 0;
 $32 = $43;
 HEAP32[$33 >> 2] = $56;
 $57 = $32;
 $58 = (tempInt = __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE8max_sizeEv($57) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__ms$i = $58;
 $59 = HEAP32[$33 >> 2] | 0;
 $60 = $__ms$i;
 $61 = $59 >>> 0 > $60 >>> 0;
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57), asyncState ? abort(-12) | 0 : 0;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = $64 + 8 | 0;
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67 >> 2] | 0;
 $69 = HEAP32[$63 >> 2] | 0;
 $70 = $68;
 $71 = $69;
 $72 = $70 - $71 | 0;
 $73 = ($72 | 0) / 16 & -1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = ($75 >>> 0) / 2 & -1;
 $77 = $74 >>> 0 >= $76 >>> 0;
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79 << 1;
  HEAP32[$34 >> 2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  HEAP8[$22 >> 0] = HEAP8[$25 >> 0] | 0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85 >> 2] | 0;
  $87 = $19;
  $88 = HEAP32[$87 >> 2] | 0;
  $89 = $86 >>> 0 < $88 >>> 0;
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92 >> 2] | 0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = $95 + 4 | 0;
 $97 = HEAP32[$96 >> 2] | 0;
 $98 = HEAP32[$95 >> 2] | 0;
 $99 = $97;
 $100 = $98;
 $101 = $99 - $100 | 0;
 $102 = ($101 | 0) / 16 & -1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EERNS8_ISB_EEEC2EjjSD_($__v, $94, $102, $103), asyncState ? abort(-12) | 0 : 0;
 $104 = $__a;
 $105 = $__v + 8 | 0;
 $106 = HEAP32[$105 >> 2] | 0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 HEAP8[$8 >> 0] = HEAP8[$13 >> 0] | 0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EOSA_($118, $120), asyncState ? abort(-12) | 0 : 0;
 $121 = $__v + 8 | 0;
 $122 = HEAP32[$121 >> 2] | 0;
 $123 = $122 + 16 | 0;
 HEAP32[$121 >> 2] = $123;
 __THREW__ = 0;
 invoke_vii(439, $43 | 0, $__v | 0), asyncState ? abort(-12) | 0 : 0;
 $124 = __THREW__;
 __THREW__ = 0;
 $125 = $124 & 1;
 if ($125) {
  $126 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EERNS8_ISB_EEED2Ev($__v), asyncState ? abort(-12) | 0 : 0;
  $128 = $41;
  $129 = $42;
  ___resumeException($128 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  __ZNSt3__114__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EERNS8_ISB_EEED2Ev($__v), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1920 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1920 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1928 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1928 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 9908;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (10076 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(544 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1928 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(545, 9908 | 0, 10076 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    if (!$14) {
     __THREW__ = 0;
     (tempInt = invoke_iii(545, 9920 | 0, 10104 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $15 = __THREW__;
     __THREW__ = 0;
     $16 = $15 & 1;
     if (!$16) {
      __THREW__ = 0;
      (tempInt = invoke_iii(545, 9932 | 0, 10132 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $17 = __THREW__;
      __THREW__ = 0;
      $18 = $17 & 1;
      if (!$18) {
       __THREW__ = 0;
       (tempInt = invoke_iii(545, 9944 | 0, 10164 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $19 = __THREW__;
       __THREW__ = 0;
       $20 = $19 & 1;
       if (!$20) {
        __THREW__ = 0;
        (tempInt = invoke_iii(545, 9956 | 0, 10204 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $21 = __THREW__;
        __THREW__ = 0;
        $22 = $21 & 1;
        if (!$22) {
         __THREW__ = 0;
         (tempInt = invoke_iii(545, 9968 | 0, 10240 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $23 = __THREW__;
         __THREW__ = 0;
         $24 = $23 & 1;
         if (!$24) {
          __THREW__ = 0;
          (tempInt = invoke_iii(545, 9980 | 0, 10268 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $25 = __THREW__;
          __THREW__ = 0;
          $26 = $25 & 1;
          if (!$26) {
           __THREW__ = 0;
           (tempInt = invoke_iii(545, 9992 | 0, 10304 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $27 = __THREW__;
           __THREW__ = 0;
           $28 = $27 & 1;
           if (!$28) {
            __THREW__ = 0;
            (tempInt = invoke_iii(545, 10004 | 0, 10320 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $29 = __THREW__;
            __THREW__ = 0;
            $30 = $29 & 1;
            if (!$30) {
             __THREW__ = 0;
             (tempInt = invoke_iii(545, 10016 | 0, 10336 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $31 = __THREW__;
             __THREW__ = 0;
             $32 = $31 & 1;
             if (!$32) {
              __THREW__ = 0;
              (tempInt = invoke_iii(545, 10028 | 0, 10352 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $33 = __THREW__;
              __THREW__ = 0;
              $34 = $33 & 1;
              if (!$34) {
               __THREW__ = 0;
               (tempInt = invoke_iii(545, 10040 | 0, 10368 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
               $35 = __THREW__;
               __THREW__ = 0;
               $36 = $35 & 1;
               if (!$36) {
                __THREW__ = 0;
                (tempInt = invoke_iii(545, 10052 | 0, 10384 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $37 = __THREW__;
                __THREW__ = 0;
                $38 = $37 & 1;
                if (!$38) {
                 __THREW__ = 0;
                 (tempInt = invoke_iii(545, 10064 | 0, 10400 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $39 = __THREW__;
                 __THREW__ = 0;
                 $40 = $39 & 1;
                 if (!$40) {
                  HEAP32[10416 >> 2] = 9908;
                  ___cxa_guard_release(1920 | 0), asyncState ? abort(-12) | 0 : 0;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $43 = tempRet0;
    ___cxa_guard_abort(1920 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($42 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $41 = HEAP32[10416 >> 2] | 0;
 return $41 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1904 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1904 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1912 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1912 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 9736;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (9904 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(542 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1912 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(543, 9736 | 0, 21756 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    if (!$14) {
     __THREW__ = 0;
     (tempInt = invoke_iii(543, 9748 | 0, 21763 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $15 = __THREW__;
     __THREW__ = 0;
     $16 = $15 & 1;
     if (!$16) {
      __THREW__ = 0;
      (tempInt = invoke_iii(543, 9760 | 0, 21770 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $17 = __THREW__;
      __THREW__ = 0;
      $18 = $17 & 1;
      if (!$18) {
       __THREW__ = 0;
       (tempInt = invoke_iii(543, 9772 | 0, 21778 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $19 = __THREW__;
       __THREW__ = 0;
       $20 = $19 & 1;
       if (!$20) {
        __THREW__ = 0;
        (tempInt = invoke_iii(543, 9784 | 0, 21788 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $21 = __THREW__;
        __THREW__ = 0;
        $22 = $21 & 1;
        if (!$22) {
         __THREW__ = 0;
         (tempInt = invoke_iii(543, 9796 | 0, 21797 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $23 = __THREW__;
         __THREW__ = 0;
         $24 = $23 & 1;
         if (!$24) {
          __THREW__ = 0;
          (tempInt = invoke_iii(543, 9808 | 0, 21804 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
          $25 = __THREW__;
          __THREW__ = 0;
          $26 = $25 & 1;
          if (!$26) {
           __THREW__ = 0;
           (tempInt = invoke_iii(543, 9820 | 0, 21813 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
           $27 = __THREW__;
           __THREW__ = 0;
           $28 = $27 & 1;
           if (!$28) {
            __THREW__ = 0;
            (tempInt = invoke_iii(543, 9832 | 0, 21817 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
            $29 = __THREW__;
            __THREW__ = 0;
            $30 = $29 & 1;
            if (!$30) {
             __THREW__ = 0;
             (tempInt = invoke_iii(543, 9844 | 0, 21821 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
             $31 = __THREW__;
             __THREW__ = 0;
             $32 = $31 & 1;
             if (!$32) {
              __THREW__ = 0;
              (tempInt = invoke_iii(543, 9856 | 0, 21825 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
              $33 = __THREW__;
              __THREW__ = 0;
              $34 = $33 & 1;
              if (!$34) {
               __THREW__ = 0;
               (tempInt = invoke_iii(543, 9868 | 0, 21829 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
               $35 = __THREW__;
               __THREW__ = 0;
               $36 = $35 & 1;
               if (!$36) {
                __THREW__ = 0;
                (tempInt = invoke_iii(543, 9880 | 0, 21833 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                $37 = __THREW__;
                __THREW__ = 0;
                $38 = $37 & 1;
                if (!$38) {
                 __THREW__ = 0;
                 (tempInt = invoke_iii(543, 9892 | 0, 21837 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
                 $39 = __THREW__;
                 __THREW__ = 0;
                 $40 = $39 & 1;
                 if (!$40) {
                  HEAP32[9904 >> 2] = 9736;
                  ___cxa_guard_release(1904 | 0), asyncState ? abort(-12) | 0 : 0;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $43 = tempRet0;
    ___cxa_guard_abort(1904 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($42 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $41 = HEAP32[9904 >> 2] | 0;
 return $41 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $27 = sp + 68 | 0;
 $28 = sp + 64 | 0;
 $31 = sp + 52 | 0;
 $32 = sp + 48 | 0;
 $__h = sp + 16 | 0;
 $38 = sp + 8 | 0;
 $37 = $this;
 $41 = $37;
 $__rt = 0;
 $42 = $41 + 64 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $44 = ($43 | 0) != (0 | 0);
 if (!$44) {
  $122 = $__rt;
  STACKTOP = sp;
  return $122 | 0;
 }
 $__rt = $41;
 $45 = $41 + 64 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 HEAP32[$38 >> 2] = 410;
 $34 = $__h;
 $35 = $46;
 $36 = $38;
 $47 = $34;
 $48 = $35;
 $49 = $36;
 $33 = $49;
 $50 = $33;
 $51 = HEAP32[$50 >> 2] | 0;
 $30 = $47;
 HEAP32[$31 >> 2] = $48;
 HEAP32[$32 >> 2] = $51;
 $52 = $30;
 $29 = $31;
 $53 = $29;
 $54 = HEAP32[$53 >> 2] | 0;
 $23 = $32;
 $55 = $23;
 $56 = HEAP32[$55 >> 2] | 0;
 $26 = $52;
 HEAP32[$27 >> 2] = $54;
 HEAP32[$28 >> 2] = $56;
 $57 = $26;
 $25 = $27;
 $58 = $25;
 $59 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = $59;
 $60 = $57 + 4 | 0;
 $24 = $28;
 $61 = $24;
 $62 = HEAP32[$61 >> 2] | 0;
 HEAP32[$60 >> 2] = $62;
 $63 = HEAP32[$41 >> 2] | 0;
 $64 = $63 + 24 | 0;
 $65 = HEAP32[$64 >> 2] | 0;
 __THREW__ = 0;
 $66 = (tempInt = invoke_ii($65 | 0, $41 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $67 = __THREW__;
 __THREW__ = 0;
 $68 = $67 & 1;
 if (!$68) {
  $69 = ($66 | 0) != 0;
  if ($69) {
   $__rt = 0;
  }
  $4 = $__h;
  $91 = $4;
  $3 = $91;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  $94 = HEAP32[$93 >> 2] | 0;
  $__t$i = $94;
  $1 = $91;
  $95 = $1;
  $0 = $95;
  $96 = $0;
  HEAP32[$96 >> 2] = 0;
  $97 = $__t$i;
  __THREW__ = 0;
  $98 = (tempInt = invoke_ii(410, $97 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $99 = __THREW__;
  __THREW__ = 0;
  $100 = $99 & 1;
  if (!$100) {
   $101 = ($98 | 0) == 0;
   if ($101) {
    $102 = $41 + 64 | 0;
    HEAP32[$102 >> 2] = 0;
   } else {
    $__rt = 0;
   }
   $22 = $__h;
   $103 = $22;
   $20 = $103;
   $21 = 0;
   $104 = $20;
   $19 = $104;
   $105 = $19;
   $18 = $105;
   $106 = $18;
   $107 = HEAP32[$106 >> 2] | 0;
   $__tmp$i$i = $107;
   $108 = $21;
   $17 = $104;
   $109 = $17;
   $16 = $109;
   $110 = $16;
   HEAP32[$110 >> 2] = $108;
   $111 = $__tmp$i$i;
   $112 = ($111 | 0) != (0 | 0);
   if (!$112) {
    $122 = $__rt;
    STACKTOP = sp;
    return $122 | 0;
   }
   $15 = $104;
   $113 = $15;
   $14 = $113;
   $114 = $14;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   $117 = $__tmp$i$i;
   __THREW__ = 0;
   (tempInt = invoke_ii($116 | 0, $117 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $118 = __THREW__;
   __THREW__ = 0;
   $119 = $118 & 1;
   if ($119) {
    $120 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $121 = tempRet0;
    ___clang_call_terminate($120), asyncState ? abort(-12) | 0 : 0;
   } else {
    $122 = $__rt;
    STACKTOP = sp;
    return $122 | 0;
   }
  }
 }
 $70 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $71 = tempRet0;
 $39 = $70;
 $40 = $71;
 $13 = $__h;
 $72 = $13;
 $11 = $72;
 $12 = 0;
 $73 = $11;
 $10 = $73;
 $74 = $10;
 $9 = $74;
 $75 = $9;
 $76 = HEAP32[$75 >> 2] | 0;
 $__tmp$i$i1 = $76;
 $77 = $12;
 $8 = $73;
 $78 = $8;
 $7 = $78;
 $79 = $7;
 HEAP32[$79 >> 2] = $77;
 $80 = $__tmp$i$i1;
 $81 = ($80 | 0) != (0 | 0);
 if (!$81) {
  $123 = $39;
  $124 = $40;
  ___resumeException($123 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $6 = $73;
 $82 = $6;
 $5 = $82;
 $83 = $5;
 $84 = $83 + 4 | 0;
 $85 = HEAP32[$84 >> 2] | 0;
 $86 = $__tmp$i$i1;
 __THREW__ = 0;
 (tempInt = invoke_ii($85 | 0, $86 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $87 = __THREW__;
 __THREW__ = 0;
 $88 = $87 & 1;
 if ($88) {
  $89 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $90 = tempRet0;
  ___clang_call_terminate($89), asyncState ? abort(-12) | 0 : 0;
 } else {
  $123 = $39;
  $124 = $40;
  ___resumeException($123 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixERKS9_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $alloc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $12 = sp;
 $14 = sp + 135 | 0;
 $15 = sp + 134 | 0;
 $alloc = sp + 133 | 0;
 $25 = sp + 24 | 0;
 $26 = sp + 12 | 0;
 $29 = sp + 132 | 0;
 $23 = $this;
 $24 = $key;
 $30 = $23;
 $31 = HEAP8[$30 >> 0] | 0;
 $32 = $31 << 24 >> 24 == 0;
 if ($32) {
  HEAP8[$30 >> 0] = 1;
  $22 = $alloc;
  $19 = $alloc;
  $20 = 1;
  $21 = 0;
  $33 = $20;
  $34 = $33 * 12 | 0;
  $18 = $34;
  $35 = $18;
  $36 = (tempInt = __Znwj($35) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $37 = $30 + 8 | 0;
  HEAP32[$37 >> 2] = $36;
  $38 = $30 + 8 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $16 = $alloc;
  $17 = $39;
  $40 = $17;
  $13 = $40;
  $41 = $13;
  HEAP8[$12 >> 0] = HEAP8[$15 >> 0] | 0;
  $11 = $14;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEEC2ERKSH_($41, $14), asyncState ? abort(-12) | 0 : 0;
 }
 $42 = HEAP8[$30 >> 0] | 0;
 $43 = $42 << 24 >> 24 != 1;
 if (!$43) {
  $80 = $30 + 8 | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  $82 = $24;
  $83 = (tempInt = __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSE_($81, $82) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $44 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $$expand_i1_val = 1;
 HEAP8[$29 >> 0] = $$expand_i1_val;
 __THREW__ = 0;
 invoke_vii(384, $26 | 0, $30 | 0), asyncState ? abort(-12) | 0 : 0;
 $45 = __THREW__;
 __THREW__ = 0;
 $46 = $45 & 1;
 if ($46) {
  $73 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $74 = tempRet0;
  $27 = $73;
  $28 = $74;
 } else {
  $9 = 14787;
  $10 = $26;
  $47 = $10;
  $48 = $9;
  __THREW__ = 0;
  $49 = (tempInt = invoke_iiii(385, $47 | 0, 0, $48 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $50 = __THREW__;
  __THREW__ = 0;
  $51 = $50 & 1;
  if ($51) {
   $75 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $76 = tempRet0;
   $27 = $75;
   $28 = $76;
  } else {
   $8 = $49;
   $52 = $8;
   $6 = $25;
   $7 = $52;
   $53 = $6;
   $54 = $7;
   $5 = $54;
   $55 = $5;
   HEAP32[$53 >> 2] = HEAP32[$55 >> 2] | 0;
   HEAP32[$53 + 4 >> 2] = HEAP32[$55 + 4 >> 2] | 0;
   HEAP32[$53 + 8 >> 2] = HEAP32[$55 + 8 >> 2] | 0;
   $56 = $7;
   $4 = $56;
   $57 = $4;
   $3 = $57;
   $58 = $3;
   $2 = $58;
   $59 = $2;
   $__a$i$i$i = $59;
   $__i$i$i$i = 0;
   while (1) {
    $60 = $__i$i$i$i;
    $61 = $60 >>> 0 < 3;
    if (!$61) {
     break;
    }
    $62 = $__i$i$i$i;
    $63 = $__a$i$i$i;
    $64 = $63 + ($62 << 2) | 0;
    HEAP32[$64 >> 2] = 0;
    $65 = $__i$i$i$i;
    $66 = $65 + 1 | 0;
    $__i$i$i$i = $66;
   }
   $0 = $44;
   $1 = $25;
   $67 = $0;
   $68 = $1;
   __THREW__ = 0;
   invoke_vii(386, $67 | 0, $68 | 0), asyncState ? abort(-12) | 0 : 0;
   $69 = __THREW__;
   __THREW__ = 0;
   $70 = $69 & 1;
   if (!$70) {
    $71 = 3236;
    HEAP32[$67 >> 2] = $71;
    $$expand_i1_val2 = 0;
    HEAP8[$29 >> 0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(387, $44 | 0, 160 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
    $72 = __THREW__;
    __THREW__ = 0;
   }
   $77 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $78 = tempRet0;
   $27 = $77;
   $28 = $78;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($25), asyncState ? abort(-12) | 0 : 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($26), asyncState ? abort(-12) | 0 : 0;
 }
 $$pre_trunc = HEAP8[$29 >> 0] | 0;
 $79 = $$pre_trunc & 1;
 if (!$79) {
  $84 = $27;
  $85 = $28;
  ___resumeException($84 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 ___cxa_free_exception($44 | 0), asyncState ? abort(-12) | 0 : 0;
 $84 = $27;
 $85 = $28;
 ___resumeException($84 | 0), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $0 = $mode & 2;
 $1 = ($0 | 0) == 0;
 $$pre1 = $to_end;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = $$pre1 - $2 | 0;
  $4 = ($3 | 0) < 3;
  if ($4) {
   $$0 = 1;
  } else {
   $5 = $to + 1 | 0;
   HEAP32[$to_nxt >> 2] = $5;
   HEAP8[$to >> 0] = -17;
   $6 = HEAP32[$to_nxt >> 2] | 0;
   $7 = $6 + 1 | 0;
   HEAP32[$to_nxt >> 2] = $7;
   HEAP8[$6 >> 0] = -69;
   $8 = HEAP32[$to_nxt >> 2] | 0;
   $9 = $8 + 1 | 0;
   HEAP32[$to_nxt >> 2] = $9;
   HEAP8[$8 >> 0] = -65;
   label = 4;
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $$pre = HEAP32[$frm_nxt >> 2] | 0;
   $10 = $$pre >>> 0 < $frm_end >>> 0;
   if ($10) {
    $12 = $$pre;
    while (1) {
     $11 = HEAP32[$12 >> 2] | 0;
     $13 = $11 & -2048;
     $14 = ($13 | 0) == 55296;
     $15 = $11 >>> 0 > $Maxcode >>> 0;
     $or$cond = $15 | $14;
     if ($or$cond) {
      $$0 = 2;
      break L4;
     }
     $16 = $11 >>> 0 < 128;
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt >> 2] | 0;
       $18 = $17;
       $19 = $$pre1 - $18 | 0;
       $20 = ($19 | 0) < 1;
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $11 & 255;
       $22 = $17 + 1 | 0;
       HEAP32[$to_nxt >> 2] = $22;
       HEAP8[$17 >> 0] = $21;
      } else {
       $23 = $11 >>> 0 < 2048;
       if ($23) {
        $24 = HEAP32[$to_nxt >> 2] | 0;
        $25 = $24;
        $26 = $$pre1 - $25 | 0;
        $27 = ($26 | 0) < 2;
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $11 >>> 6;
        $29 = $28 | 192;
        $30 = $29 & 255;
        $31 = $24 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $31;
        HEAP8[$24 >> 0] = $30;
        $32 = $11 & 63;
        $33 = $32 | 128;
        $34 = $33 & 255;
        $35 = HEAP32[$to_nxt >> 2] | 0;
        $36 = $35 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $36;
        HEAP8[$35 >> 0] = $34;
        break;
       }
       $37 = $11 >>> 0 < 65536;
       $38 = HEAP32[$to_nxt >> 2] | 0;
       $39 = $38;
       $40 = $$pre1 - $39 | 0;
       if ($37) {
        $41 = ($40 | 0) < 3;
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $11 >>> 12;
        $43 = $42 | 224;
        $44 = $43 & 255;
        $45 = $38 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $45;
        HEAP8[$38 >> 0] = $44;
        $46 = $11 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48 & 255;
        $50 = HEAP32[$to_nxt >> 2] | 0;
        $51 = $50 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $51;
        HEAP8[$50 >> 0] = $49;
        $52 = $11 & 63;
        $53 = $52 | 128;
        $54 = $53 & 255;
        $55 = HEAP32[$to_nxt >> 2] | 0;
        $56 = $55 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $56;
        HEAP8[$55 >> 0] = $54;
        break;
       } else {
        $57 = ($40 | 0) < 4;
        if ($57) {
         $$0 = 1;
         break L4;
        }
        $58 = $11 >>> 18;
        $59 = $58 | 240;
        $60 = $59 & 255;
        $61 = $38 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $61;
        HEAP8[$38 >> 0] = $60;
        $62 = $11 >>> 12;
        $63 = $62 & 63;
        $64 = $63 | 128;
        $65 = $64 & 255;
        $66 = HEAP32[$to_nxt >> 2] | 0;
        $67 = $66 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $67;
        HEAP8[$66 >> 0] = $65;
        $68 = $11 >>> 6;
        $69 = $68 & 63;
        $70 = $69 | 128;
        $71 = $70 & 255;
        $72 = HEAP32[$to_nxt >> 2] | 0;
        $73 = $72 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $73;
        HEAP8[$72 >> 0] = $71;
        $74 = $11 & 63;
        $75 = $74 | 128;
        $76 = $75 & 255;
        $77 = HEAP32[$to_nxt >> 2] | 0;
        $78 = $77 + 1 | 0;
        HEAP32[$to_nxt >> 2] = $78;
        HEAP8[$77 >> 0] = $76;
        break;
       }
      }
     } while (0);
     $79 = HEAP32[$frm_nxt >> 2] | 0;
     $80 = $79 + 4 | 0;
     HEAP32[$frm_nxt >> 2] = $80;
     $81 = $80 >>> 0 < $frm_end >>> 0;
     if ($81) {
      $12 = $80;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E11extra_spaceERKS9_($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__end = 0, $__range = 0, $c = 0, $result = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $24 = sp + 124 | 0;
 $48 = sp + 28 | 0;
 $__begin = sp + 8 | 0;
 $__end = sp + 4 | 0;
 $50 = $s;
 $result = 0;
 $51 = $50;
 $__range = $51;
 $52 = $__range;
 $49 = $52;
 $53 = $49;
 $47 = $53;
 $54 = $47;
 $46 = $54;
 $55 = $46;
 $45 = $55;
 $56 = $45;
 $44 = $56;
 $57 = $44;
 $58 = HEAP8[$57 >> 0] | 0;
 $59 = $58 & 255;
 $60 = $59 & 1;
 $61 = ($60 | 0) != 0;
 if ($61) {
  $38 = $54;
  $62 = $38;
  $37 = $62;
  $63 = $37;
  $36 = $63;
  $64 = $36;
  $65 = $64 + 8 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $73 = $66;
 } else {
  $43 = $54;
  $67 = $43;
  $42 = $67;
  $68 = $42;
  $41 = $68;
  $69 = $41;
  $70 = $69 + 1 | 0;
  $40 = $70;
  $71 = $40;
  $39 = $71;
  $72 = $39;
  $73 = $72;
 }
 $34 = $48;
 $35 = $73;
 $74 = $34;
 $75 = $35;
 HEAP32[$74 >> 2] = $75;
 $76 = HEAP32[$48 >> 2] | 0;
 HEAP32[$__begin >> 2] = $76;
 $77 = $__range;
 $25 = $77;
 $78 = $25;
 $23 = $78;
 $79 = $23;
 $22 = $79;
 $80 = $22;
 $21 = $80;
 $81 = $21;
 $20 = $81;
 $82 = $20;
 $83 = HEAP8[$82 >> 0] | 0;
 $84 = $83 & 255;
 $85 = $84 & 1;
 $86 = ($85 | 0) != 0;
 if ($86) {
  $14 = $79;
  $87 = $14;
  $13 = $87;
  $88 = $13;
  $12 = $88;
  $89 = $12;
  $90 = $89 + 8 | 0;
  $91 = HEAP32[$90 >> 2] | 0;
  $118 = $91;
 } else {
  $19 = $79;
  $92 = $19;
  $18 = $92;
  $93 = $18;
  $17 = $93;
  $94 = $17;
  $95 = $94 + 1 | 0;
  $16 = $95;
  $96 = $16;
  $15 = $96;
  $97 = $15;
  $118 = $97;
 }
 $9 = $78;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $7 = $99;
 $100 = $7;
 $6 = $100;
 $101 = $6;
 $102 = HEAP8[$101 >> 0] | 0;
 $103 = $102 & 255;
 $104 = $103 & 1;
 $105 = ($104 | 0) != 0;
 if ($105) {
  $2 = $98;
  $106 = $2;
  $1 = $106;
  $107 = $1;
  $0 = $107;
  $108 = $0;
  $109 = $108 + 4 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $119 = $110;
 } else {
  $5 = $98;
  $111 = $5;
  $4 = $111;
  $112 = $4;
  $3 = $112;
  $113 = $3;
  $114 = HEAP8[$113 >> 0] | 0;
  $115 = $114 & 255;
  $116 = $115 >> 1;
  $119 = $116;
 }
 $117 = $118 + $119 | 0;
 $10 = $24;
 $11 = $117;
 $120 = $10;
 $121 = $11;
 HEAP32[$120 >> 2] = $121;
 $122 = HEAP32[$24 >> 2] | 0;
 HEAP32[$__end >> 2] = $122;
 while (1) {
  $30 = $__begin;
  $31 = $__end;
  $123 = $30;
  $124 = $31;
  $28 = $123;
  $29 = $124;
  $125 = $28;
  $27 = $125;
  $126 = $27;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $29;
  $26 = $128;
  $129 = $26;
  $130 = HEAP32[$129 >> 2] | 0;
  $131 = ($127 | 0) == ($130 | 0);
  $132 = $131 ^ 1;
  if (!$132) {
   break;
  }
  $32 = $__begin;
  $133 = $32;
  $134 = HEAP32[$133 >> 2] | 0;
  $c = $134;
  $135 = $c;
  $136 = HEAP8[$135 >> 0] | 0;
  $137 = $136 << 24 >> 24;
  switch ($137 | 0) {
  case 9:
  case 13:
  case 10:
  case 12:
  case 8:
  case 92:
  case 34:
   {
    $138 = $result;
    $139 = $138 + 1 | 0;
    $result = $139;
    break;
   }
  default:
   {
    $140 = $c;
    $141 = HEAP8[$140 >> 0] | 0;
    $142 = $141 << 24 >> 24;
    $143 = ($142 | 0) >= 0;
    if ($143) {
     $144 = $c;
     $145 = HEAP8[$144 >> 0] | 0;
     $146 = $145 << 24 >> 24;
     $147 = ($146 | 0) <= 31;
     if ($147) {
      $148 = $result;
      $149 = $148 + 5 | 0;
      $result = $149;
     }
    }
   }
  }
  $33 = $__begin;
  $150 = $33;
  $151 = HEAP32[$150 >> 2] | 0;
  $152 = $151 + 1 | 0;
  HEAP32[$150 >> 2] = $152;
 }
 $153 = $result;
 STACKTOP = sp;
 return $153 | 0;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE26__swap_out_circular_bufferERNS_14__split_bufferISA_RSB_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__t$i2 = sp + 180 | 0;
 $__t$i1 = sp + 132 | 0;
 $__t$i = sp + 104 | 0;
 $32 = sp;
 $37 = sp + 204 | 0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE17__annotate_deleteEv($49), asyncState ? abort(-12) | 0 : 0;
 $46 = $49;
 $50 = $46;
 $51 = $50 + 8 | 0;
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49 >> 2] | 0;
 $55 = $49 + 4 | 0;
 $56 = HEAP32[$55 >> 2] | 0;
 $57 = $48;
 $58 = $57 + 4 | 0;
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while (1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59 | 0) != ($60 | 0);
  if (!$61) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $64 + -16 | 0;
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = $67 + -16 | 0;
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  HEAP8[$32 >> 0] = HEAP8[$37 >> 0] | 0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EOSA_($79, $81), asyncState ? abort(-12) | 0 : 0;
  $82 = $42;
  $83 = HEAP32[$82 >> 2] | 0;
  $84 = $83 + -16 | 0;
  HEAP32[$82 >> 2] = $84;
 }
 $85 = $48;
 $86 = $85 + 4 | 0;
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88 >> 2] | 0;
 HEAP32[$__t$i >> 2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91 >> 2] | 0;
 $93 = $20;
 HEAP32[$93 >> 2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94 >> 2] | 0;
 $96 = $21;
 HEAP32[$96 >> 2] = $95;
 $97 = $49 + 4 | 0;
 $98 = $48;
 $99 = $98 + 8 | 0;
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101 >> 2] | 0;
 HEAP32[$__t$i2 >> 2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104 >> 2] | 0;
 $106 = $3;
 HEAP32[$106 >> 2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107 >> 2] | 0;
 $109 = $4;
 HEAP32[$109 >> 2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = $110 + 8 | 0;
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = $115 + 12 | 0;
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120 >> 2] | 0;
 HEAP32[$__t$i1 >> 2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123 >> 2] | 0;
 $125 = $14;
 HEAP32[$125 >> 2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $15;
 HEAP32[$128 >> 2] = $127;
 $129 = $48;
 $130 = $129 + 4 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 $132 = $48;
 HEAP32[$132 >> 2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = $133 + 4 | 0;
 $135 = HEAP32[$134 >> 2] | 0;
 $136 = HEAP32[$133 >> 2] | 0;
 $137 = $135;
 $138 = $136;
 $139 = $137 - $138 | 0;
 $140 = ($139 | 0) / 16 & -1;
 __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE14__annotate_newEj($49, $140), asyncState ? abort(-12) | 0 : 0;
 $43 = $49;
 STACKTOP = sp;
 return;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $buf = sp;
 $0 = ($s | 0) == (0 | 0);
 L1 : do {
  if ($0) {
   $2 = HEAP32[$ws >> 2] | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = ($3 | 0) == 0;
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;
    $6 = $3;
    $ws2$019 = $2;
    while (1) {
     $5 = $6 >>> 0 > 127;
     if ($5) {
      $7 = (tempInt = _wcrtomb($buf, $6, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $8 = ($7 | 0) == -1;
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = $$pn + $$0218 | 0;
     $9 = $ws2$019 + 4 | 0;
     $10 = HEAP32[$9 >> 2] | 0;
     $11 = ($10 | 0) == 0;
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;
      $6 = $10;
      $ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = $n >>> 0 > 3;
   L9 : do {
    if ($1) {
     $$pre = HEAP32[$ws >> 2] | 0;
     $$0129 = $s;
     $$2428 = $n;
     $14 = $$pre;
     while (1) {
      $13 = HEAP32[$14 >> 2] | 0;
      $15 = $13 + -1 | 0;
      $16 = $15 >>> 0 > 126;
      if ($16) {
       $17 = ($13 | 0) == 0;
       if ($17) {
        $$0129$lcssa = $$0129;
        $$2428$lcssa = $$2428;
        break;
       }
       $19 = (tempInt = _wcrtomb($$0129, $13, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $20 = ($19 | 0) == -1;
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = $$0129 + $19 | 0;
       $22 = $$2428 - $19 | 0;
       $$1 = $21;
       $$35 = $22;
       $27 = $14;
      } else {
       $23 = $13 & 255;
       $24 = $$0129 + 1 | 0;
       HEAP8[$$0129 >> 0] = $23;
       $25 = $$2428 + -1 | 0;
       $$pre43 = HEAP32[$ws >> 2] | 0;
       $$1 = $24;
       $$35 = $25;
       $27 = $$pre43;
      }
      $26 = $27 + 4 | 0;
      HEAP32[$ws >> 2] = $26;
      $28 = $$35 >>> 0 > 3;
      if ($28) {
       $$0129 = $$1;
       $$2428 = $$35;
       $14 = $26;
      } else {
       $$01$lcssa = $$1;
       $$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa >> 0] = 0;
     HEAP32[$ws >> 2] = 0;
     $18 = $n - $$2428$lcssa | 0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;
     $$24$lcssa = $n;
    }
   } while (0);
   $12 = ($$24$lcssa | 0) == 0;
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws >> 2] | 0;
    $$223 = $$01$lcssa;
    $$422 = $$24$lcssa;
    $30 = $$pre44;
    while (1) {
     $29 = HEAP32[$30 >> 2] | 0;
     $31 = $29 + -1 | 0;
     $32 = $31 >>> 0 > 126;
     if ($32) {
      $33 = ($29 | 0) == 0;
      if ($33) {
       $$223$lcssa = $$223;
       $$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (tempInt = _wcrtomb($buf, $29, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $36 = ($35 | 0) == -1;
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = $$422 >>> 0 < $35 >>> 0;
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30 >> 2] | 0;
      (tempInt = _wcrtomb($$223, $39, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $40 = $$223 + $35 | 0;
      $41 = $$422 - $35 | 0;
      $$3 = $40;
      $$5 = $41;
      $46 = $30;
     } else {
      $42 = $29 & 255;
      $43 = $$223 + 1 | 0;
      HEAP8[$$223 >> 0] = $42;
      $44 = $$422 + -1 | 0;
      $$pre45 = HEAP32[$ws >> 2] | 0;
      $$3 = $43;
      $$5 = $44;
      $46 = $$pre45;
     }
     $45 = $46 + 4 | 0;
     HEAP32[$ws >> 2] = $45;
     $47 = ($$5 | 0) == 0;
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;
      $$422 = $$5;
      $30 = $45;
     }
    }
    if ((label | 0) == 19) {
     HEAP8[$$223$lcssa >> 0] = 0;
     HEAP32[$ws >> 2] = 0;
     $34 = $n - $$422$lcssa | 0;
     $$0 = $34;
     break;
    } else if ((label | 0) == 22) {
     $38 = $n - $$422$lcssa82 | 0;
     $$0 = $38;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $tio = sp + 52 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 $1 = $0 << 24 >> 24;
 $memchr = (tempInt = _memchr(18273, $1, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($memchr | 0) == (0 | 0);
 if ($2) {
  $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$3 >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = (tempInt = _malloc(1144) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = ($4 | 0) == (0 | 0);
  if ($5) {
   $$0 = 0;
  } else {
   dest = $4;
   stop = dest + 112 | 0;
   do {
    HEAP32[dest >> 2] = 0 | 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $6 = (tempInt = _strchr($mode, 43) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = ($6 | 0) == (0 | 0);
   if ($7) {
    $8 = $0 << 24 >> 24 == 114;
    $9 = $8 ? 8 : 4;
    HEAP32[$4 >> 2] = $9;
   }
   $10 = (tempInt = _strchr($mode, 101) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $11 = ($10 | 0) == (0 | 0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer >> 2] = $fd;
    $vararg_ptr1 = $vararg_buffer + 4 | 0;
    HEAP32[$vararg_ptr1 >> 2] = 2;
    $vararg_ptr2 = $vararg_buffer + 8 | 0;
    HEAP32[$vararg_ptr2 >> 2] = 1;
    (tempInt = ___syscall221(221, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$pre = HEAP8[$mode >> 0] | 0;
    $13 = $$pre;
   }
   $12 = $13 << 24 >> 24 == 97;
   if ($12) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    HEAP32[$vararg_ptr6 >> 2] = 3;
    $14 = (tempInt = ___syscall221(221, $vararg_buffer3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = $14 & 1024;
    $16 = ($15 | 0) == 0;
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     $vararg_ptr10 = $vararg_buffer7 + 4 | 0;
     HEAP32[$vararg_ptr10 >> 2] = 4;
     $vararg_ptr11 = $vararg_buffer7 + 8 | 0;
     HEAP32[$vararg_ptr11 >> 2] = $17;
     (tempInt = ___syscall221(221, $vararg_buffer7 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    }
    $18 = HEAP32[$4 >> 2] | 0;
    $19 = $18 | 128;
    HEAP32[$4 >> 2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4 >> 2] | 0;
    $26 = $$pre1;
   }
   $20 = $4 + 60 | 0;
   HEAP32[$20 >> 2] = $fd;
   $21 = $4 + 120 | 0;
   $22 = $4 + 44 | 0;
   HEAP32[$22 >> 2] = $21;
   $23 = $4 + 48 | 0;
   HEAP32[$23 >> 2] = 1024;
   $24 = $4 + 75 | 0;
   HEAP8[$24 >> 0] = -1;
   $25 = $26 & 8;
   $27 = ($25 | 0) == 0;
   if ($27) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    $vararg_ptr15 = $vararg_buffer12 + 4 | 0;
    HEAP32[$vararg_ptr15 >> 2] = 21505;
    $vararg_ptr16 = $vararg_buffer12 + 8 | 0;
    HEAP32[$vararg_ptr16 >> 2] = $tio;
    $28 = (tempInt = ___syscall54(54, $vararg_buffer12 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
     HEAP8[$24 >> 0] = 10;
    }
   }
   $30 = $4 + 32 | 0;
   HEAP32[$30 >> 2] = 452;
   $31 = $4 + 36 | 0;
   HEAP32[$31 >> 2] = 96;
   $32 = $4 + 40 | 0;
   HEAP32[$32 >> 2] = 97;
   $33 = $4 + 12 | 0;
   HEAP32[$33 >> 2] = 95;
   $34 = HEAP32[3444 >> 2] | 0;
   $35 = ($34 | 0) == 0;
   if ($35) {
    $36 = $4 + 76 | 0;
    HEAP32[$36 >> 2] = -1;
   }
   ___lock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
   $37 = HEAP32[3464 >> 2] | 0;
   $38 = $4 + 56 | 0;
   HEAP32[$38 >> 2] = $37;
   $39 = ($37 | 0) == 0;
   if (!$39) {
    $40 = $37;
    $41 = $40 + 52 | 0;
    HEAP32[$41 >> 2] = $4;
   }
   HEAP32[3464 >> 2] = $4;
   ___unlock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
   $$0 = $4;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $2 = $iovs + 4 | 0;
 $3 = $f + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 $6 = $5 - $1 | 0;
 HEAP32[$2 >> 2] = $6;
 $7 = $iovs + 8 | 0;
 HEAP32[$7 >> 2] = $buf;
 $8 = $iovs + 12 | 0;
 HEAP32[$8 >> 2] = $len;
 $9 = $6 + $len | 0;
 $10 = $f + 60 | 0;
 $11 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $9;
 while (1) {
  $12 = HEAP32[3440 >> 2] | 0;
  $13 = ($12 | 0) == (0 | 0);
  if ($13) {
   $17 = HEAP32[$10 >> 2] | 0;
   HEAP32[$vararg_buffer3 >> 2] = $17;
   $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
   HEAP32[$vararg_ptr6 >> 2] = $iov$0;
   $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
   HEAP32[$vararg_ptr7 >> 2] = $iovcnt$0;
   $18 = (tempInt = ___syscall146(146, $vararg_buffer3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $19 = (tempInt = ___syscall_ret($18) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push(454 | 0, $f | 0), asyncState ? abort(-12) | 0 : 0;
   $14 = HEAP32[$10 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $14;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAP32[$vararg_ptr1 >> 2] = $iov$0;
   $vararg_ptr2 = $vararg_buffer + 8 | 0;
   HEAP32[$vararg_ptr2 >> 2] = $iovcnt$0;
   $15 = (tempInt = ___syscall146(146, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $16 = (tempInt = ___syscall_ret($15) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   _pthread_cleanup_pop(0), asyncState ? abort(-12) | 0 : 0;
   $cnt$0 = $16;
  }
  $20 = ($rem$0 | 0) == ($cnt$0 | 0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0 | 0) < 0;
  if ($27) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = $rem$0 - $cnt$0 | 0;
  $36 = $iov$0 + 4 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  $38 = $cnt$0 >>> 0 > $37 >>> 0;
  if ($38) {
   $39 = HEAP32[$11 >> 2] | 0;
   HEAP32[$0 >> 2] = $39;
   HEAP32[$3 >> 2] = $39;
   $40 = $cnt$0 - $37 | 0;
   $41 = $iov$0 + 8 | 0;
   $42 = $iovcnt$0 + -1 | 0;
   $$phi$trans$insert = $iov$0 + 12 | 0;
   $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
   $50 = $$pre;
   $cnt$1 = $40;
   $iov$1 = $41;
   $iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0 | 0) == 2;
   if ($43) {
    $44 = HEAP32[$0 >> 2] | 0;
    $45 = $44 + $cnt$0 | 0;
    HEAP32[$0 >> 2] = $45;
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = 2;
   } else {
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1 >> 2] | 0;
  $47 = $46 + $cnt$1 | 0;
  HEAP32[$iov$1 >> 2] = $47;
  $48 = $iov$1 + 4 | 0;
  $49 = $50 - $cnt$1 | 0;
  HEAP32[$48 >> 2] = $49;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $35;
 }
 if ((label | 0) == 6) {
  $21 = HEAP32[$11 >> 2] | 0;
  $22 = $f + 48 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $24 = $21 + $23 | 0;
  $25 = $f + 16 | 0;
  HEAP32[$25 >> 2] = $24;
  $26 = $21;
  HEAP32[$0 >> 2] = $26;
  HEAP32[$3 >> 2] = $26;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  $28 = $f + 16 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  $29 = HEAP32[$f >> 2] | 0;
  $30 = $29 | 32;
  HEAP32[$f >> 2] = $30;
  $31 = ($iovcnt$0$lcssa12 | 0) == 2;
  if ($31) {
   $$0 = 0;
  } else {
   $32 = $iov$0$lcssa11 + 4 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   $34 = $len - $33 | 0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $12 + 24 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 (tempInt = FUNCTION_TABLE_ii[$14 & 1023]($11) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (tempInt = __ZNKSt3__16locale9use_facetERNS0_2idE($16, 8976) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $18 = $11 + 68 | 0;
 HEAP32[$18 >> 2] = $17;
 $19 = $11 + 98 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 1;
 $22 = $21 & 1;
 $__old_anc = $22;
 $23 = $11 + 68 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $26 + 28 | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = (tempInt = FUNCTION_TABLE_ii[$28 & 1023]($25) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $30 = $11 + 98 | 0;
 $31 = $29 & 1;
 HEAP8[$30 >> 0] = $31;
 $32 = $__old_anc;
 $33 = $32 & 1;
 $34 = $33 & 1;
 $35 = $11 + 98 | 0;
 $36 = HEAP8[$35 >> 0] | 0;
 $37 = $36 & 1;
 $38 = $37 & 1;
 $39 = ($34 | 0) != ($38 | 0);
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = $40 + 8 | 0;
 HEAP32[$42 >> 2] = $41;
 $43 = $5;
 $44 = $40 + 12 | 0;
 HEAP32[$44 >> 2] = $43;
 $45 = $6;
 $46 = $40 + 16 | 0;
 HEAP32[$46 >> 2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = $47 + 24 | 0;
 HEAP32[$49 >> 2] = $48;
 $50 = $47 + 20 | 0;
 HEAP32[$50 >> 2] = $48;
 $51 = $2;
 $52 = $47 + 28 | 0;
 HEAP32[$52 >> 2] = $51;
 $53 = $11 + 98 | 0;
 $54 = HEAP8[$53 >> 0] | 0;
 $55 = $54 & 1;
 $56 = $11 + 96 | 0;
 $57 = HEAP8[$56 >> 0] | 0;
 $58 = $57 & 1;
 if ($55) {
  if ($58) {
   $59 = $11 + 32 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   $61 = ($60 | 0) == (0 | 0);
   if (!$61) {
    __ZdaPv($60), asyncState ? abort(-12) | 0 : 0;
   }
  }
  $62 = $11 + 97 | 0;
  $63 = HEAP8[$62 >> 0] | 0;
  $64 = $63 & 1;
  $65 = $11 + 96 | 0;
  $66 = $64 & 1;
  HEAP8[$65 >> 0] = $66;
  $67 = $11 + 60 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $11 + 52 | 0;
  HEAP32[$69 >> 2] = $68;
  $70 = $11 + 56 | 0;
  $71 = HEAP32[$70 >> 2] | 0;
  $72 = $11 + 32 | 0;
  HEAP32[$72 >> 2] = $71;
  $73 = $11 + 60 | 0;
  HEAP32[$73 >> 2] = 0;
  $74 = $11 + 56 | 0;
  HEAP32[$74 >> 2] = 0;
  $75 = $11 + 97 | 0;
  HEAP8[$75 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if (!$58) {
  $76 = $11 + 32 | 0;
  $77 = HEAP32[$76 >> 2] | 0;
  $78 = $11 + 44 | 0;
  $79 = ($77 | 0) != ($78 | 0);
  if ($79) {
   $80 = $11 + 52 | 0;
   $81 = HEAP32[$80 >> 2] | 0;
   $82 = $11 + 60 | 0;
   HEAP32[$82 >> 2] = $81;
   $83 = $11 + 32 | 0;
   $84 = HEAP32[$83 >> 2] | 0;
   $85 = $11 + 56 | 0;
   HEAP32[$85 >> 2] = $84;
   $86 = $11 + 97 | 0;
   HEAP8[$86 >> 0] = 0;
   $87 = $11 + 52 | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   $89 = (tempInt = __Znaj($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $90 = $11 + 32 | 0;
   HEAP32[$90 >> 2] = $89;
   $91 = $11 + 96 | 0;
   HEAP8[$91 >> 0] = 1;
   STACKTOP = sp;
   return;
  }
 }
 $92 = $11 + 52 | 0;
 $93 = HEAP32[$92 >> 2] | 0;
 $94 = $11 + 60 | 0;
 HEAP32[$94 >> 2] = $93;
 $95 = $11 + 60 | 0;
 $96 = HEAP32[$95 >> 2] | 0;
 $97 = (tempInt = __Znaj($96) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $98 = $11 + 56 | 0;
 HEAP32[$98 >> 2] = $97;
 $99 = $11 + 97 | 0;
 HEAP8[$99 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $34 = sp + 8 | 0;
 $36 = sp + 214 | 0;
 $43 = sp;
 $46 = sp + 213 | 0;
 $50 = sp + 212 | 0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 HEAP8[$43 >> 0] = HEAP8[$46 >> 0] | 0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = $58 - $59 | 0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 HEAP8[$34 >> 0] = HEAP8[$36 >> 0] | 0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = $68 - 16 | 0;
 $70 = $61 >>> 0 > $69 >>> 0;
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51), asyncState ? abort(-12) | 0 : 0;
 }
 $71 = $__sz;
 $72 = $71 >>> 0 < 11;
 $73 = $__sz;
 if ($72) {
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76 & 255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79 >> 0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = $82 + 1 | 0;
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $1 = $73;
  $86 = $1;
  $87 = $86 >>> 0 < 11;
  if ($87) {
   $94 = 11;
  } else {
   $88 = $1;
   $89 = $88 + 1 | 0;
   $0 = $89;
   $90 = $0;
   $91 = $90 + 15 | 0;
   $92 = $91 & -16;
   $94 = $92;
  }
  $93 = $94 - 1 | 0;
  $__cap = $93;
  $4 = $51;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $2 = $96;
  $97 = $2;
  $98 = $__cap;
  $99 = $98 + 1 | 0;
  $14 = $97;
  $15 = $99;
  $100 = $14;
  $101 = $15;
  $11 = $100;
  $12 = $101;
  $13 = 0;
  $102 = $12;
  $10 = $102;
  $103 = $10;
  $104 = (tempInt = __Znwj($103) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $__p = $104;
  $105 = $__p;
  $18 = $51;
  $19 = $105;
  $106 = $18;
  $107 = $19;
  $17 = $106;
  $108 = $17;
  $16 = $108;
  $109 = $16;
  $110 = $109 + 8 | 0;
  HEAP32[$110 >> 2] = $107;
  $111 = $__cap;
  $112 = $111 + 1 | 0;
  $22 = $51;
  $23 = $112;
  $113 = $22;
  $114 = $23;
  $115 = 1 | $114;
  $21 = $113;
  $116 = $21;
  $20 = $116;
  $117 = $20;
  HEAP32[$117 >> 2] = $115;
  $118 = $__sz;
  $26 = $51;
  $27 = $118;
  $119 = $26;
  $120 = $27;
  $25 = $119;
  $121 = $25;
  $24 = $121;
  $122 = $24;
  $123 = $122 + 4 | 0;
  HEAP32[$123 >> 2] = $120;
 }
 while (1) {
  $124 = $48;
  $125 = $49;
  $126 = ($124 | 0) != ($125 | 0);
  $127 = $__p;
  if (!$126) {
   break;
  }
  $128 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($127, $128), asyncState ? abort(-12) | 0 : 0;
  $129 = $48;
  $130 = $129 + 1 | 0;
  $48 = $130;
  $131 = $__p;
  $132 = $131 + 1 | 0;
  $__p = $132;
 }
 HEAP8[$50 >> 0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($127, $50), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $7 = sp + 40 | 0;
 $10 = sp + 232 | 0;
 $11 = sp + 32 | 0;
 $16 = sp + 231 | 0;
 $26 = sp + 24 | 0;
 $29 = sp + 230 | 0;
 $30 = sp + 16 | 0;
 $35 = sp + 229 | 0;
 $45 = sp + 8 | 0;
 $48 = sp + 228 | 0;
 $49 = sp;
 $52 = sp + 227 | 0;
 $55 = sp + 226 | 0;
 $56 = sp + 225 | 0;
 $57 = sp + 224 | 0;
 $54 = $this;
 $58 = $54;
 $59 = $58 + 48 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = $60 & 16;
 $62 = ($61 | 0) != 0;
 if ($62) {
  $63 = $58 + 44 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $53 = $58;
  $65 = $53;
  $66 = $65 + 24 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $64 >>> 0 < $67 >>> 0;
  if ($68) {
   $23 = $58;
   $69 = $23;
   $70 = $69 + 24 | 0;
   $71 = HEAP32[$70 >> 2] | 0;
   $72 = $58 + 44 | 0;
   HEAP32[$72 >> 2] = $71;
  }
  $4 = $58;
  $73 = $4;
  $74 = $73 + 20 | 0;
  $75 = HEAP32[$74 >> 2] | 0;
  $76 = $58 + 44 | 0;
  $77 = HEAP32[$76 >> 2] | 0;
  $78 = $58 + 32 | 0;
  $3 = $78;
  $79 = $3;
  $2 = $79;
  $80 = $2;
  $1 = $80;
  $81 = $1;
  $0 = $81;
  $12 = $agg$result;
  $13 = $75;
  $14 = $77;
  $15 = $55;
  $82 = $12;
  HEAP8[$11 >> 0] = HEAP8[$16 >> 0] | 0;
  $9 = $82;
  $83 = $9;
  $8 = $11;
  HEAP8[$7 >> 0] = HEAP8[$10 >> 0] | 0;
  $6 = $83;
  $5 = $7;
  $84 = $13;
  $85 = $14;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($82, $84, $85), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 $86 = $58 + 48 | 0;
 $87 = HEAP32[$86 >> 2] | 0;
 $88 = $87 & 8;
 $89 = ($88 | 0) != 0;
 if ($89) {
  $17 = $58;
  $90 = $17;
  $91 = $90 + 8 | 0;
  $92 = HEAP32[$91 >> 2] | 0;
  $18 = $58;
  $93 = $18;
  $94 = $93 + 16 | 0;
  $95 = HEAP32[$94 >> 2] | 0;
  $96 = $58 + 32 | 0;
  $22 = $96;
  $97 = $22;
  $21 = $97;
  $98 = $21;
  $20 = $98;
  $99 = $20;
  $19 = $99;
  $31 = $agg$result;
  $32 = $92;
  $33 = $95;
  $34 = $56;
  $100 = $31;
  HEAP8[$30 >> 0] = HEAP8[$35 >> 0] | 0;
  $28 = $100;
  $101 = $28;
  $27 = $30;
  HEAP8[$26 >> 0] = HEAP8[$29 >> 0] | 0;
  $25 = $101;
  $24 = $26;
  $102 = $32;
  $103 = $33;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($100, $102, $103), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 $104 = $58 + 32 | 0;
 $39 = $104;
 $105 = $39;
 $38 = $105;
 $106 = $38;
 $37 = $106;
 $107 = $37;
 $36 = $107;
 $50 = $agg$result;
 $51 = $57;
 $108 = $50;
 HEAP8[$49 >> 0] = HEAP8[$52 >> 0] | 0;
 $47 = $108;
 $109 = $47;
 $46 = $49;
 HEAP8[$45 >> 0] = HEAP8[$48 >> 0] | 0;
 $44 = $109;
 $43 = $45;
 $42 = $108;
 $110 = $42;
 $41 = $110;
 $111 = $41;
 $40 = $111;
 $112 = $40;
 $__a$i$i = $112;
 $__i$i$i = 0;
 while (1) {
  $113 = $__i$i$i;
  $114 = $113 >>> 0 < 3;
  if (!$114) {
   break;
  }
  $115 = $__i$i$i;
  $116 = $__a$i$i;
  $117 = $116 + ($115 << 2) | 0;
  HEAP32[$117 >> 2] = 0;
  $118 = $__i$i$i;
  $119 = $118 + 1 | 0;
  $__i$i$i = $119;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $8 = sp;
 $11 = sp + 76 | 0;
 $18 = sp + 8 | 0;
 $19 = sp + 4 | 0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18 >> 2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = $21 + 8 | 0;
 HEAP32[$23 >> 2] = $22;
 $24 = $14;
 $25 = $21 + 12 | 0;
 HEAP32[$25 >> 2] = $24;
 $26 = $15;
 $27 = $21 + 16 | 0;
 HEAP32[$27 >> 2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = $28 + 24 | 0;
 HEAP32[$30 >> 2] = $29;
 $31 = $28 + 20 | 0;
 HEAP32[$31 >> 2] = $29;
 $32 = $2;
 $33 = $28 + 28 | 0;
 HEAP32[$33 >> 2] = $32;
 $34 = $20 + 96 | 0;
 $35 = HEAP8[$34 >> 0] | 0;
 $36 = $35 & 1;
 if ($36) {
  $37 = $20 + 32 | 0;
  $38 = HEAP32[$37 >> 2] | 0;
  $39 = ($38 | 0) == (0 | 0);
  if (!$39) {
   __ZdaPv($38), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $40 = $20 + 97 | 0;
 $41 = HEAP8[$40 >> 0] | 0;
 $42 = $41 & 1;
 if ($42) {
  $43 = $20 + 56 | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  $45 = ($44 | 0) == (0 | 0);
  if (!$45) {
   __ZdaPv($44), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $46 = HEAP32[$18 >> 2] | 0;
 $47 = $20 + 52 | 0;
 HEAP32[$47 >> 2] = $46;
 $48 = $20 + 52 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 $50 = $49 >>> 0 > 8;
 do {
  if ($50) {
   $51 = $20 + 98 | 0;
   $52 = HEAP8[$51 >> 0] | 0;
   $53 = $52 & 1;
   $54 = $17;
   $55 = ($54 | 0) != (0 | 0);
   $or$cond = $53 & $55;
   if ($or$cond) {
    $56 = $17;
    $57 = $20 + 32 | 0;
    HEAP32[$57 >> 2] = $56;
    $58 = $20 + 96 | 0;
    HEAP8[$58 >> 0] = 0;
    break;
   } else {
    $59 = $20 + 52 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = (tempInt = __Znaj($60) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $62 = $20 + 32 | 0;
    HEAP32[$62 >> 2] = $61;
    $63 = $20 + 96 | 0;
    HEAP8[$63 >> 0] = 1;
    break;
   }
  } else {
   $64 = $20 + 44 | 0;
   $65 = $20 + 32 | 0;
   HEAP32[$65 >> 2] = $64;
   $66 = $20 + 52 | 0;
   HEAP32[$66 >> 2] = 8;
   $67 = $20 + 96 | 0;
   HEAP8[$67 >> 0] = 0;
  }
 } while (0);
 $68 = $20 + 98 | 0;
 $69 = HEAP8[$68 >> 0] | 0;
 $70 = $69 & 1;
 if ($70) {
  $98 = $20 + 60 | 0;
  HEAP32[$98 >> 2] = 0;
  $99 = $20 + 56 | 0;
  HEAP32[$99 >> 2] = 0;
  $100 = $20 + 97 | 0;
  HEAP8[$100 >> 0] = 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 HEAP32[$19 >> 2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 HEAP8[$8 >> 0] = HEAP8[$11 >> 0] | 0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75 >> 2] | 0;
 $77 = $5;
 $78 = HEAP32[$77 >> 2] | 0;
 $79 = ($76 | 0) < ($78 | 0);
 $80 = $7;
 $81 = $6;
 $82 = $79 ? $80 : $81;
 $83 = HEAP32[$82 >> 2] | 0;
 $84 = $20 + 60 | 0;
 HEAP32[$84 >> 2] = $83;
 $85 = $17;
 $86 = ($85 | 0) != (0 | 0);
 if ($86) {
  $87 = $20 + 60 | 0;
  $88 = HEAP32[$87 >> 2] | 0;
  $89 = $88 >>> 0 >= 8;
  if ($89) {
   $90 = $17;
   $91 = $20 + 56 | 0;
   HEAP32[$91 >> 2] = $90;
   $92 = $20 + 97 | 0;
   HEAP8[$92 >> 0] = 0;
   STACKTOP = sp;
   return $20 | 0;
  }
 }
 $93 = $20 + 60 | 0;
 $94 = HEAP32[$93 >> 2] | 0;
 $95 = (tempInt = __Znaj($94) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $96 = $20 + 56 | 0;
 HEAP32[$96 >> 2] = $95;
 $97 = $20 + 97 | 0;
 HEAP8[$97 >> 0] = 1;
 STACKTOP = sp;
 return $20 | 0;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i15 = 0, $$0$i817 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__ndflt = sp;
 HEAP32[$__ndflt >> 2] = 0;
 $0 = $__ndflt + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $__ndflt + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = HEAP8[$__dflt >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 $5 = $__dflt + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $__dflt + 1 | 0;
 $8 = $4 ? $7 : $6;
 $9 = $__dflt + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $2 & 255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = $8 + $13 | 0;
 $15 = ($13 | 0) > 0;
 L1 : do {
  if ($15) {
   $$0$i817 = $8;
   while (1) {
    $16 = HEAP8[$$0$i817 >> 0] | 0;
    __THREW__ = 0;
    invoke_vii(407, $__ndflt | 0, $16 | 0), asyncState ? abort(-12) | 0 : 0;
    $17 = __THREW__;
    __THREW__ = 0;
    $18 = $17 & 1;
    if ($18) {
     break;
    }
    $19 = $$0$i817 + 1 | 0;
    $20 = $19 >>> 0 < $14 >>> 0;
    if ($20) {
     $$0$i817 = $19;
    } else {
     label = 4;
     break L1;
    }
   }
   $35 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $36 = tempRet0;
   $lpad$phi$index = $35;
   $lpad$phi$index2 = $36;
   label = 7;
  } else {
   label = 4;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 4) {
   $21 = ($__c | 0) == -1;
   $22 = $__c << 1;
   $23 = $22;
   $24 = $21 ? -1 : $23;
   $25 = HEAP8[$__ndflt >> 0] | 0;
   $26 = $25 & 1;
   $27 = $26 << 24 >> 24 == 0;
   $28 = $__ndflt + 8 | 0;
   $29 = HEAP32[$28 >> 2] | 0;
   $30 = $__ndflt + 1 | 0;
   $31 = $27 ? $30 : $29;
   __THREW__ = 0;
   $32 = (tempInt = invoke_iiiii(496, $24 | 0, $__set | 0, $__msgid | 0, $31 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $33 = __THREW__;
   __THREW__ = 0;
   $34 = $33 & 1;
   if ($34) {
    $37 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $38 = tempRet0;
    $lpad$phi$index = $37;
    $lpad$phi$index2 = $38;
    label = 7;
    break;
   }
   HEAP32[$agg$result >> 2] = 0;
   $39 = $agg$result + 4 | 0;
   HEAP32[$39 >> 2] = 0;
   $40 = $agg$result + 8 | 0;
   HEAP32[$40 >> 2] = 0;
   $41 = (tempInt = _strlen($32) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $42 = $32 + $41 | 0;
   $43 = ($41 | 0) > 0;
   L11 : do {
    if ($43) {
     $$0$i15 = $32;
     while (1) {
      $44 = HEAP8[$$0$i15 >> 0] | 0;
      __THREW__ = 0;
      invoke_vii(407, $agg$result | 0, $44 | 0), asyncState ? abort(-12) | 0 : 0;
      $45 = __THREW__;
      __THREW__ = 0;
      $46 = $45 & 1;
      if ($46) {
       break;
      }
      $47 = $$0$i15 + 1 | 0;
      $48 = $47 >>> 0 < $42 >>> 0;
      if ($48) {
       $$0$i15 = $47;
      } else {
       break L11;
      }
     }
     $49 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $50 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
     $$02 = $49;
     $$03 = $50;
     break L6;
    }
   } while (0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 if ((label | 0) == 7) {
  $$02 = $lpad$phi$index;
  $$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($$02 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $2 = sp + 36 | 0;
 $5 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $11 = sp;
 $7 = $this;
 $12 = $7;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($12), asyncState ? abort(-12) | 0 : 0;
 $13 = 2728;
 HEAP32[$12 >> 2] = $13;
 $14 = $12 + 32 | 0;
 HEAP32[$14 >> 2] = 0;
 $15 = $12 + 36 | 0;
 HEAP32[$15 >> 2] = 0;
 $16 = $12 + 40 | 0;
 HEAP32[$16 >> 2] = 0;
 $17 = $12 + 52 | 0;
 HEAP32[$17 >> 2] = 0;
 $18 = $12 + 56 | 0;
 HEAP32[$18 >> 2] = 0;
 $19 = $12 + 60 | 0;
 HEAP32[$19 >> 2] = 0;
 $20 = $12 + 64 | 0;
 HEAP32[$20 >> 2] = 0;
 $21 = $12 + 68 | 0;
 HEAP32[$21 >> 2] = 0;
 $22 = $12 + 72 | 0;
 HEAP32[$22 >> 2] = 0 | 0;
 HEAP32[$22 + 4 >> 2] = 0 | 0;
 $23 = $12 + 80 | 0;
 HEAP32[$23 >> 2] = 0 | 0;
 HEAP32[$23 + 4 >> 2] = 0 | 0;
 $24 = $12 + 88 | 0;
 HEAP32[$24 >> 2] = 0;
 $25 = $12 + 92 | 0;
 HEAP32[$25 >> 2] = 0;
 $26 = $12 + 96 | 0;
 HEAP8[$26 >> 0] = 0;
 $27 = $12 + 97 | 0;
 HEAP8[$27 >> 0] = 0;
 $28 = $12 + 98 | 0;
 HEAP8[$28 >> 0] = 0;
 $6 = $12;
 $29 = $6;
 $30 = $29 + 4 | 0;
 __ZNSt3__16localeC2ERKS0_($5, $30), asyncState ? abort(-12) | 0 : 0;
 $31 = HEAP32[$5 >> 2] | 0;
 HEAP32[$8 >> 2] = $31;
 $4 = $8;
 $32 = $4;
 __THREW__ = 0;
 $33 = (tempInt = invoke_iii(447, $32 | 0, 8976 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $34 = __THREW__;
 __THREW__ = 0;
 $35 = $34 & 1;
 if ($35) {
  $36 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $37 = tempRet0;
  ___clang_call_terminate($36), asyncState ? abort(-12) | 0 : 0;
 }
 __ZNSt3__16localeD2Ev($8), asyncState ? abort(-12) | 0 : 0;
 do {
  if ($33) {
   $3 = $12;
   $38 = $3;
   $39 = $38 + 4 | 0;
   __ZNSt3__16localeC2ERKS0_($2, $39), asyncState ? abort(-12) | 0 : 0;
   $40 = HEAP32[$2 >> 2] | 0;
   HEAP32[$11 >> 2] = $40;
   $1 = $11;
   $41 = $1;
   __THREW__ = 0;
   $42 = (tempInt = invoke_iii(398, $41 | 0, 8976 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $43 = __THREW__;
   __THREW__ = 0;
   $44 = $43 & 1;
   if (!$44) {
    $45 = $12 + 68 | 0;
    HEAP32[$45 >> 2] = $42;
    __ZNSt3__16localeD2Ev($11), asyncState ? abort(-12) | 0 : 0;
    $46 = $12 + 68 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $0 = $47;
    $48 = $0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = $49 + 28 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = (tempInt = FUNCTION_TABLE_ii[$51 & 1023]($48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $53 = $12 + 98 | 0;
    $54 = $52 & 1;
    HEAP8[$53 >> 0] = $54;
    break;
   }
   $57 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $58 = tempRet0;
   $9 = $57;
   $10 = $58;
   __ZNSt3__16localeD2Ev($11), asyncState ? abort(-12) | 0 : 0;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12), asyncState ? abort(-12) | 0 : 0;
   $64 = $9;
   $65 = $10;
   ___resumeException($64 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 $59 = HEAP32[$12 >> 2] | 0;
 $60 = $59 + 12 | 0;
 $61 = HEAP32[$60 >> 2] | 0;
 __THREW__ = 0;
 (tempInt = invoke_iiii($61 | 0, $12 | 0, 0 | 0, 4096) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $62 = __THREW__;
 __THREW__ = 0;
 $63 = $62 & 1;
 if (!$63) {
  STACKTOP = sp;
  return;
 }
 $55 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $56 = tempRet0;
 $9 = $55;
 $10 = $56;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12), asyncState ? abort(-12) | 0 : 0;
 $64 = $9;
 $65 = $10;
 ___resumeException($64 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
 $0 = __THREW__;
 __THREW__ = 0;
 $1 = $0 & 1;
 L1 : do {
  if ($1) {
   $35 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $36 = tempRet0;
   $$0 = $35;
   $$pre$phi3Z2D = $this;
   $$pre$phiZ2D = $this;
   label = 11;
  } else {
   $2 = HEAP8[$__s >> 0] | 0;
   $3 = $2 << 24 >> 24 == 0;
   do {
    if (!$3) {
     $4 = HEAP32[$this >> 2] | 0;
     $5 = $4 + -12 | 0;
     $6 = HEAP32[$5 >> 2] | 0;
     $$sum$i = $6 + 24 | 0;
     $7 = $this + $$sum$i | 0;
     $8 = HEAP32[$7 >> 2] | 0;
     $9 = $8;
     $10 = ($8 | 0) == 0;
     if ($10) {
      label = 8;
     } else {
      $11 = $9 + 24 | 0;
      $12 = HEAP32[$11 >> 2] | 0;
      $13 = $9 + 28 | 0;
      $14 = HEAP32[$13 >> 2] | 0;
      $15 = ($12 | 0) == ($14 | 0);
      if (!$15) {
       $16 = $12 + 1 | 0;
       HEAP32[$11 >> 2] = $16;
       HEAP8[$12 >> 0] = $__c;
       break;
      }
      $17 = $8;
      $18 = HEAP32[$17 >> 2] | 0;
      $19 = $18 + 52 | 0;
      $20 = HEAP32[$19 >> 2] | 0;
      $21 = $__c & 255;
      __THREW__ = 0;
      $22 = (tempInt = invoke_iii($20 | 0, $9 | 0, $21 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $23 = __THREW__;
      __THREW__ = 0;
      $24 = $23 & 1;
      if (!$24) {
       $25 = ($22 | 0) == -1;
       if ($25) {
        label = 8;
       } else {
        break;
       }
      }
     }
     if ((label | 0) == 8) {
      $26 = HEAP32[$this >> 2] | 0;
      $27 = $26 + -12 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      $29 = $this + $28 | 0;
      $$sum = $28 + 16 | 0;
      $30 = $this + $$sum | 0;
      $31 = HEAP32[$30 >> 2] | 0;
      $32 = $31 | 1;
      __THREW__ = 0;
      invoke_vii(394, $29 | 0, $32 | 0), asyncState ? abort(-12) | 0 : 0;
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      if (!$34) {
       break;
      }
     }
     $37 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $38 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     $$0 = $37;
     $$pre$phi3Z2D = $this;
     $$pre$phiZ2D = $this;
     label = 11;
     break L1;
    }
   } while (0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   (tempInt = ___cxa_begin_catch($$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $39 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   $40 = $39 + -12 | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $42 = $$pre$phi3Z2D + $41 | 0;
   __THREW__ = 0;
   invoke_vi(420, $42 | 0), asyncState ? abort(-12) | 0 : 0;
   $43 = __THREW__;
   __THREW__ = 0;
   $44 = $43 & 1;
   if (!$44) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $45 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $47 = __THREW__;
   __THREW__ = 0;
   $48 = $47 & 1;
   if ($48) {
    $49 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $50 = tempRet0;
    ___clang_call_terminate($49), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($45 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E9type_nameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $35 = $this;
 $36 = $35;
 $37 = HEAP8[$36 >> 0] | 0;
 switch ($37 << 24 >> 24) {
 case 0:
  {
   $33 = $agg$result;
   $34 = 14208;
   $38 = $33;
   $32 = $38;
   $39 = $32;
   $31 = $39;
   $40 = $31;
   $30 = $40;
   $41 = $34;
   $42 = $34;
   $43 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($42) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($38, $41, $43), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $28 = $agg$result;
   $29 = 14815;
   $44 = $28;
   $27 = $44;
   $45 = $27;
   $26 = $45;
   $46 = $26;
   $25 = $46;
   $47 = $29;
   $48 = $29;
   $49 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($48) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($44, $47, $49), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $23 = $agg$result;
   $24 = 14822;
   $50 = $23;
   $22 = $50;
   $51 = $22;
   $21 = $51;
   $52 = $21;
   $20 = $52;
   $53 = $24;
   $54 = $24;
   $55 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($54) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($50, $53, $55), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $18 = $agg$result;
   $19 = 14828;
   $56 = $18;
   $17 = $56;
   $57 = $17;
   $16 = $57;
   $58 = $16;
   $15 = $58;
   $59 = $19;
   $60 = $19;
   $61 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($60) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($56, $59, $61), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 4:
  {
   $13 = $agg$result;
   $14 = 14835;
   $62 = $13;
   $12 = $62;
   $63 = $12;
   $11 = $63;
   $64 = $11;
   $10 = $64;
   $65 = $14;
   $66 = $14;
   $67 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($66) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($62, $65, $67), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 7:
  {
   $8 = $agg$result;
   $9 = 14843;
   $68 = $8;
   $7 = $68;
   $69 = $7;
   $6 = $69;
   $70 = $6;
   $5 = $70;
   $71 = $9;
   $72 = $9;
   $73 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($72) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($68, $71, $73), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $3 = $agg$result;
   $4 = 14853;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $1 = $75;
   $76 = $1;
   $0 = $76;
   $77 = $4;
   $78 = $4;
   $79 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($78) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($74, $77, $79), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = $21 + 44 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $17 = $21;
 $24 = $17;
 $25 = $24 + 24 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $23 >>> 0 < $26 >>> 0;
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = $28 + 24 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  $31 = $21 + 44 | 0;
  HEAP32[$31 >> 2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = $32 + 8 | 0;
 $34 = HEAP32[$33 >> 2] | 0;
 $7 = $21;
 $35 = $7;
 $36 = $35 + 12 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $34 >>> 0 < $37 >>> 0;
 do {
  if ($38) {
   $39 = $20;
   $40 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $41 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($39, $40) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = $42 + 8 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $4 = $21;
    $45 = $4;
    $46 = $45 + 12 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 + -1 | 0;
    $49 = $21 + 44 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = $51 + 8 | 0;
    HEAP32[$53 >> 2] = $52;
    $54 = $2;
    $55 = $51 + 12 | 0;
    HEAP32[$55 >> 2] = $54;
    $56 = $3;
    $57 = $51 + 16 | 0;
    HEAP32[$57 >> 2] = $56;
    $58 = $20;
    $59 = (tempInt = __ZNSt3__111char_traitsIcE7not_eofEi($58) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;
    return $95 | 0;
   }
   $60 = $21 + 48 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   $62 = $61 & 16;
   $63 = ($62 | 0) != 0;
   if (!$63) {
    $64 = $20;
    $65 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($64) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = $21;
    $66 = $6;
    $67 = $66 + 12 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + -1 | 0;
    $70 = HEAP8[$69 >> 0] | 0;
    $71 = (tempInt = __ZNSt3__111char_traitsIcE2eqEcc($65, $70) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    if (!$71) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = $72 + 8 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   $9 = $21;
   $75 = $9;
   $76 = $75 + 12 | 0;
   $77 = HEAP32[$76 >> 2] | 0;
   $78 = $77 + -1 | 0;
   $79 = $21 + 44 | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = $81 + 8 | 0;
   HEAP32[$83 >> 2] = $82;
   $84 = $12;
   $85 = $81 + 12 | 0;
   HEAP32[$85 >> 2] = $84;
   $86 = $13;
   $87 = $81 + 16 | 0;
   HEAP32[$87 >> 2] = $86;
   $88 = $20;
   $89 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($88) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $15 = $21;
   $90 = $15;
   $91 = $90 + 12 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP8[$92 >> 0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;
   return $95 | 0;
  }
 } while (0);
 $94 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;
 return $95 | 0;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $wbuf = sp + 8 | 0;
 $s = sp;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $1 = ($wcs | 0) != (0 | 0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0 | 0) != 0;
 $3 = ($wn$ | 0) != 0;
 $or$cond17 = $3 & $2;
 L1 : do {
  if ($or$cond17) {
   $$021 = $n;
   $$0218 = $wn$;
   $37 = $$cast;
   $cnt$019 = 0;
   $ws$020 = $wcs$;
   while (1) {
    $4 = $$021 >>> 2;
    $5 = $4 >>> 0 >= $$0218 >>> 0;
    $6 = $$021 >>> 0 > 131;
    $7 = $6 | $5;
    if (!$7) {
     $$1 = $$021;
     $$24 = $$0218;
     $19 = $37;
     $cnt$1 = $cnt$019;
     $ws$09 = $ws$020;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = $$021 - $$02$ | 0;
    $9 = (tempInt = _mbsrtowcs($ws$020, $s, $$02$, $st) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = ($9 | 0) == -1;
    if ($10) {
     $$lcssa57 = $8;
     $ws$020$lcssa56 = $ws$020;
     break;
    }
    $11 = ($ws$020 | 0) == ($wbuf | 0);
    $12 = $ws$020 + ($9 << 2) | 0;
    $13 = $11 ? 0 : $9;
    $$13 = $$0218 - $13 | 0;
    $ws$1 = $11 ? $ws$020 : $12;
    $14 = $9 + $cnt$019 | 0;
    $15 = HEAP32[$s >> 2] | 0;
    $16 = ($15 | 0) != (0 | 0);
    $17 = ($$0218 | 0) != ($13 | 0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$021 = $8;
     $$0218 = $$13;
     $37 = $15;
     $cnt$019 = $14;
     $ws$020 = $ws$1;
    } else {
     $$1 = $8;
     $$24 = $$13;
     $19 = $15;
     $cnt$1 = $14;
     $ws$09 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s >> 2] | 0;
   $$1 = $$lcssa57;
   $$24 = 0;
   $19 = $$pr$pre;
   $cnt$1 = -1;
   $ws$09 = $ws$020$lcssa56;
  } else {
   $$1 = $n;
   $$24 = $wn$;
   $19 = $$cast;
   $cnt$1 = 0;
   $ws$09 = $wcs$;
  }
 } while (0);
 $18 = ($19 | 0) == (0 | 0);
 L8 : do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24 | 0) != 0;
   $21 = ($$1 | 0) != 0;
   $22 = $20 & $21;
   if ($22) {
    $$216 = $$1;
    $$313 = $$24;
    $23 = $19;
    $cnt$214 = $cnt$1;
    $ws$215 = $ws$09;
    while (1) {
     $24 = (tempInt = _mbrtowc($ws$215, $23, $$216, $st) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $25 = $24 + 2 | 0;
     $26 = $25 >>> 0 < 3;
     if ($26) {
      $$lcssa = $24;
      $cnt$214$lcssa = $cnt$214;
      break;
     }
     $27 = HEAP32[$s >> 2] | 0;
     $28 = $27 + $24 | 0;
     HEAP32[$s >> 2] = $28;
     $29 = $$216 - $24 | 0;
     $30 = $ws$215 + 4 | 0;
     $31 = $$313 + -1 | 0;
     $32 = $cnt$214 + 1 | 0;
     $33 = ($31 | 0) != 0;
     $34 = ($$216 | 0) != ($24 | 0);
     $35 = $33 & $34;
     if ($35) {
      $$216 = $29;
      $$313 = $31;
      $23 = $28;
      $cnt$214 = $32;
      $ws$215 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa | 0) {
    case -1:
     {
      $cnt$3 = -1;
      break L8;
      break;
     }
    case 0:
     {
      HEAP32[$s >> 2] = 0;
      $cnt$3 = $cnt$214$lcssa;
      break L8;
      break;
     }
    default:
     {
      HEAP32[$st >> 2] = 0;
      $cnt$3 = $cnt$214$lcssa;
      break L8;
     }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while (0);
 if ($1) {
  $36 = HEAP32[$s >> 2] | 0;
  HEAP32[$src >> 2] = $36;
 }
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE($this, $t) {
 $this = $this | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $alloc = 0, $alloc1 = 0, $alloc2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $8 = sp + 132 | 0;
 $11 = sp + 120 | 0;
 $23 = sp;
 $25 = sp + 173 | 0;
 $26 = sp + 172 | 0;
 $alloc = sp + 170 | 0;
 $alloc1 = sp + 169 | 0;
 $alloc2 = sp + 168 | 0;
 $43 = $this;
 $44 = $t;
 $45 = $43;
 $46 = $44;
 switch ($46 << 24 >> 24) {
 case 6:
  {
   HEAPF64[$45 >> 3] = 0.0;
   STACKTOP = sp;
   return;
   break;
  }
 case 5:
  {
   $84 = $45;
   $85 = $84;
   HEAP32[$85 >> 2] = 0;
   $86 = $84 + 4 | 0;
   $87 = $86;
   HEAP32[$87 >> 2] = 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $42 = $alloc;
   $30 = $alloc;
   $31 = 1;
   $32 = 0;
   $47 = $31;
   $48 = $47 * 12 | 0;
   $29 = $48;
   $49 = $29;
   $50 = (tempInt = __Znwj($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$45 >> 2] = $50;
   $51 = HEAP32[$45 >> 2] | 0;
   $27 = $alloc;
   $28 = $51;
   $52 = $28;
   $24 = $52;
   $53 = $24;
   HEAP8[$23 >> 0] = HEAP8[$26 >> 0] | 0;
   $22 = $25;
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEEC2ERKSH_($53, $25), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $21 = $alloc1;
   $18 = $alloc1;
   $19 = 1;
   $20 = 0;
   $54 = $19;
   $55 = $54 * 12 | 0;
   $17 = $55;
   $56 = $17;
   $57 = (tempInt = __Znwj($56) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$45 >> 2] = $57;
   $58 = HEAP32[$45 >> 2] | 0;
   $15 = $alloc1;
   $16 = $58;
   $59 = $16;
   $14 = $59;
   $60 = $14;
   $13 = $60;
   $61 = $13;
   $12 = $61;
   HEAP32[$61 >> 2] = 0;
   $62 = $61 + 4 | 0;
   HEAP32[$62 >> 2] = 0;
   $63 = $61 + 8 | 0;
   $10 = $63;
   HEAP32[$11 >> 2] = 0;
   $64 = $10;
   $9 = $11;
   $65 = $9;
   $66 = HEAP32[$65 >> 2] | 0;
   $7 = $64;
   HEAP32[$8 >> 2] = $66;
   $67 = $7;
   $6 = $67;
   $5 = $8;
   $68 = $5;
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$67 >> 2] = $69;
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $0 = $alloc2;
   $2 = $alloc2;
   $3 = 1;
   $4 = 0;
   $70 = $3;
   $71 = $70 * 12 | 0;
   $1 = $71;
   $72 = $1;
   $73 = (tempInt = __Znwj($72) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$45 >> 2] = $73;
   $74 = HEAP32[$45 >> 2] | 0;
   $39 = $alloc2;
   $40 = $74;
   $41 = 21619;
   $75 = $40;
   $76 = $41;
   $38 = $76;
   $77 = $38;
   $36 = $75;
   $37 = $77;
   $78 = $36;
   $35 = $78;
   $79 = $35;
   $34 = $79;
   $80 = $34;
   $33 = $80;
   $81 = $37;
   $82 = $37;
   $83 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($82) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($78, $81, $83), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 4:
  {
   HEAP8[$45 >> 0] = 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = $__atoms + 24 | 0;
   $3 = HEAP8[$2 >> 0] | 0;
   $4 = $3 << 24 >> 24 == $__ct << 24 >> 24;
   if (!$4) {
    $5 = $__atoms + 25 | 0;
    $6 = HEAP8[$5 >> 0] | 0;
    $7 = $6 << 24 >> 24 == $__ct << 24 >> 24;
    if (!$7) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = $__a + 1 | 0;
   HEAP32[$__a_end >> 2] = $9;
   HEAP8[$__a >> 0] = $8;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $10 = HEAP8[$__grouping >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__grouping + 4 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $10 & 255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17 | 0) != 0;
   $19 = $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24;
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end >> 2] | 0;
    $21 = $20;
    $22 = $__g;
    $23 = $21 - $22 | 0;
    $24 = ($23 | 0) < 160;
    if (!$24) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc >> 2] | 0;
    $26 = $20 + 4 | 0;
    HEAP32[$__g_end >> 2] = $26;
    HEAP32[$20 >> 2] = $25;
    HEAP32[$__dc >> 2] = 0;
    $$0 = 0;
    break;
   }
   $27 = $__atoms + 26 | 0;
   $$0$i2 = $__atoms;
   while (1) {
    $28 = HEAP8[$$0$i2 >> 0] | 0;
    $29 = $28 << 24 >> 24 == $__ct << 24 >> 24;
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = $$0$i2 + 1 | 0;
    $31 = ($30 | 0) == ($27 | 0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = $32 - $33 | 0;
   $35 = ($34 | 0) > 23;
   if ($35) {
    $$0 = -1;
   } else {
    switch ($__base | 0) {
    case 10:
    case 8:
     {
      $36 = ($34 | 0) < ($__base | 0);
      if (!$36) {
       $$0 = -1;
       break L6;
      }
      break;
     }
    case 16:
     {
      $37 = ($34 | 0) < 22;
      if (!$37) {
       if ($1) {
        $$0 = -1;
        break L6;
       }
       $38 = $0;
       $39 = $__a;
       $40 = $38 - $39 | 0;
       $41 = ($40 | 0) < 3;
       if (!$41) {
        $$0 = -1;
        break L6;
       }
       $42 = $0 + -1 | 0;
       $43 = HEAP8[$42 >> 0] | 0;
       $44 = $43 << 24 >> 24 == 48;
       if (!$44) {
        $$0 = -1;
        break L6;
       }
       HEAP32[$__dc >> 2] = 0;
       $45 = 20219 + $34 | 0;
       $46 = HEAP8[$45 >> 0] | 0;
       $47 = $0 + 1 | 0;
       HEAP32[$__a_end >> 2] = $47;
       HEAP8[$0 >> 0] = $46;
       $$0 = 0;
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $48 = 20219 + $34 | 0;
    $49 = HEAP8[$48 >> 0] | 0;
    $50 = $0 + 1 | 0;
    HEAP32[$__a_end >> 2] = $50;
    HEAP8[$0 >> 0] = $49;
    $51 = HEAP32[$__dc >> 2] | 0;
    $52 = $51 + 1 | 0;
    HEAP32[$__dc >> 2] = $52;
    $$0 = 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = $__atoms + 96 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = ($3 | 0) == ($__ct | 0);
   if (!$4) {
    $5 = $__atoms + 100 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == ($__ct | 0);
    if (!$7) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = $__a + 1 | 0;
   HEAP32[$__a_end >> 2] = $9;
   HEAP8[$__a >> 0] = $8;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $10 = HEAP8[$__grouping >> 0] | 0;
   $11 = $10 & 1;
   $12 = $11 << 24 >> 24 == 0;
   $13 = $__grouping + 4 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $10 & 255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17 | 0) != 0;
   $19 = ($__ct | 0) == ($__thousands_sep | 0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end >> 2] | 0;
    $21 = $20;
    $22 = $__g;
    $23 = $21 - $22 | 0;
    $24 = ($23 | 0) < 160;
    if (!$24) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc >> 2] | 0;
    $26 = $20 + 4 | 0;
    HEAP32[$__g_end >> 2] = $26;
    HEAP32[$20 >> 2] = $25;
    HEAP32[$__dc >> 2] = 0;
    $$0 = 0;
    break;
   }
   $27 = $__atoms + 104 | 0;
   $$0$i2 = $__atoms;
   while (1) {
    $28 = HEAP32[$$0$i2 >> 2] | 0;
    $29 = ($28 | 0) == ($__ct | 0);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = $$0$i2 + 4 | 0;
    $31 = ($30 | 0) == ($27 | 0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = $32 - $33 | 0;
   $35 = $34 >> 2;
   $36 = ($34 | 0) > 92;
   if ($36) {
    $$0 = -1;
   } else {
    switch ($__base | 0) {
    case 10:
    case 8:
     {
      $37 = ($35 | 0) < ($__base | 0);
      if (!$37) {
       $$0 = -1;
       break L6;
      }
      break;
     }
    case 16:
     {
      $38 = ($34 | 0) < 88;
      if (!$38) {
       if ($1) {
        $$0 = -1;
        break L6;
       }
       $39 = $0;
       $40 = $__a;
       $41 = $39 - $40 | 0;
       $42 = ($41 | 0) < 3;
       if (!$42) {
        $$0 = -1;
        break L6;
       }
       $43 = $0 + -1 | 0;
       $44 = HEAP8[$43 >> 0] | 0;
       $45 = $44 << 24 >> 24 == 48;
       if (!$45) {
        $$0 = -1;
        break L6;
       }
       HEAP32[$__dc >> 2] = 0;
       $46 = 20219 + $35 | 0;
       $47 = HEAP8[$46 >> 0] | 0;
       $48 = $0 + 1 | 0;
       HEAP32[$__a_end >> 2] = $48;
       HEAP8[$0 >> 0] = $47;
       $$0 = 0;
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $49 = 20219 + $35 | 0;
    $50 = HEAP8[$49 >> 0] | 0;
    $51 = $0 + 1 | 0;
    HEAP32[$__a_end >> 2] = $51;
    HEAP8[$0 >> 0] = $50;
    $52 = HEAP32[$__dc >> 2] | 0;
    $53 = $52 + 1 | 0;
    HEAP32[$__dc >> 2] = $53;
    $$0 = 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond17 = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $buf = sp + 8 | 0;
 $ws = sp;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $1 = ($dst | 0) != (0 | 0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0 | 0) != 0;
 $3 = ($n$ | 0) != 0;
 $or$cond17 = $3 & $2;
 L1 : do {
  if ($or$cond17) {
   $$021 = $wn;
   $$0218 = $n$;
   $38 = $$cast;
   $cnt$019 = 0;
   $s$020 = $dst$;
   while (1) {
    $4 = $$021 >>> 0 >= $$0218 >>> 0;
    $5 = $$021 >>> 0 > 32;
    $6 = $4 | $5;
    if (!$6) {
     $$1 = $$021;
     $$24 = $$0218;
     $18 = $38;
     $cnt$1 = $cnt$019;
     $s$09 = $s$020;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021;
    $7 = $$021 - $$02$$0 | 0;
    $8 = (tempInt = _wcsrtombs($s$020, $ws, $$02$$0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $9 = ($8 | 0) == -1;
    if ($9) {
     $$lcssa57 = $7;
     $s$020$lcssa56 = $s$020;
     break;
    }
    $10 = ($s$020 | 0) == ($buf | 0);
    $11 = $s$020 + $8 | 0;
    $12 = $10 ? 0 : $8;
    $$13 = $$0218 - $12 | 0;
    $s$1 = $10 ? $s$020 : $11;
    $13 = $8 + $cnt$019 | 0;
    $14 = HEAP32[$ws >> 2] | 0;
    $15 = ($14 | 0) != (0 | 0);
    $16 = ($$0218 | 0) != ($12 | 0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$021 = $7;
     $$0218 = $$13;
     $38 = $14;
     $cnt$019 = $13;
     $s$020 = $s$1;
    } else {
     $$1 = $7;
     $$24 = $$13;
     $18 = $14;
     $cnt$1 = $13;
     $s$09 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws >> 2] | 0;
   $$1 = $$lcssa57;
   $$24 = 0;
   $18 = $$pr$pre;
   $cnt$1 = -1;
   $s$09 = $s$020$lcssa56;
  } else {
   $$1 = $wn;
   $$24 = $n$;
   $18 = $$cast;
   $cnt$1 = 0;
   $s$09 = $dst$;
  }
 } while (0);
 $17 = ($18 | 0) == (0 | 0);
 L8 : do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24 | 0) != 0;
   $20 = ($$1 | 0) != 0;
   $21 = $19 & $20;
   if ($21) {
    $$216 = $$1;
    $$313 = $$24;
    $23 = $18;
    $cnt$214 = $cnt$1;
    $s$215 = $s$09;
    while (1) {
     $22 = HEAP32[$23 >> 2] | 0;
     $24 = (tempInt = _wcrtomb($s$215, $22, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $25 = $24 + 1 | 0;
     $26 = $25 >>> 0 < 2;
     if ($26) {
      $$lcssa = $24;
      $cnt$214$lcssa = $cnt$214;
      break;
     }
     $28 = HEAP32[$ws >> 2] | 0;
     $29 = $28 + 4 | 0;
     HEAP32[$ws >> 2] = $29;
     $30 = $$216 + -1 | 0;
     $31 = $s$215 + $24 | 0;
     $32 = $$313 - $24 | 0;
     $33 = $cnt$214 + 1 | 0;
     $34 = ($$313 | 0) != ($24 | 0);
     $35 = ($30 | 0) != 0;
     $36 = $34 & $35;
     if ($36) {
      $$216 = $30;
      $$313 = $32;
      $23 = $29;
      $cnt$214 = $33;
      $s$215 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa | 0) == 0;
    if ($27) {
     HEAP32[$ws >> 2] = 0;
     $cnt$3 = $cnt$214$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while (0);
 if ($1) {
  $37 = HEAP32[$ws >> 2] | 0;
  HEAP32[$wcs >> 2] = $37;
 }
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__res_arg >>> 0 > 4294967279;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = HEAP8[$this >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 if ($3) {
  $22 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $5 = $4 & -2;
  $phitmp$i = $5 + -1 | 0;
  $6 = $4 & 255;
  $22 = $phitmp$i;
  $8 = $6;
 }
 $7 = $8 & 1;
 $9 = $7 << 24 >> 24 == 0;
 if ($9) {
  $12 = $8 & 255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = $this + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $15 = $11;
 }
 $14 = $15 >>> 0 > $__res_arg >>> 0;
 $16 = $14 ? $15 : $__res_arg;
 $17 = $16 >>> 0 < 11;
 if ($17) {
  $21 = 10;
 } else {
  $18 = $16 + 16 | 0;
  $19 = $18 & -16;
  $phitmp$i2 = $19 + -1 | 0;
  $21 = $phitmp$i2;
 }
 $20 = ($21 | 0) == ($22 | 0);
 L14 : do {
  if (!$20) {
   $23 = ($21 | 0) == 10;
   do {
    if ($23) {
     $24 = $this + 1 | 0;
     $25 = $this + 8 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $__new_data$1 = $24;
     $__now_long$0$off0 = 0;
     $__p$0 = $26;
     $__was_long$0$off0 = 1;
    } else {
     $27 = $21 >>> 0 > $22 >>> 0;
     $28 = $21 + 1 | 0;
     if ($27) {
      $29 = (tempInt = __Znwj($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (tempInt = invoke_ii(457, $28 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $31 = __THREW__;
      __THREW__ = 0;
      $32 = $31 & 1;
      if ($32) {
       $33 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $34 = tempRet0;
       (tempInt = ___cxa_begin_catch($33 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = $35 << 24 >> 24 == 0;
     if ($36) {
      $39 = $this + 1 | 0;
      $__new_data$1 = $__new_data$0;
      $__now_long$0$off0 = 1;
      $__p$0 = $39;
      $__was_long$0$off0 = 0;
      break;
     } else {
      $37 = $this + 8 | 0;
      $38 = HEAP32[$37 >> 2] | 0;
      $__new_data$1 = $__new_data$0;
      $__now_long$0$off0 = 1;
      $__p$0 = $38;
      $__was_long$0$off0 = 1;
      break;
     }
    }
   } while (0);
   $40 = $8 & 1;
   $41 = $40 << 24 >> 24 == 0;
   if ($41) {
    $44 = $8 & 255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = $this + 4 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $47 = $43;
   }
   $46 = $47 + 1 | 0;
   (tempInt = _memcpy($__new_data$1 | 0, $__p$0 | 0, $46 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0), asyncState ? abort(-12) | 0 : 0;
   }
   if ($__now_long$0$off0) {
    $48 = $21 + 1 | 0;
    $49 = $48 | 1;
    HEAP32[$this >> 2] = $49;
    $50 = $this + 4 | 0;
    HEAP32[$50 >> 2] = $15;
    $51 = $this + 8 | 0;
    HEAP32[$51 >> 2] = $__new_data$1;
    break;
   } else {
    $52 = $15 << 1;
    $53 = $52 & 255;
    HEAP8[$this >> 0] = $53;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__res_arg >>> 0 > 1073741807;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = HEAP8[$this >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 if ($3) {
  $22 = 1;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $5 = $4 & -2;
  $phitmp$i = $5 + -1 | 0;
  $6 = $4 & 255;
  $22 = $phitmp$i;
  $8 = $6;
 }
 $7 = $8 & 1;
 $9 = $7 << 24 >> 24 == 0;
 if ($9) {
  $12 = $8 & 255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = $this + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $15 = $11;
 }
 $14 = $15 >>> 0 > $__res_arg >>> 0;
 $16 = $14 ? $15 : $__res_arg;
 $17 = $16 >>> 0 < 2;
 if ($17) {
  $21 = 1;
 } else {
  $18 = $16 + 4 | 0;
  $19 = $18 & -4;
  $phitmp$i2 = $19 + -1 | 0;
  $21 = $phitmp$i2;
 }
 $20 = ($21 | 0) == ($22 | 0);
 L14 : do {
  if (!$20) {
   $23 = ($21 | 0) == 1;
   do {
    if ($23) {
     $24 = $this + 4 | 0;
     $25 = $this + 8 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $__new_data$1 = $24;
     $__now_long$0$off0 = 0;
     $__p$0 = $26;
     $__was_long$0$off0 = 1;
    } else {
     $27 = $21 >>> 0 > $22 >>> 0;
     $28 = $21 << 2;
     $29 = $28 + 4 | 0;
     if ($27) {
      $30 = (tempInt = __Znwj($29) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (tempInt = invoke_ii(457, $29 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $32 = __THREW__;
      __THREW__ = 0;
      $33 = $32 & 1;
      if ($33) {
       $34 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $35 = tempRet0;
       (tempInt = ___cxa_begin_catch($34 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = $36 << 24 >> 24 == 0;
     if ($37) {
      $40 = $this + 4 | 0;
      $__new_data$1 = $$sink;
      $__now_long$0$off0 = 1;
      $__p$0 = $40;
      $__was_long$0$off0 = 0;
      break;
     } else {
      $38 = $this + 8 | 0;
      $39 = HEAP32[$38 >> 2] | 0;
      $__new_data$1 = $$sink;
      $__now_long$0$off0 = 1;
      $__p$0 = $39;
      $__was_long$0$off0 = 1;
      break;
     }
    }
   } while (0);
   $41 = $8 & 1;
   $42 = $41 << 24 >> 24 == 0;
   if ($42) {
    $45 = $8 & 255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = $this + 4 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $48 = $44;
   }
   $47 = $48 + 1 | 0;
   (tempInt = _wmemcpy($__new_data$1, $__p$0, $47) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0), asyncState ? abort(-12) | 0 : 0;
   }
   if ($__now_long$0$off0) {
    $49 = $21 + 1 | 0;
    $50 = $49 | 1;
    HEAP32[$this >> 2] = $50;
    $51 = $this + 4 | 0;
    HEAP32[$51 >> 2] = $15;
    $52 = $this + 8 | 0;
    HEAP32[$52 >> 2] = $__new_data$1;
    break;
   } else {
    $53 = $15 << 1;
    $54 = $53 & 255;
    HEAP8[$this >> 0] = $54;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__s = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$sum = $2 + 24 | 0;
 $3 = $this + $$sum | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) == (0 | 0);
 L1 : do {
  if (!$5) {
   __THREW__ = 0;
   invoke_vii(445, $__s | 0, $this | 0), asyncState ? abort(-12) | 0 : 0;
   $6 = __THREW__;
   __THREW__ = 0;
   $7 = $6 & 1;
   L3 : do {
    if ($7) {
     $31 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s >> 0] | 0;
     $9 = $8 << 24 >> 24 == 0;
     do {
      if (!$9) {
       $10 = HEAP32[$this >> 2] | 0;
       $11 = $10 + -12 | 0;
       $12 = HEAP32[$11 >> 2] | 0;
       $$sum1 = $12 + 24 | 0;
       $13 = $this + $$sum1 | 0;
       $14 = HEAP32[$13 >> 2] | 0;
       $15 = HEAP32[$14 >> 2] | 0;
       $16 = $15 + 24 | 0;
       $17 = HEAP32[$16 >> 2] | 0;
       __THREW__ = 0;
       $18 = (tempInt = invoke_ii($17 | 0, $14 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $19 = __THREW__;
       __THREW__ = 0;
       $20 = $19 & 1;
       if (!$20) {
        $21 = ($18 | 0) == -1;
        if (!$21) {
         break;
        }
        $22 = HEAP32[$this >> 2] | 0;
        $23 = $22 + -12 | 0;
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = $this + $24 | 0;
        $$sum2 = $24 + 16 | 0;
        $26 = $this + $$sum2 | 0;
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(394, $25 | 0, $28 | 0), asyncState ? abort(-12) | 0 : 0;
        $29 = __THREW__;
        __THREW__ = 0;
        $30 = $29 & 1;
        if (!$30) {
         break;
        }
       }
       $33 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
       $$0 = $33;
       break L3;
      }
     } while (0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s), asyncState ? abort(-12) | 0 : 0;
     break L1;
    }
   } while (0);
   (tempInt = ___cxa_begin_catch($$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $35 = HEAP32[$this >> 2] | 0;
   $36 = $35 + -12 | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   $38 = $this + $37 | 0;
   __THREW__ = 0;
   invoke_vi(420, $38 | 0), asyncState ? abort(-12) | 0 : 0;
   $39 = __THREW__;
   __THREW__ = 0;
   $40 = $39 & 1;
   if (!$40) {
    ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $41 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $43 = __THREW__;
   __THREW__ = 0;
   $44 = $43 & 1;
   if ($44) {
    $45 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $46 = tempRet0;
    ___clang_call_terminate($45), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($41 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ERKSA_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $0 = $this;
 $1 = $other;
 $8 = $0;
 $9 = $1;
 $10 = HEAP8[$9 >> 0] | 0;
 HEAP8[$8 >> 0] = $10;
 $11 = $8 + 8 | 0;
 HEAP32[$11 >> 2] = 0 | 0;
 HEAP32[$11 + 4 >> 2] = 0 | 0;
 $12 = HEAP8[$8 >> 0] | 0;
 switch ($12 << 24 >> 24) {
 case 6:
  {
   $39 = $8 + 8 | 0;
   $40 = $1;
   $41 = $40 + 8 | 0;
   $42 = +HEAPF64[$41 >> 3];
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ed($7, $42), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$39 >> 2] = HEAP32[$7 >> 2] | 0;
   HEAP32[$39 + 4 >> 2] = HEAP32[$7 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 5:
  {
   $30 = $8 + 8 | 0;
   $31 = $1;
   $32 = $31 + 8 | 0;
   $33 = $32;
   $34 = $33;
   $35 = HEAP32[$34 >> 2] | 0;
   $36 = $33 + 4 | 0;
   $37 = $36;
   $38 = HEAP32[$37 >> 2] | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ex($6, $35, $38), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$30 >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[$30 + 4 >> 2] = HEAP32[$6 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $13 = $8 + 8 | 0;
   $14 = $1;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKNS2_IS9_SA_NS1_4lessIS9_EENS7_INS1_4pairIKS9_SA_EEEEEE($2, $16), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$13 >> 2] = HEAP32[$2 >> 2] | 0;
   HEAP32[$13 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $17 = $8 + 8 | 0;
   $18 = $1;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKNS3_ISA_NS7_ISA_EEEE($3, $20), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$17 >> 2] = HEAP32[$3 >> 2] | 0;
   HEAP32[$17 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $21 = $8 + 8 | 0;
   $22 = $1;
   $23 = $22 + 8 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKS9_($4, $24), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$21 >> 2] = HEAP32[$4 >> 2] | 0;
   HEAP32[$21 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 4:
  {
   $25 = $8 + 8 | 0;
   $26 = $1;
   $27 = $26 + 8 | 0;
   $28 = HEAP8[$27 >> 0] | 0;
   $29 = $28 & 1;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Eb($5, $29), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$25 >> 2] = HEAP32[$5 >> 2] | 0;
   HEAP32[$25 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     HEAP32[$6 >> 2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info >> 2] | 0;
   $10 = ($this | 0) == ($9 | 0);
   if (!$10) {
    $43 = $this + 8 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45 + 24 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44, $info, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
    break;
   }
   $11 = $info + 16 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   $13 = ($12 | 0) == ($current_ptr | 0);
   if (!$13) {
    $14 = $info + 20 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($15 | 0) == ($current_ptr | 0);
    if (!$16) {
     $19 = $info + 32 | 0;
     HEAP32[$19 >> 2] = $path_below;
     $20 = $info + 44 | 0;
     $21 = HEAP32[$20 >> 2] | 0;
     $22 = ($21 | 0) == 4;
     if ($22) {
      break;
     }
     $23 = $info + 52 | 0;
     HEAP8[$23 >> 0] = 0;
     $24 = $info + 53 | 0;
     HEAP8[$24 >> 0] = 0;
     $25 = $this + 8 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $27 = HEAP32[$26 >> 2] | 0;
     $28 = $27 + 20 | 0;
     $29 = HEAP32[$28 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
     $30 = HEAP8[$24 >> 0] | 0;
     $31 = $30 << 24 >> 24 == 0;
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23 >> 0] | 0;
      $not$ = $32 << 24 >> 24 == 0;
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label | 0) == 13) {
       HEAP32[$14 >> 2] = $current_ptr;
       $33 = $info + 40 | 0;
       $34 = HEAP32[$33 >> 2] | 0;
       $35 = $34 + 1 | 0;
       HEAP32[$33 >> 2] = $35;
       $36 = $info + 36 | 0;
       $37 = HEAP32[$36 >> 2] | 0;
       $38 = ($37 | 0) == 1;
       if ($38) {
        $39 = $info + 24 | 0;
        $40 = HEAP32[$39 >> 2] | 0;
        $41 = ($40 | 0) == 2;
        if ($41) {
         $42 = $info + 54 | 0;
         HEAP8[$42 >> 0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label | 0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20 >> 2] = 4;
       break L1;
      }
     } while (0);
     HEAP32[$20 >> 2] = 3;
     break;
    }
   }
   $17 = ($path_below | 0) == 1;
   if ($17) {
    $18 = $info + 32 | 0;
    HEAP32[$18 >> 2] = 1;
   }
  }
 } while (0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratoreqERKSB_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $10 = sp + 56 | 0;
 $11 = $this;
 $12 = $other;
 $15 = $11;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $12;
 $18 = HEAP32[$17 >> 2] | 0;
 $19 = ($16 | 0) != ($18 | 0);
 if ($19) {
  $20 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = $20;
  $9 = 14902;
  $21 = $8;
  $22 = $9;
  __THREW__ = 0;
  invoke_vii(435, $21 | 0, $22 | 0), asyncState ? abort(-12) | 0 : 0;
  $23 = __THREW__;
  __THREW__ = 0;
  $24 = $23 & 1;
  if ($24) {
   $26 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $27 = tempRet0;
   $13 = $26;
   $14 = $27;
   ___cxa_free_exception($20 | 0), asyncState ? abort(-12) | 0 : 0;
   $28 = $13;
   $29 = $14;
   ___resumeException($28 | 0), asyncState ? abort(-12) | 0 : 0;
  } else {
   $25 = 3236;
   HEAP32[$21 >> 2] = $25;
   ___cxa_throw($20 | 0, 160 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $30 = HEAP32[$15 >> 2] | 0;
 $31 = HEAP8[$30 >> 0] | 0;
 switch ($31 << 24 >> 24) {
 case 1:
  {
   $32 = $15 + 4 | 0;
   $33 = $12;
   $34 = $33 + 4 | 0;
   $6 = $32;
   $7 = $34;
   $35 = $6;
   $36 = $7;
   $4 = $35;
   $5 = $36;
   $37 = $4;
   $38 = HEAP32[$37 >> 2] | 0;
   $39 = $5;
   $40 = HEAP32[$39 >> 2] | 0;
   $41 = ($38 | 0) == ($40 | 0);
   $$expand_i1_val = $41 & 1;
   HEAP8[$10 >> 0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$10 >> 0] | 0;
   $62 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $62 | 0;
   break;
  }
 case 2:
  {
   $42 = $15 + 4 | 0;
   $43 = $42 + 4 | 0;
   $44 = $12;
   $45 = $44 + 4 | 0;
   $46 = $45 + 4 | 0;
   $2 = $43;
   $3 = $46;
   $47 = $2;
   $1 = $47;
   $48 = $1;
   $49 = HEAP32[$48 >> 2] | 0;
   $50 = $3;
   $0 = $50;
   $51 = $0;
   $52 = HEAP32[$51 >> 2] | 0;
   $53 = ($49 | 0) == ($52 | 0);
   $$expand_i1_val2 = $53 & 1;
   HEAP8[$10 >> 0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$10 >> 0] | 0;
   $62 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $62 | 0;
   break;
  }
 default:
  {
   $54 = $15 + 4 | 0;
   $55 = $54 + 8 | 0;
   $56 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tcviEv($55) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $57 = $12;
   $58 = $57 + 4 | 0;
   $59 = $58 + 8 | 0;
   $60 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tcviEv($59) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $61 = ($56 | 0) == ($60 | 0);
   $$expand_i1_val4 = $61 & 1;
   HEAP8[$10 >> 0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$10 >> 0] | 0;
   $62 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $62 | 0;
  }
 }
 return 0 | 0;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$01$i$i22 = 0, $$__ig$0 = 0, $$lcssa = 0, $$not = 0, $$not16 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$018 = 0, $__r$019 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond217 = 0, $or$cond220 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 $3 = $__grouping + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 & 255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if (!$8) {
   $9 = ($__g | 0) == ($__g_end | 0);
   if ($9) {
    $19 = $0;
    $28 = $4;
   } else {
    $10 = $__g_end + -4 | 0;
    $11 = $10 >>> 0 > $__g >>> 0;
    if ($11) {
     $$01$i$i22 = $__g;
     $14 = $10;
     while (1) {
      $12 = HEAP32[$$01$i$i22 >> 2] | 0;
      $13 = HEAP32[$14 >> 2] | 0;
      HEAP32[$$01$i$i22 >> 2] = $13;
      HEAP32[$14 >> 2] = $12;
      $15 = $$01$i$i22 + 4 | 0;
      $16 = $14 + -4 | 0;
      $17 = $15 >>> 0 < $16 >>> 0;
      if ($17) {
       $$01$i$i22 = $15;
       $14 = $16;
      } else {
       break;
      }
     }
    }
    $$pre = HEAP8[$__grouping >> 0] | 0;
    $$pre11 = HEAP32[$3 >> 2] | 0;
    $19 = $$pre;
    $28 = $$pre11;
   }
   $18 = $19 & 1;
   $20 = $18 << 24 >> 24 == 0;
   $21 = $__grouping + 8 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   $23 = $__grouping + 1 | 0;
   $24 = $20 ? $23 : $22;
   $25 = $19 & 255;
   $26 = $25 >>> 1;
   $27 = $20 ? $26 : $28;
   $29 = $24 + $27 | 0;
   $30 = $__g_end + -4 | 0;
   $31 = $29;
   $32 = $30 >>> 0 > $__g >>> 0;
   $33 = HEAP8[$24 >> 0] | 0;
   $$not16 = $33 << 24 >> 24 < 1;
   $34 = $33 << 24 >> 24 == 127;
   $or$cond217 = $$not16 | $34;
   L10 : do {
    if ($32) {
     $36 = $33;
     $__ig$018 = $24;
     $__r$019 = $__g;
     $or$cond220 = $or$cond217;
     while (1) {
      if (!$or$cond220) {
       $35 = $36 << 24 >> 24;
       $37 = HEAP32[$__r$019 >> 2] | 0;
       $38 = ($35 | 0) == ($37 | 0);
       if (!$38) {
        break;
       }
      }
      $39 = $__ig$018;
      $40 = $31 - $39 | 0;
      $41 = ($40 | 0) > 1;
      $42 = $__ig$018 + 1 | 0;
      $$__ig$0 = $41 ? $42 : $__ig$018;
      $43 = $__r$019 + 4 | 0;
      $44 = $43 >>> 0 < $30 >>> 0;
      $45 = HEAP8[$$__ig$0 >> 0] | 0;
      $$not = $45 << 24 >> 24 < 1;
      $46 = $45 << 24 >> 24 == 127;
      $or$cond2 = $$not | $46;
      if ($44) {
       $36 = $45;
       $__ig$018 = $$__ig$0;
       $__r$019 = $43;
       $or$cond220 = $or$cond2;
      } else {
       $$lcssa = $45;
       $or$cond2$lcssa = $or$cond2;
       break L10;
      }
     }
     HEAP32[$__err >> 2] = 4;
     break L1;
    } else {
     $$lcssa = $33;
     $or$cond2$lcssa = $or$cond217;
    }
   } while (0);
   if (!$or$cond2$lcssa) {
    $47 = $$lcssa << 24 >> 24;
    $48 = HEAP32[$30 >> 2] | 0;
    $49 = $48 + -1 | 0;
    $50 = $49 >>> 0 < $47 >>> 0;
    if (!$50) {
     HEAP32[$__err >> 2] = 4;
    }
   }
  }
 } while (0);
 return;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 L1 : do {
  if ($1) {
   $$sroa$0$1 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = $2 - $3 | 0;
   $5 = $4 >> 2;
   $6 = $__iob + 12 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $8 = ($7 | 0) > ($5 | 0);
   $9 = $7 - $5 | 0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = $10 - $3 | 0;
   $12 = $11 >> 2;
   $13 = ($11 | 0) > 0;
   if ($13) {
    $14 = HEAP32[$0 >> 2] | 0;
    $15 = $14 + 48 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = (tempInt = FUNCTION_TABLE_iiii[$16 & 1023]($0, $__ob, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $18 = ($17 | 0) == ($12 | 0);
    if (!$18) {
     HEAP32[$__s >> 2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   $19 = ($__ns$0 | 0) > 0;
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl), asyncState ? abort(-12) | 0 : 0;
     $20 = HEAP8[$__sp >> 0] | 0;
     $21 = $20 & 1;
     $22 = $21 << 24 >> 24 == 0;
     $23 = $__sp + 8 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = $__sp + 4 | 0;
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0 >> 2] | 0;
     $28 = $27 + 48 | 0;
     $29 = HEAP32[$28 >> 2] | 0;
     __THREW__ = 0;
     $30 = (tempInt = invoke_iiii($29 | 0, $0 | 0, $26 | 0, $__ns$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $31 = __THREW__;
     __THREW__ = 0;
     $32 = $31 & 1;
     if ($32) {
      $34 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp), asyncState ? abort(-12) | 0 : 0;
      ___resumeException($34 | 0), asyncState ? abort(-12) | 0 : 0;
     }
     $33 = ($30 | 0) == ($__ns$0 | 0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp), asyncState ? abort(-12) | 0 : 0;
      break;
     } else {
      HEAP32[$__s >> 2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp), asyncState ? abort(-12) | 0 : 0;
      $$sroa$0$1 = 0;
      break L1;
     }
    }
   } while (0);
   $36 = $2 - $10 | 0;
   $37 = $36 >> 2;
   $38 = ($36 | 0) > 0;
   if ($38) {
    $39 = HEAP32[$0 >> 2] | 0;
    $40 = $39 + 48 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = (tempInt = FUNCTION_TABLE_iiii[$41 & 1023]($0, $__op, $37) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $43 = ($42 | 0) == ($37 | 0);
    if (!$43) {
     HEAP32[$__s >> 2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   HEAP32[$6 >> 2] = 0;
   $$sroa$0$1 = $0;
  }
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$1 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2 | 0) != 0;
 $4 = ($n | 0) != 0;
 $or$cond18 = $4 & $3;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($or$cond18) {
   $5 = $c & 255;
   $$019 = $n;
   $s$020 = $src;
   while (1) {
    $6 = HEAP8[$s$020 >> 0] | 0;
    $7 = $6 << 24 >> 24 == $5 << 24 >> 24;
    if ($7) {
     $$0$lcssa44 = $$019;
     $s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = $s$020 + 1 | 0;
    $9 = $$019 + -1 | 0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11 | 0) != 0;
    $13 = ($9 | 0) != 0;
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;
     $s$020 = $8;
    } else {
     $$0$lcssa = $9;
     $$lcssa = $13;
     $s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$lcssa = $4;
   $s$0$lcssa = $src;
   label = 5;
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;
   $s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;
   $s$2 = $s$0$lcssa;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $14 = HEAP8[$s$0$lcssa43 >> 0] | 0;
   $15 = $c & 255;
   $16 = $14 << 24 >> 24 == $15 << 24 >> 24;
   if ($16) {
    $$3 = $$0$lcssa44;
    $s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009) | 0;
    $18 = $$0$lcssa44 >>> 0 > 3;
    L11 : do {
     if ($18) {
      $$110 = $$0$lcssa44;
      $w$011 = $s$0$lcssa43;
      while (1) {
       $19 = HEAP32[$w$011 >> 2] | 0;
       $20 = $19 ^ $17;
       $21 = $20 + -16843009 | 0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24 | 0) == 0;
       if (!$25) {
        $$110$lcssa = $$110;
        $w$011$lcssa = $w$011;
        break;
       }
       $26 = $w$011 + 4 | 0;
       $27 = $$110 + -4 | 0;
       $28 = $27 >>> 0 > 3;
       if ($28) {
        $$110 = $27;
        $w$011 = $26;
       } else {
        $$1$lcssa = $27;
        $w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;
      $s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;
      $w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while (0);
    if ((label | 0) == 11) {
     $29 = ($$1$lcssa | 0) == 0;
     if ($29) {
      $$3 = 0;
      $s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;
      $s$15 = $w$0$lcssa;
     }
    }
    while (1) {
     $30 = HEAP8[$s$15 >> 0] | 0;
     $31 = $30 << 24 >> 24 == $15 << 24 >> 24;
     if ($31) {
      $$3 = $$24;
      $s$2 = $s$15;
      break L8;
     }
     $32 = $s$15 + 1 | 0;
     $33 = $$24 + -1 | 0;
     $34 = ($33 | 0) == 0;
     if ($34) {
      $$3 = 0;
      $s$2 = $32;
      break;
     } else {
      $$24 = $33;
      $s$15 = $32;
     }
    }
   }
  }
 } while (0);
 $35 = ($$3 | 0) != 0;
 $36 = $35 ? $s$2 : 0;
 return $36 | 0;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = _pthread_mutex_lock(12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $0 = HEAP32[$flag >> 2] | 0;
 $1 = ($0 | 0) == 1;
 if ($1) {
  while (1) {
   (tempInt = _pthread_cond_wait(12480 | 0, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$flag >> 2] | 0;
   $3 = ($2 | 0) == 1;
   if (!$3) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag >> 2] | 0;
 $5 = ($4 | 0) == 0;
 do {
  if ($5) {
   HEAP32[$flag >> 2] = 1;
   __THREW__ = 0;
   (tempInt = invoke_ii(566, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = __THREW__;
   __THREW__ = 0;
   $7 = $6 & 1;
   if (!$7) {
    __THREW__ = 0;
    invoke_vi($func | 0, $arg | 0), asyncState ? abort(-12) | 0 : 0;
    $8 = __THREW__;
    __THREW__ = 0;
    $9 = $8 & 1;
    if (!$9) {
     __THREW__ = 0;
     (tempInt = invoke_ii(567, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $10 = __THREW__;
     __THREW__ = 0;
     $11 = $10 & 1;
     if (!$11) {
      HEAP32[$flag >> 2] = -1;
      __THREW__ = 0;
      (tempInt = invoke_ii(566, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $12 = __THREW__;
      __THREW__ = 0;
      $13 = $12 & 1;
      if (!$13) {
       __THREW__ = 0;
       (tempInt = invoke_ii(568, 12480 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $14 = __THREW__;
       __THREW__ = 0;
       $15 = $14 & 1;
       if (!$15) {
        break;
       }
      }
     }
    }
   }
   $16 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = tempRet0;
   (tempInt = ___cxa_begin_catch($16 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   __THREW__ = 0;
   (tempInt = invoke_ii(567, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $18 = __THREW__;
   __THREW__ = 0;
   $19 = $18 & 1;
   if (!$19) {
    HEAP32[$flag >> 2] = 0;
    __THREW__ = 0;
    (tempInt = invoke_ii(566, 12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $20 = __THREW__;
    __THREW__ = 0;
    $21 = $20 & 1;
    if (!$21) {
     __THREW__ = 0;
     (tempInt = invoke_ii(568, 12480 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      __THREW__ = 0;
      invoke_v(569), asyncState ? abort(-12) | 0 : 0;
      $24 = __THREW__;
      __THREW__ = 0;
     }
    }
   }
   $25 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $26 = tempRet0;
   __THREW__ = 0;
   invoke_v(409), asyncState ? abort(-12) | 0 : 0;
   $27 = __THREW__;
   __THREW__ = 0;
   $28 = $27 & 1;
   if ($28) {
    $29 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $30 = tempRet0;
    ___clang_call_terminate($29), asyncState ? abort(-12) | 0 : 0;
   } else {
    ___resumeException($25 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  } else {
   (tempInt = _pthread_mutex_unlock(12452 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
 } while (0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratordeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $12 = $this;
 $15 = $12;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = HEAP8[$16 >> 0] | 0;
 switch ($17 << 24 >> 24) {
 case 1:
  {
   $18 = $15 + 4 | 0;
   $10 = $18;
   $19 = $10;
   $9 = $19;
   $20 = $9;
   $21 = HEAP32[$20 >> 2] | 0;
   $22 = $21 + 16 | 0;
   $8 = $22;
   $23 = $8;
   $7 = $23;
   $24 = $7;
   $6 = $24;
   $25 = $6;
   $5 = $25;
   $26 = $5;
   $27 = $26 + 16 | 0;
   $11 = $27;
   $52 = $11;
   STACKTOP = sp;
   return $52 | 0;
   break;
  }
 case 2:
  {
   $28 = $15 + 4 | 0;
   $29 = $28 + 4 | 0;
   $2 = $29;
   $30 = $2;
   $31 = HEAP32[$30 >> 2] | 0;
   $11 = $31;
   $52 = $11;
   STACKTOP = sp;
   return $52 | 0;
   break;
  }
 case 0:
  {
   $32 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $0 = $32;
   $1 = 14951;
   $33 = $0;
   $34 = $1;
   __THREW__ = 0;
   invoke_vii(435, $33 | 0, $34 | 0), asyncState ? abort(-12) | 0 : 0;
   $35 = __THREW__;
   __THREW__ = 0;
   $36 = $35 & 1;
   if (!$36) {
    $37 = 3276;
    HEAP32[$33 >> 2] = $37;
    ___cxa_throw($32 | 0, 192 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
   }
   $38 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $39 = tempRet0;
   $13 = $38;
   $14 = $39;
   ___cxa_free_exception($32 | 0), asyncState ? abort(-12) | 0 : 0;
   $53 = $13;
   $54 = $14;
   ___resumeException($53 | 0), asyncState ? abort(-12) | 0 : 0;
   break;
  }
 default:
  {
   $40 = $15 + 4 | 0;
   $41 = $40 + 8 | 0;
   $42 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t8is_beginEv($41) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($42) {
    $43 = HEAP32[$15 >> 2] | 0;
    $11 = $43;
    $52 = $11;
    STACKTOP = sp;
    return $52 | 0;
   }
   $44 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = $44;
   $4 = 14951;
   $45 = $3;
   $46 = $4;
   __THREW__ = 0;
   invoke_vii(435, $45 | 0, $46 | 0), asyncState ? abort(-12) | 0 : 0;
   $47 = __THREW__;
   __THREW__ = 0;
   $48 = $47 & 1;
   if (!$48) {
    $49 = 3276;
    HEAP32[$45 >> 2] = $49;
    ___cxa_throw($44 | 0, 192 | 0, 66 | 0), asyncState ? abort(-12) | 0 : 0;
   }
   $50 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $51 = tempRet0;
   $13 = $50;
   $14 = $51;
   ___cxa_free_exception($44 | 0), asyncState ? abort(-12) | 0 : 0;
   $53 = $13;
   $54 = $14;
   ___resumeException($53 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 }
 return 0 | 0;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEEC2ERKSC_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 84 | 0;
 $6 = sp + 16 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 111 | 0;
 $11 = sp + 8 | 0;
 $15 = sp + 110 | 0;
 $17 = sp;
 $19 = sp + 109 | 0;
 $25 = sp + 108 | 0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = $30 + 8 | 0;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 HEAP8[$17 >> 0] = HEAP8[$19 >> 0] | 0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35 >> 2] = 0;
 $36 = $35 + 4 | 0;
 HEAP32[$36 >> 2] = 0;
 $37 = $35 + 8 | 0;
 HEAP8[$11 >> 0] = HEAP8[$15 >> 0] | 0;
 $8 = $37;
 HEAP32[$9 >> 2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39 >> 2] | 0;
 $1 = $11;
 HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0;
 $4 = $38;
 HEAP32[$5 >> 2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42 >> 2] | 0;
 HEAP32[$41 >> 2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = $45 + 4 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = HEAP32[$45 >> 2] | 0;
 $49 = $47;
 $50 = $48;
 $51 = $49 - $50 | 0;
 $52 = ($51 | 0) / 16 & -1;
 $__n = $52;
 $53 = $__n;
 $54 = $53 >>> 0 > 0;
 if (!$54) {
  STACKTOP = sp;
  return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(443, $28 | 0, $55 | 0), asyncState ? abort(-12) | 0 : 0;
 $56 = __THREW__;
 __THREW__ = 0;
 $57 = $56 & 1;
 if ($57) {
  $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EENS8_ISB_EEED2Ev($28), asyncState ? abort(-12) | 0 : 0;
  $67 = $26;
  $68 = $27;
  ___resumeException($67 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $58 = $24;
 $59 = HEAP32[$58 >> 2] | 0;
 $60 = $24;
 $61 = $60 + 4 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 __THREW__ = 0;
 invoke_viii(444, $28 | 0, $59 | 0, $62 | 0), asyncState ? abort(-12) | 0 : 0;
 $63 = __THREW__;
 __THREW__ = 0;
 $64 = $63 & 1;
 if ($64) {
  $65 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EENS8_ISB_EEED2Ev($28), asyncState ? abort(-12) | 0 : 0;
  $67 = $26;
  $68 = $27;
  ___resumeException($67 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $dummy = sp;
 $0 = ($st | 0) == (0 | 0);
 $$st = $0 ? 3748 : $st;
 $1 = HEAP32[$$st >> 2] | 0;
 $2 = ($src | 0) == (0 | 0);
 L1 : do {
  if ($2) {
   $3 = ($1 | 0) == 0;
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc | 0) == (0 | 0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n | 0) == 0;
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1 | 0) == 0;
    if ($6) {
     $7 = HEAP8[$src >> 0] | 0;
     $8 = $7 & 255;
     $9 = $7 << 24 >> 24 > -1;
     if ($9) {
      HEAP32[$dummy$wc >> 2] = $8;
      $10 = $7 << 24 >> 24 != 0;
      $11 = $10 & 1;
      $$0 = $11;
      break;
     }
     $12 = $8 + -194 | 0;
     $13 = $12 >>> 0 > 50;
     if ($13) {
      label = 15;
      break;
     }
     $14 = $src + 1 | 0;
     $15 = 3484 + ($12 << 2) | 0;
     $16 = HEAP32[$15 >> 2] | 0;
     $17 = $n + -1 | 0;
     $18 = ($17 | 0) == 0;
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;
      $c$05 = $16;
      $s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;
     $c$05 = $1;
     $s$06 = $src;
     label = 9;
    }
    L11 : do {
     if ((label | 0) == 9) {
      $19 = HEAP8[$s$06 >> 0] | 0;
      $20 = $19 & 255;
      $21 = $20 >>> 3;
      $22 = $21 + -16 | 0;
      $23 = $c$05 >> 26;
      $24 = $21 + $23 | 0;
      $25 = $22 | $24;
      $26 = $25 >>> 0 > 7;
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;
       $30 = $19;
       $c$1 = $c$05;
       $s$1 = $s$06;
      }
      while (1) {
       $27 = $c$1 << 6;
       $28 = $s$1 + 1 | 0;
       $29 = $30 & 255;
       $31 = $29 + -128 | 0;
       $32 = $31 | $27;
       $33 = $$1 + -1 | 0;
       $34 = ($32 | 0) < 0;
       if (!$34) {
        $$lcssa = $32;
        $$lcssa35 = $33;
        break;
       }
       $36 = ($33 | 0) == 0;
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28 >> 0] | 0;
       $38 = $37 & -64;
       $39 = $38 << 24 >> 24 == -128;
       if ($39) {
        $$1 = $33;
        $30 = $37;
        $c$1 = $32;
        $s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st >> 2] = 0;
      HEAP32[$dummy$wc >> 2] = $$lcssa;
      $35 = $n - $$lcssa35 | 0;
      $$0 = $35;
      break L1;
     }
    } while (0);
    HEAP32[$$st >> 2] = $c$2;
    $$0 = -2;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0;
  $40 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$40 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexerC2ERKS9_($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $25 = $this;
 $26 = $s;
 $27 = $25;
 HEAP32[$27 >> 2] = 0;
 $28 = $27 + 4 | 0;
 $29 = $26;
 __THREW__ = 0;
 invoke_vii(411, $28 | 0, $29 | 0), asyncState ? abort(-12) | 0 : 0;
 $30 = __THREW__;
 __THREW__ = 0;
 $31 = $30 & 1;
 if ($31) {
  $91 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $92 = tempRet0;
  ___clang_call_terminate($91), asyncState ? abort(-12) | 0 : 0;
 }
 $32 = $27 + 16 | 0;
 HEAP32[$32 >> 2] = 0;
 $33 = $27 + 20 | 0;
 HEAP32[$33 >> 2] = 0;
 $34 = $27 + 24 | 0;
 HEAP32[$34 >> 2] = 0;
 $35 = $27 + 28 | 0;
 HEAP32[$35 >> 2] = 0;
 $36 = $27 + 32 | 0;
 HEAP32[$36 >> 2] = 0;
 $37 = $26;
 $24 = $37;
 $38 = $24;
 $23 = $38;
 $39 = $23;
 $22 = $39;
 $40 = $22;
 $21 = $40;
 $41 = $21;
 $20 = $41;
 $42 = $20;
 $19 = $42;
 $43 = $19;
 $44 = HEAP8[$43 >> 0] | 0;
 $45 = $44 & 255;
 $46 = $45 & 1;
 $47 = ($46 | 0) != 0;
 if ($47) {
  $13 = $40;
  $48 = $13;
  $12 = $48;
  $49 = $12;
  $11 = $49;
  $50 = $11;
  $51 = $50 + 8 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $59 = $52;
 } else {
  $18 = $40;
  $53 = $18;
  $17 = $53;
  $54 = $17;
  $16 = $54;
  $55 = $16;
  $56 = $55 + 1 | 0;
  $15 = $56;
  $57 = $15;
  $14 = $57;
  $58 = $14;
  $59 = $58;
 }
 $10 = $59;
 $60 = $10;
 $61 = $27 + 16 | 0;
 HEAP32[$61 >> 2] = $60;
 $62 = $27 + 16 | 0;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = $27 + 28 | 0;
 HEAP32[$64 >> 2] = $63;
 $65 = $27 + 20 | 0;
 HEAP32[$65 >> 2] = $63;
 $66 = $27 + 16 | 0;
 $67 = HEAP32[$66 >> 2] | 0;
 $68 = $26;
 $9 = $68;
 $69 = $9;
 $8 = $69;
 $70 = $8;
 $7 = $70;
 $71 = $7;
 $6 = $71;
 $72 = $6;
 $73 = HEAP8[$72 >> 0] | 0;
 $74 = $73 & 255;
 $75 = $74 & 1;
 $76 = ($75 | 0) != 0;
 if ($76) {
  $2 = $69;
  $77 = $2;
  $1 = $77;
  $78 = $1;
  $0 = $78;
  $79 = $0;
  $80 = $79 + 4 | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  $89 = $81;
  $88 = $67 + $89 | 0;
  $90 = $27 + 32 | 0;
  HEAP32[$90 >> 2] = $88;
  STACKTOP = sp;
  return;
 } else {
  $5 = $69;
  $82 = $5;
  $4 = $82;
  $83 = $4;
  $3 = $83;
  $84 = $3;
  $85 = HEAP8[$84 >> 0] | 0;
  $86 = $85 & 255;
  $87 = $86 >> 1;
  $89 = $87;
  $88 = $67 + $89 | 0;
  $90 = $27 + 32 | 0;
  HEAP32[$90 >> 2] = $88;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $__sp, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__sp = $__sp | 0;
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = sp + 8 | 0;
 $6 = sp;
 $9 = sp + 16 | 0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = $10 + 64 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = ($12 | 0) == (0 | 0);
 if (!$13) {
  $14 = HEAP32[$10 >> 2] | 0;
  $15 = $14 + 24 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = (tempInt = FUNCTION_TABLE_ii[$16 & 1023]($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $18 = ($17 | 0) != 0;
  if (!$18) {
   $35 = $10 + 64 | 0;
   $36 = HEAP32[$35 >> 2] | 0;
   $1 = $__sp;
   $37 = $1;
   $38 = $37 + 8 | 0;
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40 >> 2] | 0;
   $42 = $39 + 4 | 0;
   $43 = $42;
   $44 = HEAP32[$43 >> 2] | 0;
   $45 = (tempInt = ___fseeko($36, $41, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $46 = ($45 | 0) != 0;
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48 >> 2] = -1;
    $49 = $47 + 4 | 0;
    $50 = $49;
    HEAP32[$50 >> 2] = -1;
    $51 = $2;
    HEAP32[$51 >> 2] = 0 | 0;
    HEAP32[$51 + 4 >> 2] = 0 | 0;
    $52 = $51 + 8 | 0;
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $53 + 4 | 0;
    $57 = $56;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60 >> 2] = $55;
    $61 = $59 + 4 | 0;
    $62 = $61;
    HEAP32[$62 >> 2] = $58;
    STACKTOP = sp;
    return;
   } else {
    $63 = $10 + 72 | 0;
    $4 = $__sp;
    $64 = $4;
    HEAP32[$9 >> 2] = HEAP32[$64 >> 2] | 0;
    HEAP32[$9 + 4 >> 2] = HEAP32[$64 + 4 >> 2] | 0;
    HEAP32[$63 >> 2] = HEAP32[$9 >> 2] | 0;
    HEAP32[$63 + 4 >> 2] = HEAP32[$9 + 4 >> 2] | 0;
    HEAP32[$agg$result >> 2] = HEAP32[$__sp >> 2] | 0;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$__sp + 4 >> 2] | 0;
    HEAP32[$agg$result + 8 >> 2] = HEAP32[$__sp + 8 >> 2] | 0;
    HEAP32[$agg$result + 12 >> 2] = HEAP32[$__sp + 12 >> 2] | 0;
    STACKTOP = sp;
    return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20 >> 2] = -1;
 $21 = $19 + 4 | 0;
 $22 = $21;
 HEAP32[$22 >> 2] = -1;
 $23 = $5;
 HEAP32[$23 >> 2] = 0 | 0;
 HEAP32[$23 + 4 >> 2] = 0 | 0;
 $24 = $23 + 8 | 0;
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $25 + 4 | 0;
 $29 = $28;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32 >> 2] = $27;
 $33 = $31 + 4 | 0;
 $34 = $33;
 HEAP32[$34 >> 2] = $30;
 STACKTOP = sp;
 return;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $1 = $0 + -8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2;
 $4 = $static_ptr + $3 | 0;
 $5 = $0 + -4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 $7 = $info + 4 | 0;
 HEAP32[$7 >> 2] = $static_ptr;
 $8 = $info + 8 | 0;
 HEAP32[$8 >> 2] = $static_type;
 $9 = $info + 12 | 0;
 HEAP32[$9 >> 2] = $src2dst_offset;
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $10;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$10 + 36 >> 1] = 0 | 0;
 HEAP8[$10 + 38 >> 0] = 0 | 0;
 L1 : do {
  if ($16) {
   $17 = $info + 48 | 0;
   HEAP32[$17 >> 2] = 1;
   $18 = HEAP32[$dst_type >> 2] | 0;
   $19 = $18 + 20 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type, $info, $4, $4, 1, 0), asyncState ? abort(-12) | 0 : 0;
   $21 = HEAP32[$12 >> 2] | 0;
   $22 = ($21 | 0) == 1;
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = $info + 36 | 0;
   $24 = HEAP32[$6 >> 2] | 0;
   $25 = $24 + 24 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6, $info, $4, 1, 0), asyncState ? abort(-12) | 0 : 0;
   $27 = HEAP32[$23 >> 2] | 0;
   switch ($27 | 0) {
   case 0:
    {
     $28 = HEAP32[$15 >> 2] | 0;
     $29 = ($28 | 0) == 1;
     $30 = HEAP32[$13 >> 2] | 0;
     $31 = ($30 | 0) == 1;
     $or$cond = $29 & $31;
     $32 = HEAP32[$14 >> 2] | 0;
     $33 = ($32 | 0) == 1;
     $or$cond3 = $or$cond & $33;
     $34 = HEAP32[$11 >> 2] | 0;
     $$8 = $or$cond3 ? $34 : 0;
     $dst_ptr$0 = $$8;
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $dst_ptr$0 = 0;
     break L1;
    }
   }
   $35 = HEAP32[$12 >> 2] | 0;
   $36 = ($35 | 0) == 1;
   if (!$36) {
    $37 = HEAP32[$15 >> 2] | 0;
    $38 = ($37 | 0) == 0;
    $39 = HEAP32[$13 >> 2] | 0;
    $40 = ($39 | 0) == 1;
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14 >> 2] | 0;
    $42 = ($41 | 0) == 1;
    $or$cond7 = $or$cond5 & $42;
    if (!$or$cond7) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10 >> 2] | 0;
   $dst_ptr$0 = $43;
  }
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 __THREW__ = 0;
 $2 = (tempInt = invoke_ii(477, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (tempInt = invoke_iiii(540, 0 | 0, 0 | 0, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = __THREW__;
   __THREW__ = 0;
   $7 = $6 & 1;
   if ($7) {
    $13 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $14 = tempRet0;
    $15 = ($2 | 0) == (0 | 0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (tempInt = invoke_ii(477, $2 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $16 = __THREW__;
    __THREW__ = 0;
    $17 = $16 & 1;
    if (!$17) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $19 = tempRet0;
    ___clang_call_terminate($18), asyncState ? abort(-12) | 0 : 0;
   }
   $8 = ($2 | 0) == (0 | 0);
   if (!$8) {
    __THREW__ = 0;
    (tempInt = invoke_ii(477, $2 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $9 = __THREW__;
    __THREW__ = 0;
    $10 = $9 & 1;
    if ($10) {
     $11 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $12 = tempRet0;
     ___clang_call_terminate($11), asyncState ? abort(-12) | 0 : 0;
    }
   }
   $20 = ($5 | 0) == 0;
   if ($20) {
    $21 = HEAP32[$0 >> 2] | 0;
    $22 = ($21 | 0) == (0 | 0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (tempInt = invoke_ii(477, $21 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $24 = __THREW__;
     __THREW__ = 0;
     $25 = $24 & 1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23 | 0) == (0 | 0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (tempInt = invoke_ii(477, $23 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $27 = __THREW__;
      __THREW__ = 0;
      $28 = $27 & 1;
      if ($28) {
       $29 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $30 = tempRet0;
       ___clang_call_terminate($29), asyncState ? abort(-12) | 0 : 0;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return $$0 | 0;
  }
 } while (0);
 if ((label | 0) == 16) {
  $31 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D), asyncState ? abort(-12) | 0 : 0;
 return 0 | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) != 0;
 $4 = $3 & 1;
 $5 = $len - $4 | 0;
 HEAP32[$0 >> 2] = $5;
 $6 = $iov + 8 | 0;
 $7 = $f + 44 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $8;
 $9 = $iov + 12 | 0;
 HEAP32[$9 >> 2] = $2;
 $10 = HEAP32[3440 >> 2] | 0;
 $11 = ($10 | 0) == (0 | 0);
 if ($11) {
  $16 = $f + 60 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  HEAP32[$vararg_buffer3 >> 2] = $17;
  $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
  HEAP32[$vararg_ptr6 >> 2] = $iov;
  $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
  HEAP32[$vararg_ptr7 >> 2] = 2;
  $18 = (tempInt = ___syscall145(145, $vararg_buffer3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $19 = (tempInt = ___syscall_ret($18) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push(453 | 0, $f | 0), asyncState ? abort(-12) | 0 : 0;
  $12 = $f + 60 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $13;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $iov;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = 2;
  $14 = (tempInt = ___syscall145(145, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $15 = (tempInt = ___syscall_ret($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  _pthread_cleanup_pop(0), asyncState ? abort(-12) | 0 : 0;
  $cnt$0 = $15;
 }
 $20 = ($cnt$0 | 0) < 1;
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f >> 2] | 0;
  $24 = $23 | $22;
  HEAP32[$f >> 2] = $24;
  $25 = $f + 8 | 0;
  HEAP32[$25 >> 2] = 0;
  $26 = $f + 4 | 0;
  HEAP32[$26 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  $28 = $cnt$0 >>> 0 > $27 >>> 0;
  if ($28) {
   $29 = $cnt$0 - $27 | 0;
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $32 = $30;
   $33 = $32 + $29 | 0;
   $34 = $f + 8 | 0;
   HEAP32[$34 >> 2] = $33;
   $35 = HEAP32[$1 >> 2] | 0;
   $36 = ($35 | 0) == 0;
   if ($36) {
    $$0 = $len;
   } else {
    $37 = $32 + 1 | 0;
    HEAP32[$31 >> 2] = $37;
    $38 = HEAP8[$32 >> 0] | 0;
    $39 = $len + -1 | 0;
    $40 = $buf + $39 | 0;
    HEAP8[$40 >> 0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$0115 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$016 = 0, $nbytes$1 = 0, $nwchar_t$017 = 0, $or$cond = 0, $or$cond14 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = $this + 8 | 0;
 $2 = ($mx | 0) == 0;
 $3 = ($frm | 0) == ($frm_end | 0);
 $or$cond14 = $3 | $2;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($or$cond14) {
   $nbytes$0$lcssa = 0;
  } else {
   $$0115 = $frm;
   $nbytes$016 = 0;
   $nwchar_t$017 = 0;
   while (1) {
    $4 = $$0115;
    $5 = $0 - $4 | 0;
    $6 = HEAP32[$1 >> 2] | 0;
    $7 = (tempInt = _uselocale($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    __THREW__ = 0;
    $8 = (tempInt = invoke_iiii(541, $$0115 | 0, $5 | 0, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $9 = __THREW__;
    __THREW__ = 0;
    $10 = $9 & 1;
    if ($10) {
     $$lcssa = $7;
     break;
    }
    $11 = ($7 | 0) == (0 | 0);
    if (!$11) {
     __THREW__ = 0;
     (tempInt = invoke_ii(477, $7 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $12 = __THREW__;
     __THREW__ = 0;
     $13 = $12 & 1;
     if ($13) {
      label = 5;
      break;
     }
    }
    switch ($8 | 0) {
    case -2:
    case -1:
     {
      $nbytes$0$lcssa = $nbytes$016;
      break L1;
      break;
     }
    case 0:
     {
      $23 = $$0115 + 1 | 0;
      $$1 = $23;
      $$pn = 1;
      break;
     }
    default:
     {
      $24 = $$0115 + $8 | 0;
      $$1 = $24;
      $$pn = $8;
     }
    }
    $nbytes$1 = $$pn + $nbytes$016 | 0;
    $25 = $nwchar_t$017 + 1 | 0;
    $26 = $25 >>> 0 >= $mx >>> 0;
    $27 = ($$1 | 0) == ($frm_end | 0);
    $or$cond = $27 | $26;
    if ($or$cond) {
     $nbytes$0$lcssa = $nbytes$1;
     break L1;
    } else {
     $$0115 = $$1;
     $nbytes$016 = $nbytes$1;
     $nwchar_t$017 = $25;
    }
   }
   if ((label | 0) == 5) {
    $14 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = tempRet0;
    ___clang_call_terminate($14), asyncState ? abort(-12) | 0 : 0;
   }
   $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $17 = tempRet0;
   $18 = ($$lcssa | 0) == (0 | 0);
   if (!$18) {
    __THREW__ = 0;
    (tempInt = invoke_ii(477, $$lcssa | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $19 = __THREW__;
    __THREW__ = 0;
    $20 = $19 & 1;
    if ($20) {
     $21 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = tempRet0;
     ___clang_call_terminate($21), asyncState ? abort(-12) | 0 : 0;
    }
   }
   ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 return $nbytes$0$lcssa | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 160 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 184 | 0;
 $__nar = sp + 164 | 0;
 $__o = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21622 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21622 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21622 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21622 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21622 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21622 + 5 >> 0] | 0;
 $2 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $3 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = $__nar + $3 | 0;
 $5 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $6;
 __THREW__ = 0;
 $7 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $21 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($21 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = HEAP32[$7 >> 2] | 0;
  $11 = $10 + 48 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  (tempInt = FUNCTION_TABLE_iiiii[$12 & 1023]($7, $__nar, $4, $__o) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $13 = $__o + ($3 << 2) | 0;
  $14 = ($5 | 0) == ($4 | 0);
  $15 = $__nar;
  $16 = $5;
  $17 = $16 - $15 | 0;
  $18 = $__o + ($17 << 2) | 0;
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $19;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $20 = (tempInt = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $__op$0, $13, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 12 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 76 | 0;
 $__nar = sp + 56 | 0;
 $__o = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21622 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21622 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21622 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21622 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21622 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21622 + 5 >> 0] | 0;
 $2 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $3 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = $__nar + $3 | 0;
 $5 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $6;
 __THREW__ = 0;
 $7 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $21 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($21 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = HEAP32[$7 >> 2] | 0;
  $11 = $10 + 32 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  (tempInt = FUNCTION_TABLE_iiiii[$12 & 1023]($7, $__nar, $4, $__o) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $13 = $__o + $3 | 0;
  $14 = ($5 | 0) == ($4 | 0);
  $15 = $__nar;
  $16 = $5;
  $17 = $16 - $15 | 0;
  $18 = $__o + $17 | 0;
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $19;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $20 = (tempInt = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $__op$0, $13, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
 HEAP32[$ap2 >> 2] = $vacopy_currentptr;
 $0 = (tempInt = _printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) < 0;
 if ($1) {
  $$0 = -1;
 } else {
  $2 = $f + 76 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $4 = ($3 | 0) > -1;
  if ($4) {
   $5 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  $8 = $f + 74 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $10 = $9 << 24 >> 24 < 1;
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f >> 2] = $11;
  }
  $12 = $f + 48 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = ($13 | 0) == 0;
  if ($14) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $20 = $internal_buf + 80 | 0;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $20;
   $22 = (tempInt = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $23 = ($17 | 0) == (0 | 0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = $f + 36 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    (tempInt = FUNCTION_TABLE_iiii[$25 & 1023]($f, 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $26 = HEAP32[$19 >> 2] | 0;
    $27 = ($26 | 0) == (0 | 0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (tempInt = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $ret$1 = $15;
  }
  $28 = HEAP32[$f >> 2] | 0;
  $29 = $28 & 32;
  $30 = ($29 | 0) == 0;
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f >> 2] = $31;
  $32 = ($33 | 0) == 0;
  if (!$32) {
   ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 104 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 120 | 0;
 $__nar = sp + 108 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21608 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21608 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21608 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21608 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21608 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21608 + 5 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2, 21614, 0, $4), asyncState ? abort(-12) | 0 : 0;
 $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $6 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = $__nar + $6 | 0;
 $8 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(472, $__nar | 0, $8 | 0, $7 | 0, $__o | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
 $10 = __THREW__;
 __THREW__ = 0;
 $11 = $10 & 1;
 if ($11) {
  $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $17 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = HEAP32[$__op >> 2] | 0;
  $14 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $15 = (tempInt = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $13, $14, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 104 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 120 | 0;
 $__nar = sp + 108 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21608 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21608 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21608 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21608 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21608 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21608 + 5 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2, 21614, 1, $4), asyncState ? abort(-12) | 0 : 0;
 $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $6 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = $__nar + $6 | 0;
 $8 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(472, $__nar | 0, $8 | 0, $7 | 0, $__o | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
 $10 = __THREW__;
 __THREW__ = 0;
 $11 = $10 & 1;
 if ($11) {
  $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $17 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = HEAP32[$__op >> 2] | 0;
  $14 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $15 = (tempInt = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $13, $14, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = $11 + 64 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = ($13 | 0) != (0 | 0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = $15 + 8 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $6 = $11;
   $18 = $6;
   $19 = $18 + 12 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = $17 >>> 0 < $20 >>> 0;
   if ($21) {
    $22 = $10;
    $23 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $24 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($22, $23) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = $25 + 12 | 0;
     $28 = HEAP32[$27 >> 2] | 0;
     $29 = $28 + $26 | 0;
     HEAP32[$27 >> 2] = $29;
     $30 = $10;
     $31 = (tempInt = __ZNSt3__111char_traitsIcE7not_eofEi($30) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;
     return $56 | 0;
    }
    $32 = $11 + 88 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 & 16;
    $35 = ($34 | 0) != 0;
    if (!$35) {
     $36 = $10;
     $37 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($36) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $0 = $11;
     $38 = $0;
     $39 = $38 + 12 | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     $41 = $40 + -1 | 0;
     $42 = HEAP8[$41 >> 0] | 0;
     $43 = (tempInt = __ZNSt3__111char_traitsIcE2eqEcc($37, $42) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     if (!$43) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = $44 + 12 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 + $45 | 0;
    HEAP32[$46 >> 2] = $48;
    $49 = $10;
    $50 = (tempInt = __ZNSt3__111char_traitsIcE12to_char_typeEi($49) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = $11;
    $51 = $5;
    $52 = $51 + 12 | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    HEAP8[$53 >> 0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;
    return $56 | 0;
   }
  }
 } while (0);
 $55 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;
 return $56 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 20 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 60 | 0;
 $__nar = sp + 48 | 0;
 $__o = sp + 24 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21608 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21608 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21608 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21608 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21608 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21608 + 5 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2, 21614, 0, $4), asyncState ? abort(-12) | 0 : 0;
 $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $6 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = $__nar + $6 | 0;
 $8 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(466, $__nar | 0, $8 | 0, $7 | 0, $__o | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
 $10 = __THREW__;
 __THREW__ = 0;
 $11 = $10 & 1;
 if ($11) {
  $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $17 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = HEAP32[$__op >> 2] | 0;
  $14 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $15 = (tempInt = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $13, $14, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 20 | 0;
 $vararg_buffer = sp;
 $__fmt = sp + 60 | 0;
 $__nar = sp + 48 | 0;
 $__o = sp + 24 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[21608 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21608 + 1 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21608 + 2 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21608 + 3 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21608 + 4 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21608 + 5 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2, 21614, 1, $4), asyncState ? abort(-12) | 0 : 0;
 $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 $6 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = $__nar + $6 | 0;
 $8 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(466, $__nar | 0, $8 | 0, $7 | 0, $__o | 0, $__op | 0, $__oe | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
 $10 = __THREW__;
 __THREW__ = 0;
 $11 = $10 & 1;
 if ($11) {
  $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $17 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = HEAP32[$__op >> 2] | 0;
  $14 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  $15 = (tempInt = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $13, $14, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__loc = sp;
 $0 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = $4 + 48 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  __THREW__ = 0;
  (tempInt = invoke_iiiii($6 | 0, $1 | 0, 20219 | 0, 20251 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  $8 = $7 & 1;
  if (!$8) {
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii(398, $__loc | 0, 9064 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if (!$11) {
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + 12 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    __THREW__ = 0;
    $15 = (tempInt = invoke_ii($14 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $16 = __THREW__;
    __THREW__ = 0;
    $17 = $16 & 1;
    if (!$17) {
     HEAP32[$__decimal_point >> 2] = $15;
     $18 = HEAP32[$9 >> 2] | 0;
     $19 = $18 + 16 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     $21 = (tempInt = invoke_ii($20 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      HEAP32[$__thousands_sep >> 2] = $21;
      $24 = HEAP32[$9 >> 2] | 0;
      $25 = $24 + 20 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      __THREW__ = 0;
      invoke_vii($26 | 0, $agg$result | 0, $9 | 0), asyncState ? abort(-12) | 0 : 0;
      $27 = __THREW__;
      __THREW__ = 0;
      $28 = $27 & 1;
      if (!$28) {
       (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       STACKTOP = sp;
       return;
      }
     }
    }
   }
  }
 }
 $29 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $30 = tempRet0;
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($29 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__loc = sp;
 $0 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = $4 + 32 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  __THREW__ = 0;
  (tempInt = invoke_iiiii($6 | 0, $1 | 0, 20219 | 0, 20251 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  $8 = $7 & 1;
  if (!$8) {
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii(398, $__loc | 0, 9056 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if (!$11) {
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + 12 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    __THREW__ = 0;
    $15 = (tempInt = invoke_ii($14 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $16 = __THREW__;
    __THREW__ = 0;
    $17 = $16 & 1;
    if (!$17) {
     HEAP8[$__decimal_point >> 0] = $15;
     $18 = HEAP32[$9 >> 2] | 0;
     $19 = $18 + 16 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     $21 = (tempInt = invoke_ii($20 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $22 = __THREW__;
     __THREW__ = 0;
     $23 = $22 & 1;
     if (!$23) {
      HEAP8[$__thousands_sep >> 0] = $21;
      $24 = HEAP32[$9 >> 2] | 0;
      $25 = $24 + 20 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      __THREW__ = 0;
      invoke_vii($26 | 0, $agg$result | 0, $9 | 0), asyncState ? abort(-12) | 0 : 0;
      $27 = __THREW__;
      __THREW__ = 0;
      $28 = $27 & 1;
      if (!$28) {
       (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       STACKTOP = sp;
       return;
      }
     }
    }
   }
  }
 }
 $29 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $30 = tempRet0;
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($29 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 204 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 208 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5 >> 2] = 37;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8, 21616, 0, $10), asyncState ? abort(-12) | 0 : 0;
 $11 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13 >> 2] = $0;
 $14 = $12 + 4 | 0;
 $15 = $14;
 HEAP32[$15 >> 2] = $1;
 $16 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $17 = $__nar + $16 | 0;
 $18 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$2 >> 2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(472, $__nar | 0, $18 | 0, $17 | 0, $__o | 0, $__op | 0, $__oe | 0, $2 | 0), asyncState ? abort(-12) | 0 : 0;
 $20 = __THREW__;
 __THREW__ = 0;
 $21 = $20 & 1;
 if ($21) {
  $26 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $27 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($26 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = HEAP32[$__s >> 2] | 0;
  HEAP32[$3 >> 2] = $22;
  $23 = HEAP32[$__op >> 2] | 0;
  $24 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2] | 0;
  $25 = (tempInt = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $23, $24, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 196 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 200 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5 >> 2] = 37;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8, 21616, 1, $10), asyncState ? abort(-12) | 0 : 0;
 $11 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13 >> 2] = $0;
 $14 = $12 + 4 | 0;
 $15 = $14;
 HEAP32[$15 >> 2] = $1;
 $16 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $17 = $__nar + $16 | 0;
 $18 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$2 >> 2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(472, $__nar | 0, $18 | 0, $17 | 0, $__o | 0, $__op | 0, $__oe | 0, $2 | 0), asyncState ? abort(-12) | 0 : 0;
 $20 = __THREW__;
 __THREW__ = 0;
 $21 = $20 & 1;
 if ($21) {
  $26 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $27 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($26 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = HEAP32[$__s >> 2] | 0;
  HEAP32[$3 >> 2] = $22;
  $23 = HEAP32[$__op >> 2] | 0;
  $24 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2] | 0;
  $25 = (tempInt = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $23, $24, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 79 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5 >> 2] = 37;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8, 21616, 0, $10), asyncState ? abort(-12) | 0 : 0;
 $11 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13 >> 2] = $0;
 $14 = $12 + 4 | 0;
 $15 = $14;
 HEAP32[$15 >> 2] = $1;
 $16 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $17 = $__nar + $16 | 0;
 $18 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$2 >> 2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(466, $__nar | 0, $18 | 0, $17 | 0, $__o | 0, $__op | 0, $__oe | 0, $2 | 0), asyncState ? abort(-12) | 0 : 0;
 $20 = __THREW__;
 __THREW__ = 0;
 $21 = $20 & 1;
 if ($21) {
  $26 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $27 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($26 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = HEAP32[$__s >> 2] | 0;
  HEAP32[$3 >> 2] = $22;
  $23 = HEAP32[$__op >> 2] | 0;
  $24 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2] | 0;
  $25 = (tempInt = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $23, $24, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 78 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5 >> 2] = 37;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8, 21616, 1, $10), asyncState ? abort(-12) | 0 : 0;
 $11 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13 >> 2] = $0;
 $14 = $12 + 4 | 0;
 $15 = $14;
 HEAP32[$15 >> 2] = $1;
 $16 = (tempInt = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $vararg_buffer) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $17 = $__nar + $16 | 0;
 $18 = (tempInt = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$2 >> 2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(466, $__nar | 0, $18 | 0, $17 | 0, $__o | 0, $__op | 0, $__oe | 0, $2 | 0), asyncState ? abort(-12) | 0 : 0;
 $20 = __THREW__;
 __THREW__ = 0;
 $21 = $20 & 1;
 if ($21) {
  $26 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $27 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($26 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($19) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = HEAP32[$__s >> 2] | 0;
  HEAP32[$3 >> 2] = $22;
  $23 = HEAP32[$__op >> 2] | 0;
  $24 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2] | 0;
  $25 = (tempInt = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $23, $24, $__iob, $__fl) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $$sum = $4 + 24 | 0;
 $5 = $1 + $$sum | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = ($6 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if (!$7) {
   $$sum1 = $4 + 16 | 0;
   $8 = $1 + $$sum1 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = ($9 | 0) == 0;
   if ($10) {
    $$sum2 = $4 + 4 | 0;
    $11 = $1 + $$sum2 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 & 8192;
    $14 = ($13 | 0) == 0;
    if (!$14) {
     $15 = (tempInt = __ZSt18uncaught_exceptionv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     if (!$15) {
      $16 = HEAP32[$0 >> 2] | 0;
      $17 = HEAP32[$16 >> 2] | 0;
      $18 = $17 + -12 | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $$sum3 = $19 + 24 | 0;
      $20 = $16 + $$sum3 | 0;
      $21 = HEAP32[$20 >> 2] | 0;
      $22 = HEAP32[$21 >> 2] | 0;
      $23 = $22 + 24 | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      __THREW__ = 0;
      $25 = (tempInt = invoke_ii($24 | 0, $21 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $26 = __THREW__;
      __THREW__ = 0;
      $27 = $26 & 1;
      if (!$27) {
       $28 = ($25 | 0) == -1;
       if (!$28) {
        break;
       }
       $29 = HEAP32[$0 >> 2] | 0;
       $30 = HEAP32[$29 >> 2] | 0;
       $31 = $30 + -12 | 0;
       $32 = HEAP32[$31 >> 2] | 0;
       $33 = $29 + $32 | 0;
       $$sum4 = $32 + 16 | 0;
       $34 = $29 + $$sum4 | 0;
       $35 = HEAP32[$34 >> 2] | 0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(394, $33 | 0, $36 | 0), asyncState ? abort(-12) | 0 : 0;
       $37 = __THREW__;
       __THREW__ = 0;
       $38 = $37 & 1;
       if (!$38) {
        break;
       }
      }
      $39 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $40 = tempRet0;
      (tempInt = ___cxa_begin_catch($39 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      __THREW__ = 0;
      invoke_v(409), asyncState ? abort(-12) | 0 : 0;
      $41 = __THREW__;
      __THREW__ = 0;
      $42 = $41 & 1;
      if ($42) {
       $43 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $44 = tempRet0;
       ___clang_call_terminate($43), asyncState ? abort(-12) | 0 : 0;
      }
     }
    }
   }
  }
 } while (0);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iterator9set_beginEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $2 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $8 = sp;
 $12 = sp + 32 | 0;
 $14 = sp + 24 | 0;
 $16 = sp + 16 | 0;
 $18 = sp + 8 | 0;
 $19 = sp + 4 | 0;
 $17 = $this;
 $20 = $17;
 $21 = HEAP32[$20 >> 2] | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 switch ($22 << 24 >> 24) {
 case 1:
  {
   $23 = $20 + 4 | 0;
   $24 = HEAP32[$20 >> 2] | 0;
   $25 = $24 + 8 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $15 = $26;
   $27 = $15;
   $13 = $27;
   $28 = $13;
   $11 = $28;
   $29 = $11;
   $30 = HEAP32[$29 >> 2] | 0;
   $9 = $12;
   $10 = $30;
   $31 = $9;
   $32 = $10;
   HEAP32[$31 >> 2] = $32;
   $33 = HEAP32[$12 >> 2] | 0;
   HEAP32[$16 >> 2] = $33;
   HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0;
   HEAP8[$8 + 1 >> 0] = HEAP8[$16 + 1 >> 0] | 0;
   HEAP8[$8 + 2 >> 0] = HEAP8[$16 + 2 >> 0] | 0;
   HEAP8[$8 + 3 >> 0] = HEAP8[$16 + 3 >> 0] | 0;
   $7 = $14;
   $34 = $7;
   HEAP32[$34 >> 2] = HEAP32[$8 >> 2] | 0;
   $35 = HEAP32[$14 >> 2] | 0;
   HEAP32[$18 >> 2] = $35;
   HEAP32[$23 >> 2] = HEAP32[$18 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $36 = $20 + 4 | 0;
   $37 = $36 + 4 | 0;
   $38 = HEAP32[$20 >> 2] | 0;
   $39 = $38 + 8 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   $6 = $40;
   $41 = $6;
   $42 = HEAP32[$41 >> 2] | 0;
   $3 = $41;
   $4 = $42;
   $43 = $4;
   $0 = $2;
   $1 = $43;
   $44 = $0;
   $45 = $1;
   HEAP32[$44 >> 2] = $45;
   $46 = HEAP32[$2 >> 2] | 0;
   HEAP32[$5 >> 2] = $46;
   $47 = HEAP32[$5 >> 2] | 0;
   HEAP32[$19 >> 2] = $47;
   HEAP32[$37 >> 2] = HEAP32[$19 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 0:
  {
   $48 = $20 + 4 | 0;
   $49 = $48 + 8 | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t7set_endEv($49), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $50 = $20 + 4 | 0;
   $51 = $50 + 8 | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t9set_beginEv($51), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $0 = (tempInt = ___cxa_get_globals_fast() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) == (0 | 0);
 if (!$1) {
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = ($2 | 0) == (0 | 0);
  if (!$3) {
   $4 = $2 + 80 | 0;
   $5 = $2 + 48 | 0;
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = $6 + 4 | 0;
   $10 = $9;
   $11 = HEAP32[$10 >> 2] | 0;
   $12 = $8 & -256;
   $13 = ($12 | 0) == 1126902528;
   $14 = ($11 | 0) == 1129074247;
   $15 = $13 & $14;
   if (!$15) {
    $36 = HEAP32[3436 >> 2] | 0;
    HEAP32[$vararg_buffer7 >> 2] = $36;
    _abort_message(16041, $vararg_buffer7), asyncState ? abort(-12) | 0 : 0;
   }
   $16 = ($8 | 0) == 1126902529;
   $17 = ($11 | 0) == 1129074247;
   $18 = $16 & $17;
   if ($18) {
    $19 = $2 + 44 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object >> 2] = $21;
   $22 = HEAP32[$2 >> 2] | 0;
   $23 = $22 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   $25 = HEAP32[136 >> 2] | 0;
   $26 = $25 + 16 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   $28 = (tempInt = FUNCTION_TABLE_iiii[$27 & 1023](136, $22, $thrown_object) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($28) {
    $29 = HEAP32[$thrown_object >> 2] | 0;
    $30 = HEAP32[3436 >> 2] | 0;
    $31 = HEAP32[$29 >> 2] | 0;
    $32 = $31 + 8 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = (tempInt = FUNCTION_TABLE_ii[$33 & 1023]($29) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$vararg_buffer >> 2] = $30;
    $vararg_ptr1 = $vararg_buffer + 4 | 0;
    HEAP32[$vararg_ptr1 >> 2] = $24;
    $vararg_ptr2 = $vararg_buffer + 8 | 0;
    HEAP32[$vararg_ptr2 >> 2] = $34;
    _abort_message(15955, $vararg_buffer), asyncState ? abort(-12) | 0 : 0;
   } else {
    $35 = HEAP32[3436 >> 2] | 0;
    HEAP32[$vararg_buffer3 >> 2] = $35;
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    HEAP32[$vararg_ptr6 >> 2] = $24;
    _abort_message(16e3, $vararg_buffer3), asyncState ? abort(-12) | 0 : 0;
   }
  }
 }
 _abort_message(16079, $vararg_buffer10), asyncState ? abort(-12) | 0 : 0;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $dummy = sp;
 $0 = ($src | 0) == (0 | 0);
 L1 : do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n | 0) == 0;
   do {
    if (!$1) {
     $2 = ($wc | 0) == (0 | 0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src >> 0] | 0;
     $4 = $3 & 255;
     $5 = $3 << 24 >> 24 > -1;
     if ($5) {
      HEAP32[$dummy$wc >> 2] = $4;
      $6 = $3 << 24 >> 24 != 0;
      $7 = $6 & 1;
      $$0 = $7;
      break L1;
     }
     $8 = $4 + -194 | 0;
     $9 = $8 >>> 0 > 50;
     if (!$9) {
      $10 = $src + 1 | 0;
      $11 = 3484 + ($8 << 2) | 0;
      $12 = HEAP32[$11 >> 2] | 0;
      $13 = $n >>> 0 < 4;
      if ($13) {
       $14 = $n * 6 | 0;
       $15 = $14 + -6 | 0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17 | 0) == 0;
       if (!$18) {
        break;
       }
      }
      $19 = HEAP8[$10 >> 0] | 0;
      $20 = $19 & 255;
      $21 = $20 >>> 3;
      $22 = $21 + -16 | 0;
      $23 = $12 >> 26;
      $24 = $21 + $23 | 0;
      $25 = $22 | $24;
      $26 = $25 >>> 0 > 7;
      if (!$26) {
       $27 = $12 << 6;
       $28 = $20 + -128 | 0;
       $29 = $28 | $27;
       $30 = ($29 | 0) < 0;
       if (!$30) {
        HEAP32[$dummy$wc >> 2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = $src + 2 | 0;
       $32 = HEAP8[$31 >> 0] | 0;
       $33 = $32 & 255;
       $34 = $33 & 192;
       $35 = ($34 | 0) == 128;
       if ($35) {
        $36 = $29 << 6;
        $37 = $33 + -128 | 0;
        $38 = $37 | $36;
        $39 = ($38 | 0) < 0;
        if (!$39) {
         HEAP32[$dummy$wc >> 2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = $src + 3 | 0;
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = $41 & 255;
        $43 = $42 & 192;
        $44 = ($43 | 0) == 128;
        if ($44) {
         $45 = $38 << 6;
         $46 = $42 + -128 | 0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc >> 2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while (0);
   $48 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$48 >> 2] = 84;
   $$0 = -1;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__114__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EERNS8_ISB_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $18 = sp + 8 | 0;
 $21 = sp + 133 | 0;
 $28 = sp;
 $31 = sp + 132 | 0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = $35 + 4 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 HEAP8[$28 >> 0] = HEAP8[$31 >> 0] | 0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while (1) {
  $41 = $27;
  $42 = $40 + 8 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  $44 = ($41 | 0) != ($43 | 0);
  if (!$44) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = $45 + 12 | 0;
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = $48 + 4 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  $51 = $40 + 8 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $53 = $52 + -16 | 0;
  HEAP32[$51 >> 2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  HEAP8[$18 >> 0] = HEAP8[$21 >> 0] | 0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($59), asyncState ? abort(-12) | 0 : 0;
 }
 $60 = HEAP32[$34 >> 2] | 0;
 $61 = ($60 | 0) != (0 | 0);
 if (!$61) {
  STACKTOP = sp;
  return;
 }
 $13 = $34;
 $62 = $13;
 $63 = $62 + 12 | 0;
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = $65 + 4 | 0;
 $67 = HEAP32[$66 >> 2] | 0;
 $68 = HEAP32[$34 >> 2] | 0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = $70 + 12 | 0;
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73 >> 2] | 0;
 $75 = HEAP32[$69 >> 2] | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 16 & -1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = _uselocale($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iiii(537, $tmp | 0, 0, $st | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $11 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = tempRet0;
  $13 = ($2 | 0) == (0 | 0);
  if (!$13) {
   __THREW__ = 0;
   (tempInt = invoke_ii(477, $2 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $14 = __THREW__;
   __THREW__ = 0;
   $15 = $14 & 1;
   if ($15) {
    $16 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $17 = tempRet0;
    ___clang_call_terminate($16), asyncState ? abort(-12) | 0 : 0;
   }
  }
  ___resumeException($11 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $6 = ($2 | 0) == (0 | 0);
 if (!$6) {
  __THREW__ = 0;
  (tempInt = invoke_ii(477, $2 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  $8 = $7 & 1;
  if ($8) {
   $9 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = tempRet0;
   ___clang_call_terminate($9), asyncState ? abort(-12) | 0 : 0;
  }
 }
 switch ($3 | 0) {
 case 0:
 case -1:
  {
   $$0 = 2;
   break;
  }
 default:
  {
   $18 = $3 + -1 | 0;
   $19 = HEAP32[$to_nxt >> 2] | 0;
   $20 = $to_end;
   $21 = $19;
   $22 = $20 - $21 | 0;
   $23 = $18 >>> 0 > $22 >>> 0;
   if ($23) {
    $$0 = 1;
   } else {
    $24 = ($18 | 0) == 0;
    if ($24) {
     $$0 = 0;
    } else {
     $n$02 = $18;
     $p$03 = $tmp;
     while (1) {
      $25 = $p$03 + 1 | 0;
      $26 = HEAP8[$p$03 >> 0] | 0;
      $27 = HEAP32[$to_nxt >> 2] | 0;
      $28 = $27 + 1 | 0;
      HEAP32[$to_nxt >> 2] = $28;
      HEAP8[$27 >> 0] = $26;
      $29 = $n$02 + -1 | 0;
      $30 = ($29 | 0) == 0;
      if ($30) {
       $$0 = 0;
       break;
      } else {
       $n$02 = $29;
       $p$03 = $25;
      }
     }
    }
   }
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iterator7set_endEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $2 = sp + 84 | 0;
 $5 = sp + 72 | 0;
 $8 = sp;
 $16 = sp + 32 | 0;
 $18 = sp + 24 | 0;
 $20 = sp + 16 | 0;
 $22 = sp + 8 | 0;
 $23 = sp + 4 | 0;
 $21 = $this;
 $24 = $21;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 switch ($26 << 24 >> 24) {
 case 1:
  {
   $27 = $24 + 4 | 0;
   $28 = HEAP32[$24 >> 2] | 0;
   $29 = $28 + 8 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $19 = $30;
   $31 = $19;
   $17 = $31;
   $32 = $17;
   $15 = $32;
   $33 = $15;
   $34 = $33 + 4 | 0;
   $14 = $34;
   $35 = $14;
   $13 = $35;
   $36 = $13;
   $12 = $36;
   $37 = $12;
   $11 = $37;
   $38 = $11;
   $9 = $16;
   $10 = $38;
   $39 = $9;
   $40 = $10;
   HEAP32[$39 >> 2] = $40;
   $41 = HEAP32[$16 >> 2] | 0;
   HEAP32[$20 >> 2] = $41;
   HEAP8[$8 >> 0] = HEAP8[$20 >> 0] | 0;
   HEAP8[$8 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
   HEAP8[$8 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
   HEAP8[$8 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
   $7 = $18;
   $42 = $7;
   HEAP32[$42 >> 2] = HEAP32[$8 >> 2] | 0;
   $43 = HEAP32[$18 >> 2] | 0;
   HEAP32[$22 >> 2] = $43;
   HEAP32[$27 >> 2] = HEAP32[$22 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $44 = $24 + 4 | 0;
   $45 = $44 + 4 | 0;
   $46 = HEAP32[$24 >> 2] | 0;
   $47 = $46 + 8 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   $6 = $48;
   $49 = $6;
   $50 = $49 + 4 | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   $3 = $49;
   $4 = $51;
   $52 = $4;
   $0 = $2;
   $1 = $52;
   $53 = $0;
   $54 = $1;
   HEAP32[$53 >> 2] = $54;
   $55 = HEAP32[$2 >> 2] | 0;
   HEAP32[$5 >> 2] = $55;
   $56 = HEAP32[$5 >> 2] | 0;
   HEAP32[$23 >> 2] = $56;
   HEAP32[$45 >> 2] = HEAP32[$23 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $57 = $24 + 4 | 0;
   $58 = $57 + 8 | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t7set_endEv($58), asyncState ? abort(-12) | 0 : 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $ec, $what_arg) {
 $agg$result = $agg$result | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp;
 $1 = HEAP32[$ec >> 2] | 0;
 $2 = ($1 | 0) == 0;
 do {
  if (!$2) {
   $3 = HEAP8[$what_arg >> 0] | 0;
   $4 = $3 & 1;
   $5 = $4 << 24 >> 24 == 0;
   if ($5) {
    $8 = $3 & 255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = $what_arg + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $11 = $7;
   }
   $10 = ($11 | 0) == 0;
   if ($10) {
    $17 = $1;
   } else {
    (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg, 22559) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$pre = HEAP32[$ec >> 2] | 0;
    $17 = $$pre;
   }
   $12 = $ec + 4 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   $15 = $14 + 24 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   FUNCTION_TABLE_viii[$16 & 1023]($0, $13, $17), asyncState ? abort(-12) | 0 : 0;
   $18 = HEAP8[$0 >> 0] | 0;
   $19 = $18 & 1;
   $20 = $19 << 24 >> 24 == 0;
   $21 = $0 + 8 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   $23 = $0 + 1 | 0;
   $24 = $20 ? $23 : $22;
   $25 = $0 + 4 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $27 = $18 & 255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (tempInt = invoke_iiii(365, $what_arg | 0, $24 | 0, $29 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $30 = __THREW__;
   __THREW__ = 0;
   $31 = $30 & 1;
   if ($31) {
    $32 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($32 | 0), asyncState ? abort(-12) | 0 : 0;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
    break;
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$what_arg >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$what_arg + 4 >> 2] | 0;
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$what_arg + 8 >> 2] | 0;
 HEAP32[$what_arg >> 2] = 0;
 $34 = $what_arg + 4 | 0;
 HEAP32[$34 >> 2] = 0;
 $35 = $what_arg + 8 | 0;
 HEAP32[$35 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $11 = sp + 48 | 0;
 $12 = $this;
 $13 = $12;
 $14 = $13 + 92 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $15 & 8;
 $17 = ($16 | 0) != 0;
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$11 >> 0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$11 >> 0] | 0;
  $66 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $66 | 0;
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = $18 + 24 | 0;
 HEAP32[$20 >> 2] = $19;
 $21 = $18 + 20 | 0;
 HEAP32[$21 >> 2] = $19;
 $22 = $10;
 $23 = $18 + 28 | 0;
 HEAP32[$23 >> 2] = $22;
 $24 = $13 + 98 | 0;
 $25 = HEAP8[$24 >> 0] | 0;
 $26 = $25 & 1;
 if ($26) {
  $27 = $13 + 32 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = $13 + 32 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  $31 = $13 + 52 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $30 + $32 | 0;
  $34 = $13 + 32 | 0;
  $35 = HEAP32[$34 >> 2] | 0;
  $36 = $13 + 52 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  $38 = $35 + $37 | 0;
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = $39 + 8 | 0;
  HEAP32[$41 >> 2] = $40;
  $42 = $2;
  $43 = $39 + 12 | 0;
  HEAP32[$43 >> 2] = $42;
  $44 = $3;
  $45 = $39 + 16 | 0;
  HEAP32[$45 >> 2] = $44;
 } else {
  $46 = $13 + 56 | 0;
  $47 = HEAP32[$46 >> 2] | 0;
  $48 = $13 + 56 | 0;
  $49 = HEAP32[$48 >> 2] | 0;
  $50 = $13 + 60 | 0;
  $51 = HEAP32[$50 >> 2] | 0;
  $52 = $49 + $51 | 0;
  $53 = $13 + 56 | 0;
  $54 = HEAP32[$53 >> 2] | 0;
  $55 = $13 + 60 | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  $57 = $54 + $56 | 0;
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = $58 + 8 | 0;
  HEAP32[$60 >> 2] = $59;
  $61 = $6;
  $62 = $58 + 12 | 0;
  HEAP32[$62 >> 2] = $61;
  $63 = $7;
  $64 = $58 + 16 | 0;
  HEAP32[$64 >> 2] = $63;
 }
 $65 = $13 + 92 | 0;
 HEAP32[$65 >> 2] = 8;
 $$expand_i1_val = 1;
 HEAP8[$11 >> 0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$11 >> 0] | 0;
 $66 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $66 | 0;
}

function ___cxx_global_array_dtor120($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12092), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12080), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12068), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12056), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12044), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12032), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12020), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12008), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11996), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11984), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11972), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11960), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11948), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11936), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11924), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11912), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11900), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11888), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11876), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11864), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11852), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11840), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11828), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11816), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___cxx_global_array_dtor117($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11800), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11788), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11776), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11764), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11752), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11740), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11728), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11716), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11704), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11692), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11680), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11668), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11656), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11644), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11632), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11620), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11608), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11596), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11584), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11572), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11560), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11548), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11536), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11524), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___cxx_global_array_dtor93($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10988), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10976), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10964), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10952), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10940), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10928), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10916), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10904), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10892), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10880), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10868), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10856), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10844), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10832), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10820), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10808), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10796), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10784), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10772), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10760), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10748), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10736), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10724), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10712), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___cxx_global_array_dtor69($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10696), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10684), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10672), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10660), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10648), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10636), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10624), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10612), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10600), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10588), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10576), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10564), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10552), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10540), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10528), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10516), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10504), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10492), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10480), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10468), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10456), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10444), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10432), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10420), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $5 = $0 & 255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = $this + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $8 = $4;
 }
 $7 = $8 >>> 0 < $__pos >>> 0;
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 if ($2) {
  $13 = 10;
  $17 = $0;
 } else {
  $9 = HEAP32[$this >> 2] | 0;
  $10 = $9 & -2;
  $phitmp$i = $10 + -1 | 0;
  $11 = $9 & 255;
  $13 = $phitmp$i;
  $17 = $11;
 }
 $12 = $13 - $8 | 0;
 $14 = $12 >>> 0 < $__n >>> 0;
 if ($14) {
  $39 = $8 + $__n | 0;
  $40 = $39 - $13 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $40, $8, $__pos, 0, $__n, $__s), asyncState ? abort(-12) | 0 : 0;
 } else {
  $15 = ($__n | 0) == 0;
  if (!$15) {
   $16 = $17 & 1;
   $18 = $16 << 24 >> 24 == 0;
   if ($18) {
    $21 = $this + 1 | 0;
    $23 = $21;
   } else {
    $19 = $this + 8 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $23 = $20;
   }
   $22 = ($8 | 0) == ($__pos | 0);
   if ($22) {
    $$pre = $23 + $__pos | 0;
    $$1 = $__s;
    $$pre$phiZ2D = $$pre;
   } else {
    $24 = $8 - $__pos | 0;
    $25 = $23 + $__pos | 0;
    $26 = $25 >>> 0 <= $__s >>> 0;
    $27 = $23 + $8 | 0;
    $28 = $27 >>> 0 > $__s >>> 0;
    $or$cond = $26 & $28;
    $29 = $__s + $__n | 0;
    $$0 = $or$cond ? $29 : $__s;
    $$sum = $__n + $__pos | 0;
    $30 = $23 + $$sum | 0;
    (tempInt = _memmove($30 | 0, $25 | 0, $24 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$1 = $$0;
    $$pre$phiZ2D = $25;
   }
   (tempInt = _memmove($$pre$phiZ2D | 0, $$1 | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $31 = $8 + $__n | 0;
   $32 = HEAP8[$this >> 0] | 0;
   $33 = $32 & 1;
   $34 = $33 << 24 >> 24 == 0;
   if ($34) {
    $36 = $31 << 1;
    $37 = $36 & 255;
    HEAP8[$this >> 0] = $37;
   } else {
    $35 = $this + 4 | 0;
    HEAP32[$35 >> 2] = $31;
   }
   $38 = $23 + $31 | 0;
   HEAP8[$38 >> 0] = 0;
  }
 }
 return $this | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this, $__s, $__mode) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__mode = $__mode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = $3 + 64 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) == (0 | 0);
 do {
  if ($6) {
   $__rt = $3;
   $7 = $2;
   $8 = $7 & -3;
   do {
    switch ($8 | 0) {
    case 48:
    case 16:
     {
      $__mdstr = 14968;
      break;
     }
    case 1:
    case 17:
     {
      $__mdstr = 14970;
      break;
     }
    case 8:
     {
      $__mdstr = 14972;
      break;
     }
    case 24:
     {
      $__mdstr = 14974;
      break;
     }
    case 56:
     {
      $__mdstr = 14977;
      break;
     }
    case 9:
    case 25:
     {
      $__mdstr = 14980;
      break;
     }
    case 52:
    case 20:
     {
      $__mdstr = 14983;
      break;
     }
    case 5:
    case 21:
     {
      $__mdstr = 14986;
      break;
     }
    case 12:
     {
      $__mdstr = 14989;
      break;
     }
    case 28:
     {
      $__mdstr = 14992;
      break;
     }
    case 60:
     {
      $__mdstr = 14996;
      break;
     }
    case 13:
    case 29:
     {
      $__mdstr = 15e3;
      break;
     }
    default:
     {
      $__rt = 0;
     }
    }
   } while (0);
   $9 = $__rt;
   $10 = ($9 | 0) != (0 | 0);
   if ($10) {
    $11 = $1;
    $12 = $__mdstr;
    $13 = (tempInt = _fopen($11, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $14 = $3 + 64 | 0;
    HEAP32[$14 >> 2] = $13;
    $15 = $3 + 64 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) != (0 | 0);
    if (!$17) {
     $__rt = 0;
     break;
    }
    $18 = $2;
    $19 = $3 + 88 | 0;
    HEAP32[$19 >> 2] = $18;
    $20 = $2;
    $21 = $20 & 2;
    $22 = ($21 | 0) != 0;
    if ($22) {
     $23 = $3 + 64 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = (tempInt = _fseek($24, 0, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $26 = ($25 | 0) != 0;
     if ($26) {
      $27 = $3 + 64 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      (tempInt = _fclose($28) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $29 = $3 + 64 | 0;
      HEAP32[$29 >> 2] = 0;
      $__rt = 0;
     }
    }
   }
  }
 } while (0);
 $30 = $__rt;
 STACKTOP = sp;
 return $30 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = $info + 52 | 0;
  $4 = HEAP8[$3 >> 0] | 0;
  $5 = $info + 53 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  $7 = $this + 16 | 0;
  $8 = $this + 12 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = ($this + 16 | 0) + ($9 << 3) | 0;
  HEAP8[$3 >> 0] = 0;
  HEAP8[$5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
  $11 = ($9 | 0) > 1;
  L4 : do {
   if ($11) {
    $12 = $this + 24 | 0;
    $13 = $info + 24 | 0;
    $14 = $this + 8 | 0;
    $15 = $info + 54 | 0;
    $p$0 = $12;
    while (1) {
     $16 = HEAP8[$15 >> 0] | 0;
     $17 = $16 << 24 >> 24 == 0;
     if (!$17) {
      break L4;
     }
     $18 = HEAP8[$3 >> 0] | 0;
     $19 = $18 << 24 >> 24 == 0;
     if ($19) {
      $25 = HEAP8[$5 >> 0] | 0;
      $26 = $25 << 24 >> 24 == 0;
      if (!$26) {
       $27 = HEAP32[$14 >> 2] | 0;
       $28 = $27 & 1;
       $29 = ($28 | 0) == 0;
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13 >> 2] | 0;
      $21 = ($20 | 0) == 1;
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14 >> 2] | 0;
      $23 = $22 & 2;
      $24 = ($23 | 0) == 0;
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3 >> 0] = 0;
     HEAP8[$5 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
     $30 = $p$0 + 8 | 0;
     $31 = $30 >>> 0 < $10 >>> 0;
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while (0);
  HEAP8[$3 >> 0] = $4;
  HEAP8[$5 >> 0] = $6;
 }
 return;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $13 = $this;
 $14 = $13;
 $15 = $14 + 92 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $17 = $16 & 16;
 $18 = ($17 | 0) != 0;
 if ($18) {
  STACKTOP = sp;
  return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = $19 + 8 | 0;
 HEAP32[$21 >> 2] = $20;
 $22 = $11;
 $23 = $19 + 12 | 0;
 HEAP32[$23 >> 2] = $22;
 $24 = $12;
 $25 = $19 + 16 | 0;
 HEAP32[$25 >> 2] = $24;
 $26 = $14 + 52 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = $27 >>> 0 > 8;
 do {
  if ($28) {
   $29 = $14 + 98 | 0;
   $30 = HEAP8[$29 >> 0] | 0;
   $31 = $30 & 1;
   if ($31) {
    $32 = $14 + 32 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $14 + 32 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $14 + 52 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = $37 - 1 | 0;
    $39 = $35 + $38 | 0;
    $0 = $14;
    $1 = $33;
    $2 = $39;
    $40 = $0;
    $41 = $1;
    $42 = $40 + 24 | 0;
    HEAP32[$42 >> 2] = $41;
    $43 = $40 + 20 | 0;
    HEAP32[$43 >> 2] = $41;
    $44 = $2;
    $45 = $40 + 28 | 0;
    HEAP32[$45 >> 2] = $44;
    break;
   } else {
    $46 = $14 + 56 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $14 + 56 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = $14 + 60 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = $51 - 1 | 0;
    $53 = $49 + $52 | 0;
    $3 = $14;
    $4 = $47;
    $5 = $53;
    $54 = $3;
    $55 = $4;
    $56 = $54 + 24 | 0;
    HEAP32[$56 >> 2] = $55;
    $57 = $54 + 20 | 0;
    HEAP32[$57 >> 2] = $55;
    $58 = $5;
    $59 = $54 + 28 | 0;
    HEAP32[$59 >> 2] = $58;
    break;
   }
  } else {
   $6 = $14;
   $7 = 0;
   $8 = 0;
   $60 = $6;
   $61 = $7;
   $62 = $60 + 24 | 0;
   HEAP32[$62 >> 2] = $61;
   $63 = $60 + 20 | 0;
   HEAP32[$63 >> 2] = $61;
   $64 = $8;
   $65 = $60 + 28 | 0;
   HEAP32[$65 >> 2] = $64;
  }
 } while (0);
 $66 = $14 + 92 | 0;
 HEAP32[$66 >> 2] = 16;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloc = 0, $alloc1 = 0, $alloc2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $alloc = sp + 90 | 0;
 $alloc1 = sp + 89 | 0;
 $alloc2 = sp + 88 | 0;
 $21 = $this;
 $22 = $21;
 $23 = HEAP8[$22 >> 0] | 0;
 switch ($23 << 24 >> 24) {
 case 1:
  {
   $4 = $alloc;
   $24 = $22 + 8 | 0;
   $25 = HEAP32[$24 >> 2] | 0;
   $2 = $alloc;
   $3 = $25;
   $26 = $3;
   __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEED2Ev($26), asyncState ? abort(-12) | 0 : 0;
   $27 = $22 + 8 | 0;
   $28 = HEAP32[$27 >> 2] | 0;
   $6 = $alloc;
   $7 = $28;
   $8 = 1;
   $29 = $7;
   $5 = $29;
   $30 = $5;
   __ZdlPv($30), asyncState ? abort(-12) | 0 : 0;
   $31 = $22 + 8 | 0;
   HEAP32[$31 >> 2] = 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $9 = $alloc1;
   $32 = $22 + 8 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   $0 = $alloc1;
   $1 = $33;
   $34 = $1;
   __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEED2Ev($34), asyncState ? abort(-12) | 0 : 0;
   $35 = $22 + 8 | 0;
   $36 = HEAP32[$35 >> 2] | 0;
   $11 = $alloc1;
   $12 = $36;
   $13 = 1;
   $37 = $12;
   $10 = $37;
   $38 = $10;
   __ZdlPv($38), asyncState ? abort(-12) | 0 : 0;
   $39 = $22 + 8 | 0;
   HEAP32[$39 >> 2] = 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $14 = $alloc2;
   $40 = $22 + 8 | 0;
   $41 = HEAP32[$40 >> 2] | 0;
   $15 = $alloc2;
   $16 = $41;
   $42 = $16;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($42), asyncState ? abort(-12) | 0 : 0;
   $43 = $22 + 8 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $18 = $alloc2;
   $19 = $44;
   $20 = 1;
   $45 = $19;
   $17 = $45;
   $46 = $17;
   __ZdlPv($46), asyncState ? abort(-12) | 0 : 0;
   $47 = $22 + 8 | 0;
   HEAP32[$47 >> 2] = 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__nar = sp + 16 | 0;
 $__ne = sp + 12 | 0;
 $mb = sp;
 $__nb = sp + 8 | 0;
 $0 = $__nar + 100 | 0;
 HEAP32[$__ne >> 2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod), asyncState ? abort(-12) | 0 : 0;
 $1 = $mb;
 $2 = $1;
 HEAP32[$2 >> 2] = 0;
 $3 = $1 + 4 | 0;
 $4 = $3;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $5 = HEAP32[$__we >> 2] | 0;
 $6 = $5;
 $7 = $__wb;
 $8 = $6 - $7 | 0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this >> 2] | 0;
 $11 = (tempInt = _uselocale($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __THREW__ = 0;
 $12 = (tempInt = invoke_iiiii(476, $__wb | 0, $__nb | 0, $9 | 0, $mb | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $13 = __THREW__;
 __THREW__ = 0;
 $14 = $13 & 1;
 if ($14) {
  $20 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $21 = tempRet0;
  $22 = ($11 | 0) == (0 | 0);
  if (!$22) {
   __THREW__ = 0;
   (tempInt = invoke_ii(477, $11 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if ($24) {
    $25 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $26 = tempRet0;
    ___clang_call_terminate($25), asyncState ? abort(-12) | 0 : 0;
   }
  }
  ___resumeException($20 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $15 = ($11 | 0) == (0 | 0);
 if (!$15) {
  __THREW__ = 0;
  (tempInt = invoke_ii(477, $11 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $16 = __THREW__;
  __THREW__ = 0;
  $17 = $16 & 1;
  if ($17) {
   $18 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $19 = tempRet0;
   ___clang_call_terminate($18), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $27 = ($12 | 0) == -1;
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(21676), asyncState ? abort(-12) | 0 : 0;
 } else {
  $28 = $__wb + ($12 << 2) | 0;
  HEAP32[$__we >> 2] = $28;
  STACKTOP = sp;
  return;
 }
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size) | 0;
 $1 = $f + 76 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($3) {
  $4 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = $f + 74 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24;
 $8 = $7 + 255 | 0;
 $9 = $8 | $7;
 $10 = $9 & 255;
 HEAP8[$5 >> 0] = $10;
 $11 = $f + 8 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $f + 4 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $12;
 $16 = $14;
 $17 = $15 - $16 | 0;
 $18 = ($17 | 0) > 0;
 if ($18) {
  $19 = $17 >>> 0 < $0 >>> 0;
  $$ = $19 ? $17 : $0;
  (tempInt = _memcpy($destv | 0, $14 | 0, $$ | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $20 = $14 + $$ | 0;
  HEAP32[$13 >> 2] = $20;
  $21 = $destv + $$ | 0;
  $22 = $0 - $$ | 0;
  $dest$0$ph = $21;
  $l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;
  $l$0$ph = $0;
 }
 $23 = ($l$0$ph | 0) == 0;
 L7 : do {
  if ($23) {
   label = 13;
  } else {
   $24 = $f + 32 | 0;
   $dest$02 = $dest$0$ph;
   $l$03 = $l$0$ph;
   while (1) {
    $25 = (tempInt = ___toread($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $26 = ($25 | 0) == 0;
    if (!$26) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24 >> 2] | 0;
    $28 = (tempInt = FUNCTION_TABLE_iiii[$27 & 1023]($f, $dest$02, $l$03) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $29 = $28 + 1 | 0;
    $30 = $29 >>> 0 < 2;
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = $l$03 - $28 | 0;
    $36 = $dest$02 + $28 | 0;
    $37 = ($l$03 | 0) == ($28 | 0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;
     $l$03 = $35;
    }
   }
   $31 = ($32 | 0) == 0;
   if (!$31) {
    ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
   }
   $33 = $0 - $l$03$lcssa | 0;
   $34 = ($33 >>> 0) / ($size >>> 0) & -1;
   $$0 = $34;
  }
 } while (0);
 if ((label | 0) == 13) {
  $38 = ($32 | 0) == 0;
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
   $$0 = $nmemb;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($3) {
  $4 = $1 & 255;
  $5 = $4 >>> 1;
  $16 = 1;
  $17 = $5;
  $45 = $1;
 } else {
  $6 = $this + 4 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = HEAP32[$this >> 2] | 0;
  $9 = $8 & -2;
  $phitmp$i = $9 + -1 | 0;
  $10 = $8 & 255;
  $16 = $phitmp$i;
  $17 = $7;
  $45 = $10;
 }
 $11 = $__last;
 $12 = $11 - $0 | 0;
 $13 = $12 >> 2;
 $14 = ($13 | 0) == 0;
 do {
  if (!$14) {
   $15 = $16 - $17 | 0;
   $18 = $15 >>> 0 < $13 >>> 0;
   if ($18) {
    $19 = $17 + $13 | 0;
    $20 = $19 - $16 | 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $16, $20, $17, $17, 0, 0), asyncState ? abort(-12) | 0 : 0;
    $$pre = HEAP8[$this >> 0] | 0;
    $22 = $$pre;
   } else {
    $22 = $45;
   }
   $21 = $22 & 1;
   $23 = $21 << 24 >> 24 == 0;
   if ($23) {
    $26 = $this + 4 | 0;
    $33 = $26;
   } else {
    $24 = $this + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $33 = $25;
   }
   $27 = $__last;
   $28 = $27 - $0 | 0;
   $29 = $28 >>> 2;
   $30 = $17 + $29 | 0;
   $31 = ($__first | 0) == ($__last | 0);
   if (!$31) {
    $32 = $33 + ($17 << 2) | 0;
    $$03 = $__first;
    $__p$04 = $32;
    while (1) {
     $34 = HEAP32[$$03 >> 2] | 0;
     HEAP32[$__p$04 >> 2] = $34;
     $35 = $__p$04 + 4 | 0;
     $36 = $$03 + 4 | 0;
     $37 = ($36 | 0) == ($__last | 0);
     if ($37) {
      break;
     } else {
      $$03 = $36;
      $__p$04 = $35;
     }
    }
   }
   $scevgep = $33 + ($30 << 2) | 0;
   HEAP32[$scevgep >> 2] = 0;
   $38 = $17 + $13 | 0;
   $39 = HEAP8[$this >> 0] | 0;
   $40 = $39 & 1;
   $41 = $40 << 24 >> 24 == 0;
   if ($41) {
    $43 = $38 << 1;
    $44 = $43 & 255;
    HEAP8[$this >> 0] = $44;
    break;
   } else {
    $42 = $this + 4 | 0;
    HEAP32[$42 >> 2] = $38;
    break;
   }
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($3) {
  $4 = $1 & 255;
  $5 = $4 >>> 1;
  $15 = 10;
  $16 = $5;
  $41 = $1;
 } else {
  $6 = $this + 4 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = HEAP32[$this >> 2] | 0;
  $9 = $8 & -2;
  $phitmp$i = $9 + -1 | 0;
  $10 = $8 & 255;
  $15 = $phitmp$i;
  $16 = $7;
  $41 = $10;
 }
 $11 = $__last;
 $12 = $11 - $0 | 0;
 $13 = ($__last | 0) == ($__first | 0);
 do {
  if (!$13) {
   $14 = $15 - $16 | 0;
   $17 = $14 >>> 0 < $12 >>> 0;
   if ($17) {
    $18 = $16 + $12 | 0;
    $19 = $18 - $15 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $19, $16, $16, 0, 0), asyncState ? abort(-12) | 0 : 0;
    $$pre = HEAP8[$this >> 0] | 0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = $20 << 24 >> 24 == 0;
   if ($22) {
    $25 = $this + 1 | 0;
    $29 = $25;
   } else {
    $23 = $this + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $29 = $24;
   }
   $26 = $16 - $0 | 0;
   $scevgep = $__last + $26 | 0;
   $scevgep1 = $scevgep;
   $27 = ($__first | 0) == ($__last | 0);
   if (!$27) {
    $28 = $29 + $16 | 0;
    $$03 = $__first;
    $__p$04 = $28;
    while (1) {
     $30 = HEAP8[$$03 >> 0] | 0;
     HEAP8[$__p$04 >> 0] = $30;
     $31 = $__p$04 + 1 | 0;
     $32 = $$03 + 1 | 0;
     $33 = ($32 | 0) == ($__last | 0);
     if ($33) {
      break;
     } else {
      $$03 = $32;
      $__p$04 = $31;
     }
    }
   }
   $scevgep2 = $29 + $scevgep1 | 0;
   HEAP8[$scevgep2 >> 0] = 0;
   $34 = $16 + $12 | 0;
   $35 = HEAP8[$this >> 0] | 0;
   $36 = $35 & 1;
   $37 = $36 << 24 >> 24 == 0;
   if ($37) {
    $39 = $34 << 1;
    $40 = $39 & 255;
    HEAP8[$this >> 0] = $40;
    break;
   } else {
    $38 = $this + 4 | 0;
    HEAP32[$38 >> 2] = $34;
    break;
   }
  }
 } while (0);
 return $this | 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($1) {
   $6 = (tempInt = _strlen($s) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = $s + $6 | 0;
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3 | 0) == 0;
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c & 255;
    $$0211 = $s;
    while (1) {
     $8 = HEAP8[$$0211 >> 0] | 0;
     $9 = $8 << 24 >> 24 == 0;
     $10 = $8 << 24 >> 24 == $5 << 24 >> 24;
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = $$0211 + 1 | 0;
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13 | 0) == 0;
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009) | 0;
   $16 = HEAP32[$$02$lcssa >> 2] | 0;
   $17 = $16 + -16843009 | 0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20 | 0) == 0;
   L10 : do {
    if ($21) {
     $23 = $16;
     $w$08 = $$02$lcssa;
     while (1) {
      $22 = $23 ^ $15;
      $24 = $22 + -16843009 | 0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27 | 0) == 0;
      if (!$28) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = $w$08 + 4 | 0;
      $30 = HEAP32[$29 >> 2] | 0;
      $31 = $30 + -16843009 | 0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34 | 0) == 0;
      if ($35) {
       $23 = $30;
       $w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while (0);
   $36 = $c & 255;
   $$1 = $w$0$lcssa;
   while (1) {
    $37 = HEAP8[$$1 >> 0] | 0;
    $38 = $37 << 24 >> 24 == 0;
    $39 = $37 << 24 >> 24 == $36 << 24 >> 24;
    $or$cond5 = $38 | $39;
    $40 = $$1 + 1 | 0;
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $13 = $this;
 $14 = $13;
 $15 = $14 + 44 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $11 = $14;
 $17 = $11;
 $18 = $17 + 24 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = $16 >>> 0 < $19 >>> 0;
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = $21 + 24 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $24 = $14 + 44 | 0;
  HEAP32[$24 >> 2] = $23;
 }
 $25 = $14 + 48 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = $26 & 8;
 $28 = ($27 | 0) != 0;
 if ($28) {
  $9 = $14;
  $29 = $9;
  $30 = $29 + 16 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  $32 = $14 + 44 | 0;
  $33 = HEAP32[$32 >> 2] | 0;
  $34 = $31 >>> 0 < $33 >>> 0;
  if ($34) {
   $0 = $14;
   $35 = $0;
   $36 = $35 + 8 | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   $1 = $14;
   $38 = $1;
   $39 = $38 + 12 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   $41 = $14 + 44 | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   $2 = $14;
   $3 = $37;
   $4 = $40;
   $5 = $42;
   $43 = $2;
   $44 = $3;
   $45 = $43 + 8 | 0;
   HEAP32[$45 >> 2] = $44;
   $46 = $4;
   $47 = $43 + 12 | 0;
   HEAP32[$47 >> 2] = $46;
   $48 = $5;
   $49 = $43 + 16 | 0;
   HEAP32[$49 >> 2] = $48;
  }
  $6 = $14;
  $50 = $6;
  $51 = $50 + 12 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  $7 = $14;
  $53 = $7;
  $54 = $53 + 16 | 0;
  $55 = HEAP32[$54 >> 2] | 0;
  $56 = $52 >>> 0 < $55 >>> 0;
  if ($56) {
   $8 = $14;
   $57 = $8;
   $58 = $57 + 12 | 0;
   $59 = HEAP32[$58 >> 2] | 0;
   $60 = HEAP8[$59 >> 0] | 0;
   $61 = (tempInt = __ZNSt3__111char_traitsIcE11to_int_typeEc($60) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;
   return $63 | 0;
  }
 }
 $62 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;
 return $63 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = 1073741806 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $2 = HEAP8[$this >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 4 | 0;
  $21 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $21 = $6;
 }
 $8 = $__old_cap >>> 0 < 536870887;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 2;
  $14 = $12 + 4 | 0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (tempInt = __Znwj($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $20 = ($__n_copy | 0) == 0;
 if (!$20) {
  (tempInt = _wmemcpy($19, $21, $__n_copy) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $22 = ($__n_add | 0) == 0;
 if (!$22) {
  $23 = $19 + ($__n_copy << 2) | 0;
  (tempInt = _wmemcpy($23, $__p_new_stuff, $__n_add) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $24 = $__old_sz - $__n_del | 0;
 $25 = ($24 | 0) == ($__n_copy | 0);
 if (!$25) {
  $26 = $24 - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $27 = $19 + ($$sum << 2) | 0;
  $$sum1 = $__n_del + $__n_copy | 0;
  $28 = $21 + ($$sum1 << 2) | 0;
  (tempInt = _wmemcpy($27, $28, $26) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $29 = ($__old_cap | 0) == 1;
 if (!$29) {
  __ZdlPv($21), asyncState ? abort(-12) | 0 : 0;
 }
 $30 = $this + 8 | 0;
 HEAP32[$30 >> 2] = $19;
 $31 = $18 | 1;
 HEAP32[$this >> 2] = $31;
 $32 = $24 + $__n_add | 0;
 $33 = $this + 4 | 0;
 HEAP32[$33 >> 2] = $32;
 $34 = $19 + ($32 << 2) | 0;
 HEAP32[$34 >> 2] = 0;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0, $i$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $3 = (tempInt = ___towrite($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   $$pre = HEAP32[$0 >> 2] | 0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4 : do {
  if ((label | 0) == 4) {
   $5 = $f + 20 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $7 = $8;
   $9 = $6;
   $10 = $7 - $9 | 0;
   $11 = $10 >>> 0 < $l >>> 0;
   if ($11) {
    $12 = $f + 36 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = (tempInt = FUNCTION_TABLE_iiii[$13 & 1023]($f, $s, $l) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0 = $14;
    break;
   }
   $15 = $f + 75 | 0;
   $16 = HEAP8[$15 >> 0] | 0;
   $17 = $16 << 24 >> 24 > -1;
   L9 : do {
    if ($17) {
     $i$0 = $l;
     while (1) {
      $18 = ($i$0 | 0) == 0;
      if ($18) {
       $$01 = $l;
       $$02 = $s;
       $29 = $6;
       $i$1 = 0;
       break L9;
      }
      $19 = $i$0 + -1 | 0;
      $20 = $s + $19 | 0;
      $21 = HEAP8[$20 >> 0] | 0;
      $22 = $21 << 24 >> 24 == 10;
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = $f + 36 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = (tempInt = FUNCTION_TABLE_iiii[$24 & 1023]($f, $s, $i$0$lcssa10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $26 = $25 >>> 0 < $i$0$lcssa10 >>> 0;
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = $s + $i$0$lcssa10 | 0;
     $28 = $l - $i$0$lcssa10 | 0;
     $$pre6 = HEAP32[$5 >> 2] | 0;
     $$01 = $28;
     $$02 = $27;
     $29 = $$pre6;
     $i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;
     $$02 = $s;
     $29 = $6;
     $i$1 = 0;
    }
   } while (0);
   (tempInt = _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $30 = HEAP32[$5 >> 2] | 0;
   $31 = $30 + $$01 | 0;
   HEAP32[$5 >> 2] = $31;
   $32 = $i$1 + $$01 | 0;
   $$0 = $32;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $24 = $__os;
 $25 = $__str;
 $26 = $24;
 $27 = $25;
 $23 = $27;
 $28 = $23;
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $20 = $30;
 $31 = $20;
 $19 = $31;
 $32 = $19;
 $33 = HEAP8[$32 >> 0] | 0;
 $34 = $33 & 255;
 $35 = $34 & 1;
 $36 = ($35 | 0) != 0;
 if ($36) {
  $13 = $29;
  $37 = $13;
  $12 = $37;
  $38 = $12;
  $11 = $38;
  $39 = $11;
  $40 = $39 + 8 | 0;
  $41 = HEAP32[$40 >> 2] | 0;
  $48 = $41;
 } else {
  $18 = $29;
  $42 = $18;
  $17 = $42;
  $43 = $17;
  $16 = $43;
  $44 = $16;
  $45 = $44 + 1 | 0;
  $15 = $45;
  $46 = $15;
  $14 = $46;
  $47 = $14;
  $48 = $47;
 }
 $10 = $48;
 $49 = $10;
 $50 = $25;
 $9 = $50;
 $51 = $9;
 $8 = $51;
 $52 = $8;
 $7 = $52;
 $53 = $7;
 $6 = $53;
 $54 = $6;
 $55 = HEAP8[$54 >> 0] | 0;
 $56 = $55 & 255;
 $57 = $56 & 1;
 $58 = ($57 | 0) != 0;
 if ($58) {
  $2 = $51;
  $59 = $2;
  $1 = $59;
  $60 = $1;
  $0 = $60;
  $61 = $0;
  $62 = $61 + 4 | 0;
  $63 = HEAP32[$62 >> 2] | 0;
  $70 = $63;
  $71 = (tempInt = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26, $49, $70) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else {
  $5 = $51;
  $64 = $5;
  $4 = $64;
  $65 = $4;
  $3 = $65;
  $66 = $3;
  $67 = HEAP8[$66 >> 0] | 0;
  $68 = $67 & 255;
  $69 = $68 >> 1;
  $70 = $69;
  $71 = (tempInt = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26, $49, $70) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__113__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EENS8_ISB_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $4 = sp;
 $7 = sp + 116 | 0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = ($31 | 0) != (0 | 0);
 if (!$32) {
  STACKTOP = sp;
  return;
 }
 $14 = $30;
 $33 = $14;
 $34 = HEAP32[$33 >> 2] | 0;
 $12 = $33;
 $13 = $34;
 $35 = $12;
 while (1) {
  $36 = $13;
  $37 = $35 + 4 | 0;
  $38 = HEAP32[$37 >> 2] | 0;
  $39 = ($36 | 0) != ($38 | 0);
  if (!$39) {
   break;
  }
  $11 = $35;
  $40 = $11;
  $41 = $40 + 8 | 0;
  $10 = $41;
  $42 = $10;
  $9 = $42;
  $43 = $9;
  $44 = $35 + 4 | 0;
  $45 = HEAP32[$44 >> 2] | 0;
  $46 = $45 + -16 | 0;
  HEAP32[$44 >> 2] = $46;
  $8 = $46;
  $47 = $8;
  $5 = $43;
  $6 = $47;
  $48 = $5;
  $49 = $6;
  HEAP8[$4 >> 0] = HEAP8[$7 >> 0] | 0;
  $2 = $48;
  $3 = $49;
  $50 = $2;
  $51 = $3;
  $0 = $50;
  $1 = $51;
  $52 = $1;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($52), asyncState ? abort(-12) | 0 : 0;
 }
 $28 = $30;
 $53 = $28;
 $54 = $53 + 8 | 0;
 $27 = $54;
 $55 = $27;
 $26 = $55;
 $56 = $26;
 $57 = HEAP32[$30 >> 2] | 0;
 $25 = $30;
 $58 = $25;
 $24 = $58;
 $59 = $24;
 $60 = $59 + 8 | 0;
 $23 = $60;
 $61 = $23;
 $22 = $61;
 $62 = $22;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = HEAP32[$58 >> 2] | 0;
 $65 = $63;
 $66 = $64;
 $67 = $65 - $66 | 0;
 $68 = ($67 | 0) / 16 & -1;
 $19 = $56;
 $20 = $57;
 $21 = $68;
 $69 = $19;
 $70 = $20;
 $71 = $21;
 $16 = $69;
 $17 = $70;
 $18 = $71;
 $72 = $17;
 $15 = $72;
 $73 = $15;
 __ZdlPv($73), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5parseERKS9_NS1_8functionIFbiNSA_13parse_event_tERSA_EEE($agg$result, $s, $cb) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 $cb = $cb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = sp + 24 | 0;
 $2 = sp;
 $0 = $s;
 $5 = $0;
 __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EEC2ERKSF_($2, $cb), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 invoke_viii(380, $1 | 0, $5 | 0, $2 | 0), asyncState ? abort(-12) | 0 : 0;
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if ($7) {
  $10 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $11 = tempRet0;
  $3 = $10;
  $4 = $11;
  __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($2), asyncState ? abort(-12) | 0 : 0;
  $14 = $3;
  $15 = $4;
  ___resumeException($14 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 __THREW__ = 0;
 invoke_vii(381, $agg$result | 0, $1 | 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if (!$9) {
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parserD2Ev($1), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($2), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 $12 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parserD2Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 $14 = $3;
 $15 = $4;
 ___resumeException($14 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = -18 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $2 = HEAP8[$this >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 1 | 0;
  $20 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $20 = $6;
 }
 $8 = $__old_cap >>> 0 < 2147483623;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 11;
  $14 = $12 + 16 | 0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (tempInt = __Znwj($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = ($__n_copy | 0) == 0;
 if (!$19) {
  (tempInt = _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $21 = ($__n_add | 0) == 0;
 if (!$21) {
  $22 = $18 + $__n_copy | 0;
  (tempInt = _memcpy($22 | 0, $__p_new_stuff | 0, $__n_add | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $23 = $__old_sz - $__n_del | 0;
 $24 = ($23 | 0) == ($__n_copy | 0);
 if (!$24) {
  $25 = $23 - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $26 = $18 + $$sum | 0;
  $$sum1 = $__n_del + $__n_copy | 0;
  $27 = $20 + $$sum1 | 0;
  (tempInt = _memcpy($26 | 0, $27 | 0, $25 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $28 = ($__old_cap | 0) == 10;
 if (!$28) {
  __ZdlPv($20), asyncState ? abort(-12) | 0 : 0;
 }
 $29 = $this + 8 | 0;
 HEAP32[$29 >> 2] = $18;
 $30 = $17 | 1;
 HEAP32[$this >> 2] = $30;
 $31 = $23 + $__n_add | 0;
 $32 = $this + 4 | 0;
 HEAP32[$32 >> 2] = $31;
 $33 = $18 + $31 | 0;
 HEAP8[$33 >> 0] = 0;
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($f | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($0) {
   $7 = HEAP32[3692 >> 2] | 0;
   $8 = ($7 | 0) == (0 | 0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[3692 >> 2] | 0;
    $10 = (tempInt = _fflush($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $27 = $10;
   }
   ___lock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
   $$012 = HEAP32[3464 >> 2] | 0;
   $11 = ($$012 | 0) == (0 | 0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;
    $r$03 = $27;
    while (1) {
     $12 = $$014 + 76 | 0;
     $13 = HEAP32[$12 >> 2] | 0;
     $14 = ($13 | 0) > -1;
     if ($14) {
      $15 = (tempInt = ___lockfile($$014) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = $$014 + 20 | 0;
     $17 = HEAP32[$16 >> 2] | 0;
     $18 = $$014 + 28 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     $20 = $17 >>> 0 > $19 >>> 0;
     if ($20) {
      $21 = (tempInt = ___fflush_unlocked($$014) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24 | 0) == 0;
     if (!$23) {
      ___unlockfile($$014), asyncState ? abort(-12) | 0 : 0;
     }
     $25 = $$014 + 56 | 0;
     $$01 = HEAP32[$25 >> 2] | 0;
     $26 = ($$01 | 0) == (0 | 0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;
      $r$03 = $r$1;
     }
    }
   }
   ___unlock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
   $$0 = $r$0$lcssa;
  } else {
   $1 = $f + 76 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $3 = ($2 | 0) > -1;
   if (!$3) {
    $4 = (tempInt = ___fflush_unlocked($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0 = $4;
    break;
   }
   $5 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $phitmp = ($5 | 0) == 0;
   $6 = (tempInt = ___fflush_unlocked($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
    $$0 = $6;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE18__construct_at_endIPSA_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESG_SG_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $8 = sp;
 $13 = sp + 85 | 0;
 $__annotator = sp + 84 | 0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = $22 + 8 | 0;
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while (1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26 | 0) != ($27 | 0);
  if (!$28) {
   break;
  }
  __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($__annotator, $21, 1), asyncState ? abort(-12) | 0 : 0;
  $29 = $__a;
  $30 = $21 + 4 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  HEAP8[$8 >> 0] = HEAP8[$13 >> 0] | 0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ERKSA_($42, $44), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator), asyncState ? abort(-12) | 0 : 0;
  $45 = $21 + 4 | 0;
  $46 = HEAP32[$45 >> 2] | 0;
  $47 = $46 + 16 | 0;
  HEAP32[$45 >> 2] = $47;
  $48 = $19;
  $49 = $48 + 16 | 0;
  $19 = $49;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__loc = sp;
 $0 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_iii(398, $__loc | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = $4 + 48 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  __THREW__ = 0;
  (tempInt = invoke_iiiii($6 | 0, $1 | 0, 20219 | 0, 20245 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  $8 = $7 & 1;
  if (!$8) {
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii(398, $__loc | 0, 9064 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if (!$11) {
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + 16 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    __THREW__ = 0;
    $15 = (tempInt = invoke_ii($14 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $16 = __THREW__;
    __THREW__ = 0;
    $17 = $16 & 1;
    if (!$17) {
     HEAP32[$__thousands_sep >> 2] = $15;
     $18 = HEAP32[$9 >> 2] | 0;
     $19 = $18 + 20 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     invoke_vii($20 | 0, $agg$result | 0, $9 | 0), asyncState ? abort(-12) | 0 : 0;
     $21 = __THREW__;
     __THREW__ = 0;
     $22 = $21 & 1;
     if (!$22) {
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      STACKTOP = sp;
      return;
     }
    }
   }
  }
 }
 $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $24 = tempRet0;
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($23 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__loc = sp;
 $0 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$__loc >> 2] = $0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_iii(398, $__loc | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = $4 + 32 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  __THREW__ = 0;
  (tempInt = invoke_iiiii($6 | 0, $1 | 0, 20219 | 0, 20245 | 0, $__atoms | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  $8 = $7 & 1;
  if (!$8) {
   __THREW__ = 0;
   $9 = (tempInt = invoke_iii(398, $__loc | 0, 9056 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if (!$11) {
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + 16 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    __THREW__ = 0;
    $15 = (tempInt = invoke_ii($14 | 0, $9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $16 = __THREW__;
    __THREW__ = 0;
    $17 = $16 & 1;
    if (!$17) {
     HEAP8[$__thousands_sep >> 0] = $15;
     $18 = HEAP32[$9 >> 2] | 0;
     $19 = $18 + 20 | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     __THREW__ = 0;
     invoke_vii($20 | 0, $agg$result | 0, $9 | 0), asyncState ? abort(-12) | 0 : 0;
     $21 = __THREW__;
     __THREW__ = 0;
     $22 = $21 & 1;
     if (!$22) {
      (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      STACKTOP = sp;
      return;
     }
    }
   }
  }
 }
 $23 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $24 = tempRet0;
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 ___resumeException($23 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser5parseEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $result = sp;
 $0 = $this;
 $4 = $0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser14parse_internalEb($result, $4, 1), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 invoke_vii(415, $4 | 0, 13), asyncState ? abort(-12) | 0 : 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 do {
  if (!$6) {
   $7 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E12is_discardedEv($result) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   if ($7) {
    HEAP32[$agg$result >> 2] = 0 | 0;
    HEAP32[$agg$result + 4 >> 2] = 0 | 0;
    HEAP32[$agg$result + 8 >> 2] = 0 | 0;
    HEAP32[$agg$result + 12 >> 2] = 0 | 0;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev($agg$result), asyncState ? abort(-12) | 0 : 0;
    $3 = 1;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($result), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   } else {
    __THREW__ = 0;
    invoke_vii(375, $agg$result | 0, $result | 0), asyncState ? abort(-12) | 0 : 0;
    $8 = __THREW__;
    __THREW__ = 0;
    $9 = $8 & 1;
    if ($9) {
     break;
    }
    $3 = 1;
    __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($result), asyncState ? abort(-12) | 0 : 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $10 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($result), asyncState ? abort(-12) | 0 : 0;
 $12 = $1;
 $13 = $2;
 ___resumeException($12 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = (tempInt = FUNCTION_TABLE_ii[$4 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 & 1;
 $8 = $7 << 24 >> 24 == 0;
 if ($8) {
  $11 = $6 & 255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = $5 + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $24 = $10;
 }
 $13 = $5 + 12 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 1;
 $16 = $15 << 24 >> 24 == 0;
 if ($16) {
  $19 = $14 & 255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = $5 + 16 | 0;
  $18 = HEAP32[$17 >> 2] | 0;
  $22 = $18;
 }
 $21 = 0 - $22 | 0;
 $23 = ($24 | 0) == ($21 | 0);
 do {
  if ($23) {
   $25 = HEAP32[$__err >> 2] | 0;
   $26 = $25 | 4;
   HEAP32[$__err >> 2] = $26;
  } else {
   $27 = HEAP32[$__e >> 2] | 0;
   HEAP32[$0 >> 2] = $27;
   $28 = $5 + 24 | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   $29 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $28, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $30 = ($29 | 0) == ($5 | 0);
   $31 = HEAP32[$__h >> 2] | 0;
   $32 = ($31 | 0) == 12;
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h >> 2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = $33 - $34 | 0;
   $36 = ($35 | 0) == 12;
   $37 = ($31 | 0) < 12;
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = $31 + 12 | 0;
    HEAP32[$__h >> 2] = $38;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = (tempInt = FUNCTION_TABLE_ii[$4 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 & 1;
 $8 = $7 << 24 >> 24 == 0;
 if ($8) {
  $11 = $6 & 255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = $5 + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $24 = $10;
 }
 $13 = $5 + 12 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 1;
 $16 = $15 << 24 >> 24 == 0;
 if ($16) {
  $19 = $14 & 255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = $5 + 16 | 0;
  $18 = HEAP32[$17 >> 2] | 0;
  $22 = $18;
 }
 $21 = 0 - $22 | 0;
 $23 = ($24 | 0) == ($21 | 0);
 do {
  if ($23) {
   $25 = HEAP32[$__err >> 2] | 0;
   $26 = $25 | 4;
   HEAP32[$__err >> 2] = $26;
  } else {
   $27 = HEAP32[$__e >> 2] | 0;
   HEAP32[$0 >> 2] = $27;
   $28 = $5 + 24 | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
   $29 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $28, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $30 = ($29 | 0) == ($5 | 0);
   $31 = HEAP32[$__h >> 2] | 0;
   $32 = ($31 | 0) == 12;
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h >> 2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = $33 - $34 | 0;
   $36 = ($35 | 0) == 12;
   $37 = ($31 | 0) < 12;
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = $31 + 12 | 0;
    HEAP32[$__h >> 2] = $38;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = sp;
 $6 = sp + 80 | 0;
 $18 = $this;
 $19 = $__nd;
 $20 = $18;
 $21 = $19;
 $22 = ($21 | 0) != (0 | 0);
 if (!$22) {
  STACKTOP = sp;
  return;
 }
 $23 = $19;
 $24 = HEAP32[$23 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($20, $24), asyncState ? abort(-12) | 0 : 0;
 $25 = $19;
 $26 = $25 + 4 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($20, $27), asyncState ? abort(-12) | 0 : 0;
 $9 = $20;
 $28 = $9;
 $29 = $28 + 4 | 0;
 $8 = $29;
 $30 = $8;
 $7 = $30;
 $31 = $7;
 $__na = $31;
 $32 = $__na;
 $33 = $19;
 $34 = $33 + 16 | 0;
 $10 = $34;
 $35 = $10;
 $4 = $32;
 $5 = $35;
 $36 = $4;
 $37 = $5;
 HEAP8[$3 >> 0] = HEAP8[$6 >> 0] | 0;
 $1 = $36;
 $2 = $37;
 $38 = $2;
 $0 = $38;
 $39 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($39), asyncState ? abort(-12) | 0 : 0;
 $40 = $__na;
 $41 = $19;
 $15 = $40;
 $16 = $41;
 $17 = 1;
 $42 = $15;
 $43 = $16;
 $44 = $17;
 $12 = $42;
 $13 = $43;
 $14 = $44;
 $45 = $13;
 $11 = $45;
 $46 = $11;
 __ZdlPv($46), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EERNS8_ISB_EEEC2EjjSD_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $16 = sp + 36 | 0;
 $20 = sp + 20 | 0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = $26 + 12 | 0;
 $28 = $25;
 $19 = $27;
 HEAP32[$20 >> 2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16 >> 2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = $36;
 $37 = $34 + 4 | 0;
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37 >> 2] = $39;
 $40 = $23;
 $41 = ($40 | 0) != 0;
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = $42 + 12 | 0;
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = $45 + 4 | 0;
  $47 = HEAP32[$46 >> 2] | 0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51 << 4;
  $3 = $52;
  $53 = $3;
  $54 = (tempInt = __Znwj($53) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26 >> 2] = $55;
 $56 = HEAP32[$26 >> 2] | 0;
 $57 = $24;
 $58 = $56 + ($57 << 4) | 0;
 $59 = $26 + 8 | 0;
 HEAP32[$59 >> 2] = $58;
 $60 = $26 + 4 | 0;
 HEAP32[$60 >> 2] = $58;
 $61 = HEAP32[$26 >> 2] | 0;
 $62 = $23;
 $63 = $61 + ($62 << 4) | 0;
 $11 = $26;
 $64 = $11;
 $65 = $64 + 12 | 0;
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67 >> 2] = $63;
 STACKTOP = sp;
 return;
}

function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 12 | 0;
 $8 = $__os;
 $9 = $8;
 $10 = $8;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 + -12 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $10 + $13 | 0;
 $3 = $14;
 $4 = 10;
 $15 = $3;
 $16 = (tempInt = __ZNKSt3__18ios_base6getlocEv($15) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$5 >> 2] = $16;
 $2 = $5;
 $17 = $2;
 __THREW__ = 0;
 $18 = (tempInt = invoke_iii(398, $17 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = __THREW__;
 __THREW__ = 0;
 $20 = $19 & 1;
 if ($20) {
  $30 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $31 = tempRet0;
  $6 = $30;
  $7 = $31;
  __ZNSt3__16localeD2Ev($5), asyncState ? abort(-12) | 0 : 0;
  $32 = $6;
  $33 = $7;
  ___resumeException($32 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $21 = $4;
 $0 = $18;
 $1 = $21;
 $22 = $0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $23 + 28 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $1;
 __THREW__ = 0;
 $27 = (tempInt = invoke_iii($25 | 0, $22 | 0, $26 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $28 = __THREW__;
 __THREW__ = 0;
 $29 = $28 & 1;
 if ($29) {
  $30 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $31 = tempRet0;
  $6 = $30;
  $7 = $31;
  __ZNSt3__16localeD2Ev($5), asyncState ? abort(-12) | 0 : 0;
  $32 = $6;
  $33 = $7;
  ___resumeException($32 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  __ZNSt3__16localeD2Ev($5), asyncState ? abort(-12) | 0 : 0;
  (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($9, $27) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $34 = $8;
  (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($34) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $35 = $8;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = $__fmtp + 1 | 0;
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = $$0 + 1 | 0;
  HEAP8[$$0 >> 0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6 | 0) == 260;
 if ($8) {
  $$2$ph = $$1;
  $specify_precision$0$off0$ph = 0;
 } else {
  $9 = $$1 + 1 | 0;
  HEAP8[$$1 >> 0] = 46;
  $10 = $$1 + 2 | 0;
  HEAP8[$9 >> 0] = 42;
  $$2$ph = $10;
  $specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len >> 0] | 0;
 $12 = $11 << 24 >> 24 == 0;
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;
  $$23 = $$2$ph;
  $15 = $11;
  while (1) {
   $13 = $$012 + 1 | 0;
   $14 = $$23 + 1 | 0;
   HEAP8[$$23 >> 0] = $15;
   $16 = HEAP8[$13 >> 0] | 0;
   $17 = $16 << 24 >> 24 == 0;
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;
    $$23 = $14;
    $15 = $16;
   }
  }
 }
 L14 : do {
  switch ($6 | 0) {
  case 4:
   {
    $18 = $7 & 1;
    $19 = ($18 | 0) == 0;
    if ($19) {
     HEAP8[$$2$lcssa >> 0] = 102;
     break L14;
    } else {
     HEAP8[$$2$lcssa >> 0] = 70;
     break L14;
    }
    break;
   }
  case 256:
   {
    $20 = $7 & 1;
    $21 = ($20 | 0) == 0;
    if ($21) {
     HEAP8[$$2$lcssa >> 0] = 101;
     break L14;
    } else {
     HEAP8[$$2$lcssa >> 0] = 69;
     break L14;
    }
    break;
   }
  default:
   {
    $22 = $7 & 1;
    $23 = ($22 | 0) != 0;
    if ($8) {
     if ($23) {
      HEAP8[$$2$lcssa >> 0] = 65;
      break L14;
     } else {
      HEAP8[$$2$lcssa >> 0] = 97;
      break L14;
     }
    } else {
     if ($23) {
      HEAP8[$$2$lcssa >> 0] = 71;
      break L14;
     } else {
      HEAP8[$$2$lcssa >> 0] = 103;
      break L14;
     }
    }
   }
  }
 } while (0);
 return $specify_precision$0$off0$ph | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  label = 3;
 } else {
  $3 = $f + 108 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = ($4 | 0) < ($1 | 0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label | 0) == 3) {
  $6 = (tempInt = ___uflow($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = ($6 | 0) < 0;
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0 >> 2] | 0;
   $10 = ($9 | 0) == 0;
   $$phi$trans$insert = $f + 8 | 0;
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $11 = $$pre;
    $26 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $13 = $f + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $12;
    $16 = $14;
    $17 = $15 - $16 | 0;
    $18 = $f + 108 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $9 - $19 | 0;
    $21 = $20 + -1 | 0;
    $22 = ($17 | 0) > ($21 | 0);
    if ($22) {
     $23 = $14 + $21 | 0;
     $24 = $f + 100 | 0;
     HEAP32[$24 >> 2] = $23;
     $28 = $12;
    } else {
     $26 = $15;
     $41 = $12;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    $25 = $f + 100 | 0;
    HEAP32[$25 >> 2] = $26;
    $28 = $41;
   }
   $27 = ($28 | 0) == (0 | 0);
   $$phi$trans$insert3 = $f + 4 | 0;
   $$pre4 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
   if (!$27) {
    $29 = $28;
    $30 = $$pre4;
    $31 = $f + 108 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $29 + 1 | 0;
    $34 = $33 - $30 | 0;
    $35 = $34 + $32 | 0;
    HEAP32[$31 >> 2] = $35;
   }
   $36 = $$pre4 + -1 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $38 = $37 & 255;
   $39 = ($38 | 0) == ($6 | 0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6 & 255;
    HEAP8[$36 >> 0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  $8 = $f + 100 | 0;
  HEAP32[$8 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEEC2ERKSJ_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = sp + 32 | 0;
 $3 = sp + 156 | 0;
 $7 = sp + 24 | 0;
 $10 = sp + 155 | 0;
 $11 = sp + 16 | 0;
 $19 = sp + 92 | 0;
 $20 = sp + 8 | 0;
 $23 = sp + 80 | 0;
 $24 = sp + 154 | 0;
 $25 = sp;
 $37 = sp + 153 | 0;
 $38 = sp + 152 | 0;
 $35 = $this;
 $36 = $__t;
 $39 = $35;
 HEAP32[$39 >> 2] = 0;
 $40 = $39 + 4 | 0;
 $41 = $36;
 $34 = $41;
 $42 = $34;
 $43 = $42 + 4 | 0;
 $33 = $43;
 $44 = $33;
 $32 = $44;
 $45 = $32;
 $2 = $45;
 $46 = $2;
 HEAP8[$1 >> 0] = HEAP8[$3 >> 0] | 0;
 $0 = $46;
 HEAP8[$11 >> 0] = HEAP8[$37 >> 0] | 0;
 $9 = $40;
 $47 = $9;
 $8 = $11;
 HEAP8[$7 >> 0] = HEAP8[$10 >> 0] | 0;
 $6 = $47;
 $48 = $6;
 $5 = $7;
 $4 = $48;
 $49 = $4;
 HEAP32[$49 >> 2] = 0;
 $50 = $39 + 8 | 0;
 $51 = $36;
 $14 = $51;
 $52 = $14;
 $53 = $52 + 8 | 0;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 HEAP8[$25 >> 0] = HEAP8[$38 >> 0] | 0;
 $22 = $50;
 HEAP32[$23 >> 2] = 0;
 $55 = $22;
 $21 = $23;
 $56 = $21;
 $57 = HEAP32[$56 >> 2] | 0;
 $15 = $25;
 HEAP8[$20 >> 0] = HEAP8[$24 >> 0] | 0;
 $18 = $55;
 HEAP32[$19 >> 2] = $57;
 $58 = $18;
 $17 = $20;
 $16 = $19;
 $59 = $16;
 $60 = HEAP32[$59 >> 2] | 0;
 HEAP32[$58 >> 2] = $60;
 $30 = $39;
 $61 = $30;
 $62 = $61 + 4 | 0;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $27 = $64;
 $65 = $27;
 $26 = $65;
 $66 = $26;
 $31 = $39;
 $67 = $31;
 HEAP32[$67 >> 2] = $66;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE20__node_insert_uniqueENS_21__tree_const_iteratorISD_PNS_11__tree_nodeISD_PvEEiEESO_($this, $__p, $__nd) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__nd = $__nd | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__child = 0, $__parent = 0, $__r = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 36 | 0;
 $2 = sp + 24 | 0;
 $__parent = sp + 12 | 0;
 $5 = sp + 4 | 0;
 $3 = $this;
 $4 = $__nd;
 $6 = $3;
 HEAP32[$5 >> 2] = HEAP32[$__p >> 2] | 0;
 $7 = $4;
 $8 = $7 + 16 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2] | 0;
 $9 = (tempInt = __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE12__find_equalISD_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISD_PNS_11__tree_nodeISD_SM_EEiEESP_RKT_($6, $$byval_copy, $__parent, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $__child = $9;
 $10 = $__child;
 $11 = HEAP32[$10 >> 2] | 0;
 $__r = $11;
 $12 = $__child;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = ($13 | 0) == (0 | 0);
 if (!$14) {
  $19 = $__r;
  $0 = $2;
  $1 = $19;
  $20 = $0;
  $21 = $1;
  HEAP32[$20 >> 2] = $21;
  $22 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 $15 = HEAP32[$__parent >> 2] | 0;
 $16 = $__child;
 $17 = $4;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSN_SN_($6, $15, $16, $17), asyncState ? abort(-12) | 0 : 0;
 $18 = $4;
 $__r = $18;
 $19 = $__r;
 $0 = $2;
 $1 = $19;
 $20 = $0;
 $21 = $1;
 HEAP32[$20 >> 2] = $21;
 $22 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE17__annotate_deleteEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21 >> 2] | 0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24 >> 2] | 0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = $29 + 8 | 0;
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = HEAP32[$28 >> 2] | 0;
 $35 = $33;
 $36 = $34;
 $37 = $35 - $36 | 0;
 $38 = ($37 | 0) / 16 & -1;
 $39 = $26 + ($38 << 4) | 0;
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40 >> 2] | 0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = $43 + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = HEAP32[$43 >> 2] | 0;
 $47 = $45;
 $48 = $46;
 $49 = $47 - $48 | 0;
 $50 = ($49 | 0) / 16 & -1;
 $51 = $42 + ($50 << 4) | 0;
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52 >> 2] | 0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = $57 + 8 | 0;
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60 >> 2] | 0;
 $62 = HEAP32[$56 >> 2] | 0;
 $63 = $61;
 $64 = $62;
 $65 = $63 - $64 | 0;
 $66 = ($65 | 0) / 16 & -1;
 $67 = $54 + ($66 << 4) | 0;
 __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($20, $23, $39, $51, $67), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 $this = $this | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = (tempInt = _strlen($what_arg) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1, $what_arg, $2), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 invoke_viii(564, $0 | 0, $ec | 0, $1 | 0), asyncState ? abort(-12) | 0 : 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 do {
  if ($4) {
   $18 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $19 = tempRet0;
   $$0 = $19;
   $$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(565, $this | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
   $5 = __THREW__;
   __THREW__ = 0;
   $6 = $5 & 1;
   if ($6) {
    $20 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
    $$0 = $21;
    $$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
    HEAP32[$this >> 2] = 12440;
    $7 = $this + 8 | 0;
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $8 + 4 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15 >> 2] = $10;
    $16 = $14 + 4 | 0;
    $17 = $16;
    HEAP32[$17 >> 2] = $13;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 ___resumeException($$01 | 0), asyncState ? abort(-12) | 0 : 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = $wc >>> 0 < 128;
   if ($1) {
    $2 = $wc & 255;
    HEAP8[$s >> 0] = $2;
    $$0 = 1;
    break;
   }
   $3 = $wc >>> 0 < 2048;
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5 & 255;
    $7 = $s + 1 | 0;
    HEAP8[$s >> 0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9 & 255;
    HEAP8[$7 >> 0] = $10;
    $$0 = 2;
    break;
   }
   $11 = $wc >>> 0 < 55296;
   $12 = $wc & -8192;
   $13 = ($12 | 0) == 57344;
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15 & 255;
    $17 = $s + 1 | 0;
    HEAP8[$s >> 0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20 & 255;
    $22 = $s + 2 | 0;
    HEAP8[$17 >> 0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24 & 255;
    HEAP8[$22 >> 0] = $25;
    $$0 = 3;
    break;
   }
   $26 = $wc + -65536 | 0;
   $27 = $26 >>> 0 < 1048576;
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29 & 255;
    $31 = $s + 1 | 0;
    HEAP8[$s >> 0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34 & 255;
    $36 = $s + 2 | 0;
    HEAP8[$31 >> 0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39 & 255;
    $41 = $s + 3 | 0;
    HEAP8[$36 >> 0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43 & 255;
    HEAP8[$41 >> 0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$45 >> 2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $3 = $0;
 $4 = 2728;
 HEAP32[$3 >> 2] = $4;
 __THREW__ = 0;
 (tempInt = invoke_ii(405, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $7 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  $9 = $1;
  (tempInt = ___cxa_begin_catch($9 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __THREW__ = 0;
  invoke_v(409), asyncState ? abort(-12) | 0 : 0;
  $10 = __THREW__;
  __THREW__ = 0;
  $11 = $10 & 1;
  if ($11) {
   $18 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
   $20 = $1;
   ___clang_call_terminate($20), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $12 = $3 + 96 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 1;
 if ($14) {
  $15 = $3 + 32 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = ($16 | 0) == (0 | 0);
  if (!$17) {
   __ZdaPv($16), asyncState ? abort(-12) | 0 : 0;
  }
 }
 $21 = $3 + 97 | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 $23 = $22 & 1;
 if (!$23) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 $24 = $3 + 56 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = ($25 | 0) == (0 | 0);
 if ($26) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 __ZdaPv($25), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE14__annotate_newEj($this, $__current_size) {
 $this = $this | 0;
 $__current_size = $__current_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21 >> 2] | 0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24 >> 2] | 0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = $29 + 8 | 0;
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = HEAP32[$28 >> 2] | 0;
 $35 = $33;
 $36 = $34;
 $37 = $35 - $36 | 0;
 $38 = ($37 | 0) / 16 & -1;
 $39 = $26 + ($38 << 4) | 0;
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40 >> 2] | 0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = $45 + 8 | 0;
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48 >> 2] | 0;
 $50 = HEAP32[$44 >> 2] | 0;
 $51 = $49;
 $52 = $50;
 $53 = $51 - $52 | 0;
 $54 = ($53 | 0) / 16 & -1;
 $55 = $42 + ($54 << 4) | 0;
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56 >> 2] | 0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = $58 + ($59 << 4) | 0;
 __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($20, $23, $39, $55, $60), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 L1 : do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } else {
   $1 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $3 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = (tempInt = _strtoll_l($__a, $__p2, $__base, $3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $5 = tempRet0;
   $6 = HEAP32[$1 >> 2] | 0;
   $7 = ($6 | 0) == 0;
   if ($7) {
    HEAP32[$1 >> 2] = $2;
   }
   $8 = HEAP32[$__p2 >> 2] | 0;
   $9 = ($8 | 0) == ($__a_end | 0);
   if (!$9) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6 | 0) == 34;
   do {
    if ($10) {
     HEAP32[$__err >> 2] = 4;
     $21 = ($5 | 0) > 0;
     $22 = $4 >>> 0 > 0;
     $23 = ($5 | 0) == 0;
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5 | 0) < -1;
     $12 = $4 >>> 0 < 2147483648;
     $13 = ($5 | 0) == -1;
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err >> 2] = 4;
      break;
     }
     $16 = ($5 | 0) > 0;
     $17 = $4 >>> 0 > 2147483647;
     $18 = ($5 | 0) == 0;
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err >> 2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while (0);
   $$0 = -2147483648;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = 1073741807 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $2 = HEAP8[$this >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 4 | 0;
  $21 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $21 = $6;
 }
 $8 = $__old_cap >>> 0 < 536870887;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 2;
  $14 = $12 + 4 | 0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (tempInt = __Znwj($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $20 = ($__n_copy | 0) == 0;
 if (!$20) {
  (tempInt = _wmemcpy($19, $21, $__n_copy) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $22 = $__old_sz - $__n_del | 0;
 $23 = ($22 | 0) == ($__n_copy | 0);
 if (!$23) {
  $24 = $22 - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $25 = $19 + ($$sum << 2) | 0;
  $$sum1 = $__n_del + $__n_copy | 0;
  $26 = $21 + ($$sum1 << 2) | 0;
  (tempInt = _wmemcpy($25, $26, $24) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $27 = ($__old_cap | 0) == 1;
 if (!$27) {
  __ZdlPv($21), asyncState ? abort(-12) | 0 : 0;
 }
 $28 = $this + 8 | 0;
 HEAP32[$28 >> 2] = $19;
 $29 = $18 | 1;
 HEAP32[$this >> 2] = $29;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__v = sp;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >> 2;
 $8 = $7 >>> 0 < $__n >>> 0;
 if ($8) {
  $9 = $this + 16 | 0;
  $10 = HEAP32[$this >> 2] | 0;
  $11 = $10;
  $12 = $5 - $11 | 0;
  $13 = $12 >> 2;
  $14 = $13 + $__n | 0;
  $15 = $14 >>> 0 > 1073741823;
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
  }
  $16 = $4 - $11 | 0;
  $17 = $16 >> 2;
  $18 = $17 >>> 0 < 536870911;
  if ($18) {
   $19 = $16 >> 1;
   $20 = $19 >>> 0 < $14 >>> 0;
   $21 = $20 ? $14 : $19;
   $$0$i1 = $21;
  } else {
   $$0$i1 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v, $$0$i1, $13, $9), asyncState ? abort(-12) | 0 : 0;
  $22 = $__v + 8 | 0;
  $$pre$i = HEAP32[$22 >> 2] | 0;
  $23 = $__n << 2;
  (tempInt = _memset($$pre$i | 0, 0, $23 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $scevgep = $$pre$i + ($__n << 2) | 0;
  HEAP32[$22 >> 2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v), asyncState ? abort(-12) | 0 : 0;
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n), asyncState ? abort(-12) | 0 : 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = -17 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $2 = HEAP8[$this >> 0] | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 1 | 0;
  $20 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $20 = $6;
 }
 $8 = $__old_cap >>> 0 < 2147483623;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 11;
  $14 = $12 + 16 | 0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (tempInt = __Znwj($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = ($__n_copy | 0) == 0;
 if (!$19) {
  (tempInt = _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $21 = $__old_sz - $__n_del | 0;
 $22 = ($21 | 0) == ($__n_copy | 0);
 if (!$22) {
  $23 = $21 - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $24 = $18 + $$sum | 0;
  $$sum1 = $__n_del + $__n_copy | 0;
  $25 = $20 + $$sum1 | 0;
  (tempInt = _memcpy($24 | 0, $25 | 0, $23 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $26 = ($__old_cap | 0) == 10;
 if (!$26) {
  __ZdlPv($20), asyncState ? abort(-12) | 0 : 0;
 }
 $27 = $this + 8 | 0;
 HEAP32[$27 >> 2] = $18;
 $28 = $17 | 1;
 HEAP32[$this >> 2] = $28;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1984 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1984 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1992 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1992 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 11816;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (12104 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(549 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1992 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(545, 11816 | 0, 12104 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    if (!$14) {
     __THREW__ = 0;
     (tempInt = invoke_iii(545, 11828 | 0, 12116 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $15 = __THREW__;
     __THREW__ = 0;
     $16 = $15 & 1;
     if (!$16) {
      HEAP32[12128 >> 2] = 11816;
      ___cxa_guard_release(1984 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $18 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $19 = tempRet0;
    ___cxa_guard_abort(1984 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($18 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $17 = HEAP32[12128 >> 2] | 0;
 return $17 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1968 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1968 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    $4 = HEAP8[1976 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $6 = (tempInt = ___cxa_guard_acquire(1976 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = ($6 | 0) == 0;
     if (!$7) {
      $8 = 11524;
      while (1) {
       HEAP32[$8 >> 2] = 0;
       $9 = $8 + 4 | 0;
       HEAP32[$9 >> 2] = 0;
       $10 = $8 + 8 | 0;
       HEAP32[$10 >> 2] = 0;
       $11 = $8 + 12 | 0;
       $12 = ($11 | 0) == (11812 | 0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      (tempInt = ___cxa_atexit(548 | 0, 0 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(1976 | 0), asyncState ? abort(-12) | 0 : 0;
     }
    }
    __THREW__ = 0;
    (tempInt = invoke_iii(543, 11524 | 0, 21971 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    if (!$14) {
     __THREW__ = 0;
     (tempInt = invoke_iii(543, 11536 | 0, 21974 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $15 = __THREW__;
     __THREW__ = 0;
     $16 = $15 & 1;
     if (!$16) {
      HEAP32[11812 >> 2] = 11524;
      ___cxa_guard_release(1968 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $18 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $19 = tempRet0;
    ___cxa_guard_abort(1968 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($18 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $17 = HEAP32[11812 >> 2] | 0;
 return $17 | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__nar = sp + 4 | 0;
 $__ne = sp;
 $2 = $__nar + 100 | 0;
 HEAP32[$__ne >> 2] = $2;
 $3 = $this + 8 | 0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3, $__nar, $__ne, $__tm, $__fmt, $__mod), asyncState ? abort(-12) | 0 : 0;
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 $6 = $5;
 $7 = ($__nar | 0) == ($4 | 0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;
  $10 = $6;
  while (1) {
   $8 = HEAP8[$$0$i$i2 >> 0] | 0;
   $9 = ($10 | 0) == (0 | 0);
   do {
    if ($9) {
     $25 = 0;
    } else {
     $11 = $10 + 24 | 0;
     $12 = HEAP32[$11 >> 2] | 0;
     $13 = $10 + 28 | 0;
     $14 = HEAP32[$13 >> 2] | 0;
     $15 = ($12 | 0) == ($14 | 0);
     if ($15) {
      $17 = HEAP32[$10 >> 2] | 0;
      $18 = $17 + 52 | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $8 & 255;
      $21 = (tempInt = FUNCTION_TABLE_iii[$19 & 1023]($10, $20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $22 = ($21 | 0) == -1;
      $$$i = $22 ? 0 : $10;
      $25 = $$$i;
      break;
     } else {
      $16 = $12 + 1 | 0;
      HEAP32[$11 >> 2] = $16;
      HEAP8[$12 >> 0] = $8;
      $25 = $10;
      break;
     }
    }
   } while (0);
   $23 = $$0$i$i2 + 1 | 0;
   $24 = ($23 | 0) == ($4 | 0);
   if ($24) {
    $$lcssa = $25;
    break;
   } else {
    $$0$i$i2 = $23;
    $10 = $25;
   }
  }
 }
 STACKTOP = sp;
 return $$lcssa | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSN_SN_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16 >> 2] = 0;
 $17 = $14;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = $20 + 8 | 0;
 HEAP32[$21 >> 2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23 >> 2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = ($26 | 0) != (0 | 0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28 >> 2] | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31 >> 2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = $32 + 4 | 0;
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $13;
 $40 = HEAP32[$39 >> 2] | 0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38, $40), asyncState ? abort(-12) | 0 : 0;
 $9 = $15;
 $41 = $9;
 $42 = $41 + 8 | 0;
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = $45 + 1 | 0;
 HEAP32[$44 >> 2] = $46;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__nar = sp + 8 | 0;
 $__ne = sp;
 $2 = $__nar + 400 | 0;
 HEAP32[$__ne >> 2] = $2;
 $3 = $this + 8 | 0;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3, $__nar, $__ne, $__tm, $__fmt, $__mod), asyncState ? abort(-12) | 0 : 0;
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 $6 = $5;
 $7 = ($__nar | 0) == ($4 | 0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;
  $10 = $6;
  while (1) {
   $8 = HEAP32[$$0$i$i2 >> 2] | 0;
   $9 = ($10 | 0) == (0 | 0);
   if ($9) {
    $24 = 0;
   } else {
    $11 = $10 + 24 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $10 + 28 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($12 | 0) == ($14 | 0);
    if ($15) {
     $16 = HEAP32[$10 >> 2] | 0;
     $17 = $16 + 52 | 0;
     $18 = HEAP32[$17 >> 2] | 0;
     $19 = (tempInt = FUNCTION_TABLE_iii[$18 & 1023]($10, $8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0$i$i$i$i = $19;
    } else {
     $20 = $12 + 4 | 0;
     HEAP32[$11 >> 2] = $20;
     HEAP32[$12 >> 2] = $8;
     $$0$i$i$i$i = $8;
    }
    $21 = ($$0$i$i$i$i | 0) == -1;
    $$$i = $21 ? 0 : $10;
    $24 = $$$i;
   }
   $22 = $$0$i$i2 + 4 | 0;
   $23 = ($22 | 0) == ($4 | 0);
   if ($23) {
    $$lcssa = $24;
    break;
   } else {
    $$0$i$i2 = $22;
    $10 = $24;
   }
  }
 }
 STACKTOP = sp;
 return $$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     HEAP32[$6 >> 2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info >> 2] | 0;
   $10 = ($this | 0) == ($9 | 0);
   if ($10) {
    $11 = $info + 16 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == ($current_ptr | 0);
    if (!$13) {
     $14 = $info + 20 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     $16 = ($15 | 0) == ($current_ptr | 0);
     if (!$16) {
      $19 = $info + 32 | 0;
      HEAP32[$19 >> 2] = $path_below;
      HEAP32[$14 >> 2] = $current_ptr;
      $20 = $info + 40 | 0;
      $21 = HEAP32[$20 >> 2] | 0;
      $22 = $21 + 1 | 0;
      HEAP32[$20 >> 2] = $22;
      $23 = $info + 36 | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      $25 = ($24 | 0) == 1;
      if ($25) {
       $26 = $info + 24 | 0;
       $27 = HEAP32[$26 >> 2] | 0;
       $28 = ($27 | 0) == 2;
       if ($28) {
        $29 = $info + 54 | 0;
        HEAP8[$29 >> 0] = 1;
       }
      }
      $30 = $info + 44 | 0;
      HEAP32[$30 >> 2] = 4;
      break;
     }
    }
    $17 = ($path_below | 0) == 1;
    if ($17) {
     $18 = $info + 32 | 0;
     HEAP32[$18 >> 2] = 1;
    }
   }
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $1 = HEAP8[$this >> 0] | 0;
  $2 = $1 & 1;
  $3 = $2 << 24 >> 24 == 0;
  if ($3) {
   $15 = 10;
   $8 = $1;
  } else {
   $4 = HEAP32[$this >> 2] | 0;
   $5 = $4 & -2;
   $phitmp$i = $5 + -1 | 0;
   $6 = $4 & 255;
   $15 = $phitmp$i;
   $8 = $6;
  }
  $7 = $8 & 1;
  $9 = $7 << 24 >> 24 == 0;
  if ($9) {
   $12 = $8 & 255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = $this + 4 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $16 = $11;
  }
  $14 = $15 - $16 | 0;
  $17 = $14 >>> 0 < $__n >>> 0;
  if ($17) {
   $18 = $__n - $15 | 0;
   $19 = $18 + $16 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $19, $16, $16, 0, 0), asyncState ? abort(-12) | 0 : 0;
   $$pre = HEAP8[$this >> 0] | 0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = $20 << 24 >> 24 == 0;
  if ($22) {
   $25 = $this + 1 | 0;
   $27 = $25;
  } else {
   $23 = $this + 8 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   $27 = $24;
  }
  $26 = $27 + $16 | 0;
  (tempInt = _memset($26 | 0, $__c | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $28 = $16 + $__n | 0;
  $29 = HEAP8[$this >> 0] | 0;
  $30 = $29 & 1;
  $31 = $30 << 24 >> 24 == 0;
  if ($31) {
   $33 = $28 << 1;
   $34 = $33 & 255;
   HEAP8[$this >> 0] = $34;
  } else {
   $32 = $this + 4 | 0;
   HEAP32[$32 >> 2] = $28;
  }
  $35 = $27 + $28 | 0;
  HEAP8[$35 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 53 | 0;
 HEAP8[$0 >> 0] = 1;
 $1 = $info + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == ($current_ptr | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($3) {
   $4 = $info + 52 | 0;
   HEAP8[$4 >> 0] = 1;
   $5 = $info + 16 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $7 = ($6 | 0) == (0 | 0);
   if ($7) {
    HEAP32[$5 >> 2] = $dst_ptr;
    $8 = $info + 24 | 0;
    HEAP32[$8 >> 2] = $path_below;
    $9 = $info + 36 | 0;
    HEAP32[$9 >> 2] = 1;
    $10 = $info + 48 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) == 1;
    $13 = ($path_below | 0) == 1;
    $or$cond = $12 & $13;
    if (!$or$cond) {
     break;
    }
    $14 = $info + 54 | 0;
    HEAP8[$14 >> 0] = 1;
    break;
   }
   $15 = ($6 | 0) == ($dst_ptr | 0);
   if (!$15) {
    $25 = $info + 36 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 + 1 | 0;
    HEAP32[$25 >> 2] = $27;
    $28 = $info + 54 | 0;
    HEAP8[$28 >> 0] = 1;
    break;
   }
   $16 = $info + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $18 = ($17 | 0) == 2;
   if ($18) {
    HEAP32[$16 >> 2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = $info + 48 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = ($20 | 0) == 1;
   $22 = ($23 | 0) == 1;
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = $info + 54 | 0;
    HEAP8[$24 >> 0] = 1;
   }
  }
 } while (0);
 return;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 76 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) < 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  label = 3;
 } else {
  $3 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   label = 3;
  } else {
   $18 = $f + 75 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   $20 = $19 << 24 >> 24;
   $21 = ($20 | 0) == ($c | 0);
   if ($21) {
    label = 10;
   } else {
    $22 = $f + 20 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $f + 16 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $23 >>> 0 < $25 >>> 0;
    if ($26) {
     $27 = $c & 255;
     $28 = $23 + 1 | 0;
     HEAP32[$22 >> 2] = $28;
     HEAP8[$23 >> 0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label | 0) == 10) {
    $30 = (tempInt = ___overflow($f, $c) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $31 = $30;
   }
   ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
   $$0 = $31;
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = $f + 75 | 0;
   $6 = HEAP8[$5 >> 0] | 0;
   $7 = $6 << 24 >> 24;
   $8 = ($7 | 0) == ($c | 0);
   if (!$8) {
    $9 = $f + 20 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $f + 16 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $10 >>> 0 < $12 >>> 0;
    if ($13) {
     $14 = $c & 255;
     $15 = $10 + 1 | 0;
     HEAP32[$9 >> 2] = $15;
     HEAP8[$10 >> 0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (tempInt = ___overflow($f, $c) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$0 = $17;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) != (478 | 0);
 $3 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $7 >>> 0 < 2147483647;
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n >> 2] | 0;
 $11 = $10;
 $12 = $11 - $6 | 0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (tempInt = _realloc($14, $$) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $16 = ($15 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($16) {
  __ZSt17__throw_bad_allocv(), asyncState ? abort(-12) | 0 : 0;
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b >> 2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b >> 2] | 0;
   $18 = $15;
   HEAP32[$__b >> 2] = $18;
   $19 = ($$pr | 0) == (0 | 0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi($20 | 0, $$pr | 0), asyncState ? abort(-12) | 0 : 0;
    $21 = __THREW__;
    __THREW__ = 0;
    $22 = $21 & 1;
    if ($22) {
     $23 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $24 = tempRet0;
     ___clang_call_terminate($23), asyncState ? abort(-12) | 0 : 0;
    } else {
     $$pre = HEAP32[$__b >> 2] | 0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = 370;
 $25 = $$ >>> 2;
 $26 = $27 + ($13 << 2) | 0;
 HEAP32[$__n >> 2] = $26;
 $28 = HEAP32[$__b >> 2] | 0;
 $29 = $28 + ($25 << 2) | 0;
 HEAP32[$__e >> 2] = $29;
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) != (478 | 0);
 $3 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $7 >>> 0 < 2147483647;
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n >> 2] | 0;
 $11 = $10;
 $12 = $11 - $6 | 0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (tempInt = _realloc($14, $$) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $16 = ($15 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($16) {
  __ZSt17__throw_bad_allocv(), asyncState ? abort(-12) | 0 : 0;
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b >> 2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b >> 2] | 0;
   $18 = $15;
   HEAP32[$__b >> 2] = $18;
   $19 = ($$pr | 0) == (0 | 0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi($20 | 0, $$pr | 0), asyncState ? abort(-12) | 0 : 0;
    $21 = __THREW__;
    __THREW__ = 0;
    $22 = $21 & 1;
    if ($22) {
     $23 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $24 = tempRet0;
     ___clang_call_terminate($23), asyncState ? abort(-12) | 0 : 0;
    } else {
     $$pre = HEAP32[$__b >> 2] | 0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = 370;
 $25 = $$ >>> 2;
 $26 = $27 + ($13 << 2) | 0;
 HEAP32[$__n >> 2] = $26;
 $28 = HEAP32[$__b >> 2] | 0;
 $29 = $28 + ($25 << 2) | 0;
 HEAP32[$__e >> 2] = $29;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $14 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $4 = $3 & -2;
  $phitmp$i = $4 + -1 | 0;
  $5 = $3 & 255;
  $14 = $phitmp$i;
  $7 = $5;
 }
 $6 = $7 & 1;
 $8 = $6 << 24 >> 24 == 0;
 if ($8) {
  $11 = $7 & 255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = $this + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $15 = $10;
 }
 $13 = $14 - $15 | 0;
 $16 = $13 >>> 0 < $__n >>> 0;
 if ($16) {
  $33 = $__n - $14 | 0;
  $34 = $33 + $15 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $14, $34, $15, $15, 0, $__n, $__s), asyncState ? abort(-12) | 0 : 0;
 } else {
  $17 = ($__n | 0) == 0;
  if (!$17) {
   $18 = $7 & 1;
   $19 = $18 << 24 >> 24 == 0;
   if ($19) {
    $22 = $this + 1 | 0;
    $24 = $22;
   } else {
    $20 = $this + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $24 = $21;
   }
   $23 = $24 + $15 | 0;
   (tempInt = _memcpy($23 | 0, $__s | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $25 = $15 + $__n | 0;
   $26 = HEAP8[$this >> 0] | 0;
   $27 = $26 & 1;
   $28 = $27 << 24 >> 24 == 0;
   if ($28) {
    $30 = $25 << 1;
    $31 = $30 & 255;
    HEAP8[$this >> 0] = $31;
   } else {
    $29 = $this + 4 | 0;
    HEAP32[$29 >> 2] = $25;
   }
   $32 = $24 + $25 | 0;
   HEAP8[$32 >> 0] = 0;
  }
 }
 return $this | 0;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (tempInt = __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE8max_sizeEv($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $17 = $15 >>> 0 > $16 >>> 0;
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14), asyncState ? abort(-12) | 0 : 0;
 }
 $11 = $14;
 $18 = $11;
 $19 = $18 + 8 | 0;
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = $25 << 4;
 $3 = $26;
 $27 = $3;
 $28 = (tempInt = __Znwj($27) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $29 = $14 + 4 | 0;
 HEAP32[$29 >> 2] = $28;
 HEAP32[$14 >> 2] = $28;
 $30 = HEAP32[$14 >> 2] | 0;
 $31 = $13;
 $32 = $30 + ($31 << 4) | 0;
 $2 = $14;
 $33 = $2;
 $34 = $33 + 8 | 0;
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36 >> 2] = $32;
 __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE14__annotate_newEj($14, 0), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = (tempInt = _uselocale($__l) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_iiii(562, $__s | 0, $__format | 0, $__va | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if ($3) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  $11 = ($0 | 0) == (0 | 0);
  if (!$11) {
   __THREW__ = 0;
   (tempInt = invoke_ii(477, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $12 = __THREW__;
   __THREW__ = 0;
   $13 = $12 & 1;
   if ($13) {
    $14 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $15 = tempRet0;
    ___clang_call_terminate($14), asyncState ? abort(-12) | 0 : 0;
   }
  }
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $4 = ($0 | 0) == (0 | 0);
  if (!$4) {
   __THREW__ = 0;
   (tempInt = invoke_ii(477, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $5 = __THREW__;
   __THREW__ = 0;
   $6 = $5 & 1;
   if ($6) {
    $7 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $8 = tempRet0;
    ___clang_call_terminate($7), asyncState ? abort(-12) | 0 : 0;
   }
  }
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__b + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) != (478 | 0);
 $3 = HEAP32[$__e >> 2] | 0;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $7 >>> 0 < 2147483647;
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n >> 2] | 0;
 $11 = $10;
 $12 = $11 - $6 | 0;
 $13 = $2 ? $4 : 0;
 $14 = (tempInt = _realloc($13, $$) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $15 = ($14 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($15) {
  __ZSt17__throw_bad_allocv(), asyncState ? abort(-12) | 0 : 0;
 }
 do {
  if ($2) {
   $16 = $14;
   HEAP32[$__b >> 2] = $16;
   $25 = $14;
  } else {
   $$pr = HEAP32[$__b >> 2] | 0;
   $17 = $14;
   HEAP32[$__b >> 2] = $17;
   $18 = ($$pr | 0) == (0 | 0);
   if ($18) {
    $25 = $14;
   } else {
    $19 = HEAP32[$0 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi($19 | 0, $$pr | 0), asyncState ? abort(-12) | 0 : 0;
    $20 = __THREW__;
    __THREW__ = 0;
    $21 = $20 & 1;
    if ($21) {
     $22 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $23 = tempRet0;
     ___clang_call_terminate($22), asyncState ? abort(-12) | 0 : 0;
    } else {
     $$pre = HEAP32[$__b >> 2] | 0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = 370;
 $24 = $25 + $12 | 0;
 HEAP32[$__n >> 2] = $24;
 $26 = HEAP32[$__b >> 2] | 0;
 $27 = $26 + $$ | 0;
 HEAP32[$__e >> 2] = $27;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parserC2ERKS9_NS1_8functionIFbiNSA_13parse_event_tERSA_EEE($this, $s, $cb) {
 $this = $this | 0;
 $s = $s | 0;
 $cb = $cb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $s;
 $4 = $0;
 HEAP32[$4 >> 2] = 0;
 $5 = $4 + 8 | 0;
 __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EEC2ERKSF_($5, $cb), asyncState ? abort(-12) | 0 : 0;
 $6 = $4 + 32 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $4 + 36 | 0;
 $8 = $1;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexerC2ERKS9_($7, $8), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 (tempInt = invoke_ii(414, $4 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  $11 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = tempRet0;
  $2 = $11;
  $3 = $12;
  __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexerD2Ev($7), asyncState ? abort(-12) | 0 : 0;
  __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($5), asyncState ? abort(-12) | 0 : 0;
  $13 = $2;
  $14 = $3;
  ___resumeException($13 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 3752;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $n + -1 | 0;
 $1 = $0 >>> 0 > 2147483646;
 if ($1) {
  $2 = ($n | 0) == 0;
  if ($2) {
   $$01 = $b;
   $$02 = 1;
   label = 4;
  } else {
   $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$3 >> 2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $4 = $$01;
  $5 = -2 - $4 | 0;
  $6 = $$02 >>> 0 > $5 >>> 0;
  $$$02 = $6 ? $5 : $$02;
  $7 = $f + 48 | 0;
  HEAP32[$7 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  $9 = $f + 44 | 0;
  HEAP32[$9 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  $12 = $f + 28 | 0;
  HEAP32[$12 >> 2] = $10;
  $13 = (tempInt = _vfprintf($f, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $14 = ($$$02 | 0) == 0;
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8 >> 2] | 0;
   $16 = HEAP32[$11 >> 2] | 0;
   $17 = ($15 | 0) == ($16 | 0);
   $18 = $17 << 31 >> 31;
   $19 = $15 + $18 | 0;
   HEAP8[$19 >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 != 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $5 = HEAP32[$this >> 2] | 0;
  $6 = $5 & -2;
  $7 = $6 + -1 | 0;
  $8 = $this + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $__cap$0 = $7;
  $__sz$0 = $9;
 } else {
  $3 = $0 & 255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;
  $__sz$0 = $4;
 }
 $10 = ($__sz$0 | 0) == ($__cap$0 | 0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0), asyncState ? abort(-12) | 0 : 0;
  $11 = HEAP8[$this >> 0] | 0;
  $12 = $11 & 1;
  $13 = $12 << 24 >> 24 == 0;
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  $14 = $this + 4 | 0;
  $15 = $__sz$0 << 1;
  $16 = $15 + 2 | 0;
  $17 = $16 & 255;
  HEAP8[$this >> 0] = $17;
  $$pre = $__sz$0 + 1 | 0;
  $$pn = $14;
  $__p$0$sum$pre$phiZZZ2D = $$pre;
 } else if ((label | 0) == 8) {
  $18 = $this + 8 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  $21 = $this + 4 | 0;
  HEAP32[$21 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = $$pn + ($__sz$0 << 2) | 0;
 HEAP32[$__p$0 >> 2] = $__c;
 $22 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0;
 HEAP32[$22 >> 2] = 0;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $1 >>> 0 > 0;
 $3 = $0 >>> 0 > 4294967295;
 $4 = ($1 | 0) == 0;
 $5 = $4 & $3;
 $6 = $2 | $5;
 asyncState ? abort(-12) | 0 : 0;
 if ($6) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = (tempInt = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11 & 255;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $12;
   $14 = (tempInt = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $15 = tempRet0;
   $16 = $8 >>> 0 > 9;
   $17 = $7 >>> 0 > 4294967295;
   $18 = ($8 | 0) == 9;
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;
    $7 = $14;
    $8 = $15;
   } else {
    $$lcssa20 = $13;
    $28 = $14;
    $29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0 | 0) == 0;
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $22 = ($y$03 >>> 0) % 10 & -1;
   $23 = $22 | 48;
   $24 = $23 & 255;
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = $24;
   $26 = ($y$03 >>> 0) / 10 & -1;
   $27 = $y$03 >>> 0 < 10;
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $__x;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $__y = $4;
 $5 = $__y;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $1;
 $8 = $7 + 4 | 0;
 HEAP32[$8 >> 2] = $6;
 $9 = $1;
 $10 = $9 + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = ($11 | 0) != (0 | 0);
 if ($12) {
  $13 = $1;
  $14 = $1;
  $15 = $14 + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = $16 + 8 | 0;
  HEAP32[$17 >> 2] = $13;
 }
 $18 = $1;
 $19 = $18 + 8 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $__y;
 $22 = $21 + 8 | 0;
 HEAP32[$22 >> 2] = $20;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $25 = $0;
 $26 = $25 + 8 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 $29 = ($24 | 0) == ($28 | 0);
 $30 = $__y;
 $31 = $1;
 $32 = $31 + 8 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 if ($29) {
  HEAP32[$33 >> 2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36 >> 2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = $38 + 8 | 0;
  HEAP32[$39 >> 2] = $37;
  STACKTOP = sp;
  return;
 } else {
  $34 = $33 + 4 | 0;
  HEAP32[$34 >> 2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36 >> 2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = $38 + 8 | 0;
  HEAP32[$39 >> 2] = $37;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 != 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $5 = HEAP32[$this >> 2] | 0;
  $6 = $5 & -2;
  $7 = $6 + -1 | 0;
  $8 = $this + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $__cap$0 = $7;
  $__sz$0 = $9;
 } else {
  $3 = $0 & 255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;
  $__sz$0 = $4;
 }
 $10 = ($__sz$0 | 0) == ($__cap$0 | 0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0), asyncState ? abort(-12) | 0 : 0;
  $11 = HEAP8[$this >> 0] | 0;
  $12 = $11 & 1;
  $13 = $12 << 24 >> 24 == 0;
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  $14 = $this + 1 | 0;
  $15 = $__sz$0 << 1;
  $16 = $15 + 2 | 0;
  $17 = $16 & 255;
  HEAP8[$this >> 0] = $17;
  $$pre = $__sz$0 + 1 | 0;
  $$pn = $14;
  $__p$0$sum$pre$phiZZZ2D = $$pre;
 } else if ((label | 0) == 8) {
  $18 = $this + 8 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  $21 = $this + 4 | 0;
  HEAP32[$21 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = $$pn + $__sz$0 | 0;
 HEAP8[$__p$0 >> 0] = $__c;
 $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
 HEAP8[$22 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $7 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $4 = $3 & -2;
  $phitmp$i = $4 + -1 | 0;
  $5 = $3 & 255;
  $7 = $phitmp$i;
  $9 = $5;
 }
 $6 = $7 >>> 0 < $__n >>> 0;
 $8 = $9 & 1;
 $10 = $8 << 24 >> 24 == 0;
 do {
  if ($6) {
   if ($10) {
    $24 = $9 & 255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = $this + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $27 = $23;
   }
   $26 = $__n - $7 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $7, $26, $27, 0, $27, $__n, $__s), asyncState ? abort(-12) | 0 : 0;
  } else {
   if ($10) {
    $13 = $this + 1 | 0;
    $14 = $13;
   } else {
    $11 = $this + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $14 = $12;
   }
   (tempInt = _memmove($14 | 0, $__s | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $15 = $14 + $__n | 0;
   HEAP8[$15 >> 0] = 0;
   $16 = HEAP8[$this >> 0] | 0;
   $17 = $16 & 1;
   $18 = $17 << 24 >> 24 == 0;
   if ($18) {
    $20 = $__n << 1;
    $21 = $20 & 255;
    HEAP8[$this >> 0] = $21;
    break;
   } else {
    $19 = $this + 4 | 0;
    HEAP32[$19 >> 2] = $__n;
    break;
   }
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $7 = 1;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $4 = $3 & -2;
  $phitmp$i = $4 + -1 | 0;
  $5 = $3 & 255;
  $7 = $phitmp$i;
  $9 = $5;
 }
 $6 = $7 >>> 0 < $__n >>> 0;
 $8 = $9 & 1;
 $10 = $8 << 24 >> 24 == 0;
 do {
  if ($6) {
   if ($10) {
    $24 = $9 & 255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = $this + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $27 = $23;
   }
   $26 = $__n - $7 | 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $7, $26, $27, 0, $27, $__n, $__s), asyncState ? abort(-12) | 0 : 0;
  } else {
   if ($10) {
    $13 = $this + 4 | 0;
    $14 = $13;
   } else {
    $11 = $this + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $14 = $12;
   }
   (tempInt = _wmemmove($14, $__s, $__n) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $15 = $14 + ($__n << 2) | 0;
   HEAP32[$15 >> 2] = 0;
   $16 = HEAP8[$this >> 0] | 0;
   $17 = $16 & 1;
   $18 = $17 << 24 >> 24 == 0;
   if ($18) {
    $20 = $__n << 1;
    $21 = $20 & 255;
    HEAP8[$this >> 0] = $21;
    break;
   } else {
    $19 = $this + 4 | 0;
    HEAP32[$19 >> 2] = $__n;
    break;
   }
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a >> 0] | 0;
   $2 = $1 << 24 >> 24 == 45;
   if ($2) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = (tempInt = _strtoull_l($__a, $__p2, $__base, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = tempRet0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = ($8 | 0) == 0;
   if ($9) {
    HEAP32[$3 >> 2] = $4;
   }
   $10 = HEAP32[$__p2 >> 2] | 0;
   $11 = ($10 | 0) == ($__a_end | 0);
   if (!$11) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8 | 0) == 34;
   $13 = $7 >>> 0 > 0;
   $14 = $6 >>> 0 > 65535;
   $15 = ($7 | 0) == 0;
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err >> 2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6 & 65535;
    $$0 = $18;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $info = sp;
 $0 = ($this | 0) == ($thrown_type | 0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type | 0) == (0 | 0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (tempInt = ___dynamic_cast($thrown_type, 248, 264, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == (0 | 0);
   if ($3) {
    $$1 = 0;
   } else {
    dest = $info;
    stop = dest + 56 | 0;
    do {
     HEAP32[dest >> 2] = 0 | 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$info >> 2] = $2;
    $4 = $info + 8 | 0;
    HEAP32[$4 >> 2] = $this;
    $5 = $info + 12 | 0;
    HEAP32[$5 >> 2] = -1;
    $6 = $info + 48 | 0;
    HEAP32[$6 >> 2] = 1;
    $7 = HEAP32[$2 >> 2] | 0;
    $8 = $7 + 28 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$adjustedPtr >> 2] | 0;
    FUNCTION_TABLE_viiii[$9 & 511]($2, $info, $10, 1), asyncState ? abort(-12) | 0 : 0;
    $11 = $info + 24 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 1;
    if ($13) {
     $14 = $info + 16 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     HEAP32[$adjustedPtr >> 2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 16 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 24 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 16 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 24 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + 20 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = (tempInt = FUNCTION_TABLE_ii[$5 & 1023]($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $7;
 $8 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $8;
 $9 = HEAP8[$6 >> 0] | 0;
 $10 = $9 & 1;
 $11 = $10 << 24 >> 24 == 0;
 $12 = $6 + 8 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $6 + 1 | 0;
 $15 = $11 ? $14 : $13;
 $16 = $6 + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $9 & 255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = $15 + $20 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $22 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $21) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $__x;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $__y = $3;
 $4 = $__y;
 $5 = $4 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $1;
 HEAP32[$7 >> 2] = $6;
 $8 = $1;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = ($9 | 0) != (0 | 0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = $13 + 8 | 0;
  HEAP32[$14 >> 2] = $11;
 }
 $15 = $1;
 $16 = $15 + 8 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $__y;
 $19 = $18 + 8 | 0;
 HEAP32[$19 >> 2] = $17;
 $20 = $1;
 $0 = $20;
 $21 = $0;
 $22 = $0;
 $23 = $22 + 8 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = ($21 | 0) == ($25 | 0);
 $27 = $__y;
 $28 = $1;
 $29 = $28 + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if ($26) {
  HEAP32[$30 >> 2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = $33 + 4 | 0;
  HEAP32[$34 >> 2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = $36 + 8 | 0;
  HEAP32[$37 >> 2] = $35;
  STACKTOP = sp;
  return;
 } else {
  $31 = $30 + 4 | 0;
  HEAP32[$31 >> 2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = $33 + 4 | 0;
  HEAP32[$34 >> 2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = $36 + 8 | 0;
  HEAP32[$37 >> 2] = $35;
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8908 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 20 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = (tempInt = __ZNKSt3__18ios_base6getlocEv($__iob) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = $2;
 __THREW__ = 0;
 $3 = (tempInt = invoke_iii(398, $0 | 0, 8916 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $10 = tempRet0;
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $__tm + 20 | 0;
  $7 = HEAP32[$__e >> 2] | 0;
  HEAP32[$1 >> 2] = $7;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2] | 0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $6, $__b, $$byval_copy, $__err, $3), asyncState ? abort(-12) | 0 : 0;
  $8 = HEAP32[$__b >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a >> 0] | 0;
   $2 = $1 << 24 >> 24 == 45;
   if ($2) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = (tempInt = _strtoull_l($__a, $__p2, $__base, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = tempRet0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = ($8 | 0) == 0;
   if ($9) {
    HEAP32[$3 >> 2] = $4;
   }
   $10 = HEAP32[$__p2 >> 2] | 0;
   $11 = ($10 | 0) == ($__a_end | 0);
   if (!$11) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8 | 0) == 34;
   $13 = $7 >>> 0 > 0;
   $14 = $6 >>> 0 > 4294967295;
   $15 = ($7 | 0) == 0;
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err >> 2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a >> 0] | 0;
   $2 = $1 << 24 >> 24 == 45;
   if ($2) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = (tempInt = _strtoull_l($__a, $__p2, $__base, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = tempRet0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = ($8 | 0) == 0;
   if ($9) {
    HEAP32[$3 >> 2] = $4;
   }
   $10 = HEAP32[$__p2 >> 2] | 0;
   $11 = ($10 | 0) == ($__a_end | 0);
   if (!$11) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8 | 0) == 34;
   $13 = $7 >>> 0 > 0;
   $14 = $6 >>> 0 > 4294967295;
   $15 = ($7 | 0) == 0;
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err >> 2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + 20 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = (tempInt = FUNCTION_TABLE_ii[$5 & 1023]($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $7;
 $8 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $8;
 $9 = HEAP8[$6 >> 0] | 0;
 $10 = $9 & 1;
 $11 = $10 << 24 >> 24 == 0;
 $12 = $6 + 8 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $6 + 4 | 0;
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14 >> 2] | 0;
 $17 = $9 & 255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = $15 + ($19 << 2) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $21 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode >> 0] | 0;
 $1 = $0 << 24 >> 24;
 $memchr = (tempInt = _memchr(18273, $1, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($memchr | 0) == (0 | 0);
 if ($2) {
  $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$3 >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = (tempInt = ___fmodeflags($mode) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $5;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = 438;
  $6 = (tempInt = ___syscall5(5, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = (tempInt = ___syscall_ret($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = ($7 | 0) < 0;
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (tempInt = ___fdopen($7, $mode) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $10 = ($9 | 0) == (0 | 0);
   if ($10) {
    HEAP32[$vararg_buffer3 >> 2] = $7;
    (tempInt = ___syscall6(6, $vararg_buffer3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($this, $__pos, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__n = $__n | 0;
 var $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $5 = $0 & 255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = $this + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $8 = $4;
 }
 $7 = $8 >>> 0 < $__pos >>> 0;
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $9 = ($__n | 0) == 0;
 if (!$9) {
  if ($2) {
   $12 = $this + 1 | 0;
   $19 = $12;
  } else {
   $10 = $this + 8 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   $19 = $11;
  }
  $13 = $8 - $__pos | 0;
  $14 = $13 >>> 0 < $__n >>> 0;
  $15 = $14 ? $13 : $__n;
  $16 = ($13 | 0) == ($15 | 0);
  if ($16) {
   $23 = $0;
  } else {
   $17 = $13 - $15 | 0;
   $18 = $19 + $__pos | 0;
   $$sum = $15 + $__pos | 0;
   $20 = $19 + $$sum | 0;
   (tempInt = _memmove($18 | 0, $20 | 0, $17 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$pre = HEAP8[$this >> 0] | 0;
   $23 = $$pre;
  }
  $21 = $8 - $15 | 0;
  $22 = $23 & 1;
  $24 = $22 << 24 >> 24 == 0;
  if ($24) {
   $26 = $21 << 1;
   $27 = $26 & 255;
   HEAP8[$this >> 0] = $27;
  } else {
   $25 = $this + 4 | 0;
   HEAP32[$25 >> 2] = $21;
  }
  $28 = $19 + $21 | 0;
  HEAP8[$28 >> 0] = 0;
 }
 return $this | 0;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0 | 0) == 0;
 $2 = ($w | 0) > ($l | 0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = $w - $l | 0;
   $4 = $3 >>> 0 > 256;
   $5 = $4 ? 256 : $3;
   (tempInt = _memset($pad | 0, $c | 0, $5 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = $3 >>> 0 > 255;
   $7 = HEAP32[$f >> 2] | 0;
   $8 = $7 & 32;
   $9 = ($8 | 0) == 0;
   if ($6) {
    $10 = $w - $l | 0;
    $$02 = $3;
    $17 = $7;
    $18 = $9;
    while (1) {
     if ($18) {
      (tempInt = ___fwritex($pad, 256, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $$pre = HEAP32[$f >> 2] | 0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = $$02 + -256 | 0;
     $12 = $11 >>> 0 > 255;
     $13 = $14 & 32;
     $15 = ($13 | 0) == 0;
     if ($12) {
      $$02 = $11;
      $17 = $14;
      $18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (tempInt = ___fwritex($pad, $$0$lcssa6, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorC2EPKSA_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $3 = $this;
 $4 = $object;
 $8 = $3;
 $9 = $4;
 HEAP32[$8 >> 2] = $9;
 $10 = $8 + 4 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E17internal_iteratorC2Ev($10), asyncState ? abort(-12) | 0 : 0;
 $11 = HEAP32[$8 >> 2] | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 switch ($12 << 24 >> 24) {
 case 1:
  {
   $13 = $8 + 4 | 0;
   $2 = $5;
   $14 = $2;
   $1 = $14;
   $15 = $1;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$13 >> 2] = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $16 = $8 + 4 | 0;
   $17 = $16 + 4 | 0;
   $0 = $6;
   $18 = $0;
   HEAP32[$18 >> 2] = 0;
   HEAP32[$17 >> 2] = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   $19 = $8 + 4 | 0;
   $20 = $19 + 8 | 0;
   HEAP32[$7 >> 2] = 0 | 0;
   __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tC2Ev($7), asyncState ? abort(-12) | 0 : 0;
   HEAP32[$20 >> 2] = HEAP32[$7 >> 2] | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = $1 - $0 | 0;
 $3 = $2 >> 2;
 $4 = $3 >>> 0 > 1073741807;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $5 = $3 >>> 0 < 2;
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6 & 255;
  HEAP8[$this >> 0] = $7;
  $8 = $this + 4 | 0;
  $__p$0$ph = $8;
 } else {
  $9 = $3 + 4 | 0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (tempInt = __Znwj($11) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $13 = $this + 8 | 0;
  HEAP32[$13 >> 2] = $12;
  $14 = $10 | 1;
  HEAP32[$this >> 2] = $14;
  $15 = $this + 4 | 0;
  HEAP32[$15 >> 2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = $16 - $0 | 0;
 $18 = $17 >>> 2;
 $19 = ($__first | 0) == ($__last | 0);
 if (!$19) {
  $$04 = $__first;
  $__p$03 = $__p$0$ph;
  while (1) {
   $20 = HEAP32[$$04 >> 2] | 0;
   HEAP32[$__p$03 >> 2] = $20;
   $21 = $$04 + 4 | 0;
   $22 = $__p$03 + 4 | 0;
   $23 = ($21 | 0) == ($__last | 0);
   if ($23) {
    break;
   } else {
    $$04 = $21;
    $__p$03 = $22;
   }
  }
 }
 $scevgep = $__p$0$ph + ($18 << 2) | 0;
 HEAP32[$scevgep >> 2] = 0;
 return;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $18 = 0;
   $19 = 0;
  } else {
   $1 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $3 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = (tempInt = _strtoll_l($__a, $__p2, $__base, $3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $5 = tempRet0;
   $6 = HEAP32[$1 >> 2] | 0;
   $7 = ($6 | 0) == 0;
   if ($7) {
    HEAP32[$1 >> 2] = $2;
   }
   $8 = HEAP32[$__p2 >> 2] | 0;
   $9 = ($8 | 0) == ($__a_end | 0);
   if (!$9) {
    HEAP32[$__err >> 2] = 4;
    $18 = 0;
    $19 = 0;
    break;
   }
   $10 = ($6 | 0) == 34;
   if ($10) {
    HEAP32[$__err >> 2] = 4;
    $11 = ($5 | 0) > 0;
    $12 = $4 >>> 0 > 0;
    $13 = ($5 | 0) == 0;
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = $17;
    STACKTOP = sp;
    return $16 | 0;
   } else {
    $18 = $5;
    $19 = $4;
   }
  }
 } while (0);
 tempRet0 = $18;
 STACKTOP = sp;
 return $19 | 0;
}

function ___cxx_global_array_dtor54($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10064), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10052), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10040), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10028), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10016), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10004), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9992), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9980), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9968), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9956), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9944), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9932), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9920), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9908), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = $__fmtp + 1 | 0;
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = $$0 + 1 | 0;
  HEAP8[$$0 >> 0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len >> 0] | 0;
 $7 = $6 << 24 >> 24 == 0;
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;
  $$13 = $$1$ph;
  $10 = $6;
  while (1) {
   $8 = $$012 + 1 | 0;
   $9 = $$13 + 1 | 0;
   HEAP8[$$13 >> 0] = $10;
   $11 = HEAP8[$8 >> 0] | 0;
   $12 = $11 << 24 >> 24 == 0;
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;
    $$13 = $9;
    $10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 L11 : do {
  switch ($13 | 0) {
  case 64:
   {
    HEAP8[$$1$lcssa >> 0] = 111;
    break;
   }
  case 8:
   {
    $14 = $__flags & 16384;
    $15 = ($14 | 0) == 0;
    if ($15) {
     HEAP8[$$1$lcssa >> 0] = 120;
     break L11;
    } else {
     HEAP8[$$1$lcssa >> 0] = 88;
     break L11;
    }
    break;
   }
  default:
   {
    if ($__signd) {
     HEAP8[$$1$lcssa >> 0] = 100;
     break L11;
    } else {
     HEAP8[$$1$lcssa >> 0] = 117;
     break L11;
    }
   }
  }
 } while (0);
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEEC2ERKSH_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $10 = sp + 48 | 0;
 $11 = sp + 8 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 93 | 0;
 $16 = sp;
 $23 = sp + 92 | 0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = $24 + 4 | 0;
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28 >> 2] = 0;
 $29 = $24 + 8 | 0;
 HEAP8[$16 >> 0] = HEAP8[$23 >> 0] | 0;
 $13 = $29;
 HEAP32[$14 >> 2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31 >> 2] | 0;
 $6 = $16;
 HEAP8[$11 >> 0] = HEAP8[$15 >> 0] | 0;
 $9 = $30;
 HEAP32[$10 >> 2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = $36 + 4 | 0;
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42 >> 2] = $41;
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9892), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9880), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9868), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9856), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9844), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9832), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9820), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9808), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9796), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9784), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9772), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9760), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9748), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9736), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EEC2ERKSF_($this, $__f) {
 $this = $this | 0;
 $__f = $__f | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = $3 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) == (0 | 0);
 if ($6) {
  $7 = $2 + 16 | 0;
  HEAP32[$7 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $8 = $1;
 $9 = $8 + 16 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $1;
 $12 = ($10 | 0) == ($11 | 0);
 if ($12) {
  $13 = $2 + 16 | 0;
  HEAP32[$13 >> 2] = $2;
  $14 = $1;
  $15 = $14 + 16 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  $18 = $17 + 12 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  $20 = $2 + 16 | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  FUNCTION_TABLE_vii[$19 & 1023]($16, $21), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 } else {
  $22 = $1;
  $23 = $22 + 16 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  $26 = $25 + 8 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = (tempInt = FUNCTION_TABLE_ii[$27 & 1023]($24) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $29 = $2 + 16 | 0;
  HEAP32[$29 >> 2] = $28;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__114__shared_count12__add_sharedEv($f), asyncState ? abort(-12) | 0 : 0;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = $2;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >> 2;
 $8 = $7 >>> 0 > $id >>> 0;
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = $id + 1 | 0;
   __THREW__ = 0;
   invoke_vii(528, $0 | 0, $9 | 0), asyncState ? abort(-12) | 0 : 0;
   $10 = __THREW__;
   __THREW__ = 0;
   $11 = $10 & 1;
   if (!$11) {
    $$pre = HEAP32[$0 >> 2] | 0;
    $16 = $$pre;
    break;
   }
   $12 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $13 = tempRet0;
   $14 = ($f | 0) == (0 | 0);
   if (!$14) {
    (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
   ___resumeException($12 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 } while (0);
 $15 = $16 + ($id << 2) | 0;
 $17 = HEAP32[$15 >> 2] | 0;
 $18 = ($17 | 0) == (0 | 0);
 if ($18) {
  $20 = $16;
 } else {
  (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($17) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$pre2 = HEAP32[$0 >> 2] | 0;
  $20 = $$pre2;
 }
 $19 = $20 + ($id << 2) | 0;
 HEAP32[$19 >> 2] = $f;
 return;
}

function ___fseeko_unlocked($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($whence | 0) == 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $1 = $f + 8 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $f + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = $2;
  $6 = $4;
  $7 = $off - $5 | 0;
  $8 = $7 + $6 | 0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = $f + 20 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $f + 28 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $10 >>> 0 > $12 >>> 0;
 if ($13) {
  $14 = $f + 36 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  (tempInt = FUNCTION_TABLE_iiii[$15 & 1023]($f, 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $16 = HEAP32[$9 >> 2] | 0;
  $17 = ($16 | 0) == (0 | 0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label | 0) == 5) {
  $18 = $f + 16 | 0;
  HEAP32[$18 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $19 = $f + 40 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = (tempInt = FUNCTION_TABLE_iiii[$20 & 1023]($f, $$01, $whence) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = ($21 | 0) < 0;
  if ($22) {
   $$0 = -1;
  } else {
   $23 = $f + 8 | 0;
   HEAP32[$23 >> 2] = 0;
   $24 = $f + 4 | 0;
   HEAP32[$24 >> 2] = 0;
   $25 = HEAP32[$f >> 2] | 0;
   $26 = $25 & -17;
   HEAP32[$f >> 2] = $26;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1 | 0) == 0;
 L1 : do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;
   $21 = $0;
   while (1) {
    $3 = HEAP8[$$014 >> 0] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = $$014 + 1 | 0;
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7 | 0) == 0;
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;
     $21 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   $10 = $9 + -16843009 | 0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13 | 0) == 0;
   $15 = $w$0 + 4 | 0;
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20 & 255;
  $17 = $16 << 24 >> 24 == 0;
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    $$pre = HEAP8[$18 >> 0] | 0;
    $19 = $$pre << 24 >> 24 == 0;
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = $$pn - $0 | 0;
 return $$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EPKc($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $7 = sp + 8 | 0;
 $5 = $this;
 $6 = $value;
 $10 = $5;
 $11 = $6;
 $3 = $7;
 $4 = $11;
 $12 = $3;
 $2 = $12;
 $13 = $2;
 $1 = $13;
 $14 = $1;
 $0 = $14;
 $15 = $4;
 $16 = $4;
 $17 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($12, $15, $17), asyncState ? abort(-12) | 0 : 0;
 __THREW__ = 0;
 invoke_vii(389, $10 | 0, $7 | 0), asyncState ? abort(-12) | 0 : 0;
 $18 = __THREW__;
 __THREW__ = 0;
 $19 = $18 & 1;
 if ($19) {
  $20 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $21 = tempRet0;
  $8 = $20;
  $9 = $21;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
  $22 = $8;
  $23 = $9;
  ___resumeException($22 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = $1 - $0 | 0;
 $3 = $2 >>> 0 > 4294967279;
 asyncState ? abort(-12) | 0 : 0;
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $4 = $2 >>> 0 < 11;
 if ($4) {
  $5 = $2 << 1;
  $6 = $5 & 255;
  HEAP8[$this >> 0] = $6;
  $7 = $this + 1 | 0;
  $__p$0$ph = $7;
 } else {
  $8 = $2 + 16 | 0;
  $9 = $8 & -16;
  $10 = (tempInt = __Znwj($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $11 = $this + 8 | 0;
  HEAP32[$11 >> 2] = $10;
  $12 = $9 | 1;
  HEAP32[$this >> 2] = $12;
  $13 = $this + 4 | 0;
  HEAP32[$13 >> 2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = $14 - $0 | 0;
 $16 = ($__first | 0) == ($__last | 0);
 if (!$16) {
  $$04 = $__first;
  $__p$03 = $__p$0$ph;
  while (1) {
   $17 = HEAP8[$$04 >> 0] | 0;
   HEAP8[$__p$03 >> 0] = $17;
   $18 = $$04 + 1 | 0;
   $19 = $__p$03 + 1 | 0;
   $20 = ($18 | 0) == ($__last | 0);
   if ($20) {
    break;
   } else {
    $$04 = $18;
    $__p$03 = $19;
   }
  }
 }
 $scevgep2 = $__p$0$ph + $15 | 0;
 HEAP8[$scevgep2 >> 0] = 0;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorppEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = $this;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 switch ($6 << 24 >> 24) {
 case 1:
  {
   $7 = $4 + 4 | 0;
   $2 = $7;
   $8 = $2;
   $1 = $8;
   $9 = $1;
   $10 = HEAP32[$9 >> 2] | 0;
   $11 = (tempInt = __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$9 >> 2] = $11;
   STACKTOP = sp;
   return $4 | 0;
   break;
  }
 case 2:
  {
   $12 = $4 + 4 | 0;
   $13 = $12 + 4 | 0;
   $0 = $13;
   $14 = $0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $15 + 16 | 0;
   HEAP32[$14 >> 2] = $16;
   STACKTOP = sp;
   return $4 | 0;
   break;
  }
 default:
  {
   $17 = $4 + 4 | 0;
   $18 = $17 + 8 | 0;
   $19 = (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tcvRiEv($18) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = $20 + 1 | 0;
   HEAP32[$19 >> 2] = $21;
   STACKTOP = sp;
   return $4 | 0;
  }
 }
 return 0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $13 = 0;
   $14 = 0;
  } else {
   $1 = HEAP8[$__a >> 0] | 0;
   $2 = $1 << 24 >> 24 == 45;
   if ($2) {
    HEAP32[$__err >> 2] = 4;
    $13 = 0;
    $14 = 0;
    break;
   }
   $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   $5 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = (tempInt = _strtoull_l($__a, $__p2, $__base, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = tempRet0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = ($8 | 0) == 0;
   if ($9) {
    HEAP32[$3 >> 2] = $4;
   }
   $10 = HEAP32[$__p2 >> 2] | 0;
   $11 = ($10 | 0) == ($__a_end | 0);
   if (!$11) {
    HEAP32[$__err >> 2] = 4;
    $13 = 0;
    $14 = 0;
    break;
   }
   $12 = ($8 | 0) == 34;
   if ($12) {
    HEAP32[$__err >> 2] = 4;
    $13 = -1;
    $14 = -1;
   } else {
    $13 = $7;
    $14 = $6;
   }
  }
 } while (0);
 tempRet0 = $13;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
  } else {
   $3 = $this + 16 | 0;
   $4 = $this + 12 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $6 = ($this + 16 | 0) + ($5 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
   $7 = ($5 | 0) > 1;
   if ($7) {
    $8 = $this + 24 | 0;
    $9 = $info + 54 | 0;
    $p$0 = $8;
    while (1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
     $10 = HEAP8[$9 >> 0] | 0;
     $11 = $10 << 24 >> 24 == 0;
     if (!$11) {
      break L1;
     }
     $12 = $p$0 + 8 | 0;
     $13 = $12 >>> 0 < $6 >>> 0;
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while (0);
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($oldmem | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $1 = (tempInt = _malloc($bytes) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $mem$0 = $1;
  return $mem$0 | 0;
 }
 $2 = $bytes >>> 0 > 4294967231;
 if ($2) {
  $3 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$3 >> 2] = 12;
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $4 = $bytes >>> 0 < 11;
 $5 = $bytes + 11 | 0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = $oldmem + -8 | 0;
 $9 = (tempInt = _try_realloc_chunk($8, $7) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $9 + 8 | 0;
  $mem$0 = $11;
  return $mem$0 | 0;
 }
 $12 = (tempInt = _malloc($bytes) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $13 = ($12 | 0) == (0 | 0);
 if ($13) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $14 = $oldmem + -4 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17 | 0) == 0;
 $19 = $18 ? 8 : 4;
 $20 = $16 - $19 | 0;
 $21 = $20 >>> 0 < $bytes >>> 0;
 $22 = $21 ? $20 : $bytes;
 (tempInt = _memcpy($12 | 0, $oldmem | 0, $22 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 _free($oldmem), asyncState ? abort(-12) | 0 : 0;
 $mem$0 = $12;
 return $mem$0 | 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $c = sp;
 $0 = $_c & 255;
 HEAP8[$c >> 0] = $0;
 $1 = $f + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $4 = (tempInt = ___towrite($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = ($4 | 0) == 0;
  if ($5) {
   $$pre = HEAP32[$1 >> 2] | 0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label | 0) == 4) {
   $6 = $f + 20 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $8 = $7 >>> 0 < $9 >>> 0;
   if ($8) {
    $10 = $_c & 255;
    $11 = $f + 75 | 0;
    $12 = HEAP8[$11 >> 0] | 0;
    $13 = $12 << 24 >> 24;
    $14 = ($10 | 0) == ($13 | 0);
    if (!$14) {
     $15 = $7 + 1 | 0;
     HEAP32[$6 >> 2] = $15;
     HEAP8[$7 >> 0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = $f + 36 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   $18 = (tempInt = FUNCTION_TABLE_iiii[$17 & 1023]($f, $c, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $19 = ($18 | 0) == 1;
   if ($19) {
    $20 = HEAP8[$c >> 0] | 0;
    $21 = $20 & 255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EEclEiSC_SD_($this, $__arg, $__arg1, $__arg2) {
 $this = $this | 0;
 $__arg = $__arg | 0;
 $__arg1 = $__arg1 | 0;
 $__arg2 = $__arg2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $4 = sp + 4 | 0;
 $5 = sp + 24 | 0;
 $3 = $this;
 HEAP32[$4 >> 2] = $__arg;
 HEAP8[$5 >> 0] = $__arg1;
 $6 = $__arg2;
 $7 = $3;
 $8 = $7 + 16 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = ($9 | 0) == (0 | 0);
 if ($10) {
  $11 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$11 >> 2] = 0 | 0;
  __ZNSt3__117bad_function_callC2Ev($11), asyncState ? abort(-12) | 0 : 0;
  ___cxa_throw($11 | 0, 104 | 0, 57 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $12 = $7 + 16 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $15 = $14 + 24 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $2 = $4;
  $17 = $2;
  $1 = $5;
  $18 = $1;
  $19 = $6;
  $0 = $19;
  $20 = $0;
  $21 = (tempInt = FUNCTION_TABLE_iiiii[$16 & 1023]($13, $17, $18, $20) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0 | 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func | 0), asyncState ? abort(-12) | 0 : 0;
 $0 = __THREW__;
 __THREW__ = 0;
 $1 = $0 & 1;
 if (!$1) {
  __THREW__ = 0;
  invoke_vii(449, 15683 | 0, $vararg_buffer | 0), asyncState ? abort(-12) | 0 : 0;
  $2 = __THREW__;
  __THREW__ = 0;
 }
 $3 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = tempRet0;
 (tempInt = ___cxa_begin_catch($3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __THREW__ = 0;
 invoke_vii(449, 15723 | 0, $vararg_buffer1 | 0), asyncState ? abort(-12) | 0 : 0;
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(409), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $10 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $11 = tempRet0;
  ___clang_call_terminate($10), asyncState ? abort(-12) | 0 : 0;
 } else {
  ___clang_call_terminate($6), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp;
 $1 = $this + 24 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == (0 | 0);
 $4 = $3 & 1;
 $$state = $4 | $state;
 $5 = $this + 16 | 0;
 HEAP32[$5 >> 2] = $$state;
 $6 = $3 & 1;
 $7 = $6 | $state;
 $8 = $this + 20 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $7 & $9;
 $11 = ($10 | 0) == 0;
 if ($11) {
  STACKTOP = sp;
  return;
 }
 $12 = (tempInt = ___cxa_allocate_exception(16) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 (tempInt = __ZNSt3__117iostream_categoryEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$0 >> 2] = 1;
 $13 = $0 + 4 | 0;
 HEAP32[$13 >> 2] = 7808;
 __THREW__ = 0;
 invoke_viii(458, $12 | 0, 20158 | 0, $0 | 0), asyncState ? abort(-12) | 0 : 0;
 $14 = __THREW__;
 __THREW__ = 0;
 $15 = $14 & 1;
 if ($15) {
  $16 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $17 = tempRet0;
  ___cxa_free_exception($12 | 0), asyncState ? abort(-12) | 0 : 0;
  ___resumeException($16 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  ___cxa_throw($12 | 0, 344 | 0, 108 | 0), asyncState ? abort(-12) | 0 : 0;
 }
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 76 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {}
 $3 = HEAP32[$f >> 2] | 0;
 $4 = $3 & 1;
 $5 = ($4 | 0) != 0;
 if (!$5) {
  ___lock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
  $6 = $f + 52 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = ($7 | 0) == (0 | 0);
  $9 = $7;
  $$pre = $f + 56 | 0;
  if (!$8) {
   $10 = HEAP32[$$pre >> 2] | 0;
   $11 = $7 + 56 | 0;
   HEAP32[$11 >> 2] = $10;
  }
  $12 = HEAP32[$$pre >> 2] | 0;
  $13 = ($12 | 0) == (0 | 0);
  $14 = $12;
  if (!$13) {
   $15 = $12 + 52 | 0;
   HEAP32[$15 >> 2] = $9;
  }
  $16 = HEAP32[3464 >> 2] | 0;
  $17 = ($16 | 0) == ($f | 0);
  if ($17) {
   HEAP32[3464 >> 2] = $14;
  }
  ___unlock(3468 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 $18 = (tempInt = _fflush($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $19 = $f + 12 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = (tempInt = FUNCTION_TABLE_ii[$20 & 1023]($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $22 = $21 | $18;
 $23 = $f + 92 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 $25 = ($24 | 0) == (0 | 0);
 if (!$25) {
  _free($24), asyncState ? abort(-12) | 0 : 0;
 }
 if (!$5) {
  _free($f), asyncState ? abort(-12) | 0 : 0;
 }
 return $22 | 0;
}

function __Z7SendMsgRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($msg) {
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $15 = $msg;
 $16 = $15;
 $14 = $16;
 $17 = $14;
 $13 = $17;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22 >> 0] | 0;
 $24 = $23 & 255;
 $25 = $24 & 1;
 $26 = ($25 | 0) != 0;
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = $29 + 8 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  $38 = $31;
  $0 = $38;
  $39 = $0;
  $40 = (tempInt = _emscripten_asm_const_1(1, $39 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = $34 + 1 | 0;
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
  $0 = $38;
  $39 = $0;
  $40 = (tempInt = _emscripten_asm_const_1(1, $39 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return;
 }
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EaSESA_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__t$i1 = sp;
 $__t$i = sp + 52 | 0;
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $9 = $other;
 $12 = $8;
 $7 = $12;
 $13 = $7;
 $14 = HEAP8[$13 >> 0] | 0;
 HEAP8[$__t$i >> 0] = $14;
 $15 = $9;
 $5 = $15;
 $16 = $5;
 $17 = HEAP8[$16 >> 0] | 0;
 $18 = $8;
 HEAP8[$18 >> 0] = $17;
 $6 = $__t$i;
 $19 = $6;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $9;
 HEAP8[$21 >> 0] = $20;
 $22 = $11 + 8 | 0;
 $23 = $other + 8 | 0;
 $3 = $22;
 $4 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 HEAP32[$__t$i1 >> 2] = HEAP32[$25 >> 2] | 0;
 HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$25 + 4 >> 2] | 0;
 $26 = $3;
 $27 = $4;
 $0 = $27;
 $28 = $0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2] | 0;
 HEAP32[$26 + 4 >> 2] = HEAP32[$28 + 4 >> 2] | 0;
 $29 = $4;
 $1 = $__t$i1;
 $30 = $1;
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2] | 0;
 HEAP32[$29 + 4 >> 2] = HEAP32[$30 + 4 >> 2] | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap2 = sp;
 $0 = (tempInt = _malloc(240) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) == (0 | 0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap2 >> 2] = $vacopy_currentptr;
   $2 = (tempInt = _vsnprintf($0, 240, $fmt, $ap2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = $2 >>> 0 < 240;
   if ($3) {
    $4 = $2 + 1 | 0;
    $5 = (tempInt = _realloc($0, $4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = ($5 | 0) != (0 | 0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s >> 2] = $7;
    $$0 = $2;
    break;
   }
   _free($0), asyncState ? abort(-12) | 0 : 0;
   $8 = ($2 | 0) < 0;
   if ($8) {
    $$0 = -1;
   } else {
    $9 = $2 + 1 | 0;
    $10 = (tempInt = _malloc($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    HEAP32[$s >> 2] = $10;
    $11 = ($10 | 0) == (0 | 0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (tempInt = _vsnprintf($10, $9, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $$0 = $12;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $5 = sp + 8 | 0;
 $8 = sp + 77 | 0;
 $11 = sp;
 $13 = sp + 76 | 0;
 $18 = sp + 16 | 0;
 $19 = sp + 12 | 0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = $21 + 8 | 0;
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 HEAP8[$11 >> 0] = HEAP8[$13 >> 0] | 0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18 >> 2] = 268435455;
 $27 = 4294967295 / 2 & -1;
 HEAP32[$19 >> 2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 HEAP8[$5 >> 0] = HEAP8[$8 >> 0] | 0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = $2;
 $35 = HEAP32[$34 >> 2] | 0;
 $36 = $33 >>> 0 < $35 >>> 0;
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39 >> 2] | 0;
 STACKTOP = sp;
 return $40 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = $this + 16 | 0;
 $2 = ($__n | 0) > 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   $$01 = $__s;
   $__i$02 = 0;
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = HEAP32[$1 >> 2] | 0;
    $5 = $3 >>> 0 < $4 >>> 0;
    if ($5) {
     $6 = $3 + 1 | 0;
     HEAP32[$0 >> 2] = $6;
     $7 = HEAP8[$3 >> 0] | 0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this >> 2] | 0;
     $9 = $8 + 40 | 0;
     $10 = HEAP32[$9 >> 2] | 0;
     $11 = (tempInt = FUNCTION_TABLE_ii[$10 & 1023]($this) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $12 = ($11 | 0) == -1;
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     }
     $13 = $11 & 255;
     $storemerge = $13;
    }
    HEAP8[$$01 >> 0] = $storemerge;
    $14 = $__i$02 + 1 | 0;
    $15 = $$01 + 1 | 0;
    $16 = ($14 | 0) < ($__n | 0);
    if ($16) {
     $$01 = $15;
     $__i$02 = $14;
    } else {
     $__i$0$lcssa = $14;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while (0);
 return $__i$0$lcssa | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = (tempInt = FUNCTION_TABLE_ii[$4 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = $5 + 288 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $8 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $7, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = $8;
 $10 = $5;
 $11 = $9 - $10 | 0;
 $12 = ($11 | 0) < 288;
 if ($12) {
  $13 = ($11 | 0) / 12 & -1;
  $14 = ($13 | 0) % 12 & -1;
  HEAP32[$__m >> 2] = $14;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = (tempInt = FUNCTION_TABLE_ii[$4 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = $5 + 288 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $8 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $7, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = $8;
 $10 = $5;
 $11 = $9 - $10 | 0;
 $12 = ($11 | 0) < 288;
 if ($12) {
  $13 = ($11 | 0) / 12 & -1;
  $14 = ($13 | 0) % 12 & -1;
  HEAP32[$__m >> 2] = $14;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 24 | 0;
 $1 = $this + 28 | 0;
 $2 = ($__n | 0) > 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   $$02 = $__s;
   $__i$01 = 0;
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = HEAP32[$1 >> 2] | 0;
    $5 = $3 >>> 0 < $4 >>> 0;
    if ($5) {
     $6 = HEAP8[$$02 >> 0] | 0;
     $7 = $3 + 1 | 0;
     HEAP32[$0 >> 2] = $7;
     HEAP8[$3 >> 0] = $6;
    } else {
     $8 = HEAP32[$this >> 2] | 0;
     $9 = $8 + 52 | 0;
     $10 = HEAP32[$9 >> 2] | 0;
     $11 = HEAP8[$$02 >> 0] | 0;
     $12 = $11 & 255;
     $13 = (tempInt = FUNCTION_TABLE_iii[$10 & 1023]($this, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $14 = ($13 | 0) == -1;
     if ($14) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $15 = $$02 + 1 | 0;
    $16 = $__i$01 + 1 | 0;
    $17 = ($16 | 0) < ($__n | 0);
    if ($17) {
     $$02 = $15;
     $__i$01 = $16;
    } else {
     $__i$0$lcssa = $16;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while (0);
 return $__i$0$lcssa | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (tempInt = FUNCTION_TABLE_ii[$3 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $5;
 $6 = $4 + 168 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $7 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $6, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = $7;
 $9 = $4;
 $10 = $8 - $9 | 0;
 $11 = ($10 | 0) < 168;
 if ($11) {
  $12 = ($10 | 0) / 12 & -1;
  $13 = ($12 | 0) % 7 & -1;
  HEAP32[$__w >> 2] = $13;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (tempInt = FUNCTION_TABLE_ii[$3 & 1023]($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $5;
 $6 = $4 + 168 | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $7 = (tempInt = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $6, $__ct, $__err, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = $7;
 $9 = $4;
 $10 = $8 - $9 | 0;
 $11 = ($10 | 0) < 168;
 if ($11) {
  $12 = ($10 | 0) / 12 & -1;
  $13 = ($12 | 0) % 7 & -1;
  HEAP32[$__w >> 2] = $13;
 }
 STACKTOP = sp;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer9get_tokenEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $6 = $this;
 $7 = $6;
 $8 = $7 + 20 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $7 + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $7 + 20 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $11;
 $15 = $13;
 $16 = $14 - $15 | 0;
 $3 = $agg$result;
 $4 = $9;
 $5 = $16;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $4;
 $21 = $5;
 __THREW__ = 0;
 invoke_viii(393, $17 | 0, $20 | 0, $21 | 0), asyncState ? abort(-12) | 0 : 0;
 $22 = __THREW__;
 __THREW__ = 0;
 $23 = $22 & 1;
 if ($23) {
  $24 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $25 = tempRet0;
  ___clang_call_terminate($24), asyncState ? abort(-12) | 0 : 0;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) > 1023;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  $3 = ($2 | 0) > 1023;
  if ($3) {
   $4 = $1 * 8988465674311579538646525.0e283;
   $5 = $n + -2046 | 0;
   $6 = ($5 | 0) > 1023;
   $$ = $6 ? 1023 : $5;
   $$0 = $$;
   $y$0 = $4;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else {
  $7 = ($n | 0) < -1022;
  if ($7) {
   $8 = $x * 2.2250738585072014e-308;
   $9 = $n + 1022 | 0;
   $10 = ($9 | 0) < -1022;
   if ($10) {
    $11 = $8 * 2.2250738585072014e-308;
    $12 = $n + 2044 | 0;
    $13 = ($12 | 0) < -1022;
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;
    $y$0 = $11;
   } else {
    $$0 = $9;
    $y$0 = $8;
   }
  } else {
   $$0 = $n;
   $y$0 = $x;
  }
 }
 $14 = $$0 + 1023 | 0;
 $15 = (tempInt = _bitshift64Shl($14 | 0, 0, 52) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 $17 = +HEAPF64[tempDoublePtr >> 3];
 $18 = $y$0 * $17;
 return +$18;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2008 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2008 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    $4 = (tempInt = invoke_ii(550, 12144 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = __THREW__;
    __THREW__ = 0;
    $6 = $5 & 1;
    if (!$6) {
     __THREW__ = 0;
     invoke_viii(551, 12180 | 0, 12144 | 0, $4 | 0), asyncState ? abort(-12) | 0 : 0;
     $7 = __THREW__;
     __THREW__ = 0;
     $8 = $7 & 1;
     if (!$8) {
      (tempInt = ___cxa_atexit(552 | 0, 12180 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(2008 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    ___cxa_guard_abort(2008 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 return 12180 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2056 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2056 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    $4 = (tempInt = invoke_ii(550, 12372 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = __THREW__;
    __THREW__ = 0;
    $6 = $5 & 1;
    if (!$6) {
     __THREW__ = 0;
     invoke_viii(551, 12420 | 0, 12372 | 0, $4 | 0), asyncState ? abort(-12) | 0 : 0;
     $7 = __THREW__;
     __THREW__ = 0;
     $8 = $7 & 1;
     if (!$8) {
      (tempInt = ___cxa_atexit(552 | 0, 12420 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(2056 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    ___cxa_guard_abort(2056 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 return 12420 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2040 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2040 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    $4 = (tempInt = invoke_ii(550, 12264 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = __THREW__;
    __THREW__ = 0;
    $6 = $5 & 1;
    if (!$6) {
     __THREW__ = 0;
     invoke_viii(551, 12348 | 0, 12264 | 0, $4 | 0), asyncState ? abort(-12) | 0 : 0;
     $7 = __THREW__;
     __THREW__ = 0;
     $8 = $7 & 1;
     if (!$8) {
      (tempInt = ___cxa_atexit(552 | 0, 12348 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(2040 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    ___cxa_guard_abort(2040 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 return 12348 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2024 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2024 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    $4 = (tempInt = invoke_ii(550, 12204 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = __THREW__;
    __THREW__ = 0;
    $6 = $5 & 1;
    if (!$6) {
     __THREW__ = 0;
     invoke_viii(551, 12240 | 0, 12204 | 0, $4 | 0), asyncState ? abort(-12) | 0 : 0;
     $7 = __THREW__;
     __THREW__ = 0;
     $8 = $7 & 1;
     if (!$8) {
      (tempInt = ___cxa_atexit(552 | 0, 12240 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      ___cxa_guard_release(2024 | 0), asyncState ? abort(-12) | 0 : 0;
      break;
     }
    }
    $9 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    ___cxa_guard_abort(2024 | 0), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($9 | 0), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 return 12240 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 if ($5) {
  $6 = ($2 | 0) < 69;
  if ($6) {
   $7 = $2 + 2e3 | 0;
   $__t$0 = $7;
  } else {
   $$off = $2 + -69 | 0;
   $8 = $$off >>> 0 < 31;
   $9 = $2 + 1900 | 0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = $__t$0 + -1900 | 0;
  HEAP32[$__y >> 2] = $10;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 if ($5) {
  $6 = ($2 | 0) < 69;
  if ($6) {
   $7 = $2 + 2e3 | 0;
   $__t$0 = $7;
  } else {
   $$off = $2 + -69 | 0;
   $8 = $$off >>> 0 < 31;
   $9 = $2 + 1900 | 0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = $__t$0 + -1900 | 0;
  HEAP32[$__y >> 2] = $10;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__iob + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & 176;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  switch ($2 | 0) {
  case 16:
   {
    $3 = HEAP8[$__nb >> 0] | 0;
    switch ($3 << 24 >> 24) {
    case 43:
    case 45:
     {
      $4 = $__nb + 1 | 0;
      $$0 = $4;
      break L1;
      break;
     }
    default:
     {}
    }
    $5 = $__ne;
    $6 = $__nb;
    $7 = $5 - $6 | 0;
    $8 = ($7 | 0) > 1;
    $9 = $3 << 24 >> 24 == 48;
    $or$cond = $8 & $9;
    if ($or$cond) {
     $10 = $__nb + 1 | 0;
     $11 = HEAP8[$10 >> 0] | 0;
     switch ($11 << 24 >> 24) {
     case 88:
     case 120:
      {
       break;
      }
     default:
      {
       label = 7;
       break L1;
      }
     }
     $12 = $__nb + 2 | 0;
     $$0 = $12;
    } else {
     label = 7;
    }
    break;
   }
  case 32:
   {
    $$0 = $__ne;
    break;
   }
  default:
   {
    label = 7;
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $$0 = $__nb;
 }
 return $$0 | 0;
}

function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = $__x;
 $4 = $3;
 $5 = $4 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = ($6 | 0) != (0 | 0);
 if (!$7) {
  while (1) {
   $16 = $3;
   $0 = $16;
   $17 = $0;
   $18 = $0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   $22 = ($17 | 0) == ($21 | 0);
   $23 = $22 ^ 1;
   $24 = $3;
   $25 = $24 + 8 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   if (!$23) {
    break;
   }
   $3 = $26;
  }
  $2 = $26;
  $27 = $2;
  STACKTOP = sp;
  return $27 | 0;
 }
 $8 = $3;
 $9 = $8 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $1 = $10;
 while (1) {
  $11 = $1;
  $12 = HEAP32[$11 >> 2] | 0;
  $13 = ($12 | 0) != (0 | 0);
  $14 = $1;
  if (!$13) {
   break;
  }
  $15 = HEAP32[$14 >> 2] | 0;
  $1 = $15;
 }
 $2 = $14;
 $27 = $2;
 STACKTOP = sp;
 return $27 | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (tempInt = invoke_i(450) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $21 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $22 = tempRet0;
  ___clang_call_terminate($21), asyncState ? abort(-12) | 0 : 0;
 }
 $3 = ($0 | 0) == (0 | 0);
 if (!$3) {
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = ($4 | 0) == (0 | 0);
  if (!$5) {
   $6 = $4 + 48 | 0;
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = $7 + 4 | 0;
   $11 = $10;
   $12 = HEAP32[$11 >> 2] | 0;
   $13 = $9 & -256;
   $14 = ($13 | 0) == 1126902528;
   $15 = ($12 | 0) == 1129074247;
   $16 = $14 & $15;
   if ($16) {
    $17 = $4 + 12 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    __ZSt11__terminatePFvvE($18), asyncState ? abort(-12) | 0 : 0;
   }
  }
 }
 $19 = HEAP32[785] | 0;
 HEAP32[785] = $19 + 0 | 0;
 $20 = $19;
 __ZSt11__terminatePFvvE($20), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $3 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = +(tempDouble = +_strtold_l($__a, $__p2, $3), asyncState ? +abort(-12) : tempDouble);
   $5 = HEAP32[$1 >> 2] | 0;
   $6 = ($5 | 0) == 0;
   if ($6) {
    HEAP32[$1 >> 2] = $2;
   }
   $7 = HEAP32[$__p2 >> 2] | 0;
   $8 = ($7 | 0) == ($__a_end | 0);
   if (!$8) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5 | 0) == 34;
   if ($9) {
    HEAP32[$__err >> 2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $3 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = +(tempDouble = +_strtold_l($__a, $__p2, $3), asyncState ? +abort(-12) : tempDouble);
   $5 = HEAP32[$1 >> 2] | 0;
   $6 = ($5 | 0) == 0;
   if ($6) {
    HEAP32[$1 >> 2] = $2;
   }
   $7 = HEAP32[$__p2 >> 2] | 0;
   $8 = ($7 | 0) == ($__a_end | 0);
   if (!$8) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5 | 0) == 34;
   if ($9) {
    HEAP32[$__err >> 2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p2 = sp;
 $0 = ($__a | 0) == ($__a_end | 0);
 do {
  if ($0) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = 0;
   $3 = (tempInt = __ZNSt3__16__clocEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $4 = +(tempDouble = +_strtold_l($__a, $__p2, $3), asyncState ? +abort(-12) : tempDouble);
   $5 = HEAP32[$1 >> 2] | 0;
   $6 = ($5 | 0) == 0;
   if ($6) {
    HEAP32[$1 >> 2] = $2;
   }
   $7 = HEAP32[$__p2 >> 2] | 0;
   $8 = ($7 | 0) == ($__a_end | 0);
   if (!$8) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5 | 0) == 34;
   if ($9) {
    HEAP32[$__err >> 2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = $__x;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  while (1) {
   $16 = $3;
   $0 = $16;
   $17 = $0;
   $18 = $0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   $22 = ($17 | 0) == ($21 | 0);
   $23 = $3;
   $24 = $23 + 8 | 0;
   $25 = HEAP32[$24 >> 2] | 0;
   if (!$22) {
    break;
   }
   $3 = $25;
  }
  $2 = $25;
  $26 = $2;
  STACKTOP = sp;
  return $26 | 0;
 }
 $7 = $3;
 $8 = HEAP32[$7 >> 2] | 0;
 $1 = $8;
 while (1) {
  $9 = $1;
  $10 = $9 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = ($11 | 0) != (0 | 0);
  $13 = $1;
  if (!$12) {
   break;
  }
  $14 = $13 + 4 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  $1 = $15;
 }
 $2 = $13;
 $26 = $2;
 STACKTOP = sp;
 return $26 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 20 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 >>> 0 > $3 >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $5 = $f + 36 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  (tempInt = FUNCTION_TABLE_iiii[$6 & 1023]($f, 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = ($7 | 0) == (0 | 0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  $13 = $10 >>> 0 < $12 >>> 0;
  if ($13) {
   $14 = $f + 40 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $10;
   $17 = $12;
   $18 = $16 - $17 | 0;
   (tempInt = FUNCTION_TABLE_iiii[$15 & 1023]($f, $18, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
  $19 = $f + 16 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $i$03 = 0;
 asyncState ? abort(-12) | 0 : 0;
 while (1) {
  $1 = 16100 + $i$03 | 0;
  $2 = HEAP8[$1 >> 0] | 0;
  $3 = $2 & 255;
  $4 = ($3 | 0) == ($e | 0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = $i$03 + 1 | 0;
  $6 = ($5 | 0) == 87;
  if ($6) {
   $i$12 = 87;
   $s$01 = 16188;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label | 0) == 2) {
  $0 = ($i$03$lcssa | 0) == 0;
  if ($0) {
   $s$0$lcssa = 16188;
  } else {
   $i$12 = $i$03$lcssa;
   $s$01 = 16188;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0;
   $s$1 = $s$01;
   while (1) {
    $7 = HEAP8[$s$1 >> 0] | 0;
    $8 = $7 << 24 >> 24 == 0;
    $9 = $s$1 + 1 | 0;
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = $i$12 + -1 | 0;
   $11 = ($10 | 0) == 0;
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;
    $s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return $s$0$lcssa | 0;
}

function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 8892;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = ($2 | 0) == ($3 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$4) {
  $6 = $3;
  $i$01 = 0;
  while (1) {
   $5 = $6 + ($i$01 << 2) | 0;
   $7 = HEAP32[$5 >> 2] | 0;
   $8 = ($7 | 0) == (0 | 0);
   if (!$8) {
    (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($7) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   }
   $9 = $i$01 + 1 | 0;
   $10 = HEAP32[$1 >> 2] | 0;
   $11 = HEAP32[$0 >> 2] | 0;
   $12 = $10;
   $13 = $11;
   $14 = $12 - $13 | 0;
   $15 = $14 >> 2;
   $16 = $9 >>> 0 < $15 >>> 0;
   if ($16) {
    $6 = $11;
    $i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = $this + 144 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 40 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$f >> 2] | 0;
 $3 = $2 & 128;
 $4 = ($3 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $10 = 1;
 } else {
  $5 = $f + 20 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = $f + 28 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = $6 >>> 0 > $8 >>> 0;
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (tempInt = FUNCTION_TABLE_iiii[$1 & 1023]($f, 0, $10) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = ($11 | 0) < 0;
 if ($12) {
  $$0 = $11;
 } else {
  $13 = $f + 8 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $15 = $f + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  $17 = $14;
  $18 = $16;
  $19 = $f + 20 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $f + 28 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  $23 = $20;
  $24 = $22;
  $25 = $11 - $17 | 0;
  $26 = $25 + $18 | 0;
  $27 = $26 + $23 | 0;
  $28 = $27 - $24 | 0;
  $$0 = $28;
 }
 return $$0 | 0;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__lo2 | 0) == ($__hi2 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;
   $$027 = $__lo1;
   while (1) {
    $1 = ($$027 | 0) == ($__hi1 | 0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$027 >> 0] | 0;
    $3 = HEAP8[$$018 >> 0] | 0;
    $4 = $2 << 24 >> 24 < $3 << 24 >> 24;
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = $3 << 24 >> 24 < $2 << 24 >> 24;
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = $$027 + 1 | 0;
    $7 = $$018 + 1 | 0;
    $8 = ($7 | 0) == ($__hi2 | 0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;
     $$027 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $9 = ($$02$lcssa | 0) != ($__hi1 | 0);
  $10 = $9 & 1;
  $$0 = $10;
 }
 return $$0 | 0;
}

function _strtox530($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $2 = $f + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 $3 = $f + 44 | 0;
 HEAP32[$3 >> 2] = $s;
 $4 = ($s | 0) < (0 | 0);
 $5 = $s + 2147483647 | 0;
 $$sink = $4 ? -1 : $5;
 $6 = $f + 8 | 0;
 HEAP32[$6 >> 2] = $$sink;
 $7 = $f + 76 | 0;
 HEAP32[$7 >> 2] = -1;
 ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
 $8 = (tempInt = ___intscan($f, $base, 1, $0, $1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = tempRet0;
 $10 = ($p | 0) == (0 | 0);
 if (!$10) {
  $11 = $f + 108 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  $13 = HEAP32[$2 >> 2] | 0;
  $14 = HEAP32[$6 >> 2] | 0;
  $15 = $13;
  $16 = $14;
  $17 = $15 + $12 | 0;
  $18 = $17 - $16 | 0;
  $19 = $s + $18 | 0;
  HEAP32[$p >> 2] = $19;
 }
 tempRet0 = $9;
 STACKTOP = sp;
 return $8 | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 << 24 >> 24;
 $3 = $2 + 255 | 0;
 $4 = $3 | $2;
 $5 = $4 & 255;
 HEAP8[$0 >> 0] = $5;
 $6 = $f + 20 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $f + 44 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $7 >>> 0 > $9 >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($10) {
  $11 = $f + 36 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  (tempInt = FUNCTION_TABLE_iiii[$12 & 1023]($f, 0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 $13 = $f + 16 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $f + 28 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 $16 = $15 & 20;
 $17 = ($16 | 0) == 0;
 if ($17) {
  $21 = HEAP32[$8 >> 2] | 0;
  $22 = $f + 8 | 0;
  HEAP32[$22 >> 2] = $21;
  $23 = $f + 4 | 0;
  HEAP32[$23 >> 2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18 | 0) == 0;
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f >> 2] = $20;
   $$0 = -1;
  }
 }
 return $$0 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = (tempInt = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = tempRet0;
 $4 = $2 & 2047;
 asyncState ? abort(-12) | 0 : 0;
 switch ($4 | 0) {
 case 0:
  {
   $5 = $x != 0.0;
   if ($5) {
    $6 = $x * 18446744073709551616.0;
    $7 = +(tempDouble = +_frexp($6, $e), asyncState ? +abort(-12) : tempDouble);
    $8 = HEAP32[$e >> 2] | 0;
    $9 = $8 + -64 | 0;
    $$01 = $7;
    $storemerge = $9;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   $10 = $4 + -1022 | 0;
   HEAP32[$e >> 2] = $10;
   $11 = $1 & -2146435073;
   $12 = $11 | 1071644672;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $12;
   $13 = +HEAPF64[tempDoublePtr >> 3];
   $$0 = $13;
  }
 }
 return +$$0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $__v + 4 | 0;
 $4 = $2;
 $5 = $0;
 $6 = $4 - $5 | 0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3 >> 2] | 0;
 $9 = 0 - $7 | 0;
 $10 = $8 + ($9 << 2) | 0;
 HEAP32[$3 >> 2] = $10;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = _memcpy($10 | 0, $0 | 0, $6 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $11 = HEAP32[$this >> 2] | 0;
 $12 = HEAP32[$3 >> 2] | 0;
 HEAP32[$this >> 2] = $12;
 HEAP32[$3 >> 2] = $11;
 $13 = $__v + 8 | 0;
 $14 = HEAP32[$1 >> 2] | 0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$1 >> 2] = $15;
 HEAP32[$13 >> 2] = $14;
 $16 = $this + 8 | 0;
 $17 = $__v + 12 | 0;
 $18 = HEAP32[$16 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = $19;
 HEAP32[$17 >> 2] = $18;
 $20 = HEAP32[$3 >> 2] | 0;
 HEAP32[$__v >> 2] = $20;
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__lo2 | 0) == ($__hi2 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;
   $$027 = $__lo1;
   while (1) {
    $1 = ($$027 | 0) == ($__hi1 | 0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$027 >> 2] | 0;
    $3 = HEAP32[$$018 >> 2] | 0;
    $4 = ($2 | 0) < ($3 | 0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3 | 0) < ($2 | 0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = $$027 + 4 | 0;
    $7 = $$018 + 4 | 0;
    $8 = ($7 | 0) == ($__hi2 | 0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;
     $$027 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $9 = ($$02$lcssa | 0) != ($__hi1 | 0);
  $10 = $9 & 1;
  $$0 = $10;
 }
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (tempInt = invoke_ii(477, $1 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = __THREW__;
  __THREW__ = 0;
  $5 = $4 & 1;
  if ($5) {
   $12 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $13 = tempRet0;
   ___clang_call_terminate($12), asyncState ? abort(-12) | 0 : 0;
  }
  $6 = ($3 | 0) == (0 | 0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (tempInt = invoke_ii(477, $3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $7 = __THREW__;
   __THREW__ = 0;
   $8 = $7 & 1;
   if ($8) {
    $9 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $10 = tempRet0;
    ___clang_call_terminate($9), asyncState ? abort(-12) | 0 : 0;
   } else {
    $11 = 4;
   }
  }
 }
 return $11 | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 $0 = $f + 60 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $1;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = 0;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = $off;
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 HEAP32[$vararg_ptr3 >> 2] = $ret;
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 HEAP32[$vararg_ptr4 >> 2] = $whence;
 $2 = (tempInt = ___syscall140(140, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = (tempInt = ___syscall_ret($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = ($3 | 0) < 0;
 if ($4) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret >> 2] | 0;
  $5 = $$pre;
 }
 STACKTOP = sp;
 return $5 | 0;
}

function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 $2 = $f + 44 | 0;
 HEAP32[$2 >> 2] = $s;
 $3 = $f + 76 | 0;
 HEAP32[$3 >> 2] = -1;
 ___shlim($f, 0), asyncState ? abort(-12) | 0 : 0;
 $4 = +(tempDouble = +___floatscan($f, $prec, 1), asyncState ? +abort(-12) : tempDouble);
 $5 = $f + 108 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = HEAP32[$1 >> 2] | 0;
 $9 = $7;
 $10 = $8;
 $11 = $9 - $10 | 0;
 $12 = $11 + $6 | 0;
 $13 = ($p | 0) == (0 | 0);
 if (!$13) {
  $14 = ($12 | 0) != 0;
  $15 = $s + $12 | 0;
  $16 = $14 ? $15 : $s;
  HEAP32[$p >> 2] = $16;
 }
 STACKTOP = sp;
 return +$4;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $this + 16 | 0;
 HEAP32[$1 >> 2] = $__a;
 $2 = ($__cap | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = $__a + 112 | 0;
   $4 = HEAP8[$3 >> 0] | 0;
   $$not$i$i = $4 << 24 >> 24 == 0;
   $5 = $__cap >>> 0 < 29;
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3 >> 0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (tempInt = __Znwj($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $8 = $7;
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $8;
 $9 = $8 + ($__start << 2) | 0;
 $10 = $this + 8 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = $this + 4 | 0;
 HEAP32[$11 >> 2] = $9;
 $12 = $8 + ($__cap << 2) | 0;
 $13 = $this + 12 | 0;
 HEAP32[$13 >> 2] = $12;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = (tempInt = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4$1 = tempRet0;
 $6$0 = (tempInt = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10$0 = (tempInt = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0, $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strchr($mode, 43) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) == (0 | 0);
 $2 = HEAP8[$mode >> 0] | 0;
 $not$ = $2 << 24 >> 24 != 114;
 $$ = $not$ & 1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (tempInt = _strchr($mode, 120) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = ($3 | 0) == (0 | 0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (tempInt = _strchr($mode, 101) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = ($6 | 0) == (0 | 0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = $2 << 24 >> 24 == 114;
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = $2 << 24 >> 24 == 119;
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = $2 << 24 >> 24 == 97;
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 asyncState ? abort(-12) | 0 : 0;
 return $$flags$4 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKNS3_ISA_NS7_ISA_EEEE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $alloc = sp + 44 | 0;
 $9 = $this;
 $10 = $value;
 $11 = $9;
 $8 = $alloc;
 $5 = $alloc;
 $6 = 1;
 $7 = 0;
 $12 = $6;
 $13 = $12 * 12 | 0;
 $4 = $13;
 $14 = $4;
 $15 = (tempInt = __Znwj($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$11 >> 2] = $15;
 $16 = HEAP32[$11 >> 2] | 0;
 $17 = $10;
 $1 = $alloc;
 $2 = $16;
 $3 = $17;
 $18 = $2;
 $19 = $3;
 $0 = $19;
 $20 = $0;
 __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEEC2ERKSC_($18, $20), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $5 = $0 & 255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = $this + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $8 = $4;
 }
 $7 = $8 >>> 0 < $__n >>> 0;
 do {
  if ($7) {
   $9 = $__n - $8 | 0;
   (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $9, $__c) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  } else {
   if ($2) {
    $14 = ($this + 1 | 0) + $__n | 0;
    HEAP8[$14 >> 0] = 0;
    $15 = $__n << 1;
    $16 = $15 & 255;
    HEAP8[$this >> 0] = $16;
    break;
   } else {
    $10 = $this + 8 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + $__n | 0;
    HEAP8[$12 >> 0] = 0;
    $13 = $this + 4 | 0;
    HEAP32[$13 >> 2] = $__n;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 13;
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = $2 + -1 | 0;
  HEAP32[$__m >> 2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 13;
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = $2 + -1 | 0;
  HEAP32[$__m >> 2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $$off = $2 + -1 | 0;
 $6 = $$off >>> 0 < 12;
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h >> 2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $$off = $2 + -1 | 0;
 $6 = $$off >>> 0 < 12;
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h >> 2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr >> 2] | 0;
  $6 = $5 + $2 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this >> 2] | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 + 20 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $current_ptr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8, $info, $dst_ptr, $12, $15, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $$off = $2 + -1 | 0;
 $6 = $$off >>> 0 < 31;
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d >> 2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $$off = $2 + -1 | 0;
 $6 = $$off >>> 0 < 31;
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d >> 2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err >> 2] = $8;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 366;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 366;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 7;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 61;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 60;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 7;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 61;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 60;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 24;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 $6 = ($2 | 0) < 24;
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h >> 2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err >> 2] = $7;
 }
 STACKTOP = sp;
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $tio = sp + 12 | 0;
 $0 = $f + 36 | 0;
 HEAP32[$0 >> 2] = 96;
 $1 = HEAP32[$f >> 2] | 0;
 $2 = $1 & 64;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $4 = $f + 60 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $5;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = 21505;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = $tio;
  $6 = (tempInt = ___syscall54(54, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = ($6 | 0) == 0;
  if (!$7) {
   $8 = $f + 75 | 0;
   HEAP8[$8 >> 0] = -1;
  }
 }
 $9 = (tempInt = ___stdio_write($f, $buf, $len) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this, $__s, $__sz, $__reserve) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__reserve >>> 0 > 4294967279;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $__reserve >>> 0 < 11;
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2 & 255;
  HEAP8[$this >> 0] = $3;
  $4 = $this + 1 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__reserve + 16 | 0;
  $6 = $5 & -16;
  $7 = (tempInt = __Znwj($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = $this + 8 | 0;
  HEAP32[$8 >> 2] = $7;
  $9 = $6 | 1;
  HEAP32[$this >> 2] = $9;
  $10 = $this + 4 | 0;
  HEAP32[$10 >> 2] = $__sz;
  $__p$0 = $7;
 }
 (tempInt = _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $11 = $__p$0 + $__sz | 0;
 HEAP8[$11 >> 0] = 0;
 return;
}

function __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = ($3 | 0) == ($1 | 0);
 $5 = $1 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ($4) {
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = $7 + 16 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  FUNCTION_TABLE_vi[$9 & 1023]($6), asyncState ? abort(-12) | 0 : 0;
  STACKTOP = sp;
  return;
 }
 $10 = ($6 | 0) != (0 | 0);
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 $11 = $1 + 16 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $14 = $13 + 20 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 FUNCTION_TABLE_vi[$15 & 1023]($12), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$015 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = $0 - $low3 | 0;
 $2 = $1 >>> 2;
 $3 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  $$015 = $low;
  $$06 = $vec;
  while (1) {
   $4 = HEAP32[$$015 >> 2] | 0;
   $isascii = $4 >>> 0 < 128;
   if ($isascii) {
    $5 = (tempInt = __ZNSt3__15ctypeIcE13classic_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = $5 + ($4 << 1) | 0;
    $7 = HEAP16[$6 >> 1] | 0;
    $8 = $7 & 65535;
    $10 = $8;
   } else {
    $10 = 0;
   }
   $9 = $10 & 65535;
   HEAP16[$$06 >> 1] = $9;
   $11 = $$015 + 4 | 0;
   $12 = $$06 + 2 | 0;
   $13 = ($11 | 0) == ($high | 0);
   if ($13) {
    break;
   } else {
    $$015 = $11;
    $$06 = $12;
   }
  }
 }
 $scevgep = $low + ($2 << 2) | 0;
 return $scevgep | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $this + 128 | 0;
 HEAP8[$2 >> 0] = 0;
 $3 = ($__n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if (!$3) {
   __THREW__ = 0;
   invoke_vii(563, $this | 0, $__n | 0), asyncState ? abort(-12) | 0 : 0;
   $4 = __THREW__;
   __THREW__ = 0;
   $5 = $4 & 1;
   if ($5) {
    $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this), asyncState ? abort(-12) | 0 : 0;
    ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n), asyncState ? abort(-12) | 0 : 0;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = (tempInt = _uselocale($__l) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = _vsnprintf($__s, $__n, $__format, $__va) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($0 | 0) == (0 | 0);
 if (!$2) {
  __THREW__ = 0;
  (tempInt = invoke_ii(477, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $3 = __THREW__;
  __THREW__ = 0;
  $4 = $3 & 1;
  if ($4) {
   $5 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = tempRet0;
   ___clang_call_terminate($5), asyncState ? abort(-12) | 0 : 0;
  }
 }
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($2) {
   HEAP32[$0 >> 2] = $adjustedPtr;
   $3 = $info + 24 | 0;
   HEAP32[$3 >> 2] = $path_below;
   $4 = $info + 36 | 0;
   HEAP32[$4 >> 2] = 1;
  } else {
   $5 = ($1 | 0) == ($adjustedPtr | 0);
   if (!$5) {
    $9 = $info + 36 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + 1 | 0;
    HEAP32[$9 >> 2] = $11;
    $12 = $info + 24 | 0;
    HEAP32[$12 >> 2] = 2;
    $13 = $info + 54 | 0;
    HEAP8[$13 >> 0] = 1;
    break;
   }
   $6 = $info + 24 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $8 = ($7 | 0) == 2;
   if ($8) {
    HEAP32[$6 >> 2] = $path_below;
   }
  }
 } while (0);
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 21628, 21636) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 9484, 9516) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr >> 2] | 0;
  $6 = $5 + $2 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this >> 2] | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 + 24 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $current_ptr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8, $info, $12, $15, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKS9_($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $alloc = sp + 44 | 0;
 $9 = $this;
 $10 = $value;
 $11 = $9;
 $8 = $alloc;
 $1 = $alloc;
 $2 = 1;
 $3 = 0;
 $12 = $2;
 $13 = $12 * 12 | 0;
 $0 = $13;
 $14 = $0;
 $15 = (tempInt = __Znwj($14) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$11 >> 2] = $15;
 $16 = HEAP32[$11 >> 2] | 0;
 $17 = $10;
 $5 = $alloc;
 $6 = $16;
 $7 = $17;
 $18 = $6;
 $19 = $7;
 $4 = $19;
 $20 = $4;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($18, $20), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2048 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2048 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    invoke_viii(393, 12360 | 0, 22016 | 0, 11), asyncState ? abort(-12) | 0 : 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = tempRet0;
     ___cxa_guard_abort(2048 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     (tempInt = ___cxa_atexit(362 | 0, 12360 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     ___cxa_guard_release(2048 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 return 12360 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2032 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2032 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    invoke_viii(393, 12252 | 0, 21995 | 0, 20), asyncState ? abort(-12) | 0 : 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = tempRet0;
     ___cxa_guard_abort(2032 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     (tempInt = ___cxa_atexit(362 | 0, 12252 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     ___cxa_guard_release(2032 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 return 12252 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2016 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2016 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    invoke_viii(393, 12192 | 0, 21986 | 0, 8), asyncState ? abort(-12) | 0 : 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = tempRet0;
     ___cxa_guard_abort(2016 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     (tempInt = ___cxa_atexit(362 | 0, 12192 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     ___cxa_guard_release(2016 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 return 12192 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[2e3 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(2e3 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    invoke_viii(393, 12132 | 0, 21977 | 0, 8), asyncState ? abort(-12) | 0 : 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $7 = tempRet0;
     ___cxa_guard_abort(2e3 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     (tempInt = ___cxa_atexit(362 | 0, 12132 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     ___cxa_guard_release(2e3 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 return 12132 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__sz >>> 0 > 1073741807;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $__sz >>> 0 < 2;
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2 & 255;
  HEAP8[$this >> 0] = $3;
  $4 = $this + 4 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__sz + 4 | 0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (tempInt = __Znwj($7) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $9 = $this + 8 | 0;
  HEAP32[$9 >> 2] = $8;
  $10 = $6 | 1;
  HEAP32[$this >> 2] = $10;
  $11 = $this + 4 | 0;
  HEAP32[$11 >> 2] = $__sz;
  $__p$0 = $8;
 }
 (tempInt = _wmemcpy($__p$0, $__s, $__sz) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $__p$0 + ($__sz << 2) | 0;
 HEAP32[$12 >> 2] = 0;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__b >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = HEAP32[$__e >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2] | 0;
 $4 = (tempInt = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 7764;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(459, $this | 0, 0), asyncState ? abort(-12) | 0 : 0;
 $0 = __THREW__;
 __THREW__ = 0;
 $1 = $0 & 1;
 if ($1) {
  $11 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $12 = tempRet0;
  ___clang_call_terminate($11), asyncState ? abort(-12) | 0 : 0;
 } else {
  $2 = $this + 28 | 0;
  __ZNSt3__16localeD2Ev($2), asyncState ? abort(-12) | 0 : 0;
  $3 = $this + 32 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  _free($4), asyncState ? abort(-12) | 0 : 0;
  $5 = $this + 36 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  _free($6), asyncState ? abort(-12) | 0 : 0;
  $7 = $this + 48 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  _free($8), asyncState ? abort(-12) | 0 : 0;
  $9 = $this + 60 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  _free($10), asyncState ? abort(-12) | 0 : 0;
  return;
 }
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__n >>> 0 > 1073741807;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $__n >>> 0 < 2;
 if ($1) {
  $2 = $__n << 1;
  $3 = $2 & 255;
  HEAP8[$this >> 0] = $3;
  $4 = $this + 4 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__n + 4 | 0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (tempInt = __Znwj($7) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $9 = $this + 8 | 0;
  HEAP32[$9 >> 2] = $8;
  $10 = $6 | 1;
  HEAP32[$this >> 2] = $10;
  $11 = $this + 4 | 0;
  HEAP32[$11 >> 2] = $__n;
  $__p$0 = $8;
 }
 (tempInt = _wmemset($__p$0, $__c, $__n) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $12 = $__p$0 + ($__n << 2) | 0;
 HEAP32[$12 >> 2] = 0;
 return;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = (tempInt = _uselocale($__l) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = _vsscanf($__s, $__format, $__va) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($0 | 0) == (0 | 0);
 if (!$2) {
  __THREW__ = 0;
  (tempInt = invoke_ii(477, $0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $3 = __THREW__;
  __THREW__ = 0;
  $4 = $3 & 1;
  if ($4) {
   $5 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $6 = tempRet0;
   ___clang_call_terminate($5), asyncState ? abort(-12) | 0 : 0;
  }
 }
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = $9 + 4 | 0;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE($7, $15), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $0 = $fmt + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 $2 = $fmt + 3 | 0;
 HEAP8[$2 >> 0] = 0;
 $3 = $__mod << 24 >> 24 == 0;
 if (!$3) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = $4;
 $6 = $__nb;
 $7 = $5 - $6 | 0;
 $8 = HEAP32[$this >> 2] | 0;
 $9 = (tempInt = _strftime_l($__nb | 0, $7 | 0, $fmt | 0, $__tm | 0, $8 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10 = $__nb + $9 | 0;
 HEAP32[$__ne >> 2] = $10;
 STACKTOP = sp;
 return;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = $0 - $1 | 0;
 $3 = $2 >> 2;
 $4 = $3 >>> 0 < $n >>> 0;
 $5 = ($n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  if (!$5) {
   $$in = $n;
   while (1) {
    $6 = $$in + -1 | 0;
    $7 = $s + ($6 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $d + ($6 << 2) | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = ($6 | 0) == 0;
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!$5) {
   $$025 = $s;
   $$07 = $d;
   $$16 = $n;
   while (1) {
    $11 = $$16 + -1 | 0;
    $12 = $$025 + 4 | 0;
    $13 = HEAP32[$$025 >> 2] | 0;
    $14 = $$07 + 4 | 0;
    HEAP32[$$07 >> 2] = $13;
    $15 = ($11 | 0) == 0;
    if ($15) {
     break;
    } else {
     $$025 = $12;
     $$07 = $14;
     $$16 = $11;
    }
   }
  }
 }
 return $d | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__sz >>> 0 > 4294967279;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $__sz >>> 0 < 11;
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2 & 255;
  HEAP8[$this >> 0] = $3;
  $4 = $this + 1 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__sz + 16 | 0;
  $6 = $5 & -16;
  $7 = (tempInt = __Znwj($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = $this + 8 | 0;
  HEAP32[$8 >> 2] = $7;
  $9 = $6 | 1;
  HEAP32[$this >> 2] = $9;
  $10 = $this + 4 | 0;
  HEAP32[$10 >> 2] = $__sz;
  $__p$0 = $7;
 }
 (tempInt = _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $11 = $__p$0 + $__sz | 0;
 HEAP8[$11 >> 0] = 0;
 return;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($size | 0) == 0;
 $$size = $0 ? 1 : $size;
 $1 = (tempInt = _malloc($$size) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($1 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($2) {
   while (1) {
    $3 = (tempInt = __ZSt15get_new_handlerv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $4 = ($3 | 0) == (0 | 0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023](), asyncState ? abort(-12) | 0 : 0;
    $5 = (tempInt = _malloc($$size) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = ($5 | 0) == (0 | 0);
    if (!$6) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   HEAP32[$7 >> 2] = 3152;
   ___cxa_throw($7 | 0, 120 | 0, 61 | 0), asyncState ? abort(-12) | 0 : 0;
  } else {
   $$lcssa = $1;
  }
 } while (0);
 return $$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__n >>> 0 > 4294967279;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $__n >>> 0 < 11;
 if ($1) {
  $2 = $__n << 1;
  $3 = $2 & 255;
  HEAP8[$this >> 0] = $3;
  $4 = $this + 1 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__n + 16 | 0;
  $6 = $5 & -16;
  $7 = (tempInt = __Znwj($6) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = $this + 8 | 0;
  HEAP32[$8 >> 2] = $7;
  $9 = $6 | 1;
  HEAP32[$this >> 2] = $9;
  $10 = $this + 4 | 0;
  HEAP32[$10 >> 2] = $__n;
  $__p$0 = $7;
 }
 (tempInt = _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $11 = $__p$0 + $__n | 0;
 HEAP8[$11 >> 0] = 0;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr >> 2] | 0;
  $6 = $5 + $2 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this >> 2] | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $adjustedPtr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8, $info, $12, $15), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = (tempInt = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4$1 = tempRet0;
 $6$0 = (tempInt = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $8$0 = (tempInt = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10$0 = (tempInt = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $10$0 | 0;
}

function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1408 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1408 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    $4 = (tempInt = invoke_iiii(464, 2147483647, 21606 | 0, 0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $5 = __THREW__;
    __THREW__ = 0;
    $6 = $5 & 1;
    if ($6) {
     $8 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $9 = tempRet0;
     ___cxa_guard_abort(1408 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($8 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     HEAP32[9480 >> 2] = $4;
     ___cxa_guard_release(1408 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 $7 = HEAP32[9480 >> 2] | 0;
 return $7 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 if ($5) {
  $6 = $2 + -1900 | 0;
  HEAP32[$__y >> 2] = $6;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 $2 = (tempInt = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 0;
 if ($5) {
  $6 = $2 + -1900 | 0;
  HEAP32[$__y >> 2] = $6;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $3 = $1;
 $4 = $2;
 $5 = $3 - $4 | 0;
 $6 = $5 >> 2;
 $7 = $6 >>> 0 < $__sz >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($7) {
  $8 = $__sz - $6 | 0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $8), asyncState ? abort(-12) | 0 : 0;
 } else {
  $9 = $6 >>> 0 > $__sz >>> 0;
  if ($9) {
   $10 = $2 + ($__sz << 2) | 0;
   $11 = ($1 | 0) == ($10 | 0);
   if (!$11) {
    $13 = $1;
    while (1) {
     $12 = $13 + -4 | 0;
     $14 = ($12 | 0) == ($10 | 0);
     if ($14) {
      $$lcssa = $12;
      break;
     } else {
      $13 = $12;
     }
    }
    HEAP32[$0 >> 2] = $$lcssa;
   }
  }
 }
 return;
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while (1) {
    $1 = HEAP32[$$01 >> 2] | 0;
    $isascii = $1 >>> 0 < 128;
    if (!$isascii) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = (tempInt = __ZNSt3__15ctypeIcE13classic_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $3 = $2 + ($1 << 1) | 0;
    $4 = HEAP16[$3 >> 1] | 0;
    $5 = $4 & $m;
    $6 = $5 << 16 >> 16 == 0;
    if ($6) {
     $$0$lcssa = $$01;
     break L1;
    }
    $7 = $$01 + 4 | 0;
    $8 = ($7 | 0) == ($high | 0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while (0);
 return $$0$lcssa | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EOSA_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $4 = sp;
 $2 = $this;
 $3 = $other;
 $5 = $2;
 $6 = $3;
 $1 = $6;
 $7 = $1;
 $8 = HEAP8[$7 >> 0] | 0;
 HEAP8[$5 >> 0] = $8;
 $9 = $5 + 8 | 0;
 $10 = $3;
 $11 = $10 + 8 | 0;
 $0 = $11;
 $12 = $0;
 HEAP32[$9 >> 2] = HEAP32[$12 >> 2] | 0;
 HEAP32[$9 + 4 >> 2] = HEAP32[$12 + 4 >> 2] | 0;
 $13 = $3;
 HEAP8[$13 >> 0] = 0;
 $14 = $3;
 $15 = $14 + 8 | 0;
 HEAP32[$4 >> 2] = 0 | 0;
 HEAP32[$4 + 4 >> 2] = 0 | 0;
 HEAP32[$15 >> 2] = HEAP32[$4 >> 2] | 0;
 HEAP32[$15 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = $this + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = $5 + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $this + 8 | 0;
 $$pre$i$i$i = HEAP32[$2 >> 2] | 0;
 $3 = ($$pre$i$i$i | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  $5 = $$pre$i$i$i;
  while (1) {
   $4 = $5 + -4 | 0;
   $6 = ($4 | 0) == ($1 | 0);
   if ($6) {
    $$lcssa = $4;
    break;
   } else {
    $5 = $4;
   }
  }
  HEAP32[$2 >> 2] = $$lcssa;
 }
 $7 = HEAP32[$this >> 2] | 0;
 $8 = ($7 | 0) == (0 | 0);
 do {
  if (!$8) {
   $9 = $this + 16 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   $11 = ($10 | 0) == ($7 | 0);
   if ($11) {
    $12 = $10 + 112 | 0;
    HEAP8[$12 >> 0] = 0;
    break;
   } else {
    __ZdlPv($7), asyncState ? abort(-12) | 0 : 0;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1896 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1896 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    (tempInt = invoke_i(529) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $7 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $8 = tempRet0;
     ___cxa_guard_abort(1896 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($7 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     HEAP32[9688 >> 2] = 9684;
     ___cxa_guard_release(1896 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 $6 = HEAP32[9688 >> 2] | 0;
 return $6 | 0;
}

function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[1728 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($1) {
   $2 = (tempInt = ___cxa_guard_acquire(1728 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $3 = ($2 | 0) == 0;
   if (!$3) {
    __THREW__ = 0;
    (tempInt = invoke_i(527) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $4 = __THREW__;
    __THREW__ = 0;
    $5 = $4 & 1;
    if ($5) {
     $7 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $8 = tempRet0;
     ___cxa_guard_abort(1728 | 0), asyncState ? abort(-12) | 0 : 0;
     ___resumeException($7 | 0), asyncState ? abort(-12) | 0 : 0;
    } else {
     HEAP32[9680 >> 2] = 9676;
     ___cxa_guard_release(1728 | 0), asyncState ? abort(-12) | 0 : 0;
     break;
    }
   }
  }
 } while (0);
 $6 = HEAP32[9680 >> 2] | 0;
 return $6 | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while (1) {
    $1 = HEAP32[$$01 >> 2] | 0;
    $isascii = $1 >>> 0 < 128;
    if ($isascii) {
     $2 = (tempInt = __ZNSt3__15ctypeIcE13classic_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $3 = $2 + ($1 << 1) | 0;
     $4 = HEAP16[$3 >> 1] | 0;
     $5 = $4 & $m;
     $6 = $5 << 16 >> 16 == 0;
     if (!$6) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = $$01 + 4 | 0;
    $8 = ($7 | 0) == ($high | 0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while (0);
 return $$0$lcssa | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__n >>> 0 > 1073741823;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this), asyncState ? abort(-12) | 0 : 0;
 }
 $1 = $this + 128 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $$not$i$i = $2 << 24 >> 24 == 0;
 $3 = $__n >>> 0 < 29;
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = $this + 16 | 0;
  HEAP8[$1 >> 0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (tempInt = __Znwj($5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$0$i$i = $6;
 }
 $7 = $this + 4 | 0;
 HEAP32[$7 >> 2] = $$0$i$i;
 HEAP32[$this >> 2] = $$0$i$i;
 $8 = $$0$i$i + ($__n << 2) | 0;
 $9 = $this + 8 | 0;
 HEAP32[$9 >> 2] = $8;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = (tempInt = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$_frm_nxt >> 2] | 0;
 HEAP32[$frm_nxt >> 2] = $2;
 $3 = HEAP32[$_to_nxt >> 2] | 0;
 HEAP32[$to_nxt >> 2] = $3;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = (tempInt = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$_frm_nxt >> 2] | 0;
 HEAP32[$frm_nxt >> 2] = $2;
 $3 = HEAP32[$_to_nxt >> 2] | 0;
 HEAP32[$to_nxt >> 2] = $3;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = (tempInt = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$_frm_nxt >> 2] | 0;
 HEAP32[$frm_nxt >> 2] = $2;
 $3 = HEAP32[$_to_nxt >> 2] | 0;
 HEAP32[$to_nxt >> 2] = $3;
 STACKTOP = sp;
 return $1 | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n_elements | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  $2 = $elem_size | $n_elements;
  $3 = $2 >>> 0 > 65535;
  if ($3) {
   $4 = ($1 >>> 0) / ($n_elements >>> 0) & -1;
   $5 = ($4 | 0) == ($elem_size | 0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (tempInt = _malloc($req$0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $7 = ($6 | 0) == (0 | 0);
 if ($7) {
  return $6 | 0;
 }
 $8 = $6 + -4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 & 3;
 $11 = ($10 | 0) == 0;
 if ($11) {
  return $6 | 0;
 }
 (tempInt = _memset($6 | 0, 0, $req$0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 return $6 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = (tempInt = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = HEAP32[$_frm_nxt >> 2] | 0;
 HEAP32[$frm_nxt >> 2] = $2;
 $3 = HEAP32[$_to_nxt >> 2] | 0;
 HEAP32[$to_nxt >> 2] = $3;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = $0 - $low2 | 0;
 $2 = $1 >>> 2;
 $3 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  $$04 = $low;
  while (1) {
   $4 = HEAP32[$$04 >> 2] | 0;
   $isascii = $4 >>> 0 < 128;
   if ($isascii) {
    $5 = (tempInt = __ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = $5 + ($4 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04 >> 2] = $8;
   $9 = $$04 + 4 | 0;
   $10 = ($9 | 0) == ($high | 0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = $low + ($2 << 2) | 0;
 return $scevgep | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = $0 - $low2 | 0;
 $2 = $1 >>> 2;
 $3 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  $$04 = $low;
  while (1) {
   $4 = HEAP32[$$04 >> 2] | 0;
   $isascii = $4 >>> 0 < 128;
   if ($isascii) {
    $5 = (tempInt = __ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $6 = $5 + ($4 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04 >> 2] = $8;
   $9 = $$04 + 4 | 0;
   $10 = ($9 | 0) == ($high | 0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = $low + ($2 << 2) | 0;
 return $scevgep | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 << 24 >> 24;
 $3 = $2 + 255 | 0;
 $4 = $3 | $2;
 $5 = $4 & 255;
 HEAP8[$0 >> 0] = $5;
 $6 = HEAP32[$f >> 2] | 0;
 $7 = $6 & 8;
 $8 = ($7 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($8) {
  $10 = $f + 8 | 0;
  HEAP32[$10 >> 2] = 0;
  $11 = $f + 4 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $f + 44 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = $f + 28 | 0;
  HEAP32[$14 >> 2] = $13;
  $15 = $f + 20 | 0;
  HEAP32[$15 >> 2] = $13;
  $16 = $13;
  $17 = $f + 48 | 0;
  $18 = HEAP32[$17 >> 2] | 0;
  $19 = $16 + $18 | 0;
  $20 = $f + 16 | 0;
  HEAP32[$20 >> 2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f >> 2] = $9;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size) | 0;
 $1 = $f + 76 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($3) {
  $5 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $phitmp = ($5 | 0) == 0;
  $6 = (tempInt = ___fwritex($src, $0, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
   $8 = $6;
  }
 } else {
  $4 = (tempInt = ___fwritex($src, $0, $f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = $4;
 }
 $7 = ($8 | 0) == ($0 | 0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = ($8 >>> 0) / ($size >>> 0) & -1;
  $10 = $9;
 }
 return $10 | 0;
}

function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this, $msg, $ec) {
 $this = $this | 0;
 $msg = $msg | 0;
 $ec = $ec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 + 4 | 0;
 $5 = $4;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8 >> 2] = $3;
 $9 = $7 + 4 | 0;
 $10 = $9;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$0 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $tmpcast$byval_copy, $msg), asyncState ? abort(-12) | 0 : 0;
 HEAP32[$this >> 2] = 7744;
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $__sp, $__wch) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__sp = $__sp | 0;
 $__wch = $__wch | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $0 = $__sp;
 $7 = $0;
 $8 = $7 + 8 | 0;
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $9 + 4 | 0;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 511]($agg$result, $3, $11, $14, 0, $15), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = $3 + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = $7 + -12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $2 + $9 | 0;
 HEAP32[$10 >> 2] = $6;
 $11 = $3 + 36 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $2 + 8 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = $2 + 12 | 0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 $2 = $0 << 24 >> 24 != $1 << 24 >> 24;
 $3 = $0 << 24 >> 24 == 0;
 $or$cond3 = $3 | $2;
 asyncState ? abort(-12) | 0 : 0;
 if ($or$cond3) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  while (1) {
   $4 = $$014 + 1 | 0;
   $5 = $$05 + 1 | 0;
   $6 = HEAP8[$4 >> 0] | 0;
   $7 = HEAP8[$5 >> 0] | 0;
   $8 = $6 << 24 >> 24 != $7 << 24 >> 24;
   $9 = $6 << 24 >> 24 == 0;
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;
    $$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;
    $$05 = $5;
   }
  }
 }
 $10 = $$lcssa & 255;
 $11 = $$lcssa2 & 255;
 $12 = $10 - $11 | 0;
 return $12 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 L1 : do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;
   $l$04 = $vl;
   $r$05 = $vr;
   while (1) {
    $1 = HEAP8[$l$04 >> 0] | 0;
    $2 = HEAP8[$r$05 >> 0] | 0;
    $3 = $1 << 24 >> 24 == $2 << 24 >> 24;
    if (!$3) {
     $$lcssa = $1;
     $$lcssa19 = $2;
     break;
    }
    $4 = $$03 + -1 | 0;
    $5 = $l$04 + 1 | 0;
    $6 = $r$05 + 1 | 0;
    $7 = ($4 | 0) == 0;
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;
     $l$04 = $5;
     $r$05 = $6;
    }
   }
   $8 = $$lcssa & 255;
   $9 = $$lcssa19 & 255;
   $10 = $8 - $9 | 0;
   $11 = $10;
  }
 } while (0);
 return $11 | 0;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $c = sp;
 $0 = $f + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $3 = (tempInt = ___toread($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $5 = $f + 32 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = (tempInt = FUNCTION_TABLE_iiii[$6 & 1023]($f, $c, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $8 = ($7 | 0) == 1;
  if ($8) {
   $9 = HEAP8[$c >> 0] | 0;
   $10 = $9 & 255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp;
 $1 = HEAP32[$this >> 2] | 0;
 $2 = $1 + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 FUNCTION_TABLE_viii[$3 & 1023]($0, $this, $code), asyncState ? abort(-12) | 0 : 0;
 $4 = $0 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $condition + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($5 | 0) == ($7 | 0);
 if ($8) {
  $9 = HEAP32[$0 >> 2] | 0;
  $10 = HEAP32[$condition >> 2] | 0;
  $11 = ($9 | 0) == ($10 | 0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 do {
  if (!$1) {
   $2 = $this + 4 | 0;
   $$pre$i$i = HEAP32[$2 >> 2] | 0;
   $3 = ($$pre$i$i | 0) == ($0 | 0);
   if (!$3) {
    $5 = $$pre$i$i;
    while (1) {
     $4 = $5 + -4 | 0;
     $6 = ($4 | 0) == ($0 | 0);
     if ($6) {
      $$lcssa = $4;
      break;
     } else {
      $5 = $4;
     }
    }
    HEAP32[$2 >> 2] = $$lcssa;
   }
   $7 = $this + 16 | 0;
   $8 = ($7 | 0) == ($0 | 0);
   if ($8) {
    $9 = $this + 128 | 0;
    HEAP8[$9 >> 0] = 0;
    break;
   } else {
    __ZdlPv($0), asyncState ? abort(-12) | 0 : 0;
    break;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 9e3;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 __THREW__ = 0;
 $2 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if (!$4) {
   $5 = ($1 | 0) == ($2 | 0);
   if (!$5) {
    $6 = HEAP32[$0 >> 2] | 0;
    __THREW__ = 0;
    invoke_vi(475, $6 | 0), asyncState ? abort(-12) | 0 : 0;
    $7 = __THREW__;
    __THREW__ = 0;
    $8 = $7 & 1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while (0);
 $9 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $10 = tempRet0;
 ___clang_call_terminate($9), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$015 = 0, $$06 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = $0 - $low3 | 0;
 $2 = $1 >>> 2;
 $3 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  $$015 = $low;
  $$06 = $dest;
  while (1) {
   $4 = HEAP32[$$015 >> 2] | 0;
   $isascii = $4 >>> 0 < 128;
   $5 = $4 & 255;
   $$dfault = $isascii ? $5 : $dfault;
   HEAP8[$$06 >> 0] = $$dfault;
   $6 = $$015 + 4 | 0;
   $7 = $$06 + 1 | 0;
   $8 = ($6 | 0) == ($high | 0);
   if ($8) {
    break;
   } else {
    $$015 = $6;
    $$06 = $7;
   }
  }
 }
 $scevgep = $low + ($2 << 2) | 0;
 return $scevgep | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ex($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = sp;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5 >> 2] = $0;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $9 + 4 | 0;
 $13 = $12;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $8;
 $16 = $15;
 HEAP32[$16 >> 2] = $11;
 $17 = $15 + 4 | 0;
 $18 = $17;
 HEAP32[$18 >> 2] = $14;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = $this + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = $5 + 28 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  FUNCTION_TABLE_viiii[$7 & 511]($4, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$02 = $low;
  while (1) {
   $1 = HEAP8[$$02 >> 0] | 0;
   $isascii1 = $1 << 24 >> 24 > -1;
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (tempInt = __ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $4 = $3 + ($2 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 & 255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02 >> 0] = $7;
   $8 = $$02 + 1 | 0;
   $9 = ($8 | 0) == ($high | 0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return $high | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$02 = $low;
  while (1) {
   $1 = HEAP8[$$02 >> 0] | 0;
   $isascii1 = $1 << 24 >> 24 > -1;
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (tempInt = __ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $4 = $3 + ($2 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 & 255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02 >> 0] = $7;
   $8 = $$02 + 1 | 0;
   $9 = ($8 | 0) == ($high | 0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return $high | 0;
}

function _newlocale($mask, $name, $base) {
 $mask = $mask | 0;
 $name = $name | 0;
 $base = $base | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  label = 4;
 } else {
  $2 = (tempInt = _strcmp($name, 21606) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $3 = ($2 | 0) == 0;
  if ($3) {
   label = 4;
  } else {
   $4 = (tempInt = _strcmp($name, 18267) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $5 = ($4 | 0) == 0;
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label | 0) == 4) {
  $6 = ($base | 0) == (0 | 0);
  if ($6) {
   $7 = (tempInt = _calloc(1, 4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return $$01 | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = (tempInt = _memchr($1, 0, $2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = ($3 | 0) == (0 | 0);
 $5 = $3;
 $6 = $1;
 $7 = $5 - $6 | 0;
 $k$0 = $4 ? $2 : $7;
 $8 = $k$0 >>> 0 < $len >>> 0;
 $k$0$len = $8 ? $k$0 : $len;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = $1 + $k$0$len | 0;
 $10 = $f + 4 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = $1 + $k$0 | 0;
 $12 = $f + 8 | 0;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3216;
 $0 = $this + 4 | 0;
 $1 = HEAP8[$msg >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 $4 = $msg + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $msg + 1 | 0;
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(456, $0 | 0, $7 | 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $10 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $11 = tempRet0;
  ___resumeException($10 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  return;
 }
}

function __ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3196;
 $0 = $this + 4 | 0;
 $1 = HEAP8[$msg >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 $4 = $msg + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $msg + 1 | 0;
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(456, $0 | 0, $7 | 0), asyncState ? abort(-12) | 0 : 0;
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $10 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $11 = tempRet0;
  ___resumeException($10 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  return;
 }
}

function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 __THREW__ = 0;
 $1 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if (!$3) {
   $4 = ($0 | 0) == ($1 | 0);
   if (!$4) {
    $5 = HEAP32[$this >> 2] | 0;
    __THREW__ = 0;
    invoke_vi(475, $5 | 0), asyncState ? abort(-12) | 0 : 0;
    $6 = __THREW__;
    __THREW__ = 0;
    $7 = $6 & 1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while (0);
 $8 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = tempRet0;
 ___clang_call_terminate($8), asyncState ? abort(-12) | 0 : 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratorC2EPSA_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $object;
 $2 = $0;
 $3 = $1;
 __THREW__ = 0;
 invoke_vii(440, $2 | 0, $3 | 0), asyncState ? abort(-12) | 0 : 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = tempRet0;
  ___clang_call_terminate($6), asyncState ? abort(-12) | 0 : 0;
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10get_numberEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $endptr = 0, $float_val = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $endptr = sp + 8 | 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = +(tempDouble = +_strtold($3, $endptr), asyncState ? +abort(-12) : tempDouble);
 $float_val = $4;
 $5 = HEAP32[$endptr >> 2] | 0;
 $6 = $1 + 28 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = ($5 | 0) == ($7 | 0);
 $9 = $float_val;
 $10 = $8 ? $9 : nan;
 STACKTOP = sp;
 return +$10;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E17internal_iteratorC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = $this;
 $4 = $3;
 $2 = $4;
 $5 = $2;
 $1 = $5;
 $6 = $1;
 HEAP32[$6 >> 2] = 0;
 $7 = $4 + 4 | 0;
 $0 = $7;
 $8 = $0;
 HEAP32[$8 >> 2] = 0;
 $9 = $4 + 8 | 0;
 HEAP32[$9 >> 2] = 0 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tC2Ev($9), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$this >> 0] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = $__os;
 $1 = HEAP32[$__os >> 2] | 0;
 $2 = $1 + -12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $$sum = $3 + 16 | 0;
 $4 = $__os + $$sum | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($6) {
  $$sum1 = $3 + 72 | 0;
  $7 = $__os + $$sum1 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = ($8 | 0) == (0 | 0);
  if (!$9) {
   (tempInt = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  }
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5beginEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratorC2EPSA_($agg$result, $1), asyncState ? abort(-12) | 0 : 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iterator9set_beginEv($agg$result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E3endEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratorC2EPSA_($agg$result, $1), asyncState ? abort(-12) | 0 : 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iterator7set_endEv($agg$result), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = $3 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = $7 + -12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $2 + $9 | 0;
 HEAP32[$10 >> 2] = $6;
 $11 = $2 + 4 | 0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 40 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $this + 32 | 0;
 $3 = $this + 36 | 0;
 $4 = ($1 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$4) {
  $i$01 = $1;
  while (1) {
   $5 = $i$01 + -1 | 0;
   $6 = HEAP32[$2 >> 2] | 0;
   $7 = $6 + ($5 << 2) | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = HEAP32[$3 >> 2] | 0;
   $10 = $9 + ($5 << 2) | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev, $this, $11), asyncState ? abort(-12) | 0 : 0;
   $12 = ($5 | 0) == 0;
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parserD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 36 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexerD2Ev($2), asyncState ? abort(-12) | 0 : 0;
 $3 = $1 + 8 | 0;
 __ZNSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EED2Ev($3), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__lo | 0) == ($__hi | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
  while (1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01 >> 0] | 0;
   $3 = $2 << 24 >> 24;
   $4 = $3 + $1 | 0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = $__p$01 + 1 | 0;
   $10 = ($9 | 0) == ($__hi | 0);
   if ($10) {
    $__h$0$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;
    $__p$01 = $9;
   }
  }
 }
 return $__h$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($this | 0) == ($__str | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $1 = HEAP8[$__str >> 0] | 0;
  $2 = $1 & 1;
  $3 = $2 << 24 >> 24 == 0;
  $4 = $__str + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = $__str + 1 | 0;
  $7 = $3 ? $6 : $5;
  $8 = $__str + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $1 & 255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $7, $12) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 }
 return $this | 0;
}

function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 24 | 0;
 HEAP32[$0 >> 2] = $sb;
 $not$ = ($sb | 0) == (0 | 0);
 $1 = $not$ & 1;
 $2 = $this + 16 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $this + 20 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $this + 4 | 0;
 HEAP32[$4 >> 2] = 4098;
 $5 = $this + 12 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = 6;
 $7 = $this + 32 | 0;
 $8 = $this + 28 | 0;
 dest = $7;
 stop = dest + 40 | 0;
 asyncState ? abort(-12) | 0 : 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c;
 $1 = $0;
 $2 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = (tempInt = __ZNSt3__111char_traitsIcE11eq_int_typeEii($1, $2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 if ($3) {
  $4 = (tempInt = __ZNSt3__111char_traitsIcE3eofEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = $3 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = $7 + -12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $2 + $9 | 0;
 HEAP32[$10 >> 2] = $6;
 $11 = $2 + 4 | 0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($11), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = $3 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = $7 + -12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $2 + $9 | 0;
 HEAP32[$10 >> 2] = $6;
 $11 = $2 + 8 | 0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($11), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($__lo | 0) == ($__hi | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
  while (1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01 >> 2] | 0;
   $3 = $2 + $1 | 0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = $__p$01 + 4 | 0;
   $9 = ($8 | 0) == ($__hi | 0);
   if ($9) {
    $__h$0$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;
    $__p$01 = $8;
   }
  }
 }
 return $__h$0$lcssa | 0;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $temp = sp;
 $0 = HEAP32[$thrown >> 2] | 0;
 HEAP32[$temp >> 2] = $0;
 $1 = HEAP32[$catchType >> 2] | 0;
 $2 = $1 + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (tempInt = FUNCTION_TABLE_iiii[$3 & 1023]($catchType, $excpType, $temp) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = $4 & 1;
 if ($4) {
  $6 = HEAP32[$temp >> 2] | 0;
  HEAP32[$thrown >> 2] = $6;
 }
 STACKTOP = sp;
 return $5 | 0;
}

function ___cxx_global_var_init5() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = 2356;
 $4 = 13323;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $4;
 $9 = $4;
 $10 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5, $8, $10), asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___cxa_atexit(362 | 0, 2356 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return;
}

function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $3 = 2320;
 $4 = 13297;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $4;
 $9 = $4;
 $10 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($9) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5, $8, $10), asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___cxa_atexit(362 | 0, 2320 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return;
}

function ___fseeko($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 76 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $phitmp = ($4 | 0) == 0;
  $5 = (tempInt = ___fseeko_unlocked($f, $off, $whence) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f), asyncState ? abort(-12) | 0 : 0;
   $6 = $5;
  }
 } else {
  $3 = (tempInt = ___fseeko_unlocked($f, $off, $whence) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $3;
 }
 return $6 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser9get_tokenEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 36 | 0;
 $3 = (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer4scanEv($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = $1 + 32 | 0;
 HEAP32[$4 >> 2] = $3;
 $5 = $1 + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $__vp + 4 | 0;
 $$field = HEAP32[$0 >> 2] | 0;
 $$index1 = $0 + 4 | 0;
 $$field2 = HEAP32[$$index1 >> 2] | 0;
 $1 = HEAP32[$__vp >> 2] | 0;
 $2 = $$field2 >> 1;
 $3 = $1 + $2 | 0;
 $4 = $$field2 & 1;
 $5 = ($4 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3 >> 2] | 0;
  $7 = $6 + $$field | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 32 | 0;
 HEAP32[$0 >> 2] = 455;
 $1 = $f + 44 | 0;
 HEAP32[$1 >> 2] = $s;
 $2 = $f + 76 | 0;
 HEAP32[$2 >> 2] = -1;
 $3 = $f + 84 | 0;
 HEAP32[$3 >> 2] = $s;
 $4 = (tempInt = _vfscanf($f, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2] | 0;
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2] | 0;
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2] | 0;
 } else {
  $3 = $__str + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = $__str + 4 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $4, $6), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$013 = $low;
  $$04 = $dest;
  while (1) {
   $1 = HEAP8[$$013 >> 0] | 0;
   $isascii2 = $1 << 24 >> 24 > -1;
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04 >> 0] = $$dfault;
   $2 = $$013 + 1 | 0;
   $3 = $$04 + 1 | 0;
   $4 = ($2 | 0) == ($high | 0);
   if ($4) {
    break;
   } else {
    $$013 = $2;
    $$04 = $3;
   }
  }
 }
 return $high | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorneERKSB_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratoreqERKSB_($2, $3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $5 = $4 ^ 1;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = ___cxa_allocate_exception(8) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(484, $0 | 0, $msg | 0), asyncState ? abort(-12) | 0 : 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $3 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = tempRet0;
  ___cxa_free_exception($0 | 0), asyncState ? abort(-12) | 0 : 0;
  ___resumeException($3 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  ___cxa_throw($0 | 0, 208 | 0, 69 | 0), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (tempInt = __ZNSt3__111char_traitsIcE6lengthEPKc($4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $6 = (tempInt = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2, $3, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ENSA_7value_tE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 HEAP8[$2 >> 0] = $3;
 $4 = $2 + 8 | 0;
 $5 = $1;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE($4, $5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $refs + -1 | 0;
 $1 = $this + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$this >> 2] = 9e3;
 __THREW__ = 0;
 $2 = (tempInt = invoke_i(462) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $6 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $7 = tempRet0;
  ___resumeException($6 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  $5 = $this + 8 | 0;
  HEAP32[$5 >> 2] = $2;
  return;
 }
}

function __ZNKSt3__16locale5__imp9use_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNKSt3__16locale5__imp9has_facetEl($this, $id) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $2 = $this + 8 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $4 = $3 + ($id << 2) | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  return $5 | 0;
 } else {
  $1 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  __ZNSt8bad_castC2Ev($1), asyncState ? abort(-12) | 0 : 0;
  ___cxa_throw($1 | 0, 232 | 0, 75 | 0), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__p$i = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = ($0 | 0) == -1;
 if (!$1) {
  HEAP32[$__p$i >> 2] = $this;
  $2 = $__p$i + 4 | 0;
  HEAP32[$2 >> 2] = 531;
  $3 = $__p$i + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this, $__p$i, 532), asyncState ? abort(-12) | 0 : 0;
 }
 $4 = $this + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 + -1 | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxdS4_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_ED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 104 | 0;
 HEAP32[$0 >> 2] = $lim;
 $1 = $f + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $f + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $f + 108 | 0;
 HEAP32[$8 >> 2] = $7;
 $9 = ($lim | 0) != 0;
 $10 = ($7 | 0) > ($lim | 0);
 $or$cond = $9 & $10;
 asyncState ? abort(-12) | 0 : 0;
 if ($or$cond) {
  $11 = $4 + $lim | 0;
  $12 = $f + 100 | 0;
  HEAP32[$12 >> 2] = $11;
 } else {
  $13 = $f + 100 | 0;
  HEAP32[$13 >> 2] = $5;
 }
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ERKS9_($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 HEAP8[$2 >> 0] = 3;
 $3 = $2 + 8 | 0;
 $4 = $1;
 __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ERKS9_($3, $4), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 $4 = $__nm + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $__nm + 1 | 0;
 $7 = $3 ? $6 : $5;
 $8 = (tempInt = _catopen($7, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = $8;
 $not$ = ($8 | 0) != (-1 | 0);
 $10 = $not$ & 1;
 $$ = $9 >>> $10;
 asyncState ? abort(-12) | 0 : 0;
 return $$ | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm >> 0] | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 $4 = $__nm + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $__nm + 1 | 0;
 $7 = $3 ? $6 : $5;
 $8 = (tempInt = _catopen($7, 1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $9 = $8;
 $not$ = ($8 | 0) != (-1 | 0);
 $10 = $not$ & 1;
 $$ = $9 >>> $10;
 asyncState ? abort(-12) | 0 : 0;
 return $$ | 0;
}

function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $0 = (tempInt = _pthread_once(3432 | 0, 448 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  $2 = HEAP32[3428 >> 2] | 0;
  $3 = (tempInt = _pthread_getspecific($2 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  _abort_message(15619, $vararg_buffer), asyncState ? abort(-12) | 0 : 0;
 }
 return 0 | 0;
}

function __ZNKSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($this, $__beg, $__end, $__old_mid, $__new_mid) {
 $this = $this | 0;
 $__beg = $__beg | 0;
 $__end = $__end | 0;
 $__old_mid = $__old_mid | 0;
 $__new_mid = $__new_mid | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (tempInt = invoke_i(530) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = tempRet0;
  ___clang_call_terminate($4), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = HEAP32[$0 >> 2] | 0;
  HEAP32[$this >> 2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3), asyncState ? abort(-12) | 0 : 0;
  return;
 }
}

function __ZNSt3__118__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strlen($msg) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = $0 + 13 | 0;
 $2 = (tempInt = __Znwj($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$2 >> 2] = $0;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = $0;
 $4 = $2 + 8 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $2 + 12 | 0;
 $6 = $0 + 1 | 0;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = _memcpy($5 | 0, $msg | 0, $6 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$this >> 2] = $5;
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + 36 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = (tempInt = FUNCTION_TABLE_ii[$2 & 1023]($this) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $4 = ($3 | 0) == -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $$0 = -1;
 } else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = $6 + 1 | 0;
  HEAP32[$5 >> 2] = $7;
  $8 = HEAP8[$6 >> 0] | 0;
  $9 = $8 & 255;
  $$0 = $9;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 _free($p), asyncState ? abort(-12) | 0 : 0;
 $0 = HEAP32[3428 >> 2] | 0;
 $1 = (tempInt = _pthread_setspecific($0 | 0, 0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(15852, $vararg_buffer), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   $1 = HEAP8[$$012 >> 0] | 0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03 >> 2] = $2;
   $3 = $$012 + 1 | 0;
   $4 = $$03 + 4 | 0;
   $5 = ($3 | 0) == ($high | 0);
   if ($5) {
    break;
   } else {
    $$012 = $3;
    $$03 = $4;
   }
  }
 }
 return $high | 0;
}

function ___ftello($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 76 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___lockfile($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $phitmp = ($4 | 0) == 0;
  $5 = (tempInt = ___ftello_unlocked($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (tempInt = ___ftello_unlocked($f) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $6 = $3;
 }
 return $6 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratordeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = (tempInt = __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratordeEv($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = 2568;
 HEAP32[$1 >> 2] = $2;
 $3 = $1 + 32 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3), asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratorppEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 (tempInt = __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorppEv($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = (tempInt = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1$1 = tempRet0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

function __ZNSt3__19boolalphaERNS_8ios_baseE($__str) {
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $2 = $__str;
 $3 = $2;
 $0 = $3;
 $1 = 1;
 $4 = $0;
 $5 = $4 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $__r$i = $6;
 $7 = $1;
 $8 = $4 + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 | $7;
 HEAP32[$8 >> 2] = $10;
 $11 = $2;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $4 + 4 | 0;
 $7 = $6;
 HEAP32[$7 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 $9 = $8;
 $10 = $9;
 HEAP32[$10 >> 2] = -1;
 $11 = $9 + 4 | 0;
 $12 = $11;
 HEAP32[$12 >> 2] = -1;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($this | 0) == ($1 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($low | 0) == ($high | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   $1 = HEAP8[$$012 >> 0] | 0;
   HEAP8[$$03 >> 0] = $1;
   $2 = $$012 + 1 | 0;
   $3 = $$03 + 1 | 0;
   $4 = ($2 | 0) == ($high | 0);
   if ($4) {
    break;
   } else {
    $$012 = $2;
    $$03 = $3;
   }
  }
 }
 return $high | 0;
}

function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_EENS8_ISB_EEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16locale5__imp9has_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >> 2;
 $8 = $7 >>> 0 > $id >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($8) {
  $9 = $3 + ($id << 2) | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = ($10 | 0) != (0 | 0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return $12 | 0;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 $7 = +HEAPF64[tempDoublePtr >> 3];
 asyncState ? abort(-12) | 0 : 0;
 return +$7;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $0 = $f + 60 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $1;
 $2 = (tempInt = ___syscall6(6, $vararg_buffer | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $3 = (tempInt = ___syscall_ret($2) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1, 2544), asyncState ? abort(-12) | 0 : 0;
 $2 = $1 + 56 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1, 2940), asyncState ? abort(-12) | 0 : 0;
 $2 = $1 + 64 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >>> 0 > $l >>> 0;
 $l$ = $7 ? $l : $6;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = _memcpy($3 | 0, $s | 0, $l$ | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $8 + $l$ | 0;
 HEAP32[$2 >> 2] = $9;
 return $l | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $$pre = HEAP32[$0 >> 2] | 0;
 $$0 = $__n;
 $1 = $$pre;
 asyncState ? abort(-12) | 0 : 0;
 while (1) {
  HEAP32[$1 >> 2] = 0;
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = $2 + 4 | 0;
  HEAP32[$0 >> 2] = $3;
  $4 = $$0 + -1 | 0;
  $5 = ($4 | 0) == 0;
  if ($5) {
   break;
  } else {
   $$0 = $4;
   $1 = $3;
  }
 }
 return;
}

function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3216;
 $0 = $this + 4 | 0;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(456, $0 | 0, $msg | 0), asyncState ? abort(-12) | 0 : 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $3 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = tempRet0;
  ___resumeException($3 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  return;
 }
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3196;
 $0 = $this + 4 | 0;
 __THREW__ = 0;
 asyncState ? abort(-12) | 0 : 0;
 invoke_vii(456, $0 | 0, $msg | 0), asyncState ? abort(-12) | 0 : 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $3 = (tempInt = ___cxa_find_matching_catch() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $4 = tempRet0;
  ___resumeException($3 | 0), asyncState ? abort(-12) | 0 : 0;
 } else {
  return;
 }
}

function __ZNKSt3__119__iostream_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($ev | 0) != 1;
 $1 = ($ev | 0) < 257;
 $or$cond = $0 & $1;
 asyncState ? abort(-12) | 0 : 0;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev), asyncState ? abort(-12) | 0 : 0;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 20183, 35), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (tempInt = invoke_i(534) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = tempRet0;
  ___clang_call_terminate($4), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = HEAP32[$0 >> 2] | 0;
  return $3 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (tempInt = invoke_i(535) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = tempRet0;
  ___clang_call_terminate($4), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = HEAP32[$0 >> 2] | 0;
  return $3 | 0;
 }
 return 0 | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[3688 >> 2] | 0;
 (tempInt = _vfprintf($0, $format, $list) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 (tempInt = _fputc(10, $0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 _abort(), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[488 >> 0] | 0;
 $1 = $0 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $2 = (tempInt = ___cxa_guard_acquire(488 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $3 = ($2 | 0) == 0;
  if (!$3) {
   HEAP32[7808 >> 2] = 7780;
   (tempInt = ___cxa_atexit(112 | 0, 7808 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   ___cxa_guard_release(488 | 0), asyncState ? abort(-12) | 0 : 0;
  }
 }
 return 7808 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3 >> 2] = 0;
 $4 = $2 + 4 | 0;
 $5 = $4;
 HEAP32[$5 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 $7 = $6;
 $8 = $7;
 HEAP32[$8 >> 2] = -1;
 $9 = $7 + 4 | 0;
 $10 = $9;
 HEAP32[$10 >> 2] = -1;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (tempInt = invoke_i(533) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $4 = (tempInt = ___cxa_find_matching_catch(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $5 = tempRet0;
  ___clang_call_terminate($4), asyncState ? abort(-12) | 0 : 0;
 } else {
  $3 = HEAP32[$0 >> 2] | 0;
  return $3 | 0;
 }
 return 0 | 0;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$014 = $n;
  $$023 = $s;
  $$05 = $d;
  while (1) {
   $1 = $$014 + -1 | 0;
   $2 = $$023 + 4 | 0;
   $3 = HEAP32[$$023 >> 2] | 0;
   $4 = $$05 + 4 | 0;
   HEAP32[$$05 >> 2] = $3;
   $5 = ($1 | 0) == 0;
   if ($5) {
    break;
   } else {
    $$014 = $1;
    $$023 = $2;
    $$05 = $4;
   }
  }
 }
 return $d | 0;
}

function __ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + -12 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + $4 | 0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Eb($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $2 = $v & 1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4 & 1;
 $6 = $5 & 1;
 HEAP8[$3 >> 0] = $6;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (tempInt = _memcmp($3, $4, $5) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED2Ev($1, 2664), asyncState ? abort(-12) | 0 : 0;
 $2 = $1 + 104 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($1, 2824), asyncState ? abort(-12) | 0 : 0;
 $2 = $1 + 108 | 0;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $vararg_buffer = sp;
 $0 = (tempInt = _pthread_key_create(3428 | 0, 451 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(15802, $vararg_buffer), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexerD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann12_GLOBAL__N_1L6approxIeEEbT_S2_($a, $b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 if ($4) {
  $9 = 1;
 } else {
  $5 = $0;
  $6 = $1;
  $7 = $5 < $6;
  $9 = $7;
 }
 $8 = $9 ^ 1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN8nlohmann12_GLOBAL__N_1L6approxIdEEbT_S2_($a, $b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 if ($4) {
  $9 = 1;
 } else {
  $5 = $0;
  $6 = $1;
  $7 = $5 < $6;
  $9 = $7;
 }
 $8 = $9 ^ 1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii = $c >>> 0 < 128;
 asyncState ? abort(-12) | 0 : 0;
 if ($isascii) {
  $0 = (tempInt = __ZNSt3__15ctypeIcE13classic_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $1 = $0 + ($c << 1) | 0;
  $2 = HEAP16[$1 >> 1] | 0;
  $3 = $2 & $m;
  $4 = $3 << 16 >> 16 != 0;
  $5 = $4;
 } else {
  $5 = 0;
 }
 return $5 | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii1 = $c << 24 >> 24 > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (tempInt = __ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $2 = $1 + ($0 << 2) | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $4 = $3 & 255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return $5 | 0;
}

function __ZNSt3__18numpunctIwEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $refs + -1 | 0;
 $1 = $this + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$this >> 2] = 9120;
 $2 = $this + 8 | 0;
 HEAP32[$2 >> 2] = 46;
 $3 = $this + 12 | 0;
 HEAP32[$3 >> 2] = 44;
 $4 = $this + 16 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $4 + 8 | 0;
 HEAP32[$6 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18numpunctIcEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $refs + -1 | 0;
 $1 = $this + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$this >> 2] = 9080;
 $2 = $this + 8 | 0;
 HEAP8[$2 >> 0] = 46;
 $3 = $this + 9 | 0;
 HEAP8[$3 >> 0] = 44;
 $4 = $this + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $4 + 8 | 0;
 HEAP32[$6 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii1 = $c << 24 >> 24 > -1;
 asyncState ? abort(-12) | 0 : 0;
 if ($isascii1) {
  $0 = $c & 255;
  $1 = (tempInt = __ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $2 = $1 + ($0 << 2) | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $4 = $3 & 255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return $5 | 0;
}

function __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strerror($ev) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = _strlen($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, $0, $1), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1 | 0;
 $2 = ($1 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  $3 = HEAP32[$this >> 2] | 0;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  FUNCTION_TABLE_vi[$5 & 1023]($this), asyncState ? abort(-12) | 0 : 0;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return $$0 | 0;
}

function __Z13__DOUBLE_BITSd($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u >> 3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = HEAP32[$6 >> 2] | 0;
 tempRet0 = $7;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strlen($__s) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this, $__pos, $__s, $0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($this, $0, $__n) {
 $this = $this | 0;
 $0 = $0 | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 HEAP8[$1 >> 0] = 0;
 $2 = $1 + 8 | 0;
 HEAP32[$2 >> 2] = 0 | 0;
 HEAP32[$2 + 4 >> 2] = 0 | 0;
 STACKTOP = sp;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t8is_beginEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == 0;
 STACKTOP = sp;
 return $3 | 0;
}

function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0);
}

function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + -8 | 0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + -8 | 0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2Ed($this, $v) {
 $this = $this | 0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 HEAPF64[$2 >> 3] = $3;
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 7680;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16localeC2Ev($0), asyncState ? abort(-12) | 0 : 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0 | 0;
 HEAP32[$1 + 4 >> 2] = 0 | 0;
 HEAP32[$1 + 8 >> 2] = 0 | 0;
 HEAP32[$1 + 12 >> 2] = 0 | 0;
 HEAP32[$1 + 16 >> 2] = 0 | 0;
 HEAP32[$1 + 20 >> 2] = 0 | 0;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E12is_discardedEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 == 7;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__111char_traitsIcE2eqEcc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3 | 0) == ($5 | 0);
 STACKTOP = sp;
 return $6 | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = (tempInt = _vsnprintf($s, $n, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _wcslen($__s) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strlen($__s) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strlen($__s) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = (tempInt = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__18ios_base34__set_failbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 | 4;
 HEAP32[$0 >> 2] = $2;
 $3 = $this + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 & 4;
 $6 = ($5 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($6) {
  return;
 } else {
  ___cxa_rethrow(), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 | 1;
 HEAP32[$0 >> 2] = $2;
 $3 = $this + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 & 1;
 $6 = ($5 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($6) {
  return;
 } else {
  ___cxa_rethrow(), asyncState ? abort(-12) | 0 : 0;
 }
}

function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tcviEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1 | 0;
 $3 = $2 + -1 | 0;
 $4 = ($3 | 0) < 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($4) {
  $5 = HEAP32[$this >> 2] | 0;
  $6 = $5 + -12 | 0;
  __ZdlPv($6), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii = $c >>> 0 < 128;
 asyncState ? abort(-12) | 0 : 0;
 if ($isascii) {
  $0 = (tempInt = __ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $1 = $0 + ($c << 2) | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return $3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii = $c >>> 0 < 128;
 asyncState ? abort(-12) | 0 : 0;
 if ($isascii) {
  $0 = (tempInt = __ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $1 = $0 + ($c << 2) | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return $3 | 0;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $$012 = $n;
  $$03 = $d;
  while (1) {
   $1 = $$012 + -1 | 0;
   $2 = $$03 + 4 | 0;
   HEAP32[$$03 >> 2] = $c;
   $3 = ($1 | 0) == 0;
   if ($3) {
    break;
   } else {
    $$012 = $1;
    $$03 = $2;
   }
  }
 }
 return $d | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = (tempInt = _vsprintf($s, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1 >> 2] = -2147483648;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $code + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == ($this | 0);
 $3 = HEAP32[$code >> 2] | 0;
 $4 = ($3 | 0) == ($condition | 0);
 $5 = $2 & $4;
 asyncState ? abort(-12) | 0 : 0;
 return $5 | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = (tempInt = _vsscanf($s, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t9set_beginEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_t7set_endEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function __ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4typeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[$1 >> 0] | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 8932;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$2) {
  $3 = $this + 12 | 0;
  $4 = HEAP8[$3 >> 0] | 0;
  $5 = $4 << 24 >> 24 == 0;
  if (!$5) {
   __ZdaPv($1), asyncState ? abort(-12) | 0 : 0;
  }
 }
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = (tempInt = __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = (tempInt = __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 HEAP8[$4 >> 0] = $3;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = (tempInt = __ZNSt3__16locale2id5__getEv($x) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = (tempInt = __ZNKSt3__16locale5__imp9use_facetEl($0, $1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $2 | 0;
}

function __ZNKSt3__16locale9has_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = (tempInt = __ZNSt3__16locale2id5__getEv($x) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $2 = (tempInt = __ZNKSt3__16locale5__imp9has_facetEl($0, $1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $2 | 0;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8796) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8760) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8724) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8688) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8396) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8364) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8332) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8240) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $iob + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & 74;
 asyncState ? abort(-12) | 0 : 0;
 switch ($2 | 0) {
 case 64:
  {
   $$0 = 8;
   break;
  }
 case 8:
  {
   $$0 = 16;
   break;
  }
 case 0:
  {
   $$0 = 0;
   break;
  }
 default:
  {
   $$0 = 10;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8148) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8088) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8028) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(7956) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__117bad_function_callC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = 3176;
 HEAP32[$3 >> 2] = $4;
 $5 = 3128;
 HEAP32[$2 >> 2] = $5;
 STACKTOP = sp;
 return;
}

function __ZNSt3__117bad_function_callD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__117bad_function_callD2Ev($1), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($1), asyncState ? abort(-12) | 0 : 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E20primitive_iterator_tcvRiEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2 | 0) == ($3 | 0);
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = sp;
 $1 = $this + 28 | 0;
 __ZNSt3__16localeC2ERKS0_($0, $1), asyncState ? abort(-12) | 0 : 0;
 $2 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $$0 = $s;
 asyncState ? abort(-12) | 0 : 0;
 while (1) {
  $0 = HEAP32[$$0 >> 2] | 0;
  $1 = ($0 | 0) == 0;
  $2 = $$0 + 4 | 0;
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = $3 - $4 | 0;
 $6 = $5 >> 2;
 return $6 | 0;
}

function __ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 STACKTOP = sp;
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _wcslen(9712) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 9712, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _wcslen(9692) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 9692, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($type | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $3 = 0;
 } else {
  $1 = (tempInt = ___dynamic_cast($type, 248, 296, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $phitmp = ($1 | 0) != (0 | 0);
  $3 = $phitmp;
 }
 $2 = $3 & 1;
 return $2 | 0;
}

function __GLOBAL__sub_I_test_cc() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 ___cxx_global_var_init(), asyncState ? abort(-12) | 0 : 0;
 ___cxx_global_var_init1(), asyncState ? abort(-12) | 0 : 0;
 ___cxx_global_var_init3(), asyncState ? abort(-12) | 0 : 0;
 ___cxx_global_var_init5(), asyncState ? abort(-12) | 0 : 0;
 ___cxx_global_var_init7(), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 asyncState ? abort(-12) | 0 : 0;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 asyncState ? abort(-12) | 0 : 0;
 return 3;
}

function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__s;
 $1 = $0;
 $2 = (tempInt = _strlen($1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$sum = $2 + 12 | 0;
 $3 = $this + $$sum | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(9040) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(9048) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$2) {
  $3 = $this + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  __ZdlPv($4), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 asyncState ? abort(-12) | 0 : 0;
 if (!$2) {
  $3 = $this + 8 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  __ZdlPv($4), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8984) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8976) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$sum = $2 + 4 | 0;
 $3 = $this + $$sum | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$sum = $2 + 8 | 0;
 $3 = $this + $$sum | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[$agg$result >> 0] = 67109634 & 255;
 HEAP8[$agg$result + 1 >> 0] = 67109634 >> 8 & 255;
 HEAP8[$agg$result + 2 >> 0] = 67109634 >> 16 & 255;
 HEAP8[$agg$result + 3 >> 0] = 67109634 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[3440 >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($1) {
  $$0 = 3708;
 } else {
  $2 = (tempInt = _pthread_self() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $3 = $2 + 60 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $$0 = $4;
 }
 return $$0 | 0;
}

function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $this + $2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8652) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8588) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8524) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8460) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = $1 - $2 | 0;
 $4 = $3 >>> 0 < $mx >>> 0;
 $5 = $4 ? $3 : $mx;
 asyncState ? abort(-12) | 0 : 0;
 return $5 | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $this + $2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0 + -12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $this + $2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(9064) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(9056) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8876) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8836) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(7884) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(7844) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8908) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale2id5__getEv(8916) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0) | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($this | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$0) {
  $1 = HEAP32[$this >> 2] | 0;
  $2 = $1 + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  FUNCTION_TABLE_vi[$3 & 1023]($this), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __ZNSt3__16locale7classicEv() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[9684 >> 2] = $1;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__114__shared_count12__add_sharedEv($1), asyncState ? abort(-12) | 0 : 0;
 return 9684 | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isdigittmp = $c + -48 | 0;
 $isdigit = $isdigittmp >>> 0 < 10;
 asyncState ? abort(-12) | 0 : 0;
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = $0 + -97 | 0;
  $2 = $1 >>> 0 < 6;
  $4 = $2;
 }
 $3 = $4 & 1;
 return $3 | 0;
}

function b10(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiiiiiiiiiiiiii(10), asyncState ? abort(-12) | 0 : 0;
}

function ___cxx_global_var_init3() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(2344, 2320, 13312), asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___cxa_atexit(362 | 0, 2344 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 return;
}

function ___cxx_global_var_init1() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(2332, 2320, 13303), asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___cxa_atexit(362 | 0, 2332 | 0, ___dso_handle | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $r >>> 0 > 4294963200;
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $1 = 0 - $r | 0;
  $2 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  HEAP32[$2 >> 2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return $$0 | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = ___strchrnul($s, $c) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $c & 255;
 $3 = $1 << 24 >> 24 == $2 << 24 >> 24;
 $4 = $3 ? $0 : 0;
 asyncState ? abort(-12) | 0 : 0;
 return $4 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c;
 $1 = $0;
 $2 = $1 & 255;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $__c;
 $1 = $0;
 $2 = $1 & 255;
 STACKTOP = sp;
 return $2 | 0;
}

function _uselocale($l) {
 $l = $l | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _pthread_self() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = $0 + 176 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($l | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if (!$3) {
  HEAP32[$1 >> 2] = $l;
 }
 return $2 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = 0;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $agg$result + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 FUNCTION_TABLE_viiiiiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0);
}

function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = ___cxa_allocate_exception(4) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt9bad_allocC2Ev($0), asyncState ? abort(-12) | 0 : 0;
 ___cxa_throw($0 | 0, 120 | 0, 61 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 7680;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16localeD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__110__time_putD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__110__time_putD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 21750, 5), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 21745, 4), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strtoull($s, $p, $base) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = tempRet0;
 tempRet0 = $1;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strtoll($s, $p, $base) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = tempRet0;
 tempRet0 = $1;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (tempInt = _wcrtomb($s, $wc, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
  $$0 = $1;
 }
 return $$0 | 0;
}

function __ZNKSt3__114error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$agg$result >> 2] = $ev;
 $0 = $agg$result + 4 | 0;
 HEAP32[$0 >> 2] = $this;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($st | 0) != (0 | 0);
 $1 = $0 ? $st : 3744;
 $2 = (tempInt = _mbrtowc(0, $s, $n, $1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $2 | 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strtox530($s, $p, $base, 0, -2147483648) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = tempRet0;
 tempRet0 = $1;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii1 = $c << 24 >> 24 > -1;
 $c$dfault = $isascii1 ? $c : $dfault;
 asyncState ? abort(-12) | 0 : 0;
 return $c$dfault | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strtox530($s, $p, $base, -1, -1) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = tempRet0;
 tempRet0 = $1;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isascii = $c >>> 0 < 128;
 $0 = $c & 255;
 $$0 = $isascii ? $0 : $dfault;
 asyncState ? abort(-12) | 0 : 0;
 return $$0 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 9120;
 $0 = $this + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 9080;
 $0 = $this + 12 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($st | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st >> 2] | 0;
  $2 = ($1 | 0) == 0;
  $4 = $2;
 }
 $3 = $4 & 1;
 return $3 | 0;
}

function b8(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiiiiiiiii(8), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__114__shared_count12__add_sharedEv($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt >> 2] = $to;
 asyncState ? abort(-12) | 0 : 0;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt >> 2] = $to;
 asyncState ? abort(-12) | 0 : 0;
 return 3;
}

function __ZNSt3__117bad_function_callD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort(), asyncState ? abort(-12) | 0 : 0;
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt >> 2] = $to;
 asyncState ? abort(-12) | 0 : 0;
 return 3;
}

function _strtoul($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _strtox530($s, $p, $base, -1, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = tempRet0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + -8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + -8 | 0;
 $1 = $0 + 12 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($1), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[8904 >> 2] | 0;
 HEAP32[8904 >> 2] = $0 + 1 | 0;
 $1 = $0 + 1 | 0;
 $2 = $this + 4 | 0;
 HEAP32[$2 >> 2] = $1;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 7680;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16localeD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this >> 2] | 0;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = __ZNSt3__114__shared_count16__release_sharedEv($0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__110__time_putD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__110__time_putD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _vsnprintf($s, 2147483647, $fmt, $ap) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _fseek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = ___fseeko($f, $off, $whence) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _cleanup392($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + 68 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  ___unlockfile($p), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function _cleanup387($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + 68 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 asyncState ? abort(-12) | 0 : 0;
 if ($2) {
  ___unlockfile($p), asyncState ? abort(-12) | 0 : 0;
 }
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = (tempInt = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1$0 | 0;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3216;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = ___string_read($f, $buf, $len) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $argc;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $argv;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 0 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3196;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function b14(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiiiiiiiii(14), asyncState ? abort(-12) | 0 : 0;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112system_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $isdigittmp = $c + -48 | 0;
 $isdigit = $isdigittmp >>> 0 < 10;
 $0 = $isdigit & 1;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 (tempInt = ___cxa_begin_catch($0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 __ZSt9terminatev(), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__impD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt13runtime_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18numpunctIwED2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18numpunctIcED2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempRet0 = h, l | 0) | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($0), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt16invalid_argumentD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt11logic_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 ___assert_fail(15905 | 0, 15385 | 0, 1175, 15934 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 ___assert_fail(15356 | 0, 15385 | 0, 1164, 15480 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt13runtime_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 ___assert_fail(15501 | 0, 15524 | 0, 303, 15480 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt11logic_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt12domain_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt11logic_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__15ctypeIcED2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt11logic_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _SyncFS($restore_from_db) {
 $restore_from_db = $restore_from_db | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $restore_from_db;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 716 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + 1 | 0;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function _isspace($c) {
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($c | 0) == 32;
 $1 = $c + -9 | 0;
 $2 = $1 >>> 0 < 5;
 $3 = $0 | $2;
 $4 = $3 & 1;
 asyncState ? abort(-12) | 0 : 0;
 return $4 | 0;
}

function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_strtox($s, $p, 2), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function b21(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiiiiii(21), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __Z6FSBusyv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _emscripten_asm_const_0(3) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 $1 = ($0 | 0) != 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__16locale5__impC2Ej(1736, 1), asyncState ? abort(-12) | 0 : 0;
 HEAP32[9676 >> 2] = 1736;
 return 9676 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = _isxdigit($c) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function _strtold($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_strtox($s, $p, 2), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__18ios_baseD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 9 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_copysign($x, $y), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiiiii(0), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_scalbn($x, $n), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return $this | 0;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_frexp($x, $e), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt3__112system_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __Znaj($size) {
 $size = $size | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = (tempInt = __Znwj($size) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +(tempDouble = +_fmod($x, $y), asyncState ? +abort(-12) : tempDouble);
 asyncState ? abort(-12) | 0 : 0;
 return +$0;
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return $s | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiiiiii(13), asyncState ? abort(-12) | 0 : 0;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZNSt13runtime_errorD2Ev($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempRet0 = h, l | 0) | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[3164 >> 2] | 0;
 HEAP32[3164 >> 2] = $0 + 0 | 0;
 $1 = $0;
 asyncState ? abort(-12) | 0 : 0;
 return $1 | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function b5(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiiii(5), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 asyncState ? abort(-12) | 0 : 0;
 return $0 | 0;
}

function b2(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiiid(2), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return -1;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return -1;
}

function b11(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiiiii(11), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiii(18), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt9exceptionD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($this), asyncState ? abort(-12) | 0 : 0;
 return;
}

function b24(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiiid(24), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempInt = _pthread_cond_broadcast(p0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 2147483647;
}

function ___cxa_throw__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 ___cxa_throw(p0 | 0, p1 | 0, p2 | 0), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiiii(1), asyncState ? abort(-12) | 0 : 0;
}

function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempInt = _pthread_mutex_unlock(p0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
}

function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 1;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return $c | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 1;
}

function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 return (tempInt = _pthread_mutex_lock(p0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 127;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 __ZdlPv($ptr), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 1;
}

function b22(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiiii(22), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 _free($ptr), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 20174 | 0;
}

function __Z7MountFSv() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 _emscripten_asm_const_0(2), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3152;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function _freelocale($l) {
 $l = $l | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 _free($l), asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt8bad_castC2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 3296;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return -1 | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 1023](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function b25(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viiii(25), asyncState ? abort(-12) | 0 : 0;
}

function dynCall_diii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +FUNCTION_TABLE_diii[index & 1023](a1 | 0, a2 | 0, a3 | 0);
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function b16(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_diii(16), asyncState ? abort(-12) | 0 : 0;
 return 0.0;
}

function _RuntimeLoop() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 1520 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function __ZNKSt9exception4whatEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 15773 | 0;
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 15668 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 15788 | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1023](a1 | 0, a2 | 0, a3 | 0);
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iiii(9), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function _DoTests() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 1192 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_viii(19), asyncState ? abort(-12) | 0 : 0;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 1023](a1 | 0, a2 | 0) | 0;
}

function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_iii(15), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function _catclose($catd) {
 $catd = $catd | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return -1;
}

function b23(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_idd(23), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 3704 | 0;
}

function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 3700 | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 1023](a1 | 0, a2 | 0);
}

function dynCall_idd(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = +a2;
 return FUNCTION_TABLE_idd[index & 511](+a1, +a2) | 0;
}

function b4(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_vii(4), asyncState ? abort(-12) | 0 : 0;
}

function ___ctype_b_loc() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 asyncState ? abort(-12) | 0 : 0;
 return 3696 | 0;
}

function b12(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_di(12), asyncState ? abort(-12) | 0 : 0;
 return 0.0;
}

function b6(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_ii(6), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function ___cxa_end_catch__wrapper() {
 asyncState ? abort(-12) | 0 : 0;
 ___cxa_end_catch(), asyncState ? abort(-12) | 0 : 0;
}

function b7(p0) {
 p0 = +p0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_id(7), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function ___cxa_rethrow__wrapper() {
 asyncState ? abort(-12) | 0 : 0;
 ___cxa_rethrow(), asyncState ? abort(-12) | 0 : 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 1023](a1 | 0) | 0;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 511](a1 | 0);
}

function b3(p0) {
 p0 = p0 | 0;
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_vi(3), asyncState ? abort(-12) | 0 : 0;
}

function dynCall_id(index, a1) {
 index = index | 0;
 a1 = +a1;
 return FUNCTION_TABLE_id[index & 511](+a1) | 0;
}

function b17() {
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_i(17), asyncState ? abort(-12) | 0 : 0;
 return 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0);
}

function b20() {
 asyncState ? abort(-12) | 0 : 0;
 nullFunc_v(20), asyncState ? abort(-12) | 0 : 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 1023]() | 0;
}

function emtStackSave() {
 asyncState ? abort(-12) | 0 : 0;
 return EMTSTACKTOP | 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 1023]();
}

function getTempRet0() {
 asyncState ? abort(-12) | 0 : 0;
 return tempRet0 | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS

var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpERNS1_13basic_ostreamIcS6_EEbjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce
,b2,b2,b2,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__117bad_function_callD2Ev,__ZNSt3__117bad_function_callD0Ev
,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b3,__ZNSt12domain_errorD0Ev,__ZNSt16invalid_argumentD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3
,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3
,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3
,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3
,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev
,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,b3,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__Z7SendMsgRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,_cleanup387,_cleanup392,b3,b3,b3,b3,b3,__ZNSt3__18ios_base34__set_failbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_freelocale,b3,b3,__ZNSt3__112__do_nothingEPv
,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3
,b3,b3,b3,___cxx_global_array_dtor,b3,___cxx_global_array_dtor54,b3,___cxx_global_array_dtor69,___cxx_global_array_dtor93,___cxx_global_array_dtor117,___cxx_global_array_dtor120,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4
,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18ios_base4initEPv,b4,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5beginEv,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E3endEv,b4,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ERKSA_,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2EPKc,b4,b4,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser5parseEv,b4,b4,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E9type_nameEv,b4,__ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4
,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ERKS9_,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,b4,b4,b4,__ZNSt3__18ios_base5clearEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,b4,b4,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser6expectENSA_5lexer10token_typeE,b4,b4,b4
,b4,b4,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E10json_valueC2ENSA_7value_tE,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EC2ENSA_7value_tE,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10get_stringEv,b4,b4,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E9push_backEOSA_,b4,b4,b4,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser8unexpectENSA_5lexer10token_typeE,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer15token_type_nameENSB_10token_typeE,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,__ZNSt11logic_errorC2EPKc,b4,b4,b4,__ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE26__swap_out_circular_bufferERNS_14__split_bufferISA_RSB_EE,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorC2EPKSA_,b4,b4,__ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE8allocateEj,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4,b4,b4
,_abort_message,b4,b4,b4,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt
,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,b5,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b5,b5,b5,b5,b5,b5
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b5,b5,b5,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt9exception4whatEv,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__119__iostream_category4nameEv,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv
,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b6
,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv
,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6
,b6,b6,b6,b6,__ZNSt3__111char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratordeEv,b6,b6,b6,b6,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E8iteratorppEv,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__19boolalphaERNS_8ios_baseE,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b6,b6,b6,b6,_fclose,b6,b6,b6,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser9get_tokenEv,b6,b6,__ZNKSt3__18ios_base6getlocEv,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uselocale,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_id = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z13__DOUBLE_BITSd,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b8,b8,b8,b8,b8,b8,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_iiii = [b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b9,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b9,b9,b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,_sn_write,b9,___stdio_write,___stdio_seek,___stdout_write,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b9
,b9,b9,b9,b9,b9,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b9,b9,b9,b9,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b9,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b9,b9,__ZNKSt3__15ctypeIcE9do_narrowEcc,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE5do_isEtw,b9,b9,b9,b9,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b9
,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b9,b9,__ZNKSt3__15ctypeIwE9do_narrowEwc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_sprintf,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj,b9,__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_strtoul,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc,b9,b9,b9,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE15__insert_uniqueIRKNS_4pairIKS7_SC_EEEENS_15__tree_iteratorISD_PNS_11__tree_nodeISD_PvEEiEENS_21__tree_const_iteratorISD_SU_iEEOT_,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE20__node_insert_uniqueENS_21__tree_const_iteratorISD_PNS_11__tree_nodeISD_PvEEiEESO_,b9,b9,b9,b9,b9,b9
,b9,b9,b9,___stdio_read,b9,b9,_do_read,b9,b9,b9,b9,b9,b9,b9,b9,_newlocale,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_wcrtomb,b9
,b9,_mbtowc,_mbrlen,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_vasprintf,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b10,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11
,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b11,b11,b11,b11,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_di = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10get_numberEv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b14,b14,b14,b14,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b15,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEc,b15,__ZNKSt3__15ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEw
,b15,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E14const_iteratorneERKSB_,b15,b15,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixIcLj5EEERSA_RAT0__KT_,b15,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixIcLj4EEERSA_RAT0__KT_,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxdS4_EENS_4lessIS6_EENS4_INS_4pairIKS6_SA_EEEEEixEOS6_
,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__16locale9use_facetERNS0_2idE,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,b15,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_EixERKS9_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__16locale9has_facetERNS0_2idE,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l,_isdigit_l,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b15,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_diii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_i = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,___cxa_get_globals_fast,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__16__clocEv,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__16locale5__imp12make_classicEv,b17,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b17,b17,___ctype_b_loc,___ctype_toupper_loc,___ctype_tolower_loc,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iiiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b18,b18,b18,b18,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b18,b18,b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b18,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b18,b18,b18,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b18,b18,b18
,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b18,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_wcsnrtombs,b18,_mbsnrtowcs
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_viii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__114error_category23default_error_conditionEi,b19,b19,__ZNKSt3__119__iostream_category7messageEi
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5parseERKS9_NS1_8functionIFbiNSA_13parse_event_tERSA_EEE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parserC2ERKS9_NS1_8functionIFbiNSA_13parse_event_tERSA_EEE,b19,b19,b19,b19,b19,b19,___cxa_throw__wrapper,b19
,b19,b19,__ZNK8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E4dumpEi,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc,b19,b19,b19,b19,b19,b19
,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b19,b19,b19,b19,b19,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E6parser14parse_internalEb,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN8nlohmann10basic_jsonINSt3__13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxdS7_E5lexer10to_unicodeEjj,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS7_EENS7_ISA_EEE18__construct_at_endIPSA_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESG_SG_,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b19,b19,b19,b19,b19,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_v = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,__ZL25default_terminate_handlerv,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,___cxa_end_catch__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZSt17__throw_bad_allocv,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,___cxa_rethrow__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_iiiiiiiii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_
,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b21,b21,b21,b21,b21,b21,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b21,b21,b21,b21,b21,b21,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_iiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22
,b22,b22,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,__ZNKSt3__18functionIFbiN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxdS8_E13parse_event_tERSB_EEclEiSC_SD_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b22,b22,b22,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22,_mbsrtowcs,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_catgets,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,_mbrtowc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_idd = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN8nlohmann12_GLOBAL__N_1L6approxIdEEbT_S2_,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN8nlohmann12_GLOBAL__N_1L6approxIeEEbT_S2_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_iiiiid = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25
,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b25,b25,b25,b25,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxdS5_EEEENS_19__map_value_compareIS7_SD_NS_4lessIS7_EELb1EEENS5_ISD_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSN_SN_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];

  return { ___cxa_can_catch: ___cxa_can_catch, _DoTests: _DoTests, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _SyncFS: _SyncFS, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _RuntimeLoop: _RuntimeLoop, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_test_cc: __GLOBAL__sub_I_test_cc, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, emterpret: emterpret, setAsyncState: setAsyncState, emtStackSave: emtStackSave, emtStackRestore: emtStackRestore, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_id: dynCall_id, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiiii: dynCall_iiiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_idd: dynCall_idd, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__DoTests = asm["_DoTests"]; asm["_DoTests"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DoTests.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__SyncFS = asm["_SyncFS"]; asm["_SyncFS"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__SyncFS.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__RuntimeLoop = asm["_RuntimeLoop"]; asm["_RuntimeLoop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__RuntimeLoop.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_test_cc = asm["__GLOBAL__sub_I_test_cc"]; asm["__GLOBAL__sub_I_test_cc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_test_cc.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _DoTests = Module["_DoTests"] = asm["_DoTests"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _SyncFS = Module["_SyncFS"] = asm["_SyncFS"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _RuntimeLoop = Module["_RuntimeLoop"] = asm["_RuntimeLoop"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__sub_I_test_cc = Module["__GLOBAL__sub_I_test_cc"] = asm["__GLOBAL__sub_I_test_cc"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_idd = Module["dynCall_idd"] = asm["dynCall_idd"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  var initialEmtStackTop = asm.emtStackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      asm.emtStackRestore(initialEmtStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}








